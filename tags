!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCOUNTVERIFY_FAILURE	GatewayServer/old_back/GatewayServer.h	/^		ACCOUNTVERIFY_FAILURE$/;"	e	enum:GatewayTask::__anon213
ACCOUNTVERIFY_NONE	GatewayServer/old_back/GatewayServer.h	/^		ACCOUNTVERIFY_NONE,$/;"	e	enum:GatewayTask::__anon213
ACCOUNTVERIFY_SUCCESS	GatewayServer/old_back/GatewayServer.h	/^		ACCOUNTVERIFY_SUCCESS,$/;"	e	enum:GatewayTask::__anon213
ACCOUNTVERIFY_WAITING	GatewayServer/old_back/GatewayServer.h	/^		ACCOUNTVERIFY_WAITING,$/;"	e	enum:GatewayTask::__anon213
ACCOUNT_LOGON_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
ACCPRIV_GOLD_EQUIP_AT_5_15	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneUser::__anon83
ACCPRIV_GREEN_EQUIP_AT_5_25_50	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneUser::__anon83
ACCPRIV_NEWBIE_EQUIP_AT_5_15	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneUser::__anon83
ACLZone	FLServer/ServerACL.h	/^	ACLZone()$/;"	f	struct:ACLZone
ACLZone	FLServer/ServerACL.h	/^struct ACLZone$/;"	s
ACTION_STEP_CLEAR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon68
ACTION_STEP_DOPASS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon68
ACTION_STEP_RELOAD	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon68
ACTION_STEP_START	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon68
ACTION_STEP_STOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon68
ACTION_STEP_TIMER	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon68
ACTIVETIME	base/include/srvEngine.h	/^	const uint32_t ACTIVETIME = 3600; \/\/ ÂØπÊàòËøõË°åÊó∂Èó¥ÔºåÂçï‰Ωç:Áßí$/;"	m	namespace:DareDef
ACTIVETIME	base/include/srvEngine.h	/^	const uint32_t ACTIVETIME = 3600; \/\/ ÂØπÊàòËøõË°åÊó∂Èó¥ÔºåÂçï‰Ωç:Áßí$/;"	m	namespace:QuizDef
ACTIVE_TECH	SessionServer/libsessionserver/SessionServer.h	/^      ACTIVE_TECH,   \/\/ ’˝‘⁄Ω¯––…˝º∂$/;"	e	enum:CTech::__anon109
ADDMAPOBJECT_MAPSCREEN_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
ADDSKILLPOINT_PROPERTY_USERCMD	base/include/csCommon.h	4103;"	d
ADDUSEROBJECT_LIST_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	4472;"	d
ADDUSEROBJECT_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	3793;"	d
ADDUSERSKILL_PROPERTY_USERCMD_PARA	base/include/csCommon.h	3953;"	d
ADDUSER_MAPSCREEN_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
ADD_ARMY_CAPTAIN_PARA	base/include/csCommon.h	6949;"	d
ADD_CARTOON_PARA	base/include/csCommon.h	9538;"	d
ADD_OBJECT_SELL_LIST_USERCMD_PARAMETER	base/include/csCommon.h	5342;"	d
ADD_OBJECT_SELL_USERCMD_PARAMETER	base/include/csCommon.h	5219;"	d
ADD_OBJECT_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5093;"	d
ADD_ONE_ROOM_USER_COMMON_MINI_PARA	base/include/csCommon.h	12111;"	d
ADD_ROOM_USER_COMMON_MINI_PARA	base/include/csCommon.h	12098;"	d
ADD_TEAMMEMBER_USERCMD_PARA	base/include/csCommon.h	4648;"	d
ADD_WAITING_CARTOON_PARA	base/include/csCommon.h	9630;"	d
ADOPT_CARTOON_PARA	base/include/csCommon.h	9580;"	d
ADVANCE_LEVEL	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon186
ADVANCE_WORK	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon187
ADVANCE_WORK_BONUS	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon186
AIC	SceneServer/libscenesserver/SceneServer1.h	/^  NpcAIController * AIC;$/;"	m	class:SceneNpc
AICallback	SceneServer/libscenesserver/Scene.cpp	/^  AICallback(const zRTime &ctv) : ctv(ctv) {}$/;"	f	struct:AICallback
AICallback	SceneServer/libscenesserver/Scene.cpp	/^struct AICallback : public zSceneEntryCallBack$/;"	s	file:
AIDefine	SceneServer/libscenesserver/SceneServer1.h	/^  t_NpcAIDefine AIDefine;$/;"	m	class:SceneNpc
AIF_ACTIVE_MODE	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_ACTIVE_MODE    = 0x00100000,\/\/\/÷˜∂Øπ•ª˜$/;"	e	enum:NpcAIFlag
AIF_ASPD_UP_HP50	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_ASPD_UP_HP50  = 0x00080000,\/\/\/hp50%“‘œ¬π•ª˜ÀŸ∂»º”±∂$/;"	e	enum:NpcAIFlag
AIF_ATK_HP	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_ATK_HP              = 0x00000004, \/\/\/”≈œ»π•ª˜…˙√¸÷µ◊ÓµÕµƒµ–»À$/;"	e	enum:NpcAIFlag
AIF_ATK_HP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
AIF_ATK_MASTER	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_ATK_MASTER    = 0x00008000,\/\/\/÷±Ω”π•ª˜≥ËŒÔµƒ÷˜»À$/;"	e	enum:NpcAIFlag
AIF_ATK_MDEF	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_ATK_MDEF            = 0x00000002, \/\/\/”≈œ»π•ª˜ƒß∑¿◊ÓµÕµƒµ–»À$/;"	e	enum:NpcAIFlag
AIF_ATK_MDEF	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
AIF_ATK_PDEF	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_ATK_PDEF            = 0x00000001, \/\/\/”≈œ»π•ª˜ŒÔ∑¿◊ÓµÕµƒµ–»À$/;"	e	enum:NpcAIFlag
AIF_ATK_PDEF	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
AIF_ATK_REDNAME	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_ATK_REDNAME    = 0x00010000,\/\/\/π•ª˜∫Ï√˚µƒÕÊº“$/;"	e	enum:NpcAIFlag
AIF_CALL_BY_ATYPE	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_CALL_BY_ATYPE       = 0x00002000, \/\/\/’ŸªΩÕ¨÷÷π•ª˜¿‡–ÕµƒÕ¨∞È£®”Î…œ¡Ω∏ˆ±Í÷æ∫œ◊˜£©$/;"	e	enum:NpcAIFlag
AIF_CALL_FELLOW_7	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_CALL_FELLOW_7       = 0x00000800, \/\/\/’ŸªΩ7*7∑∂ŒßµƒŒ¥º§ªÓnpc(º∏¬ 50%)$/;"	e	enum:NpcAIFlag
AIF_CALL_FELLOW_9	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_CALL_FELLOW_9       = 0x00001000, \/\/\/’ŸªΩ9*9∑∂ŒßµƒŒ¥º§ªÓnpc£®º∏¬ 50%£©$/;"	e	enum:NpcAIFlag
AIF_DOUBLE_REGION	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_DOUBLE_REGION  = 0x00020000,\/\/\/À—À˜∑∂Œßº”±∂$/;"	e	enum:NpcAIFlag
AIF_FLEE_30_HP	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_FLEE_30_HP    = 0x00000040, \/\/\/HP30%“‘œ¬Ã”≈‹4∏Ò$/;"	e	enum:NpcAIFlag
AIF_FLEE_30_HP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
AIF_FLEE_3_ENEMY_4	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_FLEE_3_ENEMY_4  = 0x00000080, \/\/\/±ª3∏ˆ“‘…œµ–»ÀŒßπ•Ã”≈‹4∏Ò$/;"	e	enum:NpcAIFlag
AIF_FLEE_3_ENEMY_4	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
AIF_GIVEUP_10_SEC	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_GIVEUP_10_SEC       = 0x00000008, \/\/\/◊∑÷10√Î∑≈∆˙ƒø±Í$/;"	e	enum:NpcAIFlag
AIF_GIVEUP_10_SEC	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
AIF_GIVEUP_3_SEC	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_GIVEUP_3_SEC        = 0x00000020, \/\/\/3√ÎŒ¥ ‹µΩ…À∫¶∑≈∆˙ƒø±Í$/;"	e	enum:NpcAIFlag
AIF_GIVEUP_3_SEC	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
AIF_GIVEUP_6_SEC	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_GIVEUP_6_SEC        = 0x00000010, \/\/\/6√ÎŒ¥ ‹µΩ…À∫¶∑≈∆˙ƒø±Í$/;"	e	enum:NpcAIFlag
AIF_GIVEUP_6_SEC	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
AIF_HELP_FELLOW_5	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_HELP_FELLOW_5  = 0x00004000,\/\/\/∞Ô÷˙5*5∑∂Œßƒ⁄µƒÕ¨∞Èπ•ª˜£®”√”⁄±ª∂Ønpc£©$/;"	e	enum:NpcAIFlag
AIF_LIMIT_REGION	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_LIMIT_REGION  = 0x02000000  \/\/\/œﬁ÷∆ªÓ∂Ø∑∂Œß$/;"	e	enum:NpcAIFlag
AIF_LOCK_TARGET	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_LOCK_TARGET    = 0x00400000,\/\/\/≤ª«–ªªπ•ª˜ƒø±Í÷±µΩÀ¿$/;"	e	enum:NpcAIFlag
AIF_NO_BATTLE	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_NO_BATTLE    = 0x00000100,\/\/\/∑«’Ω∂∑npc$/;"	e	enum:NpcAIFlag
AIF_NO_MOVE	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_NO_MOVE    = 0x00000200, \/\/\/≤ª“∆∂Ø£®π≠Œ¿°¢¬Ú¬Ù°¢¬∑±Íµ»£©$/;"	e	enum:NpcAIFlag
AIF_RCV_REST	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_RCV_REST    = 0x01000000,\/\/\/Õ—¿Î’Ω∂∑30√Î∫Ûªÿ—™“ª¥Œ5%$/;"	e	enum:NpcAIFlag
AIF_RCV_UNDER_30	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_RCV_UNDER_30  = 0x00800000,\/\/\/hp30%“‘œ¬≥÷–¯ªÿ—™1%$/;"	e	enum:NpcAIFlag
AIF_RUN_AWAY	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_RUN_AWAY    = 0x00200000,\/\/\/Ã”¿Îµ–»À$/;"	e	enum:NpcAIFlag
AIF_SPD_UP_HP20	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_SPD_UP_HP20    = 0x00040000,\/\/\/hp20%“‘œ¬“∆∂ØÀŸ∂»º”±∂$/;"	e	enum:NpcAIFlag
AIF_WARP_MOVE	SceneServer/libscenesserver/SceneServer1.h	/^	AIF_WARP_MOVE    = 0x00000400, \/\/\/À≤“∆∑Ω Ω“∆∂Ø$/;"	e	enum:NpcAIFlag
ALLVARS	SceneServer/libscenesserver/ScenesServer.h	4155;"	d
ALLVARS1	SceneServer/libscenesserver/ScenesServer.h	4166;"	d
ALLY_GUARDNPC	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD ALLY_GUARDNPC = 54100;\/\/√Àπ˙Ô⁄≥µ$/;"	v
ALLY_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
ALL_CHAT_USERCMD_PARAMETER	base/include/csCommon.h	4583;"	d
ALL_SUB_DIRS	Makefile	/^ALL_SUB_DIRS = $(SUB_DIRS) $/;"	m
ALL_TARGETS	BillServer/Makefile	/^ALL_TARGETS = BillServer$/;"	m
ALL_TARGETS	FLServer/Makefile	/^ALL_TARGETS = FLServer$/;"	m
ALL_TARGETS	GatewayServer/Makefile	/^ALL_TARGETS = GatewayServer$/;"	m
ALL_TARGETS	RecordServer/Makefile	/^ALL_TARGETS = RecordServer$/;"	m
ALL_TARGETS	SceneServer/Makefile	/^ALL_TARGETS = SceneServer$/;"	m
ALL_TARGETS	SessionServer/Makefile	/^ALL_TARGETS = SessionServer$/;"	m
ALL_TARGETS	SuperServer/Makefile	/^ALL_TARGETS = SuperServer$/;"	m
ALL_TARGETS	client/Makefile	/^ALL_TARGETS = client$/;"	m
ANSWER_NAME_TEAM_USERCMD_PARA	base/include/csCommon.h	4919;"	d
ANSWER_TEAM_USERCMD_PARA	base/include/csCommon.h	4706;"	d
ANSWER_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5035;"	d
ANTI_DARE_COUNTRY_FORMAL_PARA	base/include/csCommon.h	6430;"	d
APPOINT_CATCHER_PARA	base/include/csCommon.h	6511;"	d
APPOINT_CITY_CATCHER_PARA	base/include/csCommon.h	5901;"	d
APPOINT_DIPLOMAT_PARA	base/include/csCommon.h	6534;"	d
AR	deps/tinyxml/Makefile	/^AR     := ar rc$/;"	m
ARENA_QUEUING_USERCMD_PARA	base/include/csBox.h	453;"	d
ARENA_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
ARGP_ERR_UNKNOWN	base/include/argp.h	109;"	d
ARGP_HELP_BUG_ADDR	base/include/argp.h	395;"	d
ARGP_HELP_DOC	base/include/argp.h	394;"	d
ARGP_HELP_EXIT_ERR	base/include/argp.h	400;"	d
ARGP_HELP_EXIT_OK	base/include/argp.h	401;"	d
ARGP_HELP_LONG	base/include/argp.h	391;"	d
ARGP_HELP_LONG_ONLY	base/include/argp.h	396;"	d
ARGP_HELP_POST_DOC	base/include/argp.h	393;"	d
ARGP_HELP_PRE_DOC	base/include/argp.h	392;"	d
ARGP_HELP_SEE	base/include/argp.h	390;"	d
ARGP_HELP_SHORT_USAGE	base/include/argp.h	389;"	d
ARGP_HELP_STD_ERR	base/include/argp.h	405;"	d
ARGP_HELP_STD_HELP	base/include/argp.h	412;"	d
ARGP_HELP_STD_USAGE	base/include/argp.h	409;"	d
ARGP_HELP_USAGE	base/include/argp.h	388;"	d
ARGP_IN_ORDER	base/include/argp.h	336;"	d
ARGP_KEY_ARG	base/include/argp.h	137;"	d
ARGP_KEY_ARGS	base/include/argp.h	143;"	d
ARGP_KEY_END	base/include/argp.h	145;"	d
ARGP_KEY_ERROR	base/include/argp.h	162;"	d
ARGP_KEY_FINI	base/include/argp.h	157;"	d
ARGP_KEY_HELP_ARGS_DOC	base/include/argp.h	232;"	d
ARGP_KEY_HELP_DUP_ARGS_NOTE	base/include/argp.h	231;"	d
ARGP_KEY_HELP_EXTRA	base/include/argp.h	227;"	d
ARGP_KEY_HELP_HEADER	base/include/argp.h	226;"	d
ARGP_KEY_HELP_POST_DOC	base/include/argp.h	225;"	d
ARGP_KEY_HELP_PRE_DOC	base/include/argp.h	224;"	d
ARGP_KEY_INIT	base/include/argp.h	155;"	d
ARGP_KEY_NO_ARGS	base/include/argp.h	151;"	d
ARGP_KEY_SUCCESS	base/include/argp.h	160;"	d
ARGP_LONG_ONLY	base/include/argp.h	346;"	d
ARGP_NO_ARGS	base/include/argp.h	332;"	d
ARGP_NO_ERRS	base/include/argp.h	320;"	d
ARGP_NO_EXIT	base/include/argp.h	343;"	d
ARGP_NO_HELP	base/include/argp.h	340;"	d
ARGP_PARSE_ARGV0	base/include/argp.h	314;"	d
ARGP_SILENT	base/include/argp.h	349;"	d
ARMY_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
ATTACKED_CONSUME_PERMANENCE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Mask::__anon79
ATTACK_TYPE	base/include/csCommon.h	/^/;"	g	namespace:SkillDef
ATTACK_USE_TIME	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Mask::__anon79
ATTRIBUTETYPE	base/include/csBox.h	/^enum ATTRIBUTETYPE{$/;"	g	namespace:Cmd
AUCTION_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
AUTO_PACK	SceneServer/libscenesserver/ScenesServer.h	1617;"	d
AUTO_REPLY_USERCMD_PARA	base/include/csCommon.h	4834;"	d
Accept	deps/tinyxml/tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment
Accept	deps/tinyxml/tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration
Accept	deps/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument
Accept	deps/tinyxml/tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement
Accept	deps/tinyxml/tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText
Accept	deps/tinyxml/tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown
Action	SceneServer/libscenesserver/SceneServer1.h	/^class Action$/;"	c
Action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ActionFactory	SceneServer/libscenesserver/SceneServer1.h	/^typedef ProductFactory<std::string,MakeFunction::Maker<Action> > ActionFactory;$/;"	t
ActionPointAction	SceneServer/libscenesserver/SceneServer1.h	/^  ActionPointAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:ActionPointAction
ActionPointAction	SceneServer/libscenesserver/SceneServer1.h	/^class ActionPointAction : public TeamAction$/;"	c
ActionPointCondition	SceneServer/libscenesserver/SceneServer1.h	/^  ActionPointCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:ActionPointCondition
ActionPointCondition	SceneServer/libscenesserver/SceneServer1.h	/^class ActionPointCondition : public TeamCondition$/;"	c
ActionPointCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ActionPointCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ActionPointCondition
Activated_hole	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Hole::Activated_hole(zObject* ob, int index)$/;"	f	class:Hole
Add	SceneServer/libscenesserver/SceneServer1.h	/^  class Add$/;"	c	namespace:Op
Add	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
Add	deps/tinyxml/tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet
AddAwayNewMemberExec	SceneServer/libscenesserver/TeamManager.cpp	/^	AddAwayNewMemberExec(TeamManager *team, Cmd::Session::stMember * AwayUser)$/;"	f	struct:AddAwayNewMemberExec
AddAwayNewMemberExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct AddAwayNewMemberExec : public TeamMemExec$/;"	s	file:
AddBindItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  AddBindItemAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:AddBindItemAction
AddBindItemAction	SceneServer/libscenesserver/SceneServer1.h	/^class AddBindItemAction : public TeamAction$/;"	c
AddCampReg	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::AddCampReg(DWORD campID, int RegNum)$/;"	f	class:GangScene
AddCoolTimeStar	SceneServer/libscenesserver/ItemCoolTime.cpp	/^bool CItmeCoolTime::AddCoolTimeStar(zObject* obj)$/;"	f	class:CItmeCoolTime
AddGreenBindItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  AddGreenBindItemAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:AddGreenBindItemAction
AddGreenBindItemAction	SceneServer/libscenesserver/SceneServer1.h	/^class AddGreenBindItemAction : public TeamAction$/;"	c
AddGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^  AddGuardAction(ScenesParser& p) : NpcAction(p)$/;"	f	class:AddGuardAction
AddGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^class AddGuardAction : public NpcAction$/;"	c
AddItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  AddItemAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:AddItemAction
AddItemAction	SceneServer/libscenesserver/SceneServer1.h	/^class AddItemAction : public TeamAction$/;"	c
AddMapToQueuing	SessionServer/libsessionserver/Queuing.cpp	/^bool CArenaManager::AddMapToQueuing(Cmd::Session::t_Sports_ReturnMapID * cmd)$/;"	f	class:CArenaManager
AddMeType	base/include/csBox.h	/^	uint16_t  AddMeType;		\/\/sky ≈≈∂”µƒ’Ω≥°¿‡–Õ$/;"	m	struct:Cmd::stArenaQueuingUserCmd
AddNewMemberExec	SceneServer/libscenesserver/TeamManager.cpp	/^  AddNewMemberExec(TeamManager* team, SceneUser *n)$/;"	f	struct:AddNewMemberExec
AddNewMemberExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct AddNewMemberExec : public TeamMemExec$/;"	s	file:
AddNpcAction	SceneServer/libscenesserver/SceneServer1.h	/^  AddNpcAction(ScenesParser& p) : NpcAction(p)$/;"	f	class:AddNpcAction
AddNpcAction	SceneServer/libscenesserver/SceneServer1.h	/^class AddNpcAction : public NpcAction$/;"	c
AddTime	SessionServer/libsessionserver/SessionServer.h	/^	QWORD	AddTime;	\/\/≈≈∂”µƒ ±º‰$/;"	m	struct:QueueTeamData
AddUser	SceneServer/libscenesserver/TeamManager.cpp	/^	Cmd::Session::stMember * AddUser;$/;"	m	struct:AddAwayNewMemberExec	file:
AddUserCamePoint	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::AddUserCamePoint(DWORD userid, DWORD point)$/;"	f	class:GangScene
AddUserToScene	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::AddUserToScene(DWORD UserID, const zPos & initPos)$/;"	f	class:GangScene
Add_Num	base/include/csBox.h	/^	uint16_t Add_Num;	\/\/æﬂÃÂ≤Ÿ◊˜µƒ ˝÷µ$/;"	m	struct:Cmd::stAddAttruByteUserCmd
Add_Type	base/include/csBox.h	/^	BYTE Add_Type;  \/\/–Ë“™º”µ„µƒ Ù–‘¿‡–Õ$/;"	m	struct:Cmd::stAddAttruByteUserCmd
AmendmentFactor	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
ArchitecTimer	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^void SceneArchitecture::ArchitecTimer(const zRTime& ctv)$/;"	f	class:SceneArchitecture
Arena_AddUser	SessionServer/libsessionserver/Queuing.cpp	/^void CArenaManager::Arena_AddUser(Cmd::Session::t_Sports_AddMeToQueuing * cmd)$/;"	f	class:CArenaManager
Arena_timer	SessionServer/libsessionserver/Queuing.cpp	/^void CArenaManager::Arena_timer()$/;"	f	class:CArenaManager
ArhatMapPoint	SessionServer/libsessionserver/SessionServer.h	/^struct ArhatMapPoint$/;"	s
AttAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
AttackCross	base/include/csCommon.h	/^/;"	e	enum:SkillDef::__anon188
AttackDirect	base/include/csCommon.h	/^/;"	e	enum:SkillDef::ATTACK_TYPE
AttackEight	base/include/csCommon.h	/^/;"	e	enum:SkillDef::__anon188
AttackFive_1	base/include/csCommon.h	/^/;"	e	enum:SkillDef::__anon188
AttackFive_2	base/include/csCommon.h	/^/;"	e	enum:SkillDef::__anon188
AttackFive_3	base/include/csCommon.h	/^/;"	e	enum:SkillDef::__anon188
AttackFly	base/include/csCommon.h	/^/;"	e	enum:SkillDef::ATTACK_TYPE
AttackMe	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::AttackMe(SceneEntryPk *pAtt,const Cmd::stAttackMagicUserCmd *rev,bool physics,SWORD rangDamageBonus)$/;"	f	class:SceneEntryPk
AttackNear	base/include/csCommon.h	/^/;"	e	enum:SkillDef::ATTACK_TYPE
AttackNine	base/include/csCommon.h	/^/;"	e	enum:SkillDef::__anon188
AttackThree	base/include/csCommon.h	/^/;"	e	enum:SkillDef::__anon188
Attribute	deps/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement
Attribute	deps/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement
Attribute	deps/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement
Attribute	deps/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement
Attribute	deps/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement
Attribute	deps/tinyxml/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement
AuctionService	SessionServer/libsessionserver/AuctionService.cpp	/^AuctionService::AuctionService(){}$/;"	f	class:AuctionService
AuctionService	SessionServer/libsessionserver/SessionServer.h	/^class AuctionService$/;"	c
BA2WD	base/include/csCommon.h	380;"	d
BACKSELECT_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
BAD_SKILL_STATE	base/include/srvEngine.h	4503;"	d
BANGL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
BANGR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
BASE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::Type2Type
BASEDATA_F_ATTACKDODGE	base/include/csCommon.h	1298;"	d
BASEDATA_F_ATTACKRATING	base/include/csCommon.h	1297;"	d
BASEDATA_F_ATTACKSPEED	base/include/csCommon.h	1301;"	d
BASEDATA_F_BANG	base/include/csCommon.h	1308;"	d
BASEDATA_F_HP	base/include/csCommon.h	1289;"	d
BASEDATA_F_MDAMAGE	base/include/csCommon.h	1304;"	d
BASEDATA_F_MDEFENCE	base/include/csCommon.h	1306;"	d
BASEDATA_F_MOVESPEED	base/include/csCommon.h	1300;"	d
BASEDATA_F_MP	base/include/csCommon.h	1290;"	d
BASEDATA_F_PDAMAGE	base/include/csCommon.h	1303;"	d
BASEDATA_F_PDEFENCE	base/include/csCommon.h	1305;"	d
BASEDATA_F_RESUMEHP	base/include/csCommon.h	1293;"	d
BASEDATA_F_RESUMEMP	base/include/csCommon.h	1294;"	d
BASEDATA_F_RESUMESP	base/include/csCommon.h	1295;"	d
BASEDATA_F_SP	base/include/csCommon.h	1291;"	d
BASEDATA_M_ATTACKDODGE	base/include/csCommon.h	1277;"	d
BASEDATA_M_ATTACKRATING	base/include/csCommon.h	1276;"	d
BASEDATA_M_ATTACKSPEED	base/include/csCommon.h	1280;"	d
BASEDATA_M_BANG	base/include/csCommon.h	1287;"	d
BASEDATA_M_HP	base/include/csCommon.h	1268;"	d
BASEDATA_M_MDAMAGE	base/include/csCommon.h	1283;"	d
BASEDATA_M_MDEFENCE	base/include/csCommon.h	1285;"	d
BASEDATA_M_MOVESPEED	base/include/csCommon.h	1279;"	d
BASEDATA_M_MP	base/include/csCommon.h	1269;"	d
BASEDATA_M_PDAMAGE	base/include/csCommon.h	1282;"	d
BASEDATA_M_PDEFENCE	base/include/csCommon.h	1284;"	d
BASEDATA_M_RESUMEHP	base/include/csCommon.h	1272;"	d
BASEDATA_M_RESUMEMP	base/include/csCommon.h	1273;"	d
BASEDATA_M_RESUMESP	base/include/csCommon.h	1274;"	d
BASEDATA_M_SP	base/include/csCommon.h	1270;"	d
BASIC_WORK	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon187
BATTLEFIELD_SCENE_ID	base/include/csCommon.h	132;"	d
BATTLEFIELF_WINNT_KILLALLUSER	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_KILLALLUSER	= 2,	\/\/…±À¿»´≤ø∂‘∑Ω’Û”™≥…‘± §¿˚$/;"	e	enum:eVictoryType
BATTLEFIELF_WINNT_KILLUSERNUM	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_KILLUSERNUM	= 1,	\/\/…±πª∂‘∑Ω’Û”™≥…‘±Ãÿ∂® ˝¡ø §¿˚$/;"	e	enum:eVictoryType
BATTLEFIELF_WINNT_NULL	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_NULL			= 0,	\/\/NULL$/;"	e	enum:eVictoryType
BATTLEFIELF_WINNT_REGNAMMAX	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_REGNAMMAX		= 5,	\/\/◊ ‘¥◊Óœ»¥Ô±Íµƒ’Û”™ §¿˚$/;"	e	enum:eVictoryType
BATTLEFIELF_WINNT_TIME_GETGO	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_TIME_GETGO	= 16,	\/\/º·≥÷µΩ ±º‰Ω· ¯$/;"	e	enum:eVictoryType
BATTLEFIELF_WINNT_TIME_KILLNPCMUCH	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_TIME_KILLNPCMUCH	= 18,	\/\/ ±º‰Ω· ¯ ±∫Ú…±À¿NPC◊Ó∂‡µƒ’Û”™ §¿˚$/;"	e	enum:eVictoryType
BATTLEFIELF_WINNT_TIME_KILLUSERMUCH	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_TIME_KILLUSERMUCH	= 17,	\/\/ ±º‰Ω· ¯ ±∫Ú…±À¿”√ªß◊Ó∂‡µƒ’Û”™ §¿˚$/;"	e	enum:eVictoryType
BATTLEFIELF_WINNT_WATCH_NPCATT	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_WATCH_NPCATT	= 4,	\/\/º·≥÷ÕÍÃÿ∂®NPCπ•ª˜,ª˘µÿ√ª±ª¥›ªŸæÕÀ„ §¿˚$/;"	e	enum:eVictoryType
BATTLEFIELF_WINNT_WRECKBASE	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BATTLEFIELF_WINNT_WRECKBASE		= 3,	\/\/¥›ªŸ∂‘∑Ω’Û”™µƒª˘µÿ$/;"	e	enum:eVictoryType
BCampData	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BCampData()$/;"	f	struct:BCampData
BCampData	SceneServer/libscenesserver/SceneBattlefiel.h	/^struct BCampData$/;"	s
BEGIN	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::PrivateStore::STEP
BEGIN_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5049;"	d
BELT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
BENIGNED_SKILL_STATE	base/include/srvEngine.h	4502;"	d
BGDWIN32	base/include/csCommon.h	24;"	d
BIANJING_MAP_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
BILLSERVER	base/common.h	/^	BILLSERVER      =  12, \/** ËÆ°Ë¥πÊúçÂä°Âô® *\/$/;"	e	enum:ServerType
BINARY_CARD_NUM	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_CHANGE_COUNTRY_TIME	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_DOUBLE_EXP_OBJ	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_FAMILY_OBJ	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_GIVE_MATARIAL_NUM	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_KING_OBJ	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_MAX	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_SAFETY	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_SAFETY_SETUP	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_TONG_OBJ	base/include/csCommon.h	/^/;"	e	enum:BinaryArchiveType
BINARY_VERSION	base/include/csCommon.h	925;"	d
BODY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
BODYCOLOR_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4214;"	d
BONUS_SKILL	SceneServer/libscenesserver/SceneServer1.h	2366;"	d
BONUS_SKILL	SceneServer/libscenesserver/ScenesServer.h	11912;"	d
BONUS_SKILLS	SceneServer/libscenesserver/SceneServer1.h	2402;"	d
BONUS_SKILLS	SceneServer/libscenesserver/ScenesServer.h	11948;"	d
BONUS_SKILL_RING	SceneServer/libscenesserver/SceneServer1.h	2385;"	d
BONUS_SKILL_RING	SceneServer/libscenesserver/ScenesServer.h	11931;"	d
BOOTS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
BOW_ARROW_ITEM_TYPE	base/include/csCommon.h	598;"	d
BSTR2PSTR	base/include/codeLib.h	51;"	d
BUFFER_CMD	base/include/srvEngine.h	1110;"	d
BUILD_DIR_ROOT	Makefile	/^BUILD_DIR_ROOT = $(PWD)$/;"	m
BUILD_STRING	Makefile	/^BUILD_STRING = $/;"	m
BUILD_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
BULLETIN_MAX_SIZE	base/include/csCommon.h	7569;"	d
BUYOBJECT_NPCTRADE_USERCMD_PARAMETER	base/include/csCommon.h	5135;"	d
BUY_CARTOON_PARA	base/include/csCommon.h	9528;"	d
BYTE	base/type.h	/^typedef uint8_t     BYTE;$/;"	t
Base	SceneServer/libscenesserver/SceneServer1.h	/^    typedef Maker<Action>::Base Base;$/;"	t	class:MakeFunction::Update
Base	SceneServer/libscenesserver/SceneServer1.h	/^    typedef Maker<Action>::Base Base;$/;"	t	class:MakeFunction::Void
Base	SceneServer/libscenesserver/SceneServer1.h	/^    typedef Maker<Condition>::Base Base;$/;"	t	class:MakeFunction::Compare
Base	SceneServer/libscenesserver/SceneServer1.h	/^    typedef typename A::Base Base;$/;"	t	class:MakeFunction::Content
Base	SceneServer/libscenesserver/SceneServer1.h	/^    typedef typename A::Base Base;$/;"	t	class:MakeFunction::Maker
Base	SceneServer/libscenesserver/SceneServer1.h	/^    typedef typename A::Base Base;$/;"	t	class:MakeFunction::Prop
Base	SceneServer/libscenesserver/SceneServer1.h	/^  typedef Action Base;$/;"	t	class:Action
Base	SceneServer/libscenesserver/SceneServer1.h	/^  typedef Condition Base;$/;"	t	class:Condition
Base	SceneServer/libscenesserver/SceneServer1.h	/^class Base$/;"	c
Base	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
Base	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Action
Base	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Condition
BattCampID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
BattfieldData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
BattfieldHonor	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stUserBattfieldData
Bill	base/billcmd.h	/^	namespace Bill$/;"	n	namespace:Cmd
BillCache	BillServer/old_back/BillCache.cpp	/^BillCache::BillCache() : SerialNumber(0)$/;"	f	class:BillCache
BillCache	BillServer/old_back/BillServer.h	/^class BillCache : public SingletonBase<BillCache>$/;"	c
BillCallback	BillServer/old_back/BillServer.h	/^struct BillCallback$/;"	s
BillClient	BillServer/old_back/BillClient.cpp	/^BillClient::BillClient($/;"	f	class:BillClient
BillClient	BillServer/old_back/BillServer.h	/^class BillClient : public x_tcp_clientTask,public MessageQueue$/;"	c
BillClient	GatewayServer/BillClient.h	/^	BillClient(boost::asio::io_service &ios):tcp_client(ios){ }$/;"	f	class:BillClient
BillClient	GatewayServer/BillClient.h	/^class BillClient : public tcp_client$/;"	c
BillClient	GatewayServer/old_back/GatewayServer.h	/^	BillClient($/;"	f	class:BillClient
BillClient	GatewayServer/old_back/GatewayServer.h	/^class BillClient : public x_tcp_buffer_client$/;"	c
BillClientContainer	BillServer/old_back/BillServer.h	/^    typedef std::multiset<BillClient *,lt_client> BillClientContainer;$/;"	t	class:BillClientManager
BillClientManager	BillServer/old_back/BillClientManager.cpp	/^BillClientManager::BillClientManager() : billClientPool(NULL),actionTimer(),maxID(0)$/;"	f	class:BillClientManager
BillClientManager	BillServer/old_back/BillServer.h	/^class BillClientManager : public SingletonBase<BillClientManager>$/;"	c
BillConfile	BillServer/old_back/BillServer.cpp	/^class BillConfile:public zConfile$/;"	c	file:
BillData	BillServer/old_back/BillServer.h	/^struct BillData$/;"	s
BillInfo	BillServer/old_back/BillServer.h	/^  BillInfo() : timestamp()$/;"	f	struct:BillInfo
BillInfo	BillServer/old_back/BillServer.h	/^  BillInfo(const BillInfo &ai)$/;"	f	struct:BillInfo
BillInfo	BillServer/old_back/BillServer.h	/^struct BillInfo$/;"	s
BillInfoMap	BillServer/old_back/BillServer.h	/^    typedef hash_map<DWORD,BillInfo> BillInfoMap;$/;"	t	class:BillManager
BillInfoMap_iterator	BillServer/old_back/BillServer.h	/^    typedef BillInfoMap::iterator BillInfoMap_iterator;$/;"	t	class:BillManager
BillInfoMap_pair	BillServer/old_back/BillServer.h	/^    typedef BillInfoMap::value_type BillInfoMap_pair;$/;"	t	class:BillManager
BillManager	BillServer/old_back/BillServer.h	/^    BillManager() {};$/;"	f	class:BillManager
BillManager	BillServer/old_back/BillServer.h	/^class BillManager$/;"	c
BillService	BillServer/BillServer.h	/^		BillService():x_subnetservice("bill server", BILLSERVER) {$/;"	f	class:BillService
BillService	BillServer/BillServer.h	/^class BillService : public x_subnetservice {$/;"	c
BillService	BillServer/old_back/BillServer.h	/^    BillService() : x_subnetservice("º∆∑—∑˛ŒÒ∆˜",BILLSERVER)$/;"	f	class:BillService
BillService	BillServer/old_back/BillServer.h	/^class BillService : public x_subnetservice$/;"	c
BillSession	BillServer/old_back/BillServer.h	/^  BillSession()$/;"	f	struct:BillSession
BillSession	BillServer/old_back/BillServer.h	/^struct BillSession$/;"	s
BillSessionHashmap	BillServer/old_back/BillServer.h	/^    typedef std::map<std::string,BillSession> BillSessionHashmap;$/;"	t	class:BillSessionManager
BillSessionHashmap_iterator	BillServer/old_back/BillServer.h	/^    typedef BillSessionHashmap::iterator BillSessionHashmap_iterator;$/;"	t	class:BillSessionManager
BillSessionHashmap_pair	BillServer/old_back/BillServer.h	/^    typedef BillSessionHashmap::value_type BillSessionHashmap_pair;$/;"	t	class:BillSessionManager
BillSessionManager	BillServer/old_back/BillServer.h	/^    BillSessionManager() {};$/;"	f	class:BillSessionManager
BillSessionManager	BillServer/old_back/BillServer.h	/^class BillSessionManager$/;"	c
BillTask	BillServer/BillTask.h	/^    BillTask(io_service& ios) : tcp_task(ios) {$/;"	f	class:BillTask
BillTask	BillServer/BillTask.h	/^class BillTask : public tcp_task, public MessageQueue$/;"	c
BillTask	BillServer/old_back/BillServer.h	/^    BillTask($/;"	f	class:BillTask
BillTask	BillServer/old_back/BillServer.h	/^class BillTask : public zTCPTask,public MessageQueue$/;"	c
BillTaskHashmap	BillServer/BillTaskManager.h	/^    typedef boost::unordered_map<uint32_t,shared_ptr<BillTask> > BillTaskHashmap;$/;"	t	class:BillTaskManager
BillTaskHashmap	BillServer/old_back/BillServer.h	/^    typedef hash_map<WORD,BillTask *> BillTaskHashmap;$/;"	t	class:BillTaskManager
BillTaskHashmap_const_iterator	BillServer/BillTaskManager.h	/^    typedef BillTaskHashmap::const_iterator BillTaskHashmap_const_iterator;$/;"	t	class:BillTaskManager
BillTaskHashmap_const_iterator	BillServer/old_back/BillServer.h	/^    typedef BillTaskHashmap::const_iterator BillTaskHashmap_const_iterator;$/;"	t	class:BillTaskManager
BillTaskHashmap_iterator	BillServer/BillTaskManager.h	/^    typedef BillTaskHashmap::iterator BillTaskHashmap_iterator;$/;"	t	class:BillTaskManager
BillTaskHashmap_iterator	BillServer/old_back/BillServer.h	/^    typedef BillTaskHashmap::iterator BillTaskHashmap_iterator;$/;"	t	class:BillTaskManager
BillTaskHashmap_pair	BillServer/BillTaskManager.h	/^    typedef BillTaskHashmap::value_type BillTaskHashmap_pair;$/;"	t	class:BillTaskManager
BillTaskHashmap_pair	BillServer/old_back/BillServer.h	/^    typedef BillTaskHashmap::value_type BillTaskHashmap_pair;$/;"	t	class:BillTaskManager
BillTaskManager	BillServer/BillTaskManager.h	/^    BillTaskManager() {};$/;"	f	class:BillTaskManager
BillTaskManager	BillServer/BillTaskManager.h	/^class BillTaskManager : boost::noncopyable$/;"	c
BillTaskManager	BillServer/old_back/BillServer.h	/^    BillTaskManager() {};$/;"	f	class:BillTaskManager
BillTaskManager	BillServer/old_back/BillServer.h	/^class BillTaskManager$/;"	c
BillTimeTick	BillServer/old_back/BillServer.h	/^    BillTimeTick() : zThread("TimeTick") {};$/;"	f	class:BillTimeTick
BillTimeTick	BillServer/old_back/BillServer.h	/^class BillTimeTick : public zThread$/;"	c
BillUser	BillServer/BillUser.cpp	/^BillUser::BillUser(DWORD acc,DWORD logintemp,const char *count,const DWORD ip,shared_ptr<BillTask> gate)$/;"	f	class:BillUser
BillUser	BillServer/BillUser.h	/^class BillUser \/\/:public zEntry $/;"	c
BillUser	BillServer/old_back/BillServer.h	/^class BillUser :public zEntry $/;"	c
BillUserManager	BillServer/BillUserManager.cpp	/^BillUserManager::BillUserManager()$/;"	f	class:BillUserManager
BillUserManager	BillServer/BillUserManager.h	/^class BillUserManager :public zEntryManager< zEntryID>$/;"	c
BillUserManager	BillServer/old_back/BillServer.h	/^class BillUserManager :public zEntryManager< zEntryID>$/;"	c
Bill_action	BillServer/old_back/BillCallback.cpp	/^bool Bill_action(BillData *bd)$/;"	f
Bill_final	BillServer/old_back/BillCallback.cpp	/^void Bill_final()$/;"	f
Bill_init	BillServer/old_back/BillCallback.cpp	/^bool Bill_init(const std::string &confile,const std::string &tradelog,struct BillCallback *bc)$/;"	f
Bill_timeAction	BillServer/old_back/BillCallback.cpp	/^void Bill_timeAction()$/;"	f
BinaryArchiveMember	base/include/csCommon.h	/^/;"	s
BinaryArchiveType	base/include/csCommon.h	/^/;"	g
Binder	SceneServer/libscenesserver/SceneServer1.h	/^class Binder$/;"	c
Blank	deps/tinyxml/tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText
BlueObjectBase	base/include/srvEngine.h	/^typedef ColorObjectBase BlueObjectBase;$/;"	t
BmapBaseID	SceneServer/libscenesserver/SceneManager.cpp	/^std::vector<DWORD> BmapBaseID;$/;"	v
Buf	BillServer/old_back/BillServer.h	/^    char Buf[1024];$/;"	m	class:Consign
BulletinAction	SceneServer/libscenesserver/SceneServer1.h	/^  BulletinAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:BulletinAction
BulletinAction	SceneServer/libscenesserver/SceneServer1.h	/^class BulletinAction : public TeamAction$/;"	c
BulletinAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
BulletinAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:BulletinAction
ByteBuffer	base/include/x_socket.cpp	/^t_BufferCmdQueue::ByteBuffer()$/;"	f	class:t_BufferCmdQueue
ByteBuffer	base/include/x_socket.cpp	/^t_StackCmdQueue::ByteBuffer()$/;"	f	class:t_StackCmdQueue
ByteBuffer	base/src/x_buffer.h	/^class ByteBuffer$/;"	c
CAISHUZI	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniGameType
CALCUTE	SceneServer/libscenesserver/zObject.cpp	1741;"	d	file:
CALL_PET_REGION	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
CANCEL_CATCHER_PARA	base/include/csCommon.h	6524;"	d
CANCEL_CITY_CATCHER_PARA	base/include/csCommon.h	5914;"	d
CANCEL_COUNTRY_ALLY_PARA	base/include/csCommon.h	10375;"	d
CANCEL_DIPLOMAT_PARA	base/include/csCommon.h	6547;"	d
CANCEL_TECH_SEARCH_PARA	base/include/csCommon.h	6417;"	d
CANCEL_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5072;"	d
CAN_SELL_USERCMD_PARAMETER	base/include/csCommon.h	5279;"	d
CARDID_LENGTH_PARA	base/include/csCommon.h	8664;"	d
CARD_MINI_PARA	base/include/csCommon.h	12530;"	d
CARTOON_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
CAlly	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
CAlly	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CAlly
CAlly	SessionServer/libsessionserver/Ally.cpp	/^CAlly::CAlly()$/;"	f	class:CAlly
CAlly	SessionServer/libsessionserver/SessionServer.h	/^class CAlly$/;"	c
CAllyM	SessionServer/libsessionserver/SessionServer.h	/^class CAllyM : public Singleton<CAllyM>$/;"	c
CArenaManager	SessionServer/libsessionserver/Queuing.cpp	/^CArenaManager::CArenaManager()$/;"	f	class:CArenaManager
CArenaManager	SessionServer/libsessionserver/SessionServer.h	/^class CArenaManager$/;"	c
CArhat	SessionServer/libsessionserver/SessionServer.h	/^  CArhat()$/;"	f	class:CArhat
CArhat	SessionServer/libsessionserver/SessionServer.h	/^class CArhat$/;"	c
CArmy	SessionServer/libsessionserver/Army.cpp	/^CArmy::CArmy()$/;"	f	class:CArmy
CArmy	SessionServer/libsessionserver/SessionServer.h	/^class CArmy$/;"	c
CArmyM	SessionServer/libsessionserver/Army.cpp	/^CArmyM::CArmyM()$/;"	f	class:CArmyM
CArmyM	SessionServer/libsessionserver/SessionServer.h	/^class CArmyM : public Singleton<CArmyM>$/;"	c
CC	deps/tinyxml/Makefile	/^CC     := gcc$/;"	m
CCaptain	SessionServer/libsessionserver/Army.cpp	/^CCaptain::CCaptain()$/;"	f	class:CCaptain
CCaptain	SessionServer/libsessionserver/SessionServer.h	/^class CCaptain$/;"	c
CCity	SessionServer/libsessionserver/SessionServer.h	/^    CCity()$/;"	f	class:CCity
CCity	SessionServer/libsessionserver/SessionServer.h	/^class CCity$/;"	c
CCityM	SessionServer/libsessionserver/CityManager.cpp	/^CCityM::CCityM()$/;"	f	class:CCityM
CCityM	SessionServer/libsessionserver/SessionServer.h	/^class CCityM : public Singleton<CCityM>$/;"	c
CCountry	SessionServer/libsessionserver/SessionServer.h	/^    CCountry()$/;"	f	class:CCountry
CCountry	SessionServer/libsessionserver/SessionServer.h	/^class CCountry$/;"	c
CCountryM	SessionServer/libsessionserver/CountryManager.cpp	/^CCountryM::CCountryM()$/;"	f	class:CCountryM
CCountryM	SessionServer/libsessionserver/SessionServer.h	/^class CCountryM : public Singleton<CCountryM>$/;"	c
CDATA	deps/tinyxml/tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:TiXmlText
CDare	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
CDare	SessionServer/libsessionserver/SessionServer.h	/^class CDare:public zEntry$/;"	c
CDareAntiCountry	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareAntiCountry
CDareAntiCountry	SessionServer/libsessionserver/SessionServer.h	/^class CDareAntiCountry : public CDareCountry$/;"	c
CDareCountry	SessionServer/libsessionserver/SessionServer.h	/^class CDareCountry : public CDare$/;"	c
CDareEmperor	SessionServer/libsessionserver/DareEmperor.cpp	/^CDareEmperor::CDareEmperor() : CDare(0,0)$/;"	f	class:CDareEmperor
CDareEmperor	SessionServer/libsessionserver/DareEmperor.cpp	/^CDareEmperor::CDareEmperor(DWORD active_time,DWORD ready_time) : CDare(active_time,ready_time)$/;"	f	class:CDareEmperor
CDareM	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
CDareM	SessionServer/libsessionserver/SessionServer.h	/^class CDareM:public zEntryManager<zEntryTempID>,$/;"	c
CDareRecord	SessionServer/libsessionserver/SessionServer.h	/^    CDareRecord()$/;"	f	class:CDareRecord
CDareRecord	SessionServer/libsessionserver/SessionServer.h	/^class CDareRecord$/;"	c
CDareRecordM	SessionServer/libsessionserver/SessionServer.h	/^    CDareRecordM(){}$/;"	f	class:CDareRecordM
CDareRecordM	SessionServer/libsessionserver/SessionServer.h	/^class CDareRecordM : public Singleton<CDareRecordM>$/;"	c
CDareSchool	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
CDareSchool	SessionServer/libsessionserver/SessionServer.h	/^class CDareSchool : public CDare$/;"	c
CDareSept	SessionServer/libsessionserver/DareSept.cpp	/^CDareSept::CDareSept() : CDare(0,0)$/;"	f	class:CDareSept
CDareSept	SessionServer/libsessionserver/DareSept.cpp	/^CDareSept::CDareSept(DWORD active_time,DWORD ready_time) : CDare(active_time,ready_time)$/;"	f	class:CDareSept
CDareSept	SessionServer/libsessionserver/SessionServer.h	/^class CDareSept : public CDare$/;"	c
CDareSeptNpc	SessionServer/libsessionserver/DareSeptNpc.cpp	/^CDareSeptNpc::CDareSeptNpc(DWORD active_time,DWORD ready_time):CDareSept(active_time,ready_time)$/;"	f	class:CDareSeptNpc
CDareSeptNpc	SessionServer/libsessionserver/SessionServer.h	/^class CDareSeptNpc : public CDareSept$/;"	c
CDareUnion	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
CDareUnion	SessionServer/libsessionserver/SessionServer.h	/^class CDareUnion : public CDare$/;"	c
CDareUnionCity	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnionCity
CDareUnionCity	SessionServer/libsessionserver/SessionServer.h	/^class CDareUnionCity : public CDareUnion$/;"	c
CEncrypt	base/include/csCommon.h	/^/;"	c
CEncrypt	base/src/zEncDec.cpp	/^CEncrypt::CEncrypt()$/;"	f	class:CEncrypt
CFLAGS	deps/tinyxml/Makefile	/^   CFLAGS       := ${DEBUG_CFLAGS}$/;"	m
CFLAGS	deps/tinyxml/Makefile	/^   CFLAGS       := ${RELEASE_CFLAGS}$/;"	m
CFLAGS	deps/tinyxml/Makefile	/^   CFLAGS   := ${CFLAGS} -pg -O3$/;"	m
CFLAGS	deps/tinyxml/Makefile	/^CFLAGS   := ${CFLAGS}   ${DEFS}$/;"	m
CGem	SessionServer/libsessionserver/Gem.cpp	/^CGem::CGem()$/;"	f	class:CGem
CGem	SessionServer/libsessionserver/SessionServer.h	/^class CGem : public zEntry$/;"	c
CGemM	SessionServer/libsessionserver/Gem.cpp	/^CGemM::CGemM()$/;"	f	class:CGemM
CGemM	SessionServer/libsessionserver/SessionServer.h	/^class CGemM:public zEntryManager<zEntryTempID>,$/;"	c
CGraceUser	SessionServer/libsessionserver/SessionManager.cpp	/^    CGraceUser()$/;"	f	class:CGraceUser
CGraceUser	SessionServer/libsessionserver/SessionManager.cpp	/^    CGraceUser(const CGraceUser& ref)$/;"	f	class:CGraceUser
CGraceUser	SessionServer/libsessionserver/SessionManager.cpp	/^class CGraceUser$/;"	c	file:
CHANGENAME_CARTOON_PARA	base/include/csCommon.h	9619;"	d
CHANGE_ARMY_NAME_PARA	base/include/csCommon.h	6929;"	d
CHANGE_SCENE_WRITEBACK	base/recordcmd.h	/^			CHANGE_SCENE_WRITEBACK,$/;"	e	enum:Cmd::Record::WriteBack_Type
CHARBASE_DITAO	base/include/csCommon.h	3545;"	d
CHARBASE_EXP125	base/include/csCommon.h	3542;"	d
CHARBASE_EXP150	base/include/csCommon.h	3543;"	d
CHARBASE_EXP175	base/include/csCommon.h	3544;"	d
CHARBASE_FORBID	base/include/csCommon.h	3540;"	d
CHARBASE_OK	base/include/csCommon.h	3539;"	d
CHARBASE_SHENTAO	base/include/csCommon.h	3547;"	d
CHARBASE_TIANTAO	base/include/csCommon.h	3546;"	d
CHARBASE_VIP	base/include/csCommon.h	3541;"	d
CHARGE_CARTOON_PARA	base/include/csCommon.h	9685;"	d
CHAR_PER_BLOCK	base/src/codeLib.c	95;"	d	file:
CHASE_ATTACK	SceneServer/libscenesserver/SceneServer1.h	/^    CHASE_ATTACK,   \/\/\/ ∏˙◊Ÿπ•ª˜◊¥Ã¨$/;"	e	enum:SceneNpc::SceneNpcChase
CHASE_NOATTACK	SceneServer/libscenesserver/SceneServer1.h	/^    CHASE_NOATTACK    \/\/\/ ∆’Õ®∏˙◊Ÿ◊¥Ã¨$/;"	e	enum:SceneNpc::SceneNpcChase
CHASE_NONE	SceneServer/libscenesserver/SceneServer1.h	/^    CHASE_NONE,     \/\/\/ √ª”–∏˙◊Ÿ◊¥Ã¨$/;"	e	enum:SceneNpc::SceneNpcChase
CHAT_COMMON_MINI_PARA	base/include/csCommon.h	12396;"	d
CHAT_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
CHECK	GatewayServer/old_back/GatewayServer.h	/^	typedef std::map< int,ICmdChecker<int>* > CHECK;$/;"	t	class:CheckerTable
CHECK_OUT	SceneServer/libscenesserver/SceneUser.cpp	2813;"	d	file:
CItmeCoolTime	SceneServer/libscenesserver/ItemCoolTime.cpp	/^CItmeCoolTime::CItmeCoolTime()$/;"	f	class:CItmeCoolTime
CItmeCoolTime	SceneServer/libscenesserver/ItemCoolTime.h	/^class CItmeCoolTime$/;"	c
CLEARPOINT_LIMIT_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4375;"	d
CLEARPOINT_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4114;"	d
CLEARUSERSKILLPOINT_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	4125;"	d
CLEN	base/src/getopt.c	1406;"	d	file:
CLIENT_SELETCT_COUNTRY	base/include/csCommon.h	/^/;"	m	namespace:Cmd
CMD_BILL	base/supercmd.h	/^		const BYTE CMD_BILL = 3;$/;"	m	namespace:Cmd::Super
CMD_COUNTRYONLINE	base/supercmd.h	/^		const BYTE CMD_COUNTRYONLINE = 166;$/;"	m	namespace:Cmd::Super
CMD_FORWARD	base/billcmd.h	/^		const BYTE CMD_FORWARD = 3;$/;"	m	namespace:Cmd::Bill
CMD_FORWARD	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
CMD_FORWARD	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_GATE	base/billcmd.h	/^		const BYTE CMD_GATE = 2;$/;"	m	namespace:Cmd::Bill
CMD_GATE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
CMD_GATE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_GATE	base/recordcmd.h	/^		const BYTE CMD_GATE = 2;$/;"	m	namespace:Cmd::Record
CMD_GATE	base/scenecmd.h	/^		const BYTE CMD_GATE = 2;$/;"	m	namespace:Cmd::Scene
CMD_GATE	base/sessioncmd.h	/^		const BYTE CMD_GATE = 2;$/;"	m	namespace:Cmd::Session
CMD_GATEWAY	base/supercmd.h	/^		const BYTE CMD_GATEWAY = 4;$/;"	m	namespace:Cmd::Super
CMD_GMTOOL	base/gmtoolcmd.h	/^		const BYTE CMD_GMTOOL = 128;$/;"	m	namespace:Cmd::GmTool
CMD_GMTOOL	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_GYLIST	base/flcmd.h	/^		const BYTE CMD_GYLIST = 2;$/;"	m	namespace:Cmd::FL
CMD_LOGIN	base/billcmd.h	/^		const BYTE CMD_LOGIN = 1;$/;"	m	namespace:Cmd::Bill
CMD_LOGIN	base/flcmd.h	/^		const BYTE CMD_LOGIN = 1;$/;"	m	namespace:Cmd::FL
CMD_LOGIN	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
CMD_LOGIN	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_LOGIN	base/recordcmd.h	/^		const BYTE CMD_LOGIN = 1;$/;"	m	namespace:Cmd::Record
CMD_LOGIN	base/scenecmd.h	/^		const BYTE CMD_LOGIN = 1;$/;"	m	namespace:Cmd::Scene
CMD_LOGIN	base/sessioncmd.h	/^		const BYTE CMD_LOGIN = 1;$/;"	m	namespace:Cmd::Session
CMD_NULL	base/x_nullcmd.h	/^	const BYTE CMD_NULL = 0;$/;"	m	namespace:Cmd
CMD_REDEEM	base/billcmd.h	/^		const BYTE CMD_REDEEM = 4;$/;"	m	namespace:Cmd::Bill
CMD_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
CMD_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE	base/recordcmd.h	/^		const BYTE CMD_SCENE = 3;$/;"	m	namespace:Cmd::Record
CMD_SCENE	base/scenecmd.h	/^		const BYTE CMD_SCENE = 3;$/;"	m	namespace:Cmd::Scene
CMD_SCENE	base/sessioncmd.h	/^		const BYTE CMD_SCENE = 3;$/;"	m	namespace:Cmd::Session
CMD_SCENE_ARMY	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_COUNTRY	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_DARE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_GEM	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_RECOMMEND	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_SEPT	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_SHUTDOWN	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_SPORTS	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_TMP	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SCENE_UNION	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SESSION	base/flcmd.h	/^		const BYTE CMD_SESSION = 3;$/;"	m	namespace:Cmd::FL
CMD_SESSION	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
CMD_SESSION	base/recordcmd.h	/^		const BYTE CMD_SESSION = 4;$/;"	m	namespace:Cmd::Record
CMD_SESSION	base/scenecmd.h	/^		const BYTE CMD_SESSION = 4;$/;"	m	namespace:Cmd::Scene
CMD_SESSION	base/supercmd.h	/^		const BYTE CMD_SESSION = 5;$/;"	m	namespace:Cmd::Super
CMD_STARTUP	base/supercmd.h	/^		const BYTE CMD_STARTUP = 1;$/;"	m	namespace:Cmd::Super
CMD_STOCK	base/billcmd.h	/^		const BYTE CMD_STOCK = 5;$/;"	m	namespace:Cmd::Bill
CMD_SUPER	base/recordcmd.h	/^		const BYTE CMD_SUPER = 5;$/;"	m	namespace:Cmd::Record
CMD_SUPER	base/scenecmd.h	/^		const BYTE CMD_SUPER = 5;$/;"	m	namespace:Cmd::Scene
CMD_SUPER	base/sessioncmd.h	/^		const BYTE CMD_SUPER = 5;$/;"	m	namespace:Cmd::Session
CNpcDareM	SessionServer/libsessionserver/NpcDare.cpp	/^CNpcDareM::CNpcDareM()$/;"	f	class:CNpcDareM
CNpcDareM	SessionServer/libsessionserver/SessionServer.h	/^class CNpcDareM$/;"	c
CNpcDareObj	SessionServer/libsessionserver/SessionServer.h	/^class CNpcDareObj$/;"	c
COMMIT_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5061;"	d
COMMIT_VOTE_PARA	base/include/csCommon.h	6731;"	d
COMMON_MINI_PARA	base/include/csCommon.h	11972;"	d
COMPOSE	SceneServer/libscenesserver/SceneServer1.h	/^    COMPOSE = 1,$/;"	e	enum:Base::ReuildType
COMPOSE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Base::ReuildType
COMPOSEITEM_PROPERTY_USERCMD_PARA	base/include/csCommon.h	3911;"	d
COMPOSE_SOUL_STONE_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4158;"	d
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	1673;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	1674;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	1727;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	1728;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	583;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	643;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	644;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	745;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	746;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	771;"	d	file:
COMPUTE	SceneServer/libscenesserver/RebuildObject.cpp	772;"	d	file:
COMPUTE_L	SceneServer/libscenesserver/SceneServer1.h	2364;"	d
COMPUTE_L	SceneServer/libscenesserver/ScenesServer.h	11910;"	d
COMPUTE_R	SceneServer/libscenesserver/SceneServer1.h	2363;"	d
COMPUTE_R	SceneServer/libscenesserver/ScenesServer.h	11909;"	d
COMP_SOUL_STONE_ID	SceneServer/libscenesserver/SceneServer1.h	/^    COMP_SOUL_STONE_ID = 677,$/;"	e	enum:RebuildObject::__anon102
COMP_SOUL_STONE_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:RebuildObject::__anon93
CONFIRM_SEARCHER_PARA	base/include/csCommon.h	6386;"	d
CONF_LOGIN	BillServer/BillUser.h	/^      CONF_LOGIN,   \/**< login to gatewayserver success*\/$/;"	e	enum:BillUser::LoginState
CONF_LOGIN	BillServer/old_back/BillServer.h	/^      CONF_LOGIN,   \/**< µ«¬ΩÕ¯πÿ∑˛ŒÒ∆˜—È÷§“—æ≠≥…π¶ *\/$/;"	e	enum:BillUser::LoginState
CONF_LOGIN	BillServer/old_back/BillServer.h	/^    CONF_LOGIN      \/**< µ«¬ΩÕ¯πÿ∑˛ŒÒ∆˜—È÷§“—æ≠≥…π¶ *\/$/;"	e	enum:BillInfo::__anon2
CONF_LOGOUT	BillServer/BillUser.h	/^      CONF_LOGOUT, \/**< wait to quit *\/$/;"	e	enum:BillUser::LoginState
CONF_LOGOUT	BillServer/old_back/BillServer.h	/^      CONF_LOGOUT, \/**< µ»¥˝ÕÀ≥ˆ *\/$/;"	e	enum:BillUser::LoginState
CONSIGN_CANCEL_GOLD_STOCKPARA	base/include/csCommon.h	8878;"	d
CONSIGN_CANCEL_MONEY_STOCKPARA	base/include/csCommon.h	8889;"	d
CONSIGN_CARTOON_PARA	base/include/csCommon.h	9717;"	d
CONSIGN_CLEAN_LIST_STOCKPARA	base/include/csCommon.h	9138;"	d
CONSIGN_GOLD_LIST_STOCKPARA	base/include/csCommon.h	8921;"	d
CONSIGN_GOLD_STOCKPARA	base/include/csCommon.h	8857;"	d
CONSIGN_MONEY_LIST_STOCKPARA	base/include/csCommon.h	8932;"	d
CONSIGN_MONEY_STOCKPARA	base/include/csCommon.h	8868;"	d
CONSIGN_RET_CARTOON_PARA	base/include/csCommon.h	9728;"	d
CONTINUE_MINI_PARA	base/include/csCommon.h	12723;"	d
COUNTRY_ALLY_NPC_HORTATION_MATERIAL	SessionServer/libsessionserver/SessionServer.h	/^const int COUNTRY_ALLY_NPC_HORTATION_MATERIAL = 1000; \/\/ 1000∏ˆµ•ŒªµƒŒÔ◊ $/;"	v
COUNTRY_ALLY_NPC_HORTATION_MONEY	SessionServer/libsessionserver/SessionServer.h	/^const int COUNTRY_ALLY_NPC_HORTATION_MONEY = 40 * 10000; \/\/ 40 ∂ß$/;"	v
COUNTRY_EMPEROR_MAIN_GEN	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD COUNTRY_EMPEROR_MAIN_GEN = 58203;$/;"	v
COUNTRY_EMPEROR_SEC_GEN	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD COUNTRY_EMPEROR_SEC_GEN = 58204;$/;"	v
COUNTRY_KING_MAIN_FLAG	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD COUNTRY_KING_MAIN_FLAG = 58005;$/;"	v
COUNTRY_KING_SEC_FLAG	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD COUNTRY_KING_SEC_FLAG = 58006;$/;"	v
COUNTRY_MAIN_FLAG	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD COUNTRY_MAIN_FLAG = 58001;$/;"	v
COUNTRY_MAIN_GEN	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD COUNTRY_MAIN_GEN = 58200;$/;"	v
COUNTRY_MATERIAL	SessionServer/libsessionserver/SessionServer.h	/^const int COUNTRY_MATERIAL = 0; \/\/ π˙º“≤÷ø‚÷–µƒŒÔ◊ $/;"	v
COUNTRY_MONEY	SessionServer/libsessionserver/SessionServer.h	/^const int COUNTRY_MONEY = 2; \/\/ π˙º“≤÷ø‚÷–µƒ“¯¡Ω$/;"	v
COUNTRY_NOTE_PARA	base/include/csCommon.h	6442;"	d
COUNTRY_SEC_FLAG	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD COUNTRY_SEC_FLAG  =  58002;$/;"	v
COUNTRY_SEC_GEN	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD COUNTRY_SEC_GEN  = 58201;$/;"	v
COUNTRY_STOCK	SessionServer/libsessionserver/SessionServer.h	/^const int COUNTRY_STOCK = 1;  \/\/ π˙º“≤÷ø‚÷–µƒ‘≠¡œ $/;"	v
COUNTRY_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
COUNT_TIME	GatewayServer/old_back/GatewayServer.h	/^		COUNT_TIME = interval*count,$/;"	e	enum:percent_up_off::__anon214
COfflineMessage	SessionServer/libsessionserver/SessionServer.h	/^class COfflineMessage$/;"	c
CP_ACP	base/include/codeLib.h	38;"	d
CP_UTF8	base/include/codeLib.h	39;"	d
CPothunter	SessionServer/libsessionserver/SessionServer.h	/^    CPothunter()$/;"	f	class:CPothunter
CPothunter	SessionServer/libsessionserver/SessionServer.h	/^class CPothunter$/;"	c
CQueueManager	SessionServer/libsessionserver/Queuing.cpp	/^CQueueManager::CQueueManager()$/;"	f	class:CQueueManager
CQueueManager	SessionServer/libsessionserver/SessionServer.h	/^class CQueueManager$/;"	c
CQueuingManager	SessionServer/libsessionserver/Queuing.cpp	/^CQueuingManager::CQueuingManager()$/;"	f	class:CQueuingManager
CQueuingManager	SessionServer/libsessionserver/SessionServer.h	/^class CQueuingManager$/;"	c
CQuiz	SessionServer/libsessionserver/Quiz.cpp	/^CQuiz::CQuiz()$/;"	f	class:CQuiz
CQuiz	SessionServer/libsessionserver/Quiz.cpp	/^CQuiz::CQuiz(DWORD active_time,DWORD ready_time)$/;"	f	class:CQuiz
CQuiz	SessionServer/libsessionserver/SessionServer.h	/^class CQuiz:public zEntry$/;"	c
CQuizM	SessionServer/libsessionserver/Quiz.cpp	/^CQuizM::CQuizM()$/;"	f	class:CQuizM
CQuizM	SessionServer/libsessionserver/SessionServer.h	/^class CQuizM : public zEntryManager<zEntryTempID>,$/;"	c
CQuizPersonal	SessionServer/libsessionserver/Quiz.cpp	/^CQuizPersonal::CQuizPersonal() : CQuiz(0,0)$/;"	f	class:CQuizPersonal
CQuizPersonal	SessionServer/libsessionserver/Quiz.cpp	/^CQuizPersonal::CQuizPersonal(DWORD active_time,DWORD ready_time)$/;"	f	class:CQuizPersonal
CQuizPersonal	SessionServer/libsessionserver/SessionServer.h	/^class CQuizPersonal : public CQuiz$/;"	c
CQuizWorld	SessionServer/libsessionserver/Quiz.cpp	/^CQuizWorld::CQuizWorld() : CQuiz(0,0)$/;"	f	class:CQuizWorld
CQuizWorld	SessionServer/libsessionserver/Quiz.cpp	/^CQuizWorld::CQuizWorld(DWORD active_time,DWORD ready_time,BYTE subject_type) : CQuiz(active_time,ready_time)$/;"	f	class:CQuizWorld
CQuizWorld	SessionServer/libsessionserver/SessionServer.h	/^class CQuizWorld : public CQuiz$/;"	c
CREATE_ALLY_NEED_MONEY	SessionServer/libsessionserver/SessionServer.h	/^const int CREATE_ALLY_NEED_MONEY = 200000; \/\/ 20∂ß$/;"	v
CREATE_ARMY_PARA	base/include/csCommon.h	6760;"	d
CREATE_CHANNEL_USERCMD_PARAMETER	base/include/csCommon.h	4719;"	d
CREATE_DARE_NEED_PRICE_GOLD	base/include/srvEngine.h	/^	const uint32_t CREATE_DARE_NEED_PRICE_GOLD = 500; \/\/ ÂØπÊàòÊâÄÊâ£ÈáëÈ¢ù$/;"	m	namespace:DareDef
CREATE_NPCDARE_NEED_ITEM	base/include/srvEngine.h	/^	const uint32_t CREATE_NPCDARE_NEED_ITEM = 738; \/\/ ÂèëËµ∑ÂØπÊàòÈúÄË¶ÅÁöÑÈÅìÂÖ∑ Âú∞ÁæΩ‰ª§$/;"	m	namespace:NpcDareDef
CREATE_SCHOOL_REQUEST_ITEM_ID	base/include/csCommon.h	327;"	d
CREATE_SCHOOL_REQUEST_LEVEL	base/include/csCommon.h	326;"	d
CREATE_SCHOOL_REQUEST_PRICE_GOLD	base/include/csCommon.h	328;"	d
CREATE_SEPT_NEED_LEVEL	base/include/csCommon.h	/^/;"	m	namespace:SeptDef
CREATE_SEPT_NEED_MAN_NUM	base/include/csCommon.h	/^/;"	m	namespace:SeptDef
CREATE_SEPT_NEED_PRICE_GOLD	base/include/csCommon.h	/^/;"	m	namespace:SeptDef
CREATE_UNION_CITY_DARE_NEED_PRICE_MONEY	base/include/srvEngine.h	/^	const uint32_t CREATE_UNION_CITY_DARE_NEED_PRICE_MONEY = 20000; \/\/‰∏§Èî≠$/;"	m	namespace:DareDef
CREATE_UNION_KING_CITY_DARE_NEED_PRICE_MONEY	base/include/srvEngine.h	/^	const uint32_t CREATE_UNION_KING_CITY_DARE_NEED_PRICE_MONEY = 50000; \/\/‰∫îÈî≠$/;"	m	namespace:DareDef
CREATE_UNION_NEED_ITEM_ID	base/include/csCommon.h	/^/;"	m	namespace:UnionDef
CREATE_UNION_NEED_LEVEL	base/include/csCommon.h	/^/;"	m	namespace:UnionDef
CREATE_UNION_NEED_MAN_NUM	base/include/csCommon.h	/^/;"	m	namespace:UnionDef
CREATE_UNION_NEED_PRICE_GOLD	base/include/csCommon.h	/^/;"	m	namespace:UnionDef
CREATE_UNION_NEED_VOTE	base/include/csCommon.h	/^/;"	m	namespace:UnionDef
CREATE_UNION_NEUTRAL_CITY_DARE_NEED_PRICE_MONEY	base/include/srvEngine.h	/^	const uint32_t CREATE_UNION_NEUTRAL_CITY_DARE_NEED_PRICE_MONEY = 50000; \/\/‰∫îÈî≠$/;"	m	namespace:DareDef
CRelation	SessionServer/libsessionserver/RelationManager.cpp	/^CRelation::CRelation()$/;"	f	class:CRelation
CRelation	SessionServer/libsessionserver/SessionServer.h	/^struct CRelation : public zEntry$/;"	s
CRelationManager	SessionServer/libsessionserver/SessionServer.h	/^class CRelationManager : public zEntryManager<zEntryID,zEntryName>$/;"	c
CSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchool::CSchool()$/;"	f	class:CSchool
CSchool	SessionServer/libsessionserver/SessionServer.h	/^class CSchool : public zEntryManager<zEntryID,zEntryName>,public zEntry$/;"	c
CSchoolM	SessionServer/libsessionserver/SessionServer.h	/^class CSchoolM : public zEntryManager<zEntryID,zEntryName>$/;"	c
CSchoolMember	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember::CSchoolMember(CSchool *pSchool,UserSession *pUser)$/;"	f	class:CSchoolMember
CSchoolMember	SessionServer/libsessionserver/SessionServer.h	/^class CSchoolMember : public zEntry$/;"	c
CSchoolMemberListCallback	SessionServer/libsessionserver/SessionServer.h	/^class CSchoolMemberListCallback$/;"	c
CSendSchoolCallback	SessionServer/libsessionserver/SessionServer.h	/^class CSendSchoolCallback$/;"	c
CSept	SessionServer/libsessionserver/Sept.cpp	/^CSept::CSept()$/;"	f	class:CSept
CSept	SessionServer/libsessionserver/SessionServer.h	/^class CSept:public zEntryManager<zEntryID,zEntryName>,public zEntry$/;"	c
CSeptM	SessionServer/libsessionserver/Sept.cpp	/^CSeptM::CSeptM()$/;"	f	class:CSeptM
CSeptM	SessionServer/libsessionserver/SessionServer.h	/^class CSeptM:public zEntryManager<zEntryID,zEntryName>$/;"	c
CSeptMember	SessionServer/libsessionserver/Sept.cpp	/^CSeptMember::CSeptMember()$/;"	f	class:CSeptMember
CSeptMember	SessionServer/libsessionserver/SessionServer.h	/^struct CSeptMember:public zEntry$/;"	s
CSeptSort	SessionServer/libsessionserver/Sept.cpp	/^    CSeptSort()$/;"	f	class:CSeptSort
CSeptSort	SessionServer/libsessionserver/Sept.cpp	/^    CSeptSort(const CSeptSort& ref)$/;"	f	class:CSeptSort
CSeptSort	SessionServer/libsessionserver/Sept.cpp	/^class CSeptSort$/;"	c	file:
CSortM	SessionServer/libsessionserver/SessionServer.h	/^class CSortM$/;"	c
CSortM	SessionServer/libsessionserver/Sort.cpp	/^CSortM::CSortM()$/;"	f	class:CSortM
CStr	deps/tinyxml/tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:TiXmlPrinter
CSubject	SessionServer/libsessionserver/SessionServer.h	/^    CSubject()$/;"	f	class:CSubject
CSubject	SessionServer/libsessionserver/SessionServer.h	/^    CSubject(const CSubject& ref)$/;"	f	class:CSubject
CSubject	SessionServer/libsessionserver/SessionServer.h	/^class CSubject$/;"	c
CSubjectM	SessionServer/libsessionserver/Quiz.cpp	/^CSubjectM::CSubjectM()$/;"	f	class:CSubjectM
CSubjectM	SessionServer/libsessionserver/SessionServer.h	/^class CSubjectM : public Singleton<CSubjectM>$/;"	c
CTech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
CTech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CTech
CTech	SessionServer/libsessionserver/CountryManager.cpp	/^CTech::CTech()$/;"	f	class:CTech
CTech	SessionServer/libsessionserver/SessionServer.h	/^class CTech$/;"	c
CTechMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::CountryTech
CTechMap	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,CTech*> CTechMap;$/;"	t	class:CCountry
CUnion	SessionServer/libsessionserver/SessionServer.h	/^class CUnion:public zEntryManager<zEntryID,zEntryName>,public zEntry$/;"	c
CUnion	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
CUnionM	SessionServer/libsessionserver/SessionServer.h	/^class CUnionM:public zEntryManager<zEntryID,zEntryName>,$/;"	c
CUnionM	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
CUnionMember	SessionServer/libsessionserver/SessionServer.h	/^struct CUnionMember:public zEntry$/;"	s
CUnionMember	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
CUnionSort	SessionServer/libsessionserver/Union.cpp	/^/;"	c	file:
CUnionSort	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionSort
CVote	SessionServer/libsessionserver/SessionServer.h	/^class CVote$/;"	c
CVote	SessionServer/libsessionserver/Vote.cpp	/^CVote::CVote()$/;"	f	class:CVote
CVoteItem	SessionServer/libsessionserver/SessionServer.h	/^class CVoteItem$/;"	c
CVoteItem	SessionServer/libsessionserver/Vote.cpp	/^CVoteItem::CVoteItem()$/;"	f	class:CVoteItem
CVoteM	SessionServer/libsessionserver/SessionServer.h	/^class CVoteM :   public Singleton<CVoteM>$/;"	c
CVoteM	SessionServer/libsessionserver/Vote.cpp	/^CVoteM::CVoteM()$/;"	f	class:CVoteM
CXX	Makefile	/^export CXX=g++$/;"	m
CXX	deps/tinyxml/Makefile	/^CXX    := g++$/;"	m
CXX	tmp/base2/makefile	/^CXX = g++$/;"	m
CXXFLAGS	BillServer/Makefile	/^CXXFLAGS = $(SEAL_COMPILE_OPT)  -D_GNU_SOURCE -D_REENTRANT $(header_dir)$/;"	m
CXXFLAGS	FLServer/Makefile	/^CXXFLAGS = $(SEAL_COMPILE_OPT)  -Wall -D_GNU_SOURCE -D_REENTRANT $(header_dir)$/;"	m
CXXFLAGS	GatewayServer/Makefile	/^CXXFLAGS = $(SEAL_COMPILE_OPT)  -D_GNU_SOURCE -D_REENTRANT $(header_dir)$/;"	m
CXXFLAGS	RecordServer/Makefile	/^CXXFLAGS = $(SEAL_COMPILE_OPT)  -D_GNU_SOURCE -D_REENTRANT $(header_dir)$/;"	m
CXXFLAGS	SceneServer/Makefile	/^CXXFLAGS = $(SEAL_COMPILE_OPT)  -D_GNU_SOURCE -D_REENTRANT $(header_dir)$/;"	m
CXXFLAGS	SessionServer/Makefile	/^CXXFLAGS = $(SEAL_COMPILE_OPT)  -D_GNU_SOURCE -D_REENTRANT $(header_dir)$/;"	m
CXXFLAGS	SuperServer/Makefile	/^CXXFLAGS = $(SEAL_COMPILE_OPT)  -D_GNU_SOURCE -D_REENTRANT $(header_dir)$/;"	m
CXXFLAGS	base/Makefile	/^CXXFLAGS = $(compile_opt) $(HEADER_DIR) -D_REENTRANT -D_GNU_SOURCE$/;"	m
CXXFLAGS	client/Makefile	/^CXXFLAGS = $(SEAL_COMPILE_OPT)  -Wall -D_GNU_SOURCE -D_REENTRANT $(header_dir)$/;"	m
CXXFLAGS	deps/tinyxml/Makefile	/^   CXXFLAGS     := ${DEBUG_CXXFLAGS}$/;"	m
CXXFLAGS	deps/tinyxml/Makefile	/^   CXXFLAGS     := ${RELEASE_CXXFLAGS}$/;"	m
CXXFLAGS	deps/tinyxml/Makefile	/^   CXXFLAGS := ${CXXFLAGS} -pg -O3$/;"	m
CXXFLAGS	deps/tinyxml/Makefile	/^CXXFLAGS := ${CXXFLAGS} ${DEFS}$/;"	m
CXXFLAGS	tmp/base2/makefile	/^CXXFLAGS = $(compile_opt) $(HEADER_DIR) -D_REENTRANT $/;"	m
CXXLFLAGS	BillServer/Makefile	/^CXXLFLAGS = $(SEAL_COMPILE_OPT) $(lib_dir) $(LIBS)$/;"	m
CXXLFLAGS	FLServer/Makefile	/^CXXLFLAGS = $(SEAL_COMPILE_OPT) -Wall $(lib_dir) $(LIBS)$/;"	m
CXXLFLAGS	GatewayServer/Makefile	/^CXXLFLAGS = $(SEAL_COMPILE_OPT) $(lib_dir) $(LIBS)$/;"	m
CXXLFLAGS	RecordServer/Makefile	/^CXXLFLAGS = $(SEAL_COMPILE_OPT) $(lib_dir) $(LIBS)$/;"	m
CXXLFLAGS	SceneServer/Makefile	/^CXXLFLAGS = $(SEAL_COMPILE_OPT) $(lib_dir) $(LIBS)$/;"	m
CXXLFLAGS	SessionServer/Makefile	/^CXXLFLAGS = $(SEAL_COMPILE_OPT) $(lib_dir) $(LIBS)$/;"	m
CXXLFLAGS	SuperServer/Makefile	/^CXXLFLAGS = $(SEAL_COMPILE_OPT) -Wall $(lib_dir) $(LIBS)$/;"	m
CXXLFLAGS	base/Makefile	/^CXXLFLAGS = $(compile_opt) $(LIB_DIR) $(LIBS)$/;"	m
CXXLFLAGS	client/Makefile	/^CXXLFLAGS = $(SEAL_COMPILE_OPT) -Wall $(lib_dir) $(LIBS)$/;"	m
CXXLFLAGS	tmp/base2/makefile	/^CXXLFLAGS = $(compile_opt) $(LIB_DIR) $(LIBS)$/;"	m
CacheContainer	BillServer/old_back/BillServer.h	/^    typedef hash_map<const char *,BillData *> CacheContainer;$/;"	t	class:BillCache
Camp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
Camp	SessionServer/libsessionserver/SessionServer.h	/^	std::map<DWORD, tyCamp> Camp;$/;"	m	class:CQueuingManager
CampData	SessionServer/libsessionserver/SessionServer.h	/^struct CampData$/;"	s
CampID	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD CampID;$/;"	m	struct:BCampData
CampMembe	SceneServer/libscenesserver/SceneBattlefiel.h	/^	std::vector<stCampMember> CampMembe;$/;"	m	struct:BCampData
CampNum	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD CampNum;$/;"	m	class:GangScene
CampPos	SceneServer/libscenesserver/SceneBattlefiel.h	/^	std::vector<zPos> CampPos;$/;"	m	class:GangScene
CampPos	SceneServer/libscenesserver/SceneBattlefiel.h	/^	zPos CampPos;$/;"	m	struct:BCampData
CampRel	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD CampRel;$/;"	m	class:GangScene
CampThisID	SceneServer/libscenesserver/SceneBattlefiel.h	/^	std::map<BYTE, DWORD> CampThisID;$/;"	m	class:GangScene
CampUserNum	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD CampUserNum;$/;"	m	class:GangScene
CampVictoryRun	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::CampVictoryRun()$/;"	f	class:GangScene
Capacity	SceneServer/libscenesserver/MiniClient.cpp	/^    Capacity(SceneUser* user,DWORD id,DWORD level) : _user(user),_id(id),_level(level),_num(0)$/;"	f	struct:Capacity
Capacity	SceneServer/libscenesserver/MiniClient.cpp	/^struct Capacity : public PackageCallback$/;"	s	file:
CaptionCondition	SceneServer/libscenesserver/SceneServer1.h	/^  CaptionCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:CaptionCondition
CaptionCondition	SceneServer/libscenesserver/SceneServer1.h	/^class CaptionCondition : public TeamCondition$/;"	c
CaptionCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
CaptionCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:CaptionCondition
Card	base/include/csCommon.h	/^/;"	c	namespace:Cmd::Cmd
Card	base/include/csCommon.h	/^/;"	f	class:Cmd::Cmd::Card
CardList	tmp/MiniServer/MiniServer.h	/^typedef std::map<Cmd::Card,DWORD> CardList;$/;"	t
CardPattern	tmp/MiniServer/MiniServer.h	/^    CardPattern():serialNum(1),unitNum(1),bomb(0),missile(0),add(0),_valid(false){}$/;"	f	class:CardPattern
CardPattern	tmp/MiniServer/MiniServer.h	/^class CardPattern$/;"	c
Card_num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
CarryObject	base/include/srvEngine.h	/^	CarryObject()$/;"	f	struct:CarryObject
CarryObject	base/include/srvEngine.h	/^struct CarryObject$/;"	s
CartoonPet	SceneServer/libscenesserver/CartoonPet.cpp	/^CartoonPet::CartoonPet(Scene *scene,zNpcB *npc,const t_NpcDefine *define,const SceneNpcType type,const SceneEntryType entrytype,zNpcB *abase) : ScenePet(scene,npc,define,type,entrytype,abase),_5_sec(5)$/;"	f	class:CartoonPet
CartoonPet	SceneServer/libscenesserver/SceneServer1.h	/^class CartoonPet : public ScenePet$/;"	c
CartoonPet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
CartoonPetService	SessionServer/libsessionserver/CartoonPetService.cpp	/^CartoonPetService::CartoonPetService()$/;"	f	class:CartoonPetService
CartoonPetService	SessionServer/libsessionserver/SessionServer.h	/^class CartoonPetService$/;"	c
ChangeLeader	SessionServer/libsessionserver/Team.cpp	/^bool GlobalTeamIndex::ChangeLeader( DWORD tempid , const char * leaberName)$/;"	f	class:GlobalTeamIndex
ChangeLeader	SessionServer/libsessionserver/Team.cpp	/^bool Team::ChangeLeader(const char * leaberName)$/;"	f	class:Team
ChangeLeaderToSession	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::ChangeLeaderToSession(char * NewLeaberName)$/;"	f	class:TeamManager
ChangeNpcID	base/include/srvEngine.h	/^	uint32_t  ChangeNpcID;     \/\/soulrate;      \/\/sky NPCÂèòË∫´ID$/;"	m	struct:zNpcB
Channel	SceneServer/libscenesserver/SceneServer1.h	/^class Channel:public zEntry$/;"	c
Channel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
ChannelM	SceneServer/libscenesserver/SceneServer1.h	/^class ChannelM:public zEntryManager< zEntryTempID,zEntryName >$/;"	c
ChannelM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
CharBase	base/charbase.h	/^struct CharBase{$/;"	s
CharBase	base/include/csCommon.h	/^/;"	s
CharInitInfo	SceneServer/libscenesserver/SceneServer1.h	/^    CharInitInfo() {};$/;"	f	class:CharInitInfo
CharInitInfo	SceneServer/libscenesserver/SceneServer1.h	/^class CharInitInfo$/;"	c
CharInitInfo	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
CharInitInfo	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::CharInitInfo
CharSave	base/include/csCommon.h	/^/;"	s
CharState	base/include/csCommon.h	/^/;"	s
CharTest	base/include/csCommon.h	/^/;"	s
CheckAllInOneScreenExec	SceneServer/libscenesserver/TeamManager.cpp	/^  CheckAllInOneScreenExec(SceneUser *pUser)$/;"	f	struct:CheckAllInOneScreenExec
CheckAllInOneScreenExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct CheckAllInOneScreenExec : public TeamMemExec$/;"	s	file:
CheckInfo	GatewayServer/old_back/GatewayServer.h	/^	CheckInfo() : _previous(0),_last(0),_packets(0)$/;"	f	class:CheckInfo
CheckInfo	GatewayServer/old_back/GatewayServer.h	/^class CheckInfo$/;"	c
CheckOfflineExec	SceneServer/libscenesserver/TeamManager.cpp	/^	CheckOfflineExec(SceneUser *u)$/;"	f	struct:CheckOfflineExec
CheckOfflineExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct CheckOfflineExec : public TeamMemExec$/;"	s	file:
CheckSexCondition	SceneServer/libscenesserver/SceneServer1.h	/^  CheckSexCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:CheckSexCondition
CheckSexCondition	SceneServer/libscenesserver/SceneServer1.h	/^class CheckSexCondition : public TeamCondition$/;"	c
CheckSexCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
CheckSexCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:CheckSexCondition
Checker	GatewayServer/old_back/GatewayServer.h	/^	typedef CmdChecker< percent_up_off<512,10,5> > Checker;$/;"	t	class:CheckerTable
CheckerTable	GatewayServer/old_back/CmdChecker.cpp	/^CheckerTable::CheckerTable()$/;"	f	class:CheckerTable
CheckerTable	GatewayServer/old_back/GatewayServer.h	/^class CheckerTable$/;"	c
Child	deps/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle
Child	deps/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle
Child	deps/tinyxml/tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle
ChildElement	deps/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle
ChildElement	deps/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle
ChildElement	deps/tinyxml/tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _value.c_str(), index ); }$/;"	f	class:TiXmlHandle
Clear	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::Team
Clear	deps/tinyxml/tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode
Clear	deps/tinyxml/tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:TiXmlCursor
ClearAllNotUnion	SceneServer/libscenesserver/SessionClient.cpp	/^	ClearAllNotUnion(DWORD unionid) : dwUnionID(unionid){};$/;"	f	struct:ClearAllNotUnion
ClearAllNotUnion	SceneServer/libscenesserver/SessionClient.cpp	/^struct ClearAllNotUnion : public zSceneEntryCallBack$/;"	s	file:
ClearError	deps/tinyxml/tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:TiXmlDocument
ClearPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::ClearPack
ClearPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
ClearStateAction	SceneServer/libscenesserver/SceneServer1.h	/^  ClearStateAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:ClearStateAction
ClearStateAction	SceneServer/libscenesserver/SceneServer1.h	/^class ClearStateAction : public TeamAction$/;"	c
ClearThis	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement
ClientConn	client/ClientConn.h	/^	ClientConn(boost::asio::io_service &ios):tcp_client(ios){$/;"	f	class:ClientConn
ClientConn	client/ClientConn.h	/^class ClientConn : public tcp_client$/;"	c
Clone	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment
Clone	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration
Clone	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument
Clone	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement
Clone	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText
Clone	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown
Club	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Card::Suit
Cmd	SceneServer/libscenesserver/SceneServer1.h	/^namespace Cmd{$/;"	n
Cmd	SceneServer/libscenesserver/ScenesServer.h	/^/;"	n
Cmd	SceneServer/libscenesserver/ScenesServer.h	/^/;"	n	namespace:O
Cmd	SuperServer/MassiveFlag.h	/^namespace Cmd$/;"	n
Cmd	base/billcmd.h	/^namespace Cmd$/;"	n
Cmd	base/command.h	/^namespace Cmd$/;"	n
Cmd	base/flcmd.h	/^namespace Cmd$/;"	n
Cmd	base/gmtoolcmd.h	/^namespace Cmd$/;"	n
Cmd	base/include/csBox.h	/^namespace Cmd$/;"	n
Cmd	base/include/csCommon.h	/^/;"	n
Cmd	base/include/csCommon.h	/^/;"	n	namespace:Cmd
Cmd	base/include/csTurn.h	/^namespace Cmd$/;"	n
Cmd	base/recordcmd.h	/^namespace Cmd$/;"	n
Cmd	base/scenecmd.h	/^namespace Cmd$/;"	n
Cmd	base/sessioncmd.h	/^namespace Cmd$/;"	n
Cmd	base/supercmd.h	/^namespace Cmd$/;"	n
Cmd	base/x_nullcmd.h	/^namespace Cmd$/;"	n
CmdAnalysis	base/CmdAnalysis.h	/^	CmdAnalysis(const char *disc,uint32_t time_secs):_log_timer(time_secs)$/;"	f	struct:CmdAnalysis
CmdAnalysis	base/CmdAnalysis.h	/^struct CmdAnalysis$/;"	s
CmdBuffer_wrapper	base/src/x_buffer.h	/^	CmdBuffer_wrapper() : cmd_size(sizeof(type)),max_size(size)\/\/ : cnt(NULL)$/;"	f	class:CmdBuffer_wrapper
CmdBuffer_wrapper	base/src/x_buffer.h	/^class CmdBuffer_wrapper$/;"	c
CmdChecker	GatewayServer/old_back/GatewayServer.h	/^	CmdChecker()$/;"	f	class:CmdChecker
CmdChecker	GatewayServer/old_back/GatewayServer.h	/^class CmdChecker : public ICmdChecker<I>$/;"	c
CmdPair	base/include/srvEngine.h	/^typedef std::pair<uint32_t,BYTE *> CmdPair;$/;"	t
CmdPair	base/x_msgqueue.h	/^typedef std::pair<uint32_t,BYTE *> CmdPair;$/;"	t
CmdQueue	base/include/srvEngine.h	/^	typedef std::pair<volatile bool,CmdPair > CmdQueue;$/;"	t	class:MsgQueue
CmdQueue	base/x_msgqueue.h	/^	typedef std::pair<volatile bool,CmdPair > CmdQueue;$/;"	t	class:MsgQueue
CmdTey	base/include/csBox.h	/^	int CmdTey;$/;"	m	struct:Cmd::stHorseTrainingUserCmd
ColorObjectBase	base/include/srvEngine.h	/^struct ColorObjectBase{$/;"	s
Column	deps/tinyxml/tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:TiXmlBase
Coma	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
Combination	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::Combination
Combination	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
Compare	SceneServer/libscenesserver/SceneServer1.h	/^    Compare(ScenesParser& p) : _p(p)$/;"	f	class:MakeFunction::Compare
Compare	SceneServer/libscenesserver/SceneServer1.h	/^  class Compare : public Maker<Condition>$/;"	c	namespace:MakeFunction
Compare	SessionServer/libsessionserver/SessionServer.h	/^    struct Compare$/;"	s	class:UserSessionManager
ComparisonRollnum	SceneServer/libscenesserver/TeamManager.cpp	/^TeamMember * TeamManager::ComparisonRollnum()$/;"	f	class:TeamManager
ComparisonRollnumExec	SceneServer/libscenesserver/TeamManager.cpp	/^	ComparisonRollnumExec()$/;"	f	struct:ComparisonRollnumExec
ComparisonRollnumExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct ComparisonRollnumExec : public TeamMemExec$/;"	s	file:
Compulsory_Resurrection	SceneServer/libscenesserver/SceneBattlefiel.h	/^	Compulsory_Resurrection = 0,$/;"	e	enum:enReliveType
Condition	SceneServer/libscenesserver/SceneServer1.h	/^class Condition$/;"	c
Condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ConditionFactory	SceneServer/libscenesserver/SceneServer1.h	/^typedef ProductFactory<std::string,MakeFunction::Maker<Condition> > ConditionFactory;$/;"	t
ConfraternityCondition	SceneServer/libscenesserver/SceneServer1.h	/^  ConfraternityCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:ConfraternityCondition
ConfraternityCondition	SceneServer/libscenesserver/SceneServer1.h	/^class ConfraternityCondition : public TeamCondition$/;"	c
ConfraternityCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ConfraternityCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ConfraternityCondition
ConnState	base/include/srvEngine.h	/^	enum ConnState$/;"	g	class:x_tcp_clientTask
Consign	BillServer/old_back/BillServer.h	/^    Consign()$/;"	f	class:Consign
Consign	BillServer/old_back/BillServer.h	/^class Consign$/;"	c
ConsignGoldManager	BillServer/old_back/BillServer.h	/^class ConsignGoldManager :public Consign$/;"	c
ConsignGoldManager	BillServer/old_back/StockConsign.cpp	/^ConsignGoldManager::ConsignGoldManager()$/;"	f	class:ConsignGoldManager
ConsignHistoryManager	BillServer/old_back/BillServer.h	/^class ConsignHistoryManager$/;"	c
ConsignHistoryManager	BillServer/old_back/StockConsign.cpp	/^ConsignHistoryManager::ConsignHistoryManager():_one_min(60)$/;"	f	class:ConsignHistoryManager
ConsignMoneyManager	BillServer/old_back/BillServer.h	/^class ConsignMoneyManager :public Consign$/;"	c
ConsignMoneyManager	BillServer/old_back/StockConsign.cpp	/^ConsignMoneyManager::ConsignMoneyManager()$/;"	f	class:ConsignMoneyManager
ConsignTrait	BillServer/old_back/BillServer.h	/^struct ConsignTrait$/;"	s
Container	FLServer/ServerACL.h	/^	typedef boost::unordered_map<const GameZone_t,ACLZone,ihash> Container;$/;"	t	class:ServerACL
Container	SessionServer/ServerManager.h	/^    typedef std::list<shared_ptr<SessionTask> > Container;$/;"	t	class:ServerManager
Container	SuperServer/ServerManager.h	/^    typedef std::list<shared_ptr<ServerTask> > Container;$/;"	t	class:ServerManager
Container	SuperServer/ServerTask.h	/^		typedef boost::unordered_map<Cmd::Super::ServerEntry,bool,Cmd::Super::key_hash,Cmd::Super::key_equal> Container;$/;"	t	class:ServerTask
Container_iterator	SessionServer/ServerManager.h	/^    typedef Container::iterator Container_iterator;$/;"	t	class:ServerManager
Container_iterator	SuperServer/ServerManager.h	/^    typedef Container::iterator Container_iterator;$/;"	t	class:ServerManager
Containter_const_iterator	SessionServer/ServerManager.h	/^    typedef Container::const_iterator Containter_const_iterator;$/;"	t	class:ServerManager
Containter_const_iterator	SuperServer/ServerManager.h	/^    typedef Container::const_iterator Containter_const_iterator;$/;"	t	class:ServerManager
Content	SceneServer/libscenesserver/SceneServer1.h	/^  class Content : public Maker<typename A::Base>$/;"	c	namespace:MakeFunction
ConvertUTF32ToUTF8	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase
CoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stItemIdCoolTime
CoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stItemTypeCoolTiem
CoolTimeSendData	SceneServer/libscenesserver/ScenesServer.cpp	/^std::vector<BYTE> CoolTimeSendData;$/;"	v
CoolTimeType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stXmlItemCoolTime
CopyTo	deps/tinyxml/tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment
CopyTo	deps/tinyxml/tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration
CopyTo	deps/tinyxml/tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument
CopyTo	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement
CopyTo	deps/tinyxml/tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode
CopyTo	deps/tinyxml/tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText
CopyTo	deps/tinyxml/tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown
CountryAllyM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
CountryAllyM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryAllyM
CountryDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
CountryDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryDare
CountryDareM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
CountryDareM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryDareM
CountryDic	GatewayServer/old_back/GatewayServer.h	/^		CountryDic()$/;"	f	struct:CountryInfo::CountryDic
CountryDic	GatewayServer/old_back/GatewayServer.h	/^	struct CountryDic$/;"	s	class:CountryInfo
CountryID	GatewayServer/old_back/GatewayServer.h	/^	DWORD CountryID;   \/\/ [ranqd] Add ∑˛ŒÒ∆˜ID$/;"	m	class:GateUser
CountryInfo	GatewayServer/old_back/GatewayServer.h	/^	CountryInfo()$/;"	f	class:CountryInfo
CountryInfo	GatewayServer/old_back/GatewayServer.h	/^class CountryInfo$/;"	c
CountryInfo	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills::SceneManager
CountryMap	GatewayServer/old_back/GatewayServer.h	/^	typedef std::map<DWORD,CountryDic> CountryMap;$/;"	t	class:CountryInfo
CountryMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::SceneManager
CountryMap_iter	GatewayServer/old_back/GatewayServer.h	/^	typedef CountryMap::iterator CountryMap_iter;$/;"	t	class:CountryInfo
CountryMap_iter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::SceneManager
CountryMap_value_type	GatewayServer/old_back/GatewayServer.h	/^	typedef CountryMap::value_type CountryMap_value_type;$/;"	t	class:CountryInfo
CountryMap_value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::SceneManager
CountryMaterial	base/include/srvEngine.h	/^struct CountryMaterial{$/;"	s
CountryPowerCondition	SceneServer/libscenesserver/SceneServer1.h	/^  CountryPowerCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:CountryPowerCondition
CountryPowerCondition	SceneServer/libscenesserver/SceneServer1.h	/^class CountryPowerCondition : public TeamCondition$/;"	c
CountryPowerCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
CountryPowerCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:CountryPowerCondition
CountryTech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
CountryTech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryTech
CountryTechM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
CountryTechM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryTechM
CountryTechMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::CountryTechM
CountryUserMap	GatewayServer/old_back/GatewayServer.h	/^	typedef \/*__gnu_cxx::*\/hash_map<DWORD,GateUser_SET> CountryUserMap;$/;"	t	class:GateUserManager
CountryUserMap_iter	GatewayServer/old_back/GatewayServer.h	/^	typedef CountryUserMap::iterator CountryUserMap_iter;$/;"	t	class:GateUserManager
Country_Info	base/include/csCommon.h	/^/;"	f	struct:Cmd::Country_Info
Country_Info	base/include/csCommon.h	/^/;"	s	namespace:Cmd
CreateDup	SceneServer/libscenesserver/duplicateManager.cpp	/^unsigned short duplicateManager::CreateDup()$/;"	f	class:duplicateManager
CreateObject	SceneServer/libscenesserver/script_func.cpp	/^zObject *CreateObject(DWORD objID,DWORD level,DWORD quantity)$/;"	f
Cursor	deps/tinyxml/tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() const	{ return cursor; }$/;"	f	class:TiXmlParsingData
DARE_ACTIVE	SessionServer/libsessionserver/SessionServer.h	/^      DARE_ACTIVE,   \/\/ Ωª’Ω◊¥Ã¨$/;"	e	enum:CDare::__anon112
DARE_DATAPROCESS	SessionServer/libsessionserver/SessionServer.h	/^      DARE_DATAPROCESS, \/\/  ˝æ›¥¶¿Ì◊¥Ã¨,‘› ±Œ¥”√$/;"	e	enum:CDare::__anon112
DARE_OVER	SessionServer/libsessionserver/SessionServer.h	/^      DARE_OVER    \/\/ Ω· ¯«Â≥˝◊¥Ã¨$/;"	e	enum:CDare::__anon112
DARE_READY	SessionServer/libsessionserver/SessionServer.h	/^      DARE_READY,   \/\/ —˚«Îµ»¥˝◊¥Ã¨$/;"	e	enum:CDare::__anon112
DARE_READY_ACTIVE	SessionServer/libsessionserver/SessionServer.h	/^      DARE_READY_ACTIVE,     \/\/ µ»¥˝ø€≥˝”¶’Ω’ﬂΩ±“,»Áπ˚ ß∞‹,‘ÚΩ¯»ÎDARE_RETURN_GOLD$/;"	e	enum:CDare::__anon112
DARE_READY_OVER	SessionServer/libsessionserver/SessionServer.h	/^      DARE_READY_OVER,       \/\/ Ω· ¯∂‘’Ω,Õ®÷™≥°æ∞»°œ˚À˘”–»Àµƒ∂‘’Ω◊¥Ã¨,≤¢º∆À„ ‰”Æ,$/;"	e	enum:CDare::__anon112
DARE_READY_QUESTION	SessionServer/libsessionserver/SessionServer.h	/^      DARE_READY_QUESTION,   \/\/ µ»¥˝±ªÃÙ’Ω’ﬂªÿ”¶◊¥Ã¨      $/;"	e	enum:CDare::__anon112
DARE_RETURN_GOLD	SessionServer/libsessionserver/SessionServer.h	/^      DARE_RETURN_GOLD,      \/\/ »Áπ˚Ω±“≤ªπª,‘Ú∞—‘§œ»ø€≥˝µƒÃÙ’Ω∑ΩµƒΩ«Æ∑µªπ∏¯À˚°£≤¢Ω¯»ÎDARE_OVER◊¥Ã¨°£$/;"	e	enum:CDare::__anon112
DARE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
DARE_WAIT_BOUNTY	SessionServer/libsessionserver/SessionServer.h	/^      DARE_WAIT_BOUNTY,      \/\/ »Áπ˚”Æ∑Ω∞Ô÷˜≤ª‘⁄œﬂ,¥¶”⁄’‚∏ˆ◊¥Ã¨,∏√ÕÊº“…œœﬂ∫Û,∞—Ω±¿¯∑¢∑≈∏¯À˚$/;"	e	enum:CDare::__anon112
DARE_WINNER_GOLD	base/include/srvEngine.h	/^	const uint32_t DARE_WINNER_GOLD = 800; \/\/ ÂØπÊàòËÉúËÄÖ‰∏ÄÊñπÔºåÊâÄËé∑ÈáëÈ¢ù$/;"	m	namespace:DareDef
DATA_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
DDZCardGame	tmp/MiniServer/DDZCardGame.cpp	/^DDZCardGame::DDZCardGame(Cmd::MiniGameID id,BYTE userNum,DWORD p)$/;"	f	class:DDZCardGame
DDZCardGame	tmp/MiniServer/MiniServer.h	/^class DDZCardGame : public MiniGame$/;"	c
DDZS_PLAY	tmp/MiniServer/MiniServer.h	/^      DDZS_PLAY\/\/ø™ º$/;"	e	enum:DDZCardGame::DDZ_State
DDZS_POINT	tmp/MiniServer/MiniServer.h	/^      DDZS_POINT,\/\/Ω–∑÷$/;"	e	enum:DDZCardGame::DDZ_State
DDZ_State	tmp/MiniServer/MiniServer.h	/^    enum DDZ_State$/;"	g	class:DDZCardGame
DEAL_CARD_MINI_PARA	base/include/csCommon.h	12541;"	d
DEBUG	deps/tinyxml/Makefile	/^DEBUG          := YES$/;"	m
DEBUG	deps/tinyxml/tinyxml.h	45;"	d
DEBUG_CFLAGS	deps/tinyxml/Makefile	/^DEBUG_CFLAGS     := -Wall -Wno-format -g -DDEBUG$/;"	m
DEBUG_CXXFLAGS	deps/tinyxml/Makefile	/^DEBUG_CXXFLAGS   := ${DEBUG_CFLAGS} $/;"	m
DEBUG_LDFLAGS	deps/tinyxml/Makefile	/^DEBUG_LDFLAGS    := -g$/;"	m
DECLARE	SceneServer/libscenesserver/ScenesServer.h	651;"	d
DECOMPOSE	SceneServer/libscenesserver/SceneServer1.h	/^    DECOMPOSE = 6,$/;"	e	enum:Base::ReuildType
DECOMPOSE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Base::ReuildType
DECOMPOSE_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4205;"	d
DEDUCT_POINT	SessionServer/libsessionserver/SessionServer.h	396;"	d
DEFAULTMASTERALIAS	base/include/csCommon.h	441;"	d
DEFAULTMEMBERALIAS	base/include/csCommon.h	442;"	d
DEFAULT_BILL_TIMEOUT	BillServer/old_back/BillServer.h	999;"	d
DEFAULT_START_LEVEL	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon186
DEFS	deps/tinyxml/Makefile	/^  DEFS := -DTIXML_USE_STL$/;"	m
DEFS	deps/tinyxml/Makefile	/^  DEFS :=$/;"	m
DEPOSIT_COMMON_MINI_PARA	base/include/csCommon.h	12446;"	d
DEPS	BillServer/Makefile	/^DEPS = $(objects:%.o=.%.d)$/;"	m
DEPS	FLServer/Makefile	/^DEPS = $(objects:%.o=.%.d)$/;"	m
DEPS	GatewayServer/Makefile	/^DEPS = $(objects:%.o=.%.d)$/;"	m
DEPS	RecordServer/Makefile	/^DEPS = $(objects:%.o=.%.d)$/;"	m
DEPS	SceneServer/Makefile	/^DEPS = $(objects:%.o=.%.d)$/;"	m
DEPS	SessionServer/Makefile	/^DEPS = $(objects:%.o=.%.d)$/;"	m
DEPS	SuperServer/Makefile	/^DEPS = $(objects:%.o=.%.d)$/;"	m
DEPS	client/Makefile	/^DEPS = $(objects:%.o=.%.d)$/;"	m
DESTROYTIME	base/include/csCommon.h	/^/;"	m	namespace:SeptDef
DESTROYTIME	base/include/csCommon.h	/^/;"	m	namespace:UnionDef
DICE_NUM_MINI_PARA	base/include/csCommon.h	12687;"	d
DICE_STATE_CREATE	SceneServer/libscenesserver/SceneServer1.h	/^      DICE_STATE_CREATE,\/\/Œ¥≥ı ºªØ£¨ø…“‘¡ƒÃÏ$/;"	e	enum:Dice::DiceState
DICE_STATE_CREATE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Dice::DiceState
DICE_STATE_DEL	SceneServer/libscenesserver/SceneServer1.h	/^      DICE_STATE_DEL\/\/µ»¥˝…æ≥˝$/;"	e	enum:Dice::DiceState
DICE_STATE_DEL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Dice::DiceState
DICE_STATE_END	SceneServer/libscenesserver/SceneServer1.h	/^      DICE_STATE_END,\/\/“ªæ÷ø™ º÷Æ«∞µ»¥˝À´∑Ω◊º±∏$/;"	e	enum:Dice::DiceState
DICE_STATE_END	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Dice::DiceState
DICE_STATE_ROLLING	SceneServer/libscenesserver/SceneServer1.h	/^      DICE_STATE_ROLLING,\/\/…´◊”‘⁄◊™£¨µ»¥˝Õ£÷πœ˚œ¢$/;"	e	enum:Dice::DiceState
DICE_STATE_ROLLING	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Dice::DiceState
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Die::DIR = "on_die\/";$/;"	m	class:Trigger::Die	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Drop::DIR = "on_drop\/";$/;"	m	class:Trigger::Drop	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Enter::DIR = "on_enter\/";$/;"	m	class:Trigger::Enter	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Get::DIR = "on_get\/";$/;"	m	class:Trigger::Get	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Kill::DIR = "on_kill\/";$/;"	m	class:Trigger::Kill	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::KillByLevel::DIR = "on_kill_by_level\/";$/;"	m	class:Trigger::KillByLevel	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::KillBySelf::DIR = "on_kill_by_self\/";$/;"	m	class:Trigger::KillBySelf	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Other::DIR = "on_other\/";$/;"	m	class:Trigger::Other	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Quit::DIR = "on_quit\/";$/;"	m	class:Trigger::Quit	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Ride::DIR = "on_ride\/";$/;"	m	class:Trigger::Ride	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Timer::DIR = "on_timer\/";$/;"	m	class:Trigger::Timer	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Use::DIR = "on_use\/";$/;"	m	class:Trigger::Use	file:
DIR	SceneServer/libscenesserver/QuestEvent.cpp	/^const std::string Trigger::Visit::DIR = "on_visit\/";$/;"	m	class:Trigger::Visit	file:
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Die
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Drop
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Enter
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Get
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Kill
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::KillByLevel
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::KillBySelf
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Other
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Quit
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Ride
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Timer
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Use
DIR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Trigger::Visit
DIRTY_USER_USERCMD_PARA	base/include/csCommon.h	4905;"	d
DISABLE	SceneServer/libscenesserver/SceneServer1.h	/^    DISABLE = 2,    $/;"	e	enum:Action::__anon107
DISABLE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:Action::__anon98
DISENABLEL_OGIN_COUNTRY_PARA	base/include/csCommon.h	6401;"	d
DISTRIBUTEUPOINT_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4091;"	d
DMUCS_HOST_IP	Makefile	/^DMUCS_HOST_IP=172.17.102.30$/;"	m
DOC_OPT_COL	base/src/getopt.c	2307;"	d	file:
DOING	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Quest::__anon71
DONGJIAO_MAP_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
DOUDIZHU	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniGameType
DRAWEXP_CARTOON_PARA	base/include/csCommon.h	9609;"	d
DRAW_COMMON_MINI_PARA	base/include/csCommon.h	12458;"	d
DRAW_RET_COMMON_MINI_PARA	base/include/csCommon.h	12470;"	d
DROP_ODDS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Mask::__anon79
DUP_ARGS	base/src/getopt.c	2303;"	d	file:
DUP_ARGS_NOTE	base/src/getopt.c	2304;"	d	file:
DWORD	base/type.h	/^typedef uint32_t    DWORD;$/;"	t
DaggerAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
DaggerAddDamA	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
Daggerflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
DamagCallback	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::DamagCallback
DamagCallback	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
DareDef	base/include/srvEngine.h	/^namespace DareDef$/;"	n
DareDef	base/src/zMisc.cpp	/^namespace DareDef$/;"	n	file:
DareSet	SessionServer/libsessionserver/SessionServer.h	/^typedef std::set<DWORD> DareSet;$/;"	t
DarkAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
DarkAddDamA	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
Darkflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
Data	SuperServer/RoleregCache.h	/^      Data(const Cmd::Super::t_Charname_Gateway &cmd)$/;"	f	struct:RoleregCache::Data
Data	SuperServer/RoleregCache.h	/^      Data(const Data &data)$/;"	f	struct:RoleregCache::Data
Data	SuperServer/RoleregCache.h	/^    struct Data$/;"	s	class:RoleregCache
DataCache	SuperServer/RoleregCache.h	/^    typedef std::list<Data> DataCache;$/;"	t	class:RoleregCache
DataCount	base/include/csBox.h	/^	uint16_t DataCount;  \/\/ ˝æ›∏ˆ ˝$/;"	m	struct:Cmd::stItemCoolTimesUserCmd
DeathTime	SceneServer/libscenesserver/SceneBattlefiel.h	/^	int DeathTime;	\/\/sky À¿Õˆ ±º‰$/;"	m	struct:stCampMember
Decompose	SceneServer/libscenesserver/SceneServer1.h	/^  Decompose(zObject* ob) : _ob(ob)$/;"	f	class:Decompose
Decompose	SceneServer/libscenesserver/SceneServer1.h	/^class Decompose$/;"	c
Decompose	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
Decompose	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Decompose
Del	SceneServer/libscenesserver/SceneUserManager.cpp	/^struct Del $/;"	s	file:
DelMapTeam	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::DelMapTeam(DWORD TeamID)$/;"	f	class:SceneManager
DelProtectOverdue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
DelRoll	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
DelTeam	SessionServer/libsessionserver/Team.cpp	/^bool GlobalTeamIndex::DelTeam(DWORD TeamThisID)$/;"	f	class:GlobalTeamIndex
DelaySpecNpc	SceneServer/libscenesserver/CountryDare.cpp	/^  DelaySpecNpc() {};$/;"	f	struct:DelaySpecNpc
DelaySpecNpc	SceneServer/libscenesserver/CountryDare.cpp	/^struct DelaySpecNpc : public zSceneEntryCallBack$/;"	s	file:
DeleteTeamExec	SceneServer/libscenesserver/TeamManager.cpp	/^  DeleteTeamExec(\/*SceneUser *u*\/)$/;"	f	struct:DeleteTeamExec
DeleteTeamExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct DeleteTeamExec : public TeamMemExec$/;"	s	file:
DesCampReg	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::DesCampReg(DWORD campID, int RegNum)$/;"	f	class:GangScene
DesUserCampPoint	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::DesUserCampPoint(DWORD userid,	DWORD point)$/;"	f	class:GangScene
Detection_cond	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::Detection_cond( SceneEntryPk * target, DWORD cond1, DWORD cond2 )$/;"	f	class:SceneNpc
Diamond	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Card::Suit
Dice	SceneServer/libscenesserver/Dice.cpp	/^Dice::Dice(SceneUser * u1,SceneUser * u2,DWORD m)$/;"	f	class:Dice
Dice	SceneServer/libscenesserver/SceneServer1.h	/^class Dice$/;"	c
Dice	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
DiceState	SceneServer/libscenesserver/SceneServer1.h	/^    enum DiceState$/;"	g	class:Dice
DiceState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::Dice
Die	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
Differ	SceneServer/libscenesserver/SceneServer1.h	/^  class Differ$/;"	c	namespace:Op
Differ	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
DisableAction	SceneServer/libscenesserver/SceneServer1.h	/^  DisableAction(ScenesParser& p)  : TeamAction(p)$/;"	f	class:DisableAction
DisableAction	SceneServer/libscenesserver/SceneServer1.h	/^class DisableAction : public TeamAction$/;"	c
DistributionUser	SessionServer/libsessionserver/Queuing.cpp	/^bool CQueuingManager::DistributionUser(int index)					\/\/sky ∑÷≈‰”√ªßµΩ“—æ≠…˙≥…∫√µƒµÿÕº÷–$/;"	f	class:CQueuingManager
Div	SceneServer/libscenesserver/SceneServer1.h	/^  class Div$/;"	c	namespace:Op
Div	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
DoIndent	deps/tinyxml/tinyxml.h	/^	void DoIndent()	{$/;"	f	class:TiXmlPrinter
DoLineBreak	deps/tinyxml/tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:TiXmlPrinter
DoubleValue	deps/tinyxml/tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute
DrawCombin	SceneServer/libscenesserver/MiniClient.cpp	/^    DrawCombin(SceneUser* user,DWORD id,DWORD level,DWORD &num) : _user(user),_id(id),_level(level),_num(num)$/;"	f	struct:DrawCombin
DrawCombin	SceneServer/libscenesserver/MiniClient.cpp	/^struct DrawCombin : public PackageCallback$/;"	s	file:
Drop	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
DropAction	SceneServer/libscenesserver/SceneServer1.h	/^  DropAction(ScenesParser& p)$/;"	f	class:DropAction
DropAction	SceneServer/libscenesserver/SceneServer1.h	/^class DropAction : public Action$/;"	c
DropFromPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
DropFromPack	SceneServer/libscenesserver/zObject.cpp	/^DropFromPack::DropFromPack(const Packages* ps,const Param& p) : _ps(ps),_p(p)$/;"	f	class:DropFromPack
DropGoldObjectBase	base/include/srvEngine.h	/^typedef ColorObjectBase DropGoldObjectBase;$/;"	t
DropItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  DropItemAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:DropItemAction
DropItemAction	SceneServer/libscenesserver/SceneServer1.h	/^class DropItemAction : public TeamAction$/;"	c
DropRate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
DropRateLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
DulesFileName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
EBADKEY	base/src/getopt.c	996;"	d	file:
EMBRANCHMENT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Event
EMPEROR_HORSE_ID	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD EMPEROR_HORSE_ID = 3202;\/\/ª µ€µƒ¬ÌID$/;"	v
EMPEROR_PUNISH_COUNTRY_PARA	base/include/csCommon.h	6476;"	d
EMPTY_HOLE	base/include/csCommon.h	/^/;"	v
ENCDEC_DES	base/include/csCommon.h	/^/;"	e	enum:CEncrypt::encMethod
ENCDEC_NONE	base/include/csCommon.h	/^/;"	e	enum:CEncrypt::encMethod
ENCDEC_RC5	base/include/csCommon.h	/^/;"	e	enum:CEncrypt::encMethod
ENCHANCE	SceneServer/libscenesserver/SceneServer1.h	/^    ENCHANCE = 5,$/;"	e	enum:Base::ReuildType
ENCHANCE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Base::ReuildType
ENCHANCE_MONEY	SceneServer/libscenesserver/SceneServer1.h	/^    ENCHANCE_MONEY = 500,$/;"	e	enum:RebuildObject::__anon102
ENCHANCE_MONEY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:RebuildObject::__anon93
ENCHANCE_SONTE_ID	SceneServer/libscenesserver/SceneServer1.h	/^    ENCHANCE_SONTE_ID = 678,$/;"	e	enum:RebuildObject::__anon102
ENCHANCE_SONTE_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:RebuildObject::__anon93
ENCHASEL_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4168;"	d
ENDOFINITDATA_DATA_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
END_MINI_PARA	base/include/csCommon.h	12710;"	d
ENTER_GAME_COMMON_MINI_PARA	base/include/csCommon.h	12167;"	d
ENTER_GAME_RET_COMMON_MINI_PARA	base/include/csCommon.h	12296;"	d
ENTER_MINI_PARA	base/include/csCommon.h	12734;"	d
ENTER_ROOM_COMMON_MINI_PARA	base/include/csCommon.h	12045;"	d
ENTER_ROOM_RET_COMMON_MINI_PARA	base/include/csCommon.h	12283;"	d
ENTRY_STATE	base/include/csCommon.h	/^/;"	e	enum:TempArchiveType
EQUIPNO	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::EquipPack
EQUIP_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Packages::__anon57
EWOULDBLOCK	base/include/srvEngine.h	429;"	d
EXIST_PROP	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EXIST_PROP(T& value)$/;"	f
EXIT_ARMY_PARA	base/include/csCommon.h	6906;"	d
EXPMODE_TEAMMEMBER_USERCMD_PARA	base/include/csCommon.h	4857;"	d
EX_USAGE	base/src/getopt.c	957;"	d	file:
EffectList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stxml_SuitAttribute
EffectList	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute
Element	deps/tinyxml/tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:TiXmlHandle
Embranchment	SceneServer/libscenesserver/QuestEvent.cpp	/^Event::Embranchment::Embranchment() : _active(false)$/;"	f	class:Event::Embranchment
Embranchment	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills::Event
EmperorForbid	SessionServer/libsessionserver/EmperorForbid.cpp	/^EmperorForbid::EmperorForbid()$/;"	f	class:EmperorForbid
EmperorForbid	SessionServer/libsessionserver/SessionServer.h	/^class EmperorForbid : public Singleton<EmperorForbid>$/;"	c
EncodeString	deps/tinyxml/tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase
Encoding	deps/tinyxml/tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration
Enter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
EnterDup	SceneServer/libscenesserver/duplicateManager.cpp	/^bool duplicateManager::EnterDup(SceneUser *user,unsigned short index)$/;"	f	class:duplicateManager
EnterSeptGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^  EnterSeptGuardAction()$/;"	f	class:EnterSeptGuardAction
EnterSeptGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^class EnterSeptGuardAction : public Action$/;"	c
Entity	deps/tinyxml/tinyxml.h	/^	struct Entity$/;"	s	class:TiXmlBase
Epos	base/include/csBox.h	/^	stObjectLocation	Epos;	\/\/±ªœ‚«∂µƒ◊∞±∏‘⁄∞¸∏§÷–µƒŒª÷√$/;"	m	struct:Cmd::stMosaicGemUserCmd
Equal	SceneServer/libscenesserver/SceneServer1.h	/^  class Equal$/;"	c	namespace:Op
Equal	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
EquipMaker	SceneServer/libscenesserver/RebuildObject.cpp	/^EquipMaker::EquipMaker(SceneUser* user) : _current(0),_base(0),_make(user?true:false),_need(0),_1_id(0),_1_level(0),_2_id(0),_2_level(0)$/;"	f	class:EquipMaker
EquipMaker	SceneServer/libscenesserver/SceneServer1.h	/^class EquipMaker$/;"	c
EquipMaker	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
EquipPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
EquipPack	SceneServer/libscenesserver/zObject.cpp	/^EquipPack::EquipPack(SceneUser* user):Package(Cmd::OBJECTCELLTYPE_EQUIP,0,1,20),owner(user)$/;"	f	class:EquipPack
Equips	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
Equips	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
Error	deps/tinyxml/tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:TiXmlDocument
ErrorCol	deps/tinyxml/tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured. See ErrorRow()$/;"	f	class:TiXmlDocument
ErrorDesc	deps/tinyxml/tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument
ErrorId	deps/tinyxml/tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:TiXmlDocument
ErrorRow	deps/tinyxml/tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:TiXmlDocument
Event	SceneServer/libscenesserver/QuestEvent.cpp	/^Event::Event() : _id(0)$/;"	f	class:Event
Event	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
EventManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
EventManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventManager
EventTable	SceneServer/libscenesserver/QuestTable.cpp	/^EventTable::EventTable()$/;"	f	class:EventTable
EventTable	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
EventTrigger	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
EventTrigger	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventTrigger
EventTrigger2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
EventTrigger2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventTrigger2
EveryMapExec	SceneServer/libscenesserver/SceneManager.cpp	/^  EveryMapExec(Scene *s):_scene(s)$/;"	f	struct:EveryMapExec
EveryMapExec	SceneServer/libscenesserver/SceneManager.cpp	/^struct EveryMapExec : public execEntry<SceneManager::MapInfo>$/;"	s	file:
EverySceneEntryAction	SceneServer/libscenesserver/TimeTick.cpp	/^  EverySceneEntryAction(const DWORD group) : group(group) {}$/;"	f	struct:EverySceneEntryAction
EverySceneEntryAction	SceneServer/libscenesserver/TimeTick.cpp	/^struct EverySceneEntryAction : public SceneCallBack$/;"	s	file:
EveryUserSessionAction	SessionServer/libsessionserver/SessionTask.cpp	/^struct EveryUserSessionAction: public execEntry<UserSession>$/;"	s	file:
Exile	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
Exp1Action	SceneServer/libscenesserver/SceneServer1.h	/^  Exp1Action(ScenesParser& p) : ExpAction(p)$/;"	f	class:Exp1Action
Exp1Action	SceneServer/libscenesserver/SceneServer1.h	/^class Exp1Action : public ExpAction$/;"	c
Exp1Action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
Exp1Action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Exp1Action
ExpAction	SceneServer/libscenesserver/SceneServer1.h	/^  ExpAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:ExpAction
ExpAction	SceneServer/libscenesserver/SceneServer1.h	/^class ExpAction : public TeamAction$/;"	c
ExpAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ExpAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ExpAction
ExpRate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
ExpSizeExec	SceneServer/libscenesserver/TeamManager.cpp	/^  ExpSizeExec(zPosI p,DWORD s)$/;"	f	struct:ExpSizeExec
ExpSizeExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct ExpSizeExec : public TeamMemExec$/;"	s	file:
ExperienceBase	base/include/srvEngine.h	/^struct ExperienceBase$/;"	s
ExterData	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
FACE_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4341;"	d
FAILED	SceneServer/libscenesserver/SceneServer1.h	/^    FAILED = 1,$/;"	e	enum:Action::__anon107
FAILED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:Action::__anon98
FEMALE	base/include/csCommon.h	/^/;"	e	enum:__anon177
FILEPOWER	SessionServer/libsessionserver/OfflineMessage.cpp	13;"	d	file:
FINISHED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Quest::__anon71
FINISHED_NAME	SceneServer/libscenesserver/Quest.cpp	/^const std::string Quest::FINISHED_NAME = "state";$/;"	m	class:Quest	file:
FINISHED_NAME	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Quest
FINISHED_NOT_SAVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Quest::__anon71
FINISHED_SAVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Quest::__anon71
FINISH_CREATE	SessionServer/libsessionserver/SessionServer.h	/^      FINISH_CREATE = 2,$/;"	e	enum:CArmy::__anon116
FINISH_SELL_USERCMD_PARAMETER	base/include/csCommon.h	5209;"	d
FINISH_TECH	SessionServer/libsessionserver/SessionServer.h	/^      FINISH_TECH, \/\/ “—æ≠ÕÍ≥……˝º∂,ø…“‘¥Ú‘Ïœ‡”¶◊∞±∏(∞¸¿®µ»º∂¥Û”⁄0µƒÀ˘”–◊¥Ã¨µƒø∆ºº)$/;"	e	enum:CTech::__anon109
FINISH_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5083;"	d
FIRE_ARMY_CAPTAIN_PARA	base/include/csCommon.h	6970;"	d
FIRSTFIVE_LIST_STOCKPARA	base/include/csCommon.h	8986;"	d
FIRST_LAYER_PRENTICE_REQUEST_LEVEL	base/include/csCommon.h	329;"	d
FIVE_FIRE	base/include/csCommon.h	/^/;"	e	enum:__anon178
FIVE_METAL	base/include/csCommon.h	/^/;"	e	enum:__anon178
FIVE_NONE	base/include/csCommon.h	/^/;"	e	enum:__anon178
FIVE_SOIL	base/include/csCommon.h	/^/;"	e	enum:__anon178
FIVE_WATER	base/include/csCommon.h	/^/;"	e	enum:__anon178
FIVE_WOOD	base/include/csCommon.h	/^/;"	e	enum:__anon178
FL	base/flcmd.h	/^	namespace FL$/;"	n	namespace:Cmd
FLAG_ADD	base/x_simple_db_table.h	/^		FLAG_ADD = 0x01,		\/\/insert$/;"	e	enum:x_simple_db_table::__anon125
FLAG_MODIFIED	base/x_simple_db_table.h	/^		FLAG_MODIFIED = 0x02,	\/\/update$/;"	e	enum:x_simple_db_table::__anon125
FLAG_UNTOUCH	base/x_simple_db_table.h	/^		FLAG_UNTOUCH = 0x00,	\/\/do nothing$/;"	e	enum:x_simple_db_table::__anon125
FLClient	SuperServer/FLClient.cpp	/^FLClient::FLClient(boost::asio::io_service & ios):tcp_client(ios) ,tempid(++tempidAllocator),netType(NetType_near) { }$/;"	f	class:FLClient
FLClient	SuperServer/FLClient.h	/^class FLClient : public tcp_client$/;"	c
FLClientContainer	SuperServer/FLClientManager.h	/^    typedef hash_map<WORD,FLClient *> FLClientContainer;$/;"	t	class:FLClientManager
FLClientManager	SuperServer/FLClientManager.cpp	/^FLClientManager::FLClientManager()$/;"	f	class:FLClientManager
FLClientManager	SuperServer/FLClientManager.h	/^class FLClientManager$/;"	c
FLService	FLServer/FLServer.h	/^	FLService() : x_service("flserver") {$/;"	f	class:FLService
FLService	FLServer/FLServer.h	/^class FLService : public x_service {$/;"	c
FOLLOW_CARTOON_PARA	base/include/csCommon.h	9560;"	d
FORBID_TALK_COUNTRY_PARA	base/include/csCommon.h	6264;"	d
FOUNDITEM_PROPERTY_USERCMD_PARA	base/include/csCommon.h	3886;"	d
FRESH_TEAMMEMBER_USERCMD_PARA	base/include/csCommon.h	4887;"	d
FRIENDDEGREE_CONSORT_DEFPLUS_RATE_BTM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_CONSORT_DEFPLUS_RATE_MED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_CONSORT_DEFPLUS_RATE_TOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_CONSORT_RATE_BTM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_CONSORT_RATE_MED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_CONSORT_RATE_TOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_EXPPLUS_RATE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_FRIEND_ATTPLUS_RATE_BTM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_FRIEND_ATTPLUS_RATE_MED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_FRIEND_ATTPLUS_RATE_TOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_FRIEND_RATE_BTM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_FRIEND_RATE_MED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_FRIEND_RATE_TOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_MONEYPLUS_RATE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_PRENTICE_DEFPLUS_RATE_BTM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_PRENTICE_DEFPLUS_RATE_FULL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_PRENTICE_DEFPLUS_RATE_MED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_PRENTICE_DEFPLUS_RATE_TOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_RANGE_BTM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_RANGE_MED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_RANGE_TOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_TEACHER_ATTPLUS_RATE_BTM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_TEACHER_ATTPLUS_RATE_MED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_TEACHER_ATTPLUS_RATE_TOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_TEACHER_RATE_BTM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_TEACHER_RATE_MED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_TEACHER_RATE_TOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_VALIDATION_DISTANCE_HEIGHT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
FRIENDDEGREE_VALIDATION_DISTANCE_WIDE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
Factory	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills::LiveSkillsManager
FamilyLevelAction	SceneServer/libscenesserver/SceneServer1.h	/^  FamilyLevelAction(ScenesParser& p) : TongVarAction<Operation>(p),_level(0)$/;"	f	class:FamilyLevelAction
FamilyLevelAction	SceneServer/libscenesserver/SceneServer1.h	/^class FamilyLevelAction : public TongVarAction<Operation>$/;"	c
FamilyLevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^  FamilyLevelCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:FamilyLevelCondition
FamilyLevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^class FamilyLevelCondition : public TeamCondition$/;"	c
FamilyLevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
FamilyLevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FamilyLevelCondition
FamilyVar	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
FamilyVarAction	SceneServer/libscenesserver/SceneServer1.h	/^  FamilyVarAction(ScenesParser& p) : TongVarAction<Operation>(p)$/;"	f	class:FamilyVarAction
FamilyVarAction	SceneServer/libscenesserver/SceneServer1.h	/^class FamilyVarAction : public TongVarAction<Operation>$/;"	c
FamilyVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  FamilyVarCondition(ScenesParser& p) : TongVarCondition<Operation>(p)$/;"	f	class:FamilyVarCondition
FamilyVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^class FamilyVarCondition : public TongVarCondition<Operation>$/;"	c
FamilyVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
FamilyVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FamilyVarCondition
FillSuit	SceneServer/libscenesserver/zObject.cpp	/^void zObject::FillSuit()$/;"	f	class:zObject
FillSuitPPT	SceneServer/libscenesserver/zObject.cpp	/^void zObject::FillSuitPPT(int nIndex)$/;"	f	class:zObject
Find	deps/tinyxml/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet
Find	deps/tinyxml/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet
FindConsort	SceneServer/libscenesserver/SceneRelation.cpp	/^  FindConsort(SceneUser *pUser)$/;"	f	struct:FindConsort
FindConsort	SceneServer/libscenesserver/SceneRelation.cpp	/^struct FindConsort : public TeamMemExec$/;"	s	file:
FindOrCreate	deps/tinyxml/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name )$/;"	f	class:TiXmlAttributeSet
FindOrCreate	deps/tinyxml/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name )$/;"	f	class:TiXmlAttributeSet
FinishSeptGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^  FinishSeptGuardAction()$/;"	f	class:FinishSeptGuardAction
FinishSeptGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^class FinishSeptGuardAction : public Action$/;"	c
First	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet
First	deps/tinyxml/tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet
FirstAttribute	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:TiXmlElement
FirstAttribute	deps/tinyxml/tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access the first attribute in this element.$/;"	f	class:TiXmlElement
FirstChild	deps/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle
FirstChild	deps/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle
FirstChild	deps/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode
FirstChild	deps/tinyxml/tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str() ); }$/;"	f	class:TiXmlHandle
FirstChild	deps/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode
FirstChild	deps/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChild	deps/tinyxml/tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:TiXmlNode
FirstChild	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChild	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode
FirstChildElement	deps/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle
FirstChildElement	deps/tinyxml/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle
FirstChildElement	deps/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode
FirstChildElement	deps/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode
FirstChildElement	deps/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode
FirstChildElement	deps/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FirstChildElement	deps/tinyxml/tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode
FirstChildElement	deps/tinyxml/tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _value.c_str() ); }$/;"	f	class:TiXmlHandle
FirstChildElement	deps/tinyxml/tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
FiveLevelAction	SceneServer/libscenesserver/SceneServer1.h	/^  FiveLevelAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:FiveLevelAction
FiveLevelAction	SceneServer/libscenesserver/SceneServer1.h	/^class FiveLevelAction : public TeamAction$/;"	c
FiveLevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^  FiveLevelCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:FiveLevelCondition
FiveLevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^class FiveLevelCondition : public TeamCondition$/;"	c
FiveLevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
FiveLevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FiveLevelCondition
FiveSetBase	base/include/srvEngine.h	/^struct FiveSetBase{$/;"	s
FiveTypeAction	SceneServer/libscenesserver/SceneServer1.h	/^  FiveTypeAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:FiveTypeAction
FiveTypeAction	SceneServer/libscenesserver/SceneServer1.h	/^class FiveTypeAction : public TeamAction$/;"	c
FiveTypeCondition	SceneServer/libscenesserver/SceneServer1.h	/^  FiveTypeCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:FiveTypeCondition
FiveTypeCondition	SceneServer/libscenesserver/SceneServer1.h	/^class FiveTypeCondition : public TeamCondition$/;"	c
FiveTypeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
FiveTypeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FiveTypeCondition
Five_Relation	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:SceneUser	file:
Five_Relation	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
FixedRush	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::Scene::FixedRush
FixedRush	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills::Scene
FlameAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
FlameAddDamA	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
Flameflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ForbidTalkManager	SessionServer/libsessionserver/ForbidTalkManager.cpp	/^ForbidTalkManager::ForbidTalkManager(){}$/;"	f	class:ForbidTalkManager
ForbidTalkManager	SessionServer/libsessionserver/SessionServer.h	/^class ForbidTalkManager$/;"	c
FreeMemory	GatewayServer/old_back/GatewayServer.h	/^	class FreeMemory $/;"	c	class:CheckerTable
FreeMemory	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills::Event
Freedom	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips	typeref:struct:O::Equips::Freedom_Attribute
Freedom	base/include/csCommon.h	/^/;"	m	struct:_Object	typeref:struct:_Object::Freedom_Attribute
Freedom_Attribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::Equips
Freedom_Attribute	base/include/csCommon.h	/^/;"	s	struct:_Object
GAMETIME_TIMER_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
GAME_END_COMMON_MINI_PARA	base/include/csCommon.h	12335;"	d
GAME_LIST_COMMON_MINI_PARA	base/include/csCommon.h	12033;"	d
GAME_RESULT_COMMON_MINI_PARA	base/include/csCommon.h	12346;"	d
GAME_START_COMMON_MINI_PARA	base/include/csCommon.h	12324;"	d
GAME_VERSION	base/include/csCommon.h	/^/;"	m	namespace:Cmd
GANG	SceneServer/libscenesserver/SceneServer1.h	/^    GANG        \/\/\/ ∂ØÃ¨µƒ$/;"	e	enum:SceneNpc::SceneNpcType
GANG	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Scene::SceneType
GATEWAYSERVER	base/common.h	/^	GATEWAYSERVER  =  22, \/** ÁΩëÂÖ≥ÊúçÂä°Âô® *\/$/;"	e	enum:ServerType
GEMPOP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::Equips
GEM_ACTIVE	SessionServer/libsessionserver/SessionServer.h	/^      GEM_ACTIVE,  \/\/ ª§±¶»ŒŒÒΩ¯––◊¥Ã¨$/;"	e	enum:CGem::__anon115
GEM_ACTIVE_TIME	SessionServer/libsessionserver/Gem.cpp	/^const DWORD GEM_ACTIVE_TIME = 4*60*60; \/\/ ª§±¶»ŒŒÒΩ¯–– ±º‰$/;"	v
GEM_OVER	SessionServer/libsessionserver/SessionServer.h	/^      GEM_OVER    \/\/ Ω· ¯«Â≥˝◊¥Ã¨$/;"	e	enum:CGem::__anon115
GEM_READY	SessionServer/libsessionserver/SessionServer.h	/^      GEM_READY,  \/\/ ª§±¶»ŒŒÒ◊º±∏◊¥Ã¨$/;"	e	enum:CGem::__anon115
GEM_READY_OVER	SessionServer/libsessionserver/SessionServer.h	/^      GEM_READY_OVER,      \/\/ ª§±¶»ŒŒÒ◊º±∏Ω· ¯◊¥Ã¨$/;"	e	enum:CGem::__anon115
GEM_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
GETBACK_CARTOON_PARA	base/include/csCommon.h	9600;"	d
GET_COWBOX_INIT_OPEN	base/include/csBox.h	37;"	d
GIFT_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
GLEN	base/src/getopt.c	1405;"	d	file:
GM	SessionServer/libsessionserver/SessionServer.h	/^  char GM[32];$/;"	m	struct:worldMsg
GM	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_broadcastScene_SceneSession
GMTOOL_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
GM_COMMAND_CATCHUSER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_DONTTALK	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_EMBAR	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_ERR_FAIL	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_ERR_NOERR	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_ERR_NOUSER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_ERR_PARAM	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_ERR_PRIV	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_FINDUSER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_GOTOUSER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_KICK	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_LEVELUP	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_LOAD_GIFT	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_LOAD_PROCESS	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_LOCKVALUE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_NEWZONE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_REFRESH_GENERAL	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_SETPRIV	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_STATE_REQ	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_STATE_RET	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GM_COMMAND_TALK	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
GOLD_GIVE_USERCMD_PARAMETER	base/include/csCommon.h	5299;"	d
GOLD_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
GOODNESS_0	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_1	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_2_1	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_2_2	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_3	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_4	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_5	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_6	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_7	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_ATT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GOODNESS_DEF	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon200
GO_TRAIN_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4460;"	d
GROUP_BITS	base/src/getopt.c	989;"	d	file:
GYList	FLServer/GYListManager.h	/^	GYList() {$/;"	f	struct:GYList
GYList	FLServer/GYListManager.h	/^struct GYList {$/;"	s
GYListContainer	FLServer/GYListManager.h	/^	typedef boost::unordered_multimap<const GameZone_t, GYList> GYListContainer;$/;"	t	class:GYListManager
GYListContainer_iterator	FLServer/GYListManager.h	/^	typedef GYListContainer::iterator GYListContainer_iterator;$/;"	t	class:GYListManager
GYListContainer_value_type	FLServer/GYListManager.h	/^	typedef GYListContainer::value_type GYListContainer_value_type;$/;"	t	class:GYListManager
GYListManager	FLServer/GYListManager.h	/^	GYListManager() {}$/;"	f	class:GYListManager
GYListManager	FLServer/GYListManager.h	/^class GYListManager {$/;"	c
Game	client/Game.cpp	/^Game::Game()$/;"	f	class:Game
Game	client/Game.h	/^class Game : public Singleton<Game>$/;"	c
GamePoint	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD GamePoint;	\/\/sky ’Ω≥°µ„ ˝(’Ω≥°◊®”√ªı±“)$/;"	m	struct:stCampMember
GameStart	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BYTE GameStart;$/;"	m	class:GangScene
GameTime	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD GameTime;$/;"	m	class:GangScene
GameTimeSyn	GatewayServer/old_back/GatewayServer.h	/^	zRTime GameTimeSyn;$/;"	m	class:GatewayTask
GameZone_t	base/common.h	/^	GameZone_t() {$/;"	f	struct:GameZone_t
GameZone_t	base/common.h	/^struct GameZone_t$/;"	s
GangScene	SceneServer/libscenesserver/SceneBattlefiel.h	/^class GangScene:public Scene$/;"	c
GangScene	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^GangScene::GangScene():Scene(),_one_min(60)$/;"	f	class:GangScene
GangSceneInit	SceneServer/libscenesserver/Scene.cpp	/^bool GangScene::GangSceneInit(DWORD countryid, DWORD baseid, DWORD mapid)$/;"	f	class:GangScene
GangSceneTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
GangSceneTime	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^void GangScene::GangSceneTime(const zRTime& ctv)$/;"	f	class:GangScene
GangmapID	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD GangmapID;$/;"	m	class:GangScene
GateSelectUserSession	GatewayServer/old_back/GatewayServer.h	/^	GateSelectUserSession(DWORD accid)$/;"	f	class:GateSelectUserSession
GateSelectUserSession	GatewayServer/old_back/GatewayServer.h	/^class GateSelectUserSession:private boost::noncopyable$/;"	c
GateUser	GatewayServer/old_back/GateUser.cpp	/^GateUser::GateUser(DWORD accID,GatewayTask *histask):zUser(),GateSelectUserSession(accID)$/;"	f	class:GateUser
GateUser	GatewayServer/old_back/GatewayServer.h	/^class GateUser:public zUser,public GateSelectUserSession$/;"	c
GateUserAccountID	GatewayServer/old_back/GatewayServer.h	/^	GateUserAccountID() {}$/;"	f	class:GateUserAccountID
GateUserAccountID	GatewayServer/old_back/GatewayServer.h	/^class GateUserAccountID:protected LimitHash<DWORD,GateUser *>$/;"	c
GateUserManager	GatewayServer/old_back/GateUserManager.cpp	/^GateUserManager::GateUserManager()$/;"	f	class:GateUserManager
GateUserManager	GatewayServer/old_back/GatewayServer.h	/^class GateUserManager:public zUserManager,protected GateUserAccountID$/;"	c
GateUser_SET	GatewayServer/old_back/GatewayServer.h	/^	typedef std::set<GateUser *> GateUser_SET;$/;"	t	class:GateUserManager
GateUser_SET_iter	GatewayServer/old_back/GatewayServer.h	/^	typedef GateUser_SET::iterator GateUser_SET_iter;$/;"	t	class:GateUserManager
GatewayConfile	GatewayServer/old_back/GatewayServer.cpp	/^class GatewayConfile:public zConfile$/;"	c	file:
GatewayService	GatewayServer/GatewayServer.h	/^		GatewayService():x_subnetservice("gateway server", GATEWAYSERVER) {$/;"	f	class:GatewayService
GatewayService	GatewayServer/GatewayServer.h	/^class GatewayService : public x_subnetservice {$/;"	c
GatewayService	GatewayServer/old_back/GatewayServer.h	/^	GatewayService() : x_subnetservice("Õ¯πÿ∑˛ŒÒ∆˜",GATEWAYSERVER)$/;"	f	class:GatewayService
GatewayService	GatewayServer/old_back/GatewayServer.h	/^class GatewayService : public x_subnetservice$/;"	c
GatewayTask	GatewayServer/GatewayTask.h	/^    GatewayTask(io_service& ios) : tcp_task(ios) {$/;"	f	class:GatewayTask
GatewayTask	GatewayServer/GatewayTask.h	/^class GatewayTask : public tcp_task$/;"	c
GatewayTask	GatewayServer/old_back/GatewayServer.h	/^class GatewayTask : public zTCPTask$/;"	c
GatewayTask	GatewayServer/old_back/GatewayTask.cpp	/^GatewayTask::GatewayTask($/;"	f	class:GatewayTask
GatewayTaskCallback	GatewayServer/old_back/GatewayServer.h	/^	typedef zEntryCallback<GatewayTask> GatewayTaskCallback;$/;"	t	class:GatewayTaskManager
GatewayTaskCheckTime	GatewayServer/old_back/TimeTick.cpp	/^struct GatewayTaskCheckTime : public GatewayTaskManager::GatewayTaskCallback$/;"	s	file:
GatewayTaskHashmap	GatewayServer/old_back/GatewayServer.h	/^	typedef \/*__gnu_cxx::*\/hash_map<DWORD,GatewayTask *> GatewayTaskHashmap;$/;"	t	class:GatewayTaskManager
GatewayTaskHashmap_const_iterator	GatewayServer/old_back/GatewayServer.h	/^	typedef GatewayTaskHashmap::const_iterator GatewayTaskHashmap_const_iterator;$/;"	t	class:GatewayTaskManager
GatewayTaskHashmap_iterator	GatewayServer/old_back/GatewayServer.h	/^	typedef GatewayTaskHashmap::iterator GatewayTaskHashmap_iterator;$/;"	t	class:GatewayTaskManager
GatewayTaskHashmap_pair	GatewayServer/old_back/GatewayServer.h	/^	typedef GatewayTaskHashmap::value_type GatewayTaskHashmap_pair;$/;"	t	class:GatewayTaskManager
GatewayTaskManager	GatewayServer/old_back/GatewayServer.h	/^class GatewayTaskManager$/;"	c
GatewayTaskManager	GatewayServer/old_back/GatewayTaskManager.cpp	/^GatewayTaskManager::GatewayTaskManager()$/;"	f	class:GatewayTaskManager
GatewayTimeTick	GatewayServer/old_back/GatewayServer.h	/^	GatewayTimeTick() : zThread("TimeTick"),one_second(1) {};$/;"	f	class:GatewayTimeTick
GatewayTimeTick	GatewayServer/old_back/GatewayServer.h	/^class GatewayTimeTick : public zThread$/;"	c
Gb2312ToUnicode	base/src/codeLib.c	/^size_t Gb2312ToUnicode(PSTR szGb2312,size_t nGb2312,PWSTR szWC,size_t nWC)$/;"	f
GemID	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
GemPop	base/include/csCommon.h	/^/;"	t	typeref:struct:Gem_Pop
Gem_Pop	base/include/csCommon.h	/^/;"	s
Get	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
GetAffectScreen	SceneServer/libscenesserver/Scene.cpp	/^  GetAffectScreen(DWORD g) :group(g) {};$/;"	f	struct:GetAffectScreen
GetAffectScreen	SceneServer/libscenesserver/Scene.cpp	/^struct GetAffectScreen : public zSceneEntryCallBack$/;"	s	file:
GetAllRemovePosNpc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosNpc
GetAllRemovePosNpc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	s	file:
GetAllRemovePosUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosUser
GetAllRemovePosUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	s	file:
GetCampKillNpcNum	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::GetCampKillNpcNum(DWORD index)$/;"	f	class:GangScene
GetCampKillUserNum	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::GetCampKillUserNum(DWORD index)$/;"	f	class:GangScene
GetCampRegNum	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::GetCampRegNum(DWORD index)$/;"	f	class:GangScene
GetCampVictory	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::GetCampVictory()$/;"	f	class:GangScene
GetChar	deps/tinyxml/tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
GetDocument	deps/tinyxml/tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode
GetDocument	deps/tinyxml/tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode
GetEntity	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
GetEnvryOneAddSeptExp	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAddSeptExp
GetEnvryOneAddSeptExp	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	s	file:
GetEnvryOneAddSeptNormalExp	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAddSeptNormalExp
GetEnvryOneAddSeptNormalExp	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	s	file:
GetEnvryOneAndSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
GetEnvryOneAndSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	s	file:
GetGameStart	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BYTE GetGameStart() { return GameStart; }$/;"	f	class:GangScene
GetIntervalAmendmaent	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::t_NpcDefine
GetLeader	SessionServer/libsessionserver/Team.cpp	/^DWORD Team::GetLeader()$/;"	f	class:Team
GetMapTeam	SceneServer/libscenesserver/SceneManager.cpp	/^TeamManager* SceneManager::GetMapTeam(DWORD TeamID)$/;"	f	class:SceneManager
GetMemberID	SessionServer/libsessionserver/Team.cpp	/^DWORD Team::GetMemberID(int i)$/;"	f	class:Team
GetMemberNum	SessionServer/libsessionserver/Team.cpp	/^DWORD Team::GetMemberNum()$/;"	f	class:Team
GetNoRollUser	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::GetNoRollUser()$/;"	f	class:TeamManager
GetNoRollUserExec	SceneServer/libscenesserver/TeamManager.cpp	/^	GetNoRollUserExec( )$/;"	f	struct:GetNoRollUserExec
GetNoRollUserExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct GetNoRollUserExec : public TeamMemExec$/;"	s	file:
GetNpcAi	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::GetNpcAi()$/;"	f	class:SceneNpc
GetNpcAi	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool SceneArchitecture::GetNpcAi()$/;"	f	class:SceneArchitecture
GetObjectBydst	SceneServer/libscenesserver/box.cpp	/^zObject * SceneUser::GetObjectBydst( stObjectLocation * dst )$/;"	f	class:SceneUser
GetP	SceneServer/libscenesserver/SceneServer1.h	/^  class GetP$/;"	c	namespace:Op
GetP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
GetPassTime	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::GetPassTime()$/;"	f	class:GangScene
GetRandPos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zZone
GetReg	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD GetReg;$/;"	m	struct:BCampData
GetRequestNpcAndSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
GetRequestNpcAndSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	s	file:
GetRequestUserAndSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestUserAndSend
GetRequestUserAndSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	s	file:
GetRollItem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
GetSceneByFileName	SceneServer/libscenesserver/SceneManager.cpp	/^    GetSceneByFileName(const char *name) : ret(NULL),name(name) {};$/;"	f	class:GetSceneByFileName
GetSceneByFileName	SceneServer/libscenesserver/SceneManager.cpp	/^class GetSceneByFileName:public SceneCallBack$/;"	c	file:
GetTeamMemberNum	SceneServer/libscenesserver/TeamManager.cpp	/^int TeamManager::GetTeamMemberNum()$/;"	f	class:TeamManager
GetTeamMemberNumExec	SceneServer/libscenesserver/TeamManager.cpp	/^	GetTeamMemberNumExec( )$/;"	f	struct:GetTeamMemberNumExec
GetTeamMemberNumExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct GetTeamMemberNumExec : public TeamMemExec$/;"	s	file:
GetText	deps/tinyxml/tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement
GetUserData	deps/tinyxml/tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
GetUserData	deps/tinyxml/tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
GetpTeam	SessionServer/libsessionserver/Team.cpp	/^Team * GlobalTeamIndex::GetpTeam(const DWORD tempid)$/;"	f	class:GlobalTeamIndex
Gift	SessionServer/libsessionserver/Gift.cpp	/^Gift::Gift(){}$/;"	f	class:Gift
Gift	SessionServer/libsessionserver/SessionServer.h	/^class Gift : public Singleton<Gift>$/;"	c
Give_MatarialNum	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
GlobalAction	SceneServer/libscenesserver/SceneServer1.h	/^  GlobalAction(ScenesParser& p) : _id(0)$/;"	f	class:GlobalAction
GlobalAction	SceneServer/libscenesserver/SceneServer1.h	/^class GlobalAction : public Action$/;"	c
GlobalCondition	SceneServer/libscenesserver/SceneServer1.h	/^  GlobalCondition(ScenesParser& p)$/;"	f	class:GlobalCondition
GlobalCondition	SceneServer/libscenesserver/SceneServer1.h	/^class GlobalCondition : public Condition$/;"	c
GlobalCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
GlobalCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GlobalCondition
GlobalObjectIndex	SceneServer/libscenesserver/ObjectManager.cpp	/^GlobalObjectIndex::GlobalObjectIndex()$/;"	f	class:GlobalObjectIndex
GlobalObjectIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
GlobalTeamIndex	SessionServer/libsessionserver/SessionServer.h	/^	GlobalTeamIndex(){};$/;"	f	class:GlobalTeamIndex
GlobalTeamIndex	SessionServer/libsessionserver/SessionServer.h	/^class GlobalTeamIndex$/;"	c
GlobalTempArchiveIndex	SessionServer/libsessionserver/SessionServer.h	/^class GlobalTempArchiveIndex\/\/:private zEntryManager< zEntryID >$/;"	c
GlobalTempArchiveIndex	SessionServer/libsessionserver/TempArchive.cpp	/^GlobalTempArchiveIndex::GlobalTempArchiveIndex()$/;"	f	class:GlobalTempArchiveIndex
GlobalVar	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
GlobalVarImpl	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
GlobalVarImpl	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
GlobalVars	SceneServer/libscenesserver/SceneServer1.h	/^class GlobalVars$/;"	c
Gm	SceneServer/libscenesserver/SceneServer1.h	/^struct Gm$/;"	s
Gm	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
GmCmds	SceneServer/libscenesserver/Chat.cpp	/^/;"	v
GmTool	base/gmtoolcmd.h	/^	namespace GmTool$/;"	n	namespace:Cmd
GoldAction	SceneServer/libscenesserver/SceneServer1.h	/^  GoldAction(ScenesParser& p)  : TeamAction(p)$/;"	f	class:GoldAction
GoldAction	SceneServer/libscenesserver/SceneServer1.h	/^class GoldAction : public TeamAction$/;"	c
GoldAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
GoldAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GoldAction
GoldCondition	SceneServer/libscenesserver/SceneServer1.h	/^  GoldCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:GoldCondition
GoldCondition	SceneServer/libscenesserver/SceneServer1.h	/^class GoldCondition : public TeamCondition$/;"	c
GoldCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
GoldCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GoldCondition
GoldObjectBase	base/include/srvEngine.h	/^typedef ColorObjectBase GoldObjectBase;$/;"	t
GotoAction	SceneServer/libscenesserver/SceneServer1.h	/^  GotoAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:GotoAction
GotoAction	SceneServer/libscenesserver/SceneServer1.h	/^class GotoAction : public TeamAction$/;"	c
Gpos	base/include/csBox.h	/^	stObjectLocation	Gpos;	\/\/“™œ‚«∂µƒ±¶ Ø‘⁄∞¸∏§÷–µƒŒª÷√$/;"	m	struct:Cmd::stMosaicGemUserCmd
GradeCondition	SceneServer/libscenesserver/SceneServer1.h	/^  GradeCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:GradeCondition
GradeCondition	SceneServer/libscenesserver/SceneServer1.h	/^class GradeCondition : public TeamCondition$/;"	c
GradeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
GradeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GradeCondition
Great	SceneServer/libscenesserver/SceneServer1.h	/^  class Great$/;"	c	namespace:Op
Great	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
GuardNpc	SceneServer/libscenesserver/GuardNpc.cpp	/^GuardNpc::GuardNpc(Scene *scene,zNpcB *npc,const t_NpcDefine *define,const SceneNpcType type,const SceneEntryType entrytype,zNpcB *abase) :$/;"	f	class:GuardNpc
GuardNpc	SceneServer/libscenesserver/SceneServer1.h	/^class GuardNpc : public ScenePet$/;"	c
GuardNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
H	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::StorePack::__anon56
H	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::PetPack
HAIRRGB_MASK	base/include/csCommon.h	1243;"	d
HAIRTYPE_MASK	base/include/csCommon.h	1242;"	d
HAIR_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4224;"	d
HANDL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
HANDR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
HAS_TASK_DIALOG	SceneServer/libscenesserver/Quest.cpp	849;"	d	file:
HEAD	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
HEADER_COL	base/src/getopt.c	2309;"	d	file:
HEADER_DIR	base/Makefile	/^HEADER_DIR = -I.\/ -I$(boost_home) -I..\/deps\/tinyxml$/;"	m
HEADER_DIR	tmp/base2/makefile	/^HEADER_DIR = -I\/home\/liuqing\/boost_1_52_0$/;"	m
HEIGHT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::PrivateStore::__anon82
HEIGHT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::TradeOrder::__anon81
HEIGHT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::MainPack::__anon55
HISTORY_GOLD_STOCKPARA	base/include/csCommon.h	9058;"	d
HISTORY_MONEY_STOCKPARA	base/include/csCommon.h	9069;"	d
HOLE	SceneServer/libscenesserver/SceneServer1.h	/^    HOLE = 4,$/;"	e	enum:Base::ReuildType
HOLE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Base::ReuildType
HOLE_ACTIVVATED_OFF	base/include/csCommon.h	/^/;"	v
HOLE_MONEY	SceneServer/libscenesserver/SceneServer1.h	/^    HOLE_MONEY = 1000,$/;"	e	enum:RebuildObject::__anon102
HOLE_MONEY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:RebuildObject::__anon93
HOLE_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4177;"	d
HOLE_SONTE_ID	SceneServer/libscenesserver/SceneServer1.h	/^    HOLE_SONTE_ID = 679,$/;"	e	enum:RebuildObject::__anon102
HOLE_SONTE_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:RebuildObject::__anon93
HONOR_TO_PKVALUE_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4350;"	d
HORSETRAINING_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
HORSETRAINING_USERCMD_TEY	base/include/csBox.h	161;"	d
HORSE_TYPE_BATTLE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
HORSE_TYPE_NORMAL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
HORSE_TYPE_NOTHORSE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
HORSE_TYPE_SUPER	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
HOTSPRING_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
HP_EXP_CARTOON_PARA	base/include/csCommon.h	9696;"	d
HTTP_SERVER2_CONNECTION_HPP	tmp/base3/connection.hpp	12;"	d
HTTP_SERVER2_HEADER_HPP	tmp/base3/header.hpp	12;"	d
HTTP_SERVER2_IO_SERVICE_POOL_HPP	tmp/base3/io_service_pool.hpp	12;"	d
HTTP_SERVER2_MIME_TYPES_HPP	tmp/base3/mime_types.hpp	12;"	d
HTTP_SERVER2_REPLY_HPP	tmp/base3/reply.hpp	12;"	d
HTTP_SERVER2_REQUEST_HANDLER_HPP	tmp/base3/request_handler.hpp	12;"	d
HTTP_SERVER2_REQUEST_HPP	tmp/base3/request.hpp	12;"	d
HTTP_SERVER2_REQUEST_PARSER_HPP	tmp/base3/request_parser.hpp	12;"	d
HTTP_SERVER2_SERVER_HPP	tmp/base3/server.hpp	12;"	d
HairColour	base/include/srvEngine.h	/^struct HairColour{$/;"	s
HairStyle	base/include/srvEngine.h	/^struct HairStyle{$/;"	s
HandAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
HandAddDamA	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
Handflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
HandsAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
HandsAddDamA	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
Handsflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
HaveSkillCondition	SceneServer/libscenesserver/SceneServer1.h	/^  HaveSkillCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:HaveSkillCondition
HaveSkillCondition	SceneServer/libscenesserver/SceneServer1.h	/^class HaveSkillCondition : public TeamCondition$/;"	c
HaveSkillCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
HaveSkillCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:HaveSkillCondition
HeadList	base/include/srvEngine.h	/^struct HeadList{$/;"	s
Header	base/include/srvEngine.h	/^	unsigned char Header[2];$/;"	m	struct:PACK_HEAD
Heart	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Card::Suit
HistoryIndex	BillServer/old_back/BillServer.h	/^    typedef hash_multimap<DWORD,Cmd::ConsignHistoryType> HistoryIndex;$/;"	t	class:ConsignHistoryManager
HistoryRange	BillServer/old_back/BillServer.h	/^    typedef pair<HistoryIndex::iterator,HistoryIndex::iterator> HistoryRange;$/;"	t	class:ConsignHistoryManager
Hole	SceneServer/libscenesserver/SceneServer1.h	/^class Hole$/;"	c
Hole	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
HolyObjectBase	base/include/srvEngine.h	/^struct HolyObjectBase{$/;"	s
HonorAction	SceneServer/libscenesserver/SceneServer1.h	/^  HonorAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:HonorAction
HonorAction	SceneServer/libscenesserver/SceneServer1.h	/^class HonorAction : public TeamAction$/;"	c
HonorBase	base/include/srvEngine.h	/^struct HonorBase$/;"	s
HonorCondition	SceneServer/libscenesserver/SceneServer1.h	/^  HonorCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:HonorCondition
HonorCondition	SceneServer/libscenesserver/SceneServer1.h	/^class HonorCondition : public TeamCondition$/;"	c
HonorCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
HonorCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:HonorCondition
Horse	SceneServer/libscenesserver/Horse.cpp	/^Horse::Horse(SceneUser& user) : _owner(user),_horse(0),_mount(false)$/;"	f	class:Horse
Horse	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
HorseAction	SceneServer/libscenesserver/SceneServer1.h	/^  HorseAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:HorseAction
HorseAction	SceneServer/libscenesserver/SceneServer1.h	/^class HorseAction : public TeamAction$/;"	c
HorseCondition	SceneServer/libscenesserver/SceneServer1.h	/^  HorseCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:HorseCondition
HorseCondition	SceneServer/libscenesserver/SceneServer1.h	/^class HorseCondition : public TeamCondition$/;"	c
HorseCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
HorseCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:HorseCondition
Hsocket	base/include/csCommon.h	/^/;"	m	struct:_Object
ICmdChecker	GatewayServer/old_back/GatewayServer.h	/^class ICmdChecker$/;"	c
IMultiByteToWideChar	base/src/codeLib.c	/^size_t _API_DESC_ IMultiByteToWideChar(UINT CodePage,DWORD dwFlags,PSTR szMB,size_t nMB,PWSTR szWC,size_t nWC)$/;"	f
INCOMPLETE_READ	base/include/x_socket.h	/^	static const uint32_t INCOMPLETE_READ  =  0x00000001;        \/**< ‰∏äÊ¨°ÂØπÂ•óÊé•Âè£ËøõË°åËØªÂèñÊìç‰ΩúÊ≤°ÊúâËØªÂèñÂÆåÂÖ®ÁöÑÊ†áÂøó *\/$/;"	m	class:x_socket
INCOMPLETE_WRITE	base/include/x_socket.h	/^	static const uint32_t INCOMPLETE_WRITE  =  0x00000002;        \/**< ‰∏äÊ¨°ÂØπÂ•óÊé•Âè£ËøõË°åÂÜôÂÖ•Êìç‰ΩúÊ≤°ÊúâÂÜôÂÖ•ÂÆåÊØïÁöÑÊ†áÂøó *\/$/;"	m	class:x_socket
INCS	deps/tinyxml/Makefile	/^INCS :=$/;"	m
INIT_BUF_SIZE	base/src/getopt.c	1947;"	d	file:
INIT_TECH	SessionServer/libsessionserver/SessionServer.h	/^      INIT_TECH, \/\/ ≥ı º◊¥Ã¨$/;"	e	enum:CTech::__anon109
INVALID_HOLE	base/include/csCommon.h	/^/;"	v
INVALID_INDEX	SceneServer/libscenesserver/SceneServer1.h	/^    INVALID_INDEX = 4,$/;"	e	enum:Hole::__anon101
INVALID_INDEX	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Hole::__anon91
INVALID_LOC	base/include/csCommon.h	/^/;"	e	enum:Object::__anon181
INVALID_NUM	SceneServer/libscenesserver/SceneServer1.h	/^    INVALID_NUM = 5,$/;"	e	enum:Hole::__anon101
INVALID_NUM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Hole::__anon91
INVALID_POS	base/include/csCommon.h	/^/;"	m	namespace:Object
INVALID_SOCKET	base/common.h	76;"	d
INVALID_TAB	base/include/csCommon.h	/^/;"	e	enum:Object::__anon181
INVALID_THISID	base/include/csCommon.h	484;"	d
INVALID_X	base/include/csCommon.h	/^/;"	e	enum:Object::__anon181
INVALID_Y	base/include/csCommon.h	/^/;"	e	enum:Object::__anon181
INVITE_CHANNEL_USERCMD_PARAMETER	base/include/csCommon.h	4733;"	d
INVITE_MINI_PARA	base/include/csCommon.h	12640;"	d
INVITE_RET_MINI_PARA	base/include/csCommon.h	12652;"	d
IOOperationType	base/include/srvEngine.h	/^}IOOperationType,   *LPIOOperationType;$/;"	t	typeref:enum:enum_IOOperationType
IO_Read	base/include/srvEngine.h	/^	IO_Read		  \/\/ ËØª$/;"	e	enum:enum_IOOperationType
IO_Write	base/include/srvEngine.h	/^	IO_Write,     \/\/ ÂÜô$/;"	e	enum:enum_IOOperationType
ISPROPERTY	SceneServer/libscenesserver/Trade.cpp	315;"	d	file:
IS_MASK_SET	SceneServer/libscenesserver/script.cpp	57;"	d	file:
ITEM	base/include/srvEngine.h	/^		ITEM( const std::string& odds_,const std::string& item_,const std::string& number_) : item(atoi(item_.c_str())),odds(atoi(odds_.c_str())),min_number(0),max_number(0)$/;"	f	class:zLiveSkillB::ITEM
ITEM	base/include/srvEngine.h	/^	class ITEM $/;"	c	struct:zLiveSkillB
ITEMS	base/include/srvEngine.h	/^	typedef std::vector<ITEM> ITEMS;$/;"	t	struct:zLiveSkillB
ITEM_COOLTIME	base/include/csCommon.h	/^/;"	e	enum:TempArchiveType
ITEM_COOL_TIMES_USERCMD	base/include/csBox.h	384;"	d
ITEN_USEITEM_SUCCESS_USERCMD	base/include/csBox.h	396;"	d
IWideCharToMultiByte	base/src/codeLib.c	/^size_t _API_DESC_ IWideCharToMultiByte(UINT CodePage,DWORD dwFlags,PWSTR szWC,size_t nWC,PSTR szMB,size_t nMB,LPCSTR lpDefaultChar,BOOL *lpUsedDefaultChar)$/;"	f
IceAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
IceAddDamA	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
Iceflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
IdCoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stXmlItemCoolTime
Identify	deps/tinyxml/tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode
IfKillAllUser	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::IfKillAllUser()$/;"	f	class:GangScene
IfKillUserNum	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::IfKillUserNum(DWORD CampID)$/;"	f	class:GangScene
IfRegNumMax	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::IfRegNumMax(DWORD CampID)$/;"	f	class:GangScene
IfTimeGetGo	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::IfTimeGetGo()$/;"	f	class:GangScene
IfTimeKillNpcMuch	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::IfTimeKillNpcMuch()$/;"	f	class:GangScene
IfTimeKillUserMuch	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::IfTimeKillUserMuch()$/;"	f	class:GangScene
IfUserInQueuing	SessionServer/libsessionserver/Queuing.cpp	/^bool CArenaManager::IfUserInQueuing(BYTE type, DWORD UserID)$/;"	f	class:CArenaManager
IfUserInWait	SessionServer/libsessionserver/Queuing.cpp	/^bool CQueueManager::IfUserInWait(BYTE type, DWORD UserID)$/;"	f	class:CQueueManager
IfUserInWaits	SessionServer/libsessionserver/Queuing.cpp	/^bool CQueuingManager::IfUserInWaits(BYTE type, DWORD UserID)$/;"	f	class:CQueuingManager
IfWatchNpcAtt	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::IfWatchNpcAtt()$/;"	f	class:GangScene
IfWreckBase	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::IfWreckBase(DWORD npcid)$/;"	f	class:GangScene
Immolate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ImmuneComa	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ImmuneDread	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ImmuneExile	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ImmuneFrozen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ImmuneSilence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ImmuneTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	v
InNationCondition	SceneServer/libscenesserver/SceneServer1.h	/^  InNationCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:InNationCondition
InNationCondition	SceneServer/libscenesserver/SceneServer1.h	/^class InNationCondition : public TeamCondition$/;"	c
InNationCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
InNationCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:InNationCondition
Increment	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
Indent	deps/tinyxml/tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:TiXmlPrinter
Info	GatewayServer/old_back/GatewayServer.h	/^		Info()$/;"	f	struct:CountryInfo::Info
Info	GatewayServer/old_back/GatewayServer.h	/^	struct Info$/;"	s	class:CountryInfo
InfoClient	SuperServer/InfoClient.cpp	/^InfoClient::InfoClient($/;"	f	class:InfoClient
InfoClient	SuperServer/InfoClient.h	/^class InfoClient : public x_tcp_clientTask$/;"	c
InfoClientManager	SuperServer/InfoClientManager.cpp	/^InfoClientManager::InfoClientManager()$/;"	f	class:InfoClientManager
InfoClientManager	SuperServer/InfoClientManager.h	/^class InfoClientManager$/;"	c
InfoClient_map	SuperServer/InfoClientManager.h	/^    typedef std::map<const DWORD,InfoClient *> InfoClient_map;$/;"	t	class:InfoClientManager
InfoClient_set	SuperServer/InfoClientManager.h	/^    typedef std::multiset<InfoClient *,lt_client> InfoClient_set;$/;"	t	class:InfoClientManager
InitCoolTimeType	SceneServer/libscenesserver/ItemCoolTime.cpp	/^bool CItmeCoolTime::InitCoolTimeType()$/;"	f	class:CItmeCoolTime
InitData	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^void GangScene::InitData()$/;"	f	class:GangScene
InitIntervalAmendment	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::t_NpcDefine
InitObjBase_SuitData	SceneServer/libscenesserver/ScenesServer.cpp	/^void InitObjBase_SuitData()$/;"	f
InitObject	SceneServer/libscenesserver/SceneServer1.h	/^  InitObject()$/;"	f	struct:InitObject
InitObject	SceneServer/libscenesserver/SceneServer1.h	/^  InitObject(const InitObject &object)$/;"	f	struct:InitObject
InitObject	SceneServer/libscenesserver/SceneServer1.h	/^struct InitObject$/;"	s
InitObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::InitObject
InitObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
InitObjectVector	SceneServer/libscenesserver/SceneServer1.h	/^typedef std::vector<InitObject> InitObjectVector;$/;"	t
InitObjectVector	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	namespace:O
InsertAfterChild	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
InsertBattleTask	SessionServer/libsessionserver/Queuing.cpp	/^void CArenaManager::InsertBattleTask(SessionTask * pTask)$/;"	f	class:CArenaManager
InsertBeforeChild	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
InsertEndChild	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode
IntValue	deps/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute
IsAlpha	deps/tinyxml/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase
IsAlphaNum	deps/tinyxml/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase
IsApart	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:stxml_SuitAttribute
IsArchitecture	SceneServer/libscenesserver/SceneBattlefiel.h	/^	virtual bool IsArchitecture() {return true;}$/;"	f	class:SceneArchitecture
IsArchitecture	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneGhost
IsArchitecture	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ScenePet
IsBuffSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsBuffSkill()		\/\/sky ºÏ≤‚ººƒ‹ «∑Ò «‘ˆ“ÊBUFFœµ$/;"	f	class:zSkill
IsCoolTimeOver	SceneServer/libscenesserver/ItemCoolTime.cpp	/^bool CItmeCoolTime::IsCoolTimeOver(zObject* obj)$/;"	f	class:CItmeCoolTime
IsDeBuffSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsDeBuffSkill()	\/\/sky ºÏ≤‚ººƒ‹ «∑Ò «ºı“ÊBUFFœµ$/;"	f	class:zSkill
IsDrugSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsDrugSkill()		\/\/sky ºÏ≤‚ººƒ‹ «∑Ò «∂æœµ$/;"	f	class:zSkill
IsEmpty	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zZone
IsFull	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
IsGangScene	SceneServer/libscenesserver/SceneBattlefiel.h	/^	virtual bool IsGangScene() { return true; }$/;"	f	class:GangScene
IsGangScene	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
IsGangScene	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::StaticScene
IsGuardCondition	SceneServer/libscenesserver/SceneServer1.h	/^  IsGuardCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:IsGuardCondition
IsGuardCondition	SceneServer/libscenesserver/SceneServer1.h	/^class IsGuardCondition : public TeamCondition$/;"	c
IsGuardCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
IsGuardCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:IsGuardCondition
IsImmuneSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsImmuneSkill()	\/\/sky ºÏ≤‚ººƒ‹ «∑Òƒ‹±ª√‚“ﬂ$/;"	f	class:zSkill
IsInZone	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zZone
IsJobEquip	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::IsJobEquip(DWORD useJob, DWORD EquipType)$/;"	f	class:EquipPack
IsJoin	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
IsMagicSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsMagicSkill()	\/\/sky ºÏ≤‚ººƒ‹ «∑Ò «ƒß∑®œµººƒ‹$/;"	f	class:zSkill
IsOpen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
IsOppose	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
IsOtherSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsOtherSkill()		\/\/sky ºÏ≤‚ººƒ‹ «∑Ò «∆‰À˚œµ$/;"	f	class:zSkill
IsOurTeam	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::IsOurTeam(DWORD dwID)$/;"	f	class:TeamManager
IsOurTeam	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::IsOurTeam(SceneUser *pUser)$/;"	f	class:TeamManager
IsPhysicsSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsPhysicsSkill()	\/\/sky ºÏ≤‚ººƒ‹ «∑Ò «ŒÔ¿Ìœµººƒ‹$/;"	f	class:zSkill
IsPking	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
IsReboundSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsReboundSkill()	\/\/sky ºÏ≤‚ººƒ‹ «∑Òƒ‹±ª∑¥…‰$/;"	f	class:zSkill
IsTeamed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
IsTreatmentSkill	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::IsTreatmentSkill()	\/\/sky ºÏ≤‚ººƒ‹ «∑Ò «÷Œ¡∆œµ$/;"	f	class:zSkill
IsValidGb2312	base/src/codeLib.c	/^BOOL IsValidGb2312(BYTE b0,BYTE b1)$/;"	f
IsWhiteSpace	deps/tinyxml/tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:TiXmlBase
IsWhiteSpace	deps/tinyxml/tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase
IsWhiteSpaceCondensed	deps/tinyxml/tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:TiXmlBase
ItemCondition	SceneServer/libscenesserver/SceneServer1.h	/^  ItemCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:ItemCondition
ItemCondition	SceneServer/libscenesserver/SceneServer1.h	/^class ItemCondition : public TeamCondition$/;"	c
ItemCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ItemCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ItemCondition
ItemID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stItemIdCoolTime
ItemID	base/include/csBox.h	/^	uint32_t ItemID;$/;"	m	struct:Cmd::stItemUseItemSuccessUserCmd
ItemObjectCompare	SceneServer/libscenesserver/SceneRelation.cpp	/^class ItemObjectCompare:public UserObjectCompare $/;"	c	file:
ItemObjectCompare	SceneServer/libscenesserver/Skill.cpp	/^class ItemObjectCompare:public UserObjectCompare $/;"	c	file:
ItemPos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::RollItemPos
ItemType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stItemTypeCoolTiem
ItemType_Adonment	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Amulet	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Arrow	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Auto	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Axe	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_BMW	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Bangle	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_BattleHorse	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Blade	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Book	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Building	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Caestus	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Caestus_Paper	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Caestus_Plate	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_CaptureWeapon	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Change	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_ClearProperty	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_ClothBody	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Crossbow	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Cuff	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Cuff_Paper	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Cuff_Plate	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_DoubleExp	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_DoubleExpC	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_DoubleExpG	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_DoubleExpZ	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Earrings	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_FAMILY	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Fan	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_FashionBody	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_FellBody	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Fing	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Flower	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Food	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_FoodRes	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Gift	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Gloves_Paper	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Gloves_Plate	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_GreatLeechdom	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_GreatLeechdomMp	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_HORSE	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Hammer	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Helm	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Helm_Paper	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Helm_Plate	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_HighFashionBody	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Honor	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Jade	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_KING	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Leechdom	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_LevelUp	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_MASK	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_MAX	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Manteau	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_MetalBody	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Money	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Move	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Necklace	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_None	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Other	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Pack	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Pants_Paper	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Pants_Plate	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Quest	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Renew	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Repair	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Resource	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_SOULSTONE	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Scroll	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Shield	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Shoes	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Shoes_Paper	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Shoes_Plate	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Shoulder_Paper	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Shoulder_Plate	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_SkillItem	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_SkillUp	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_SpecialBook	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Staff	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Stick	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Store	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Sword	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_TONG	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Tonic	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Tools	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Union	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_UseSkill	base/include/csCommon.h	/^/;"	e	enum:enumItemType
ItemType_Wedding	base/include/csCommon.h	/^/;"	e	enum:enumItemType
IterateChildren	deps/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode
IterateChildren	deps/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode
IterateChildren	deps/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode
IterateChildren	deps/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode
IterateChildren	deps/tinyxml/tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
IterateChildren	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	{	return IterateChildren (_value.c_str (), previous);	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
JOB_FIGHTER	base/include/csCommon.h	/^/;"	e	enum:__anon180
JOB_MASTER	base/include/csCommon.h	/^/;"	e	enum:__anon180
JOB_NULL	base/include/csCommon.h	/^/;"	e	enum:__anon180
JOB_PASTOR	base/include/csCommon.h	/^/;"	e	enum:__anon180
JOB_THIEVES	base/include/csCommon.h	/^/;"	e	enum:__anon180
JOIN_CHANNEL_USERCMD_PARAMETER	base/include/csCommon.h	4746;"	d
JOIN_SEPT_NEED_LEVEL	base/include/csCommon.h	/^/;"	m	namespace:SeptDef
JPEG_PASSPORT_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
Joker	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Card::Suit
KEY_ARG	base/src/getopt.c	981;"	d	file:
KEY_END	base/src/getopt.c	980;"	d	file:
KEY_ERR	base/src/getopt.c	982;"	d	file:
KICK_USER_COMMON_MINI_PARA	base/include/csCommon.h	12247;"	d
KILL_BOSS_USERCMD_PARA	base/include/csCommon.h	4981;"	d
KILL_FOREIGNER_USERCMD_PARA	base/include/csCommon.h	4953;"	d
KING_CITY_ID	SessionServer/libsessionserver/SessionServer.h	/^const DWORD KING_CITY_ID = 139;$/;"	v
KING_HORSE_ID	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD KING_HORSE_ID = 3204;\/\/π˙Õıµƒ¬ÌID$/;"	v
KING_PUNISH_COUNTRY_PARA	base/include/csCommon.h	6464;"	d
KV	SceneServer/libscenesserver/SceneServer1.h	/^  typedef std::map<std::string,std::string> KV;$/;"	t	class:ScenesParser
KV	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:ScenesParser
Key_id	base/include/csBox.h	/^	uint32_t Key_id;$/;"	m	struct:Cmd::stSetCowBoxKeyCmd
Kill	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
KillByLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
KillBySelf	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
KillNpcNum	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD KillNpcNum;$/;"	m	struct:BCampData
KillPoint	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD KillPoint;$/;"	m	class:GangScene
KillUserNum	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD KillUserNum;$/;"	m	struct:BCampData
LD	deps/tinyxml/Makefile	/^LD     := g++$/;"	m
LDFLAGS	deps/tinyxml/Makefile	/^   LDFLAGS      := ${DEBUG_LDFLAGS}$/;"	m
LDFLAGS	deps/tinyxml/Makefile	/^   LDFLAGS      := ${RELEASE_LDFLAGS}$/;"	m
LDFLAGS	deps/tinyxml/Makefile	/^   LDFLAGS  := ${LDFLAGS} -pg$/;"	m
LEAVEONLINE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
LEAVE_CHANNEL_USERCMD_PARAMETER	base/include/csCommon.h	4758;"	d
LEAVE_GAME_COMMON_MINI_PARA	base/include/csCommon.h	12208;"	d
LEAVE_ROOM_COMMON_MINI_PARA	base/include/csCommon.h	12156;"	d
LEFT_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Packages::__anon57
LETOUT_CARTOON_PARA	base/include/csCommon.h	9570;"	d
LEVELDEGREE_DATA_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
LEVELUP_ATTACKDODGE_N	base/include/csCommon.h	1256;"	d
LEVELUP_ATTACKRATING_N	base/include/csCommon.h	1255;"	d
LEVELUP_ATTACKSPEED_N	base/include/csCommon.h	1259;"	d
LEVELUP_BANG_N	base/include/csCommon.h	1266;"	d
LEVELUP_HP_N	base/include/csCommon.h	1247;"	d
LEVELUP_MDAMAGE_N	base/include/csCommon.h	1262;"	d
LEVELUP_MDEFENCE_N	base/include/csCommon.h	1264;"	d
LEVELUP_MOVESPEED_N	base/include/csCommon.h	1258;"	d
LEVELUP_MP_N	base/include/csCommon.h	1248;"	d
LEVELUP_PDAMAGE_N	base/include/csCommon.h	1261;"	d
LEVELUP_PDEFENCE_N	base/include/csCommon.h	1263;"	d
LEVELUP_RESUMEHP_N	base/include/csCommon.h	1251;"	d
LEVELUP_RESUMEMP_N	base/include/csCommon.h	1252;"	d
LEVELUP_RESUMESP_N	base/include/csCommon.h	1253;"	d
LEVELUP_SP_N	base/include/csCommon.h	1249;"	d
LEVELUP_STONE_ID	SceneServer/libscenesserver/SceneServer1.h	/^    LEVELUP_STONE_ID = 681,$/;"	e	enum:RebuildObject::__anon102
LEVELUP_STONE_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:RebuildObject::__anon93
LIBS	BillServer/Makefile	/^LIBS = -lseal -lmysqlcppconn -lpthread -llog4cxx -lboost_system -lboost_thread -lboost_chrono -ltinyxml$/;"	m
LIBS	FLServer/Makefile	/^LIBS = -lseal -lmysqlcppconn -lpthread -llog4cxx -lboost_system -lboost_thread -lboost_chrono -ltinyxml$/;"	m
LIBS	GatewayServer/Makefile	/^LIBS = -lseal -lmysqlcppconn -lpthread -llog4cxx -lboost_system -lboost_thread -lboost_chrono -ltinyxml -lboost_date_time$/;"	m
LIBS	RecordServer/Makefile	/^LIBS = -lseal -lmysqlcppconn -lpthread -llog4cxx -lboost_system -lboost_thread -lboost_chrono -ltinyxml$/;"	m
LIBS	SceneServer/Makefile	/^LIBS = -lseal -lmysqlcppconn -lpthread -llog4cxx -lboost_system -lboost_thread -lboost_chrono -ltinyxml$/;"	m
LIBS	SessionServer/Makefile	/^LIBS = -lseal -lmysqlcppconn -lpthread -llog4cxx -lboost_system -lboost_thread -lboost_chrono -ltinyxml$/;"	m
LIBS	SuperServer/Makefile	/^LIBS = -lseal -lmysqlcppconn -lpthread -llog4cxx -lboost_system -lboost_thread -lboost_chrono -ltinyxml$/;"	m
LIBS	base/Makefile	/^LIBS = -lpthread -llog4cxx -lmysqlcppconn -lboost_system -lboost_thread -ltinyxml$/;"	m
LIBS	client/Makefile	/^LIBS = -lseal -lmysqlcppconn -lpthread -llog4cxx -lboost_system -lboost_thread -lboost_chrono -ltinyxml$/;"	m
LIBS	deps/tinyxml/Makefile	/^LIBS		 :=$/;"	m
LIBS	tmp/base2/makefile	/^LIBS = -lboost_system -lpthread -lboost_thread$/;"	m
LIBSEAL	BillServer/Makefile	/^LIBSEAL = ..\/base\/libseal.a$/;"	m
LIBSEAL	FLServer/Makefile	/^LIBSEAL = ..\/base\/libseal.a$/;"	m
LIBSEAL	GatewayServer/Makefile	/^LIBSEAL = ..\/base\/libseal.a$/;"	m
LIBSEAL	RecordServer/Makefile	/^LIBSEAL = ..\/base\/libseal.a$/;"	m
LIBSEAL	SceneServer/Makefile	/^LIBSEAL = ..\/base\/libseal.a$/;"	m
LIBSEAL	SessionServer/Makefile	/^LIBSEAL = ..\/base\/libseal.a$/;"	m
LIBSEAL	SuperServer/Makefile	/^LIBSEAL= ..\/base\/libseal.a$/;"	m
LIBSEAL	client/Makefile	/^LIBSEAL = ..\/base\/libseal.a$/;"	m
LIB_DIR	base/Makefile	/^LIB_DIR = -L$(boost_home)\/stage\/lib -L..\/deps\/tinyxml$/;"	m
LIB_DIR	tmp/base2/makefile	/^LIB_DIR = -L\/home\/liuqing\/boost_1_52_0\/stage\/lib$/;"	m
LIST	SceneServer/libscenesserver/SceneServer1.h	/^  typedef std::map<I,C*> LIST;$/;"	t	class:ProductFactory
LLEN	base/src/getopt.c	1407;"	d	file:
LM_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Packages::__anon57
LOADMAPOK_DATA_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
LOGINSERVER	base/common.h	/^	LOGINSERVER     =  10, \/** ÁôªÈôÜÊúçÂä°Âô® *\/$/;"	e	enum:ServerType
LOGIN_COMMON_MINI_PARA	base/include/csCommon.h	12005;"	d
LOGIN_PING_PARA	base/command.h	/^	const BYTE LOGIN_PING_PARA = 3;$/;"	m	namespace:Cmd
LOGIN_RETURN_ACCOUNTEXIST	base/command.h	/^		LOGIN_RETURN_ACCOUNTEXIST = 10,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_ACCOUNTEXIST	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_ACCOUNTSUCCESS	base/command.h	/^		LOGIN_RETURN_ACCOUNTSUCCESS = 11,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_BUSY	base/command.h	/^		LOGIN_RETURN_BUSY = 32,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_CHANGEPASSWORD	base/command.h	/^		LOGIN_RETURN_CHANGEPASSWORD = 5,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_CHANGEPASSWORD	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_CHANGE_LOGIN	base/command.h	/^		LOGIN_RETURN_CHANGE_LOGIN = 22,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_CHARNAMEREPEAT	base/command.h	/^		LOGIN_RETURN_CHARNAMEREPEAT = 12,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_CHARNAMEREPEAT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_DB	base/command.h	/^		LOGIN_RETURN_DB = 3,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_DB	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_FORBID	base/command.h	/^		LOGIN_RETURN_FORBID = 33,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_GATEWAYNOTAVAILABLE	base/command.h	/^		LOGIN_RETURN_GATEWAYNOTAVAILABLE = 8,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_GATEWAYNOTAVAILABLE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_IDINCLOSE	base/command.h	/^		LOGIN_RETURN_IDINCLOSE = 7,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_IDINCLOSE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_IDINUSE	base/command.h	/^		LOGIN_RETURN_IDINUSE = 6,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_IDINUSE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_IMG_LOCK	base/command.h	/^		LOGIN_RETURN_IMG_LOCK = 28,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_JPED_PASSPORT	base/command.h	/^		LOGIN_RETURN_JPED_PASSPORT = 16,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_JPEG_PASSPORT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_LOCK	base/command.h	/^		LOGIN_RETURN_LOCK = 17,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_LOCK	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_MATRIX_DOWN	base/command.h	/^		LOGIN_RETURN_MATRIX_DOWN = 26,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_MATRIX_ERROR	base/command.h	/^		LOGIN_RETURN_MATRIX_ERROR = 23,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_MATRIX_LOCK	base/command.h	/^		LOGIN_RETURN_MATRIX_LOCK = 25,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_MATRIX_NEED	base/command.h	/^		LOGIN_RETURN_MATRIX_NEED = 24,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_MAXCHARBASELIMIT	base/command.h	/^		LOGIN_RETURN_MAXCHARBASELIMIT = 34,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_NEWUSER_OLDZONE	base/command.h	/^		LOGIN_RETURN_NEWUSER_OLDZONE = 19,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_NEWUSER_OLDZONE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_OLDUSER_NEWZONE	base/command.h	/^		LOGIN_RETURN_OLDUSER_NEWZONE = 27,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_PASSWORDERROR	base/command.h	/^		LOGIN_RETURN_PASSWORDERROR = 4,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_PASSWORDERROR	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_PAYFAILED	base/command.h	/^		LOGIN_RETURN_PAYFAILED = 15,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_PAYFAILED	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_TIMEOUT	base/command.h	/^		LOGIN_RETURN_TIMEOUT = 14,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_TIMEOUT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_UNKNOWN	base/command.h	/^		LOGIN_RETURN_UNKNOWN = 0,		\/\/unknown error$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_UNKNOWN	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_USERDATANOEXIST	base/command.h	/^		LOGIN_RETURN_USERDATANOEXIST = 13,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_USERDATANOEXIST	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_USERMAX	base/command.h	/^		LOGIN_RETURN_USERMAX = 9,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_USERMAX	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_USERNAMEREPEAT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_USER_TOZONE	base/command.h	/^		LOGIN_RETURN_USER_TOZONE = 21,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_UUID	base/command.h	/^		LOGIN_RETURN_UUID = 2,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_UUID	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_UUID_ERROR	base/command.h	/^		LOGIN_RETURN_UUID_ERROR = 20,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_VERSIONERROR	base/command.h	/^		LOGIN_RETURN_VERSIONERROR = 1,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_VERSIONERROR	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RETURN_WAITACTIVE	base/command.h	/^		LOGIN_RETURN_WAITACTIVE = 18,$/;"	e	enum:Cmd::__anon120
LOGIN_RETURN_WAITACTIVE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGIN_RET_COMMON_MINI_PARA	base/include/csCommon.h	12271;"	d
LOGON_RETURN_ACCOUNTSUCCESS	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon196
LOGON_USERCMD	base/command.h	/^	const BYTE LOGON_USERCMD = 104;$/;"	m	namespace:Cmd
LOGON_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
LOGOUT_COMMON_MINI_PARA	base/include/csCommon.h	12015;"	d
LOGOUT_WRITEBACK	base/recordcmd.h	/^			LOGOUT_WRITEBACK,$/;"	e	enum:Cmd::Record::WriteBack_Type
LONG_OPT_COL	base/src/getopt.c	2306;"	d	file:
LPIOOperationType	base/include/srvEngine.h	/^}IOOperationType,   *LPIOOperationType;$/;"	t	typeref:enum:enum_IOOperationType
LUALIB_BASE	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD LUALIB_BASE    = 0x00000001;$/;"	v
LUALIB_DEBUG	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD LUALIB_DEBUG    = 0x00000020;$/;"	v
LUALIB_IO	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD LUALIB_IO      = 0x00000004;$/;"	v
LUALIB_MATH	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD LUALIB_MATH    = 0x00000010;$/;"	v
LUALIB_STRING	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD LUALIB_STRING    = 0x00000008;$/;"	v
LUALIB_TABLE	SceneServer/libscenesserver/SceneServer1.h	/^const DWORD LUALIB_TABLE    = 0x00000002;$/;"	v
L_MAKE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::PACKNO
L_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::PACKNO
Last	base/include/srvEngine.h	/^	unsigned char Last;$/;"	m	struct:PACK_LAST
Last	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet
Last	deps/tinyxml/tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet
LastAttribute	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:TiXmlElement
LastAttribute	deps/tinyxml/tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access the last attribute in this element.$/;"	f	class:TiXmlElement
LastChild	deps/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode
LastChild	deps/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode
LastChild	deps/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
LastChild	deps/tinyxml/tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:TiXmlNode
LastChild	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
LastChild	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. Will be null if there are no children.$/;"	f	class:TiXmlNode
LeaberID	SceneServer/libscenesserver/TeamManager.cpp	/^	DWORD LeaberID;$/;"	m	struct:SendMemberDataExec	file:
LeaberID	SceneServer/libscenesserver/TeamManager.cpp	/^  DWORD LeaberID;$/;"	m	struct:AddNewMemberExec	file:
LeaveScene	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
Leechdom	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::Leechdom
Leechdom	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
LeechdomElement	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LeechdomElement
LeechdomElement	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
LeechdomType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	namespace:O
Leechdom_chocolate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_dam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_def	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_default	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_hp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_hp5	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_hpmax	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_hppersist	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_hppersist5	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	struct:O::Leechdom
Leechdom_mp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_mpmax	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_mppersist	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_poison	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_sp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_spcostdown	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_sppersist	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_spresumeup	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_spup	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LeechdomType
Leechdom_vector	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	struct:O::Leechdom
Len	base/include/srvEngine.h	/^	unsigned short Len;$/;"	m	struct:PACK_HEAD
Less	SceneServer/libscenesserver/SceneServer1.h	/^  class Less$/;"	c	namespace:Op
Less	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
LessIgnoreHB	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills::Event
LevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^  LevelCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:LevelCondition
LevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^class LevelCondition : public TeamCondition$/;"	c
LevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
LevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:LevelCondition
LevelUpCountdown	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD LevelUpCountdown;$/;"	m	class:SceneArchitecture
LevelUpTime	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD LevelUpTime;					\/\/sky ’ŸªΩµƒ±¯…˝º∂ ±º‰(∑÷÷”)$/;"	m	class:SceneArchitecture
LimitHash	base/include/srvEngine.h	/^	LimitHash()$/;"	f	class:LimitHash
LimitHash	base/include/srvEngine.h	/^class LimitHash:private boost::noncopyable$/;"	c
LineBreak	deps/tinyxml/tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter
LinkEndChild	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode
ListeningRecv	base/src/x_tcp_client.cpp	/^bool x_tcp_buffer_client::ListeningRecv()$/;"	f	class:x_tcp_buffer_client
ListeningRecv	base/src/x_tcptask.cpp	/^bool x_tcptask::ListeningRecv(bool needRecv)$/;"	f	class:x_tcptask
ListeningRecv	base/src/zTCPClientTask.cpp	/^bool x_tcp_clientTask::ListeningRecv(bool needRecv)$/;"	f	class:x_tcp_clientTask
ListeningSend	base/src/x_tcp_client.cpp	/^bool x_tcp_buffer_client::ListeningSend()$/;"	f	class:x_tcp_buffer_client
ListeningSend	base/src/x_tcptask.cpp	/^bool x_tcptask::ListeningSend()$/;"	f	class:x_tcptask
ListeningSend	base/src/zTCPClientTask.cpp	/^bool x_tcp_clientTask::ListeningSend()$/;"	f	class:x_tcp_clientTask
LiveSkill	base/include/csCommon.h	/^/;"	s
LiveSkillBase	base/include/srvEngine.h	/^struct LiveSkillBase{$/;"	s
LiveSkills	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
LiveSkillsManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
LoadFile	deps/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
LoadFile	deps/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
LoadFile	deps/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
LoadFile	deps/tinyxml/tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )			\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument
LoadItmeCoolTime	SceneServer/libscenesserver/ScenesServer.cpp	/^bool ScenesService::LoadItmeCoolTime()$/;"	f	class:ScenesService
LoadMap	SceneServer/libscenesserver/LoadMap.cpp	/^bool LoadMap(const char* pszFileName,zTiles &aTiles,DWORD & width,DWORD & height)$/;"	f
LoadSuitInfo	SceneServer/libscenesserver/ScenesServer.cpp	/^bool ScenesService::LoadSuitInfo()$/;"	f	class:ScenesService
LoadXmlToArena	SessionServer/libsessionserver/Queuing.cpp	/^bool CArenaManager::LoadXmlToArena()$/;"	f	class:CArenaManager
LogAction	SceneServer/libscenesserver/SceneServer1.h	/^  LogAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:LogAction
LogAction	SceneServer/libscenesserver/SceneServer1.h	/^class LogAction : public TeamAction$/;"	c
LogAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
LogAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:LogAction
LoginManager	FLServer/LoginManager.h	/^	LoginManager(){}$/;"	f	class:LoginManager
LoginManager	FLServer/LoginManager.h	/^class LoginManager {$/;"	c
LoginReturn	FLServer/LoginTask.cpp	/^void LoginTask::LoginReturn(const BYTE retcode,const bool tm)$/;"	f	class:LoginTask
LoginSession	GatewayServer/LoginSessionManager.h	/^		LoginSession(const t_NewLoginSession &ses) : session(ses) {$/;"	f	struct:LoginSessionManager::LoginSession
LoginSession	GatewayServer/LoginSessionManager.h	/^	struct LoginSession {$/;"	s	class:LoginSessionManager
LoginSession	GatewayServer/old_back/GatewayServer.h	/^		LoginSession(const LoginSession& ls)$/;"	f	struct:LoginSessionManager::LoginSession
LoginSession	GatewayServer/old_back/GatewayServer.h	/^		LoginSession(const t_NewLoginSession &session) : session(session), timestamp()$/;"	f	struct:LoginSessionManager::LoginSession
LoginSession	GatewayServer/old_back/GatewayServer.h	/^	struct LoginSession$/;"	s	class:LoginSessionManager
LoginSessionHashmap	GatewayServer/LoginSessionManager.h	/^	typedef boost::unordered_map<DWORD, LoginSession> LoginSessionHashmap;$/;"	t	class:LoginSessionManager
LoginSessionHashmap	GatewayServer/old_back/GatewayServer.h	/^	typedef \/*__gnu_cxx::*\/hash_map<DWORD, LoginSession> LoginSessionHashmap;$/;"	t	class:LoginSessionManager
LoginSessionHashmap_iterator	GatewayServer/LoginSessionManager.h	/^	typedef LoginSessionHashmap::iterator LoginSessionHashmap_iterator;$/;"	t	class:LoginSessionManager
LoginSessionHashmap_iterator	GatewayServer/old_back/GatewayServer.h	/^	typedef LoginSessionHashmap::iterator LoginSessionHashmap_iterator;$/;"	t	class:LoginSessionManager
LoginSessionHashmap_pair	GatewayServer/LoginSessionManager.h	/^	typedef LoginSessionHashmap::value_type LoginSessionHashmap_pair;$/;"	t	class:LoginSessionManager
LoginSessionHashmap_pair	GatewayServer/old_back/GatewayServer.h	/^	typedef LoginSessionHashmap::value_type LoginSessionHashmap_pair;$/;"	t	class:LoginSessionManager
LoginSessionManager	GatewayServer/LoginSessionManager.h	/^	LoginSessionManager() {$/;"	f	class:LoginSessionManager
LoginSessionManager	GatewayServer/LoginSessionManager.h	/^class LoginSessionManager: public Singleton<LoginSessionManager> $/;"	c
LoginSessionManager	GatewayServer/old_back/GatewayServer.h	/^	LoginSessionManager() : lastUpdateTime() {};$/;"	f	class:LoginSessionManager
LoginSessionManager	GatewayServer/old_back/GatewayServer.h	/^class LoginSessionManager$/;"	c
LoginState	BillServer/BillUser.h	/^    enum LoginState$/;"	g	class:BillUser
LoginState	BillServer/old_back/BillServer.h	/^    enum LoginState$/;"	g	class:BillUser
LoginTask	FLServer/LoginTask.h	/^		LoginTask(io_service& ios):tcp_task(ios) { }$/;"	f	class:LoginTask
LoginTask	FLServer/LoginTask.h	/^class LoginTask : public tcp_task$/;"	c
LoginTaskCallback	FLServer/LoginManager.h	/^	typedef zEntryCallback<LoginTask,void> LoginTaskCallback;$/;"	t	class:LoginManager
LoginTaskHashmap	FLServer/LoginManager.h	/^	typedef boost::unordered_map<DWORD,shared_ptr<LoginTask> > LoginTaskHashmap;$/;"	t	class:LoginManager
LoginTaskHashmap_const_iterator	FLServer/LoginManager.h	/^	typedef LoginTaskHashmap::const_iterator LoginTaskHashmap_const_iterator;$/;"	t	class:LoginManager
LoginTaskHashmap_iterator	FLServer/LoginManager.h	/^	typedef LoginTaskHashmap::iterator LoginTaskHashmap_iterator;$/;"	t	class:LoginManager
LoginTaskHashmap_pair	FLServer/LoginManager.h	/^	typedef LoginTaskHashmap::value_type LoginTaskHashmap_pair;$/;"	t	class:LoginManager
LuaScript	SceneServer/libscenesserver/SceneServer1.h	/^class LuaScript $/;"	c
LuaScript	SceneServer/libscenesserver/script.cpp	/^LuaScript::LuaScript() $/;"	f	class:LuaScript
LuaVM	SceneServer/libscenesserver/SceneServer1.h	/^class LuaVM$/;"	c
LuaVM	SceneServer/libscenesserver/script.cpp	/^LuaVM::LuaVM( DWORD libs ) $/;"	f	class:LuaVM
MAGIC_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MAIL_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MAIN_ACCESS_KEY_GROUP	base/include/csCommon.h	3930;"	d
MAIN_ACCESS_KEY_NUM	base/include/csCommon.h	3929;"	d
MAIN_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Packages::__anon57
MAIN_USER_DATA_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MAKE	SceneServer/libscenesserver/SceneServer1.h	/^    MAKE = 2,$/;"	e	enum:Base::ReuildType
MAKE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Base::ReuildType
MAKEFOURCC	SceneServer/libscenesserver/ScenesServer.h	53;"	d
MAKEOBJECT_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MAKE_WORK	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon187
MALE	base/include/csCommon.h	/^/;"	e	enum:__anon177
MAPDATATYPE_BUILDING	base/include/csCommon.h	/^/;"	e	enum:Cmd::enumMapDataType
MAPDATATYPE_ITEM	base/include/csCommon.h	/^/;"	e	enum:Cmd::enumMapDataType
MAPDATATYPE_NPC	base/include/csCommon.h	/^/;"	e	enum:Cmd::enumMapDataType
MAPDATATYPE_PET	base/include/csCommon.h	/^/;"	e	enum:Cmd::enumMapDataType
MAPDATATYPE_USER	base/include/csCommon.h	/^/;"	e	enum:Cmd::enumMapDataType
MAPSCREENSIZE_DATA_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MAPSCREEN_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MAP_FUNCTION_BATTLEFIEL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_FUNCTION_CAPITAL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_FUNCTION_MAZE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_FUNCTION_NOCALLOBJ	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_FUNCTION_NORED	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_FUNCTION_NORIDE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_FUNCTION_NOSCROLL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_FUNCTION_NOTEAM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_FUNCTION_NOVICE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon78
MAP_MAGIC	SceneServer/libscenesserver/ScenesServer.h	58;"	d
MAP_SETTING_RIDE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon206
MAP_SETTING_WEATHER	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon206
MAP_VERSION	SceneServer/libscenesserver/ScenesServer.h	59;"	d
MARK	SceneServer/libscenesserver/Quest.cpp	798;"	d	file:
MARRY_PRESENT_FEME	SceneServer/libscenesserver/SceneRelation.cpp	15;"	d	file:
MARRY_PRESENT_MALE	SceneServer/libscenesserver/SceneRelation.cpp	14;"	d	file:
MARRY_REQUEST_LEVEL	SceneServer/libscenesserver/SceneRelation.cpp	8;"	d	file:
MARRY_REQUEST_MONEY	SceneServer/libscenesserver/SceneRelation.cpp	11;"	d	file:
MARRY_REQUEST_MONEY1	SceneServer/libscenesserver/SceneRelation.cpp	12;"	d	file:
MARRY_REQUEST_MONEY2	SceneServer/libscenesserver/SceneRelation.cpp	13;"	d	file:
MARRY_REQUEST_M_ITEM_ID	SceneServer/libscenesserver/SceneRelation.cpp	9;"	d	file:
MARRY_REQUEST_W_ITEM_ID	SceneServer/libscenesserver/SceneRelation.cpp	10;"	d	file:
MAXDUP	SceneServer/libscenesserver/duplicateManager.h	/^const unsigned short MAXDUP = 4096;$/;"	v
MAX_ACCNAMESIZE	base/common.h	87;"	d
MAX_ACCNAMESIZE	base/include/csCommon.h	93;"	d
MAX_ARENA_USERLEVEL	SessionServer/libsessionserver/SessionServer.h	44;"	d
MAX_ATTACKDODGE	base/include/csCommon.h	/^/;"	v
MAX_ATTACKRATING	base/include/csCommon.h	/^/;"	v
MAX_ATTACKSPEED	base/include/csCommon.h	/^/;"	v
MAX_BUF_SIZE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::GlobalVarImpl::__anon72
MAX_BUF_SIZE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::UserVar::__anon73
MAX_BULLETIN_CHAR_NUMBER	base/include/csCommon.h	322;"	d
MAX_CAMPREG	SceneServer/libscenesserver/SceneBattlefiel.h	8;"	d
MAX_CHATINFO	base/include/csCommon.h	143;"	d
MAX_CMD_GROUP	SceneServer/libscenesserver/TimeTick.cpp	8;"	d	file:
MAX_DATABUFFERSIZE	base/include/x_socket.h	/^	static const uint32_t MAX_DATABUFFERSIZE  =  PACKET_MASK;            \/**< Êï∞ÊçÆÂåÖÊúÄÂ§ßÈïøÂ∫¶ÔºåÂåÖÊã¨ÂåÖÂ§¥4Â≠óËäÇ *\/$/;"	m	class:x_socket
MAX_DATASIZE	base/include/x_socket.h	/^	static const uint32_t MAX_DATASIZE      =  (MAX_DATABUFFERSIZE - PH_LEN);    \/**< Êï∞ÊçÆÂåÖÊúÄÂ§ßÈïøÂ∫¶ *\/$/;"	m	class:x_socket
MAX_ENTITY_LENGTH	deps/tinyxml/tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon212
MAX_EXP	base/include/csCommon.h	/^/;"	v
MAX_EXP_BONUS	base/include/srvEngine.h	/^		MAX_EXP_BONUS = 30,$/;"	e	enum:zLiveSkillB::__anon140
MAX_FIRE	base/include/csCommon.h	/^/;"	v
MAX_FIRERESISTANCE	base/include/csCommon.h	/^/;"	v
MAX_GAMEPOINT	SceneServer/libscenesserver/SceneBattlefiel.h	7;"	d
MAX_GAMETYPE	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniGameType
MAX_GATEWAYUSER	FLServer/LoginManager.cpp	7;"	d	file:
MAX_GATEWAYUSER	base/include/csCommon.h	105;"	d
MAX_GOODNESS	base/include/csCommon.h	/^/;"	v
MAX_GROUP_TIME_GAP	SessionServer/libsessionserver/SessionServer.h	393;"	d
MAX_HP	base/include/csCommon.h	/^/;"	v
MAX_INTERVAL	GatewayServer/old_back/GatewayServer.h	/^		MAX_INTERVAL = static_cast<int>(interval*(1.0+percent\/100.0)), $/;"	e	enum:percent_up_off::__anon214
MAX_IP_LENGTH	base/common.h	84;"	d
MAX_IP_LENGTH	base/include/csCommon.h	99;"	d
MAX_LEVEL	base/include/csCommon.h	/^/;"	v
MAX_LEVEL	base/include/srvEngine.h	/^		MAX_LEVEL = 30,$/;"	e	enum:zLiveSkillB::__anon140
MAX_LOG_SIZE	base/x_logger.h	/^	static const int MAX_LOG_SIZE = 4096;$/;"	m	class:x_logger
MAX_LUCKY	base/include/csCommon.h	/^/;"	v
MAX_MAGICDODGE	base/include/csCommon.h	/^/;"	v
MAX_MAGICRATING	base/include/csCommon.h	/^/;"	v
MAX_MAGICSPEED	base/include/csCommon.h	/^/;"	v
MAX_MDAMAGE	base/include/csCommon.h	/^/;"	v
MAX_MDEFENCE	base/include/csCommon.h	/^/;"	v
MAX_MESSAGE_NUMBER	SessionServer/libsessionserver/OfflineMessage.cpp	14;"	d	file:
MAX_METAL	base/include/csCommon.h	/^/;"	v
MAX_METALRESISTANCE	base/include/csCommon.h	/^/;"	v
MAX_MONEY	tmp/MiniServer/MiniServer.h	192;"	d
MAX_MOVESPEED	base/include/csCommon.h	/^/;"	v
MAX_MP	base/include/csCommon.h	/^/;"	v
MAX_MSG_SIZE	base/common.h	81;"	d
MAX_MSG_SIZE	base/src/tcp_socket.h	12;"	d
MAX_MSG_SIZE	base/tcp_client.h	13;"	d
MAX_NAMESIZE	base/common.h	83;"	d
MAX_NAMESIZE	base/include/csCommon.h	88;"	d
MAX_NEED_SP	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon186
MAX_NPC_GROUP	SceneServer/libscenesserver/ScenesServer.h	3200;"	d
MAX_NUM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::QuestList::__anon74
MAX_NUMBER	SceneServer/libscenesserver/SceneServer1.h	/^    MAX_NUMBER = 50,$/;"	e	enum:RebuildObject::__anon102
MAX_NUMBER	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:RebuildObject::__anon93
MAX_NUMPASSWORD	base/common.h	85;"	d
MAX_NUMPASSWORD	base/include/csCommon.h	148;"	d
MAX_PASSWORD	base/common.h	86;"	d
MAX_PASSWORD	base/include/csCommon.h	111;"	d
MAX_PDAMAGE	base/include/csCommon.h	/^/;"	v
MAX_PDEFENCE	base/include/csCommon.h	/^/;"	v
MAX_POINTS	base/include/csCommon.h	/^/;"	v
MAX_POINT_BONUS	base/include/srvEngine.h	/^		MAX_POINT_BONUS = 3,$/;"	e	enum:zLiveSkillB::__anon140
MAX_PRENTICE	base/include/csCommon.h	324;"	d
MAX_RDAMAGE	base/include/csCommon.h	/^/;"	v
MAX_RELATIVE_POS	SceneServer/libscenesserver/ScenesServer.h	4477;"	d
MAX_RESUMEHP	base/include/csCommon.h	/^/;"	v
MAX_RESUMEMP	base/include/csCommon.h	/^/;"	v
MAX_RESUMESP	base/include/csCommon.h	/^/;"	v
MAX_SHOPADV	base/include/csCommon.h	129;"	d
MAX_SKILLLEVEL	base/include/csCommon.h	1127;"	d
MAX_SOIL	base/include/csCommon.h	/^/;"	v
MAX_SOILRESISTANCE	base/include/csCommon.h	/^/;"	v
MAX_SP	base/include/csCommon.h	/^/;"	v
MAX_STATE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
MAX_SUITEFFECT	SceneServer/libscenesserver/ScenesServer.h	172;"	d
MAX_SUIT_NUM	base/include/csCommon.h	154;"	d
MAX_TAB_NUM	SceneServer/libscenesserver/ScenesServer.h	1415;"	d
MAX_TDAMAGE	base/include/csCommon.h	/^/;"	v
MAX_TEAM_NUM	base/include/csCommon.h	151;"	d
MAX_TEMPARCHIVE_SIZE	base/include/csCommon.h	1449;"	d
MAX_USERDATASIZE	base/include/x_socket.h	/^	static const uint32_t MAX_USERDATASIZE    =  (MAX_DATASIZE - 128);        \/**< Áî®Êà∑Êï∞ÊçÆÂåÖÊúÄÂ§ßÈïøÂ∫¶ *\/$/;"	m	class:x_socket
MAX_UZLIB_CHAR	SceneServer/libscenesserver/SceneUser.cpp	8;"	d	file:
MAX_VALUE_COUNTRYID	GatewayServer/old_back/CountryInfo.cpp	189;"	d	file:
MAX_WAITQUEUE	base/include/srvEngine.h	/^	static const int MAX_WAITQUEUE = 2000;  \/**< ÊúÄÂ§ßÁ≠âÂæÖÈòüÂàó *\/$/;"	m	class:zMTCPServer
MAX_WAITQUEUE	base/src/x_tcpserver.h	/^	static const int MAX_WAITQUEUE = 2000;  \/**< ÊúÄÂ§ßÁ≠âÂæÖÈòüÂàó *\/$/;"	m	class:x_tcpserver
MAX_WATER	base/include/csCommon.h	/^/;"	v
MAX_WATERRESISTANCE	base/include/csCommon.h	/^/;"	v
MAX_WOOD	base/include/csCommon.h	/^/;"	v
MAX_WOODRESISTANCE	base/include/csCommon.h	/^/;"	v
MCT_NORMAL	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniChatType
MCT_POPUP	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniChatType
MCT_SYS	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniChatType
MEMBER_BEING_OFF	base/include/csCommon.h	157;"	d
MERGE_VERSION_CHECK_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MGS_PLAY	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniGameState
MGS_PREPARE	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniGameState
MINIGAME_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MINISERVER	base/common.h	/^	MINISERVER      =  23    \/** Â∞èÊ∏∏ÊàèÊúçÂä°Âô® *\/$/;"	e	enum:ServerType
MINI_RC5	base/include/csCommon.h	42;"	d
MIN_ARENA_USERLEVEL	SessionServer/libsessionserver/SessionServer.h	45;"	d
MIN_INTERVAL	GatewayServer/old_back/GatewayServer.h	/^		MIN_INTERVAL = static_cast<int>(interval*(1.0-percent\/100.0)),$/;"	e	enum:percent_up_off::__anon214
MIN_NEED_SP	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon186
MIN_POINT_BONUS	base/include/srvEngine.h	/^		MIN_POINT_BONUS = 1,$/;"	e	enum:zLiveSkillB::__anon140
MIN_TAB_NUM	SceneServer/libscenesserver/ScenesServer.h	1416;"	d
MOVE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
MSG_NOSIGNAL	base/include/srvEngine.h	428;"	d
MUS_HALL	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniUserState
MUS_NOTPLAY	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniUserState
MUS_PLAY	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniUserState
MUS_READY	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniUserState
MUS_ROOM	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniUserState
MUS_SEAT	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::MiniUserState
M_State	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
MagicPos	SceneServer/libscenesserver/MagicRange.cpp	/^MagicPos::MagicPos(const DWORD type,const DWORD dir)$/;"	f	class:MagicPos
MagicPos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
MagicPosExec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
MagicRange	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
MagicRangeContainer	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::MagicRangeInit
MagicRangeInit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
MagicRangeInit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::MagicRangeInit
MagicReflex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
MailService	SessionServer/libsessionserver/MailService.cpp	/^MailService::MailService(){}$/;"	f	class:MailService
MailService	SessionServer/libsessionserver/SessionServer.h	/^class MailService : public Singleton<MailService>$/;"	c
MainMenuAction	SceneServer/libscenesserver/SceneServer1.h	/^  MainMenuAction(const std::string& menu) : _menu(menu)$/;"	f	class:MainMenuAction
MainMenuAction	SceneServer/libscenesserver/SceneServer1.h	/^class MainMenuAction : public Action$/;"	c
MainMenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
MainMenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:MainMenuAction
MainPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
MainPack	SceneServer/libscenesserver/zObject.cpp	/^MainPack::MainPack():Package(Cmd::OBJECTCELLTYPE_COMMON,0,MainPack::WIDTH,MainPack::HEIGHT)$/;"	f	class:MainPack
MakeFunction	SceneServer/libscenesserver/SceneServer1.h	/^namespace MakeFunction {$/;"	n
MakeLevel	base/include/csBox.h	/^	BYTE MakeLevel; \/\/sky ¥Ú‘ÏŒÔ∆∑µƒº∂±(0∆’Õ®,1¿∂…´,2¬Ã◊∞,4◊œ◊∞,8≥»◊∞)$/;"	m	struct:Cmd::stNewMakeObjectUserCmd
MakeSuit	SceneServer/libscenesserver/zObject.cpp	/^void zObject::MakeSuit(zObjectB *objbase)$/;"	f	class:zObject
MakeType	base/include/csBox.h	/^	BYTE MakeType;	\/\/sky ¥Ú‘Ï¿‡–Õ(1:¥Ú‘Ï)$/;"	m	struct:Cmd::stNewMakeObjectReturnUserCmd
Maker	SceneServer/libscenesserver/SceneServer1.h	/^  class Maker$/;"	c	namespace:MakeFunction
ManagerKey	SessionServer/libsessionserver/SessionServer.h	/^	DWORD ManagerKey;$/;"	m	class:CQueuingManager
MapBaseID	SessionServer/libsessionserver/SessionServer.h	/^	DWORD MapBaseID;$/;"	m	class:CQueuingManager
MapCountryCondition	SceneServer/libscenesserver/SceneServer1.h	/^  MapCountryCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:MapCountryCondition
MapCountryCondition	SceneServer/libscenesserver/SceneServer1.h	/^class MapCountryCondition : public TeamCondition$/;"	c
MapCountryCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
MapCountryCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:MapCountryCondition
MapData_ItemHeader	base/include/csCommon.h	/^/;"	s	namespace:Cmd
MapDic	GatewayServer/old_back/GatewayServer.h	/^		MapDic()$/;"	f	struct:CountryInfo::MapDic
MapDic	GatewayServer/old_back/GatewayServer.h	/^	struct MapDic$/;"	s	class:CountryInfo
MapID	SessionServer/libsessionserver/SessionServer.h	/^  MapIDSet	MapID;$/;"	m	struct:Team
MapIDMove	SessionServer/libsessionserver/SessionServer.h	/^	int MapIDMove;$/;"	m	class:CQueuingManager
MapIDSet	SessionServer/libsessionserver/SessionServer.h	/^  typedef set<SceneSession *> MapIDSet;$/;"	t	struct:Team
MapIndex	GatewayServer/old_back/GatewayServer.h	/^typedef std::map<DWORD,ScreenIndex*> MapIndex;$/;"	t
MapIndexIter	GatewayServer/old_back/GatewayServer.h	/^typedef MapIndex::iterator MapIndexIter;$/;"	t
MapInfo	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills::SceneManager
MapMap	GatewayServer/old_back/GatewayServer.h	/^	typedef std::map<DWORD,MapDic> MapMap;$/;"	t	class:CountryInfo
MapMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::SceneManager
MapMap_iter	GatewayServer/old_back/GatewayServer.h	/^	typedef MapMap::iterator MapMap_iter;$/;"	t	class:CountryInfo
MapMap_iter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::SceneManager
MapMap_value_type	GatewayServer/old_back/GatewayServer.h	/^	typedef MapMap::value_type MapMap_value_type;$/;"	t	class:CountryInfo
MapMap_value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::SceneManager
MapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stUserBattfieldData
MapdwNpcNum	SceneServer/libscenesserver/SceneNpc.cpp	/^DWORD MapdwNpcNum = 0;$/;"	v
Mask	SceneServer/libscenesserver/Mask.cpp	/^Mask::Mask() : _drop(false),_mask(NULL),_user(NULL)$/;"	f	class:Mask
Mask	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
MaxCampNum	SessionServer/libsessionserver/SessionServer.h	/^	WORD MaxCampNum;$/;"	m	class:CQueuingManager
MaxHonorAction	SceneServer/libscenesserver/SceneServer1.h	/^  MaxHonorAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:MaxHonorAction
MaxHonorAction	SceneServer/libscenesserver/SceneServer1.h	/^class MaxHonorAction : public TeamAction$/;"	c
MaxHonorCondition	SceneServer/libscenesserver/SceneServer1.h	/^  MaxHonorCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:MaxHonorCondition
MaxHonorCondition	SceneServer/libscenesserver/SceneServer1.h	/^class MaxHonorCondition : public TeamCondition$/;"	c
MaxHonorCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
MaxHonorCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:MaxHonorCondition
MaxHp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_NpcData
MaxMember	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Team
MaxTeamnum	SessionServer/libsessionserver/SessionServer.h	/^	WORD MaxTeamnum;$/;"	m	class:CQueuingManager
Maxrollnum	SceneServer/libscenesserver/TeamManager.cpp	/^	int Maxrollnum;		\/\/sky µ±«∞◊Ó¥ÛµƒROLLµ„ ˝$/;"	m	struct:ComparisonRollnumExec	file:
MemberList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stxml_SuitAttribute
MemberMoveScen	SessionServer/libsessionserver/Team.cpp	/^bool GlobalTeamIndex::MemberMoveScen(const DWORD tempid, SceneSession * scene)$/;"	f	class:GlobalTeamIndex
MemberMoveScen	SessionServer/libsessionserver/Team.cpp	/^bool Team::MemberMoveScen(SceneSession * scene)$/;"	f	class:Team
MemberNum	SceneServer/libscenesserver/TeamManager.cpp	/^	int MemberNum;$/;"	m	struct:GetTeamMemberNumExec	file:
MemberSet	SessionServer/libsessionserver/SessionServer.h	/^  typedef set<DWORD> MemberSet;$/;"	t	struct:Team
MemberSet_const_iter	SessionServer/libsessionserver/SessionServer.h	/^  typedef MemberSet::const_iterator MemberSet_const_iter;$/;"	t	struct:Team
MemberSet_iter	SessionServer/libsessionserver/SessionServer.h	/^  typedef MemberSet::iterator MemberSet_iter;$/;"	t	struct:Team
MenuAction	SceneServer/libscenesserver/SceneServer1.h	/^  MenuAction(const std::string& menu) : _menu(menu)$/;"	f	class:MenuAction
MenuAction	SceneServer/libscenesserver/SceneServer1.h	/^class MenuAction : public Action$/;"	c
MenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
MenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:MenuAction
MessageQueue	base/include/srvEngine.h	/^class MessageQueue$/;"	c
MessageQueue	base/x_msgqueue.h	/^class MessageQueue$/;"	c
MessageSystem	SceneServer/libscenesserver/SceneServer1.h	/^    MessageSystem() {};$/;"	f	class:MessageSystem
MessageSystem	SceneServer/libscenesserver/SceneServer1.h	/^class MessageSystem$/;"	c
Mini	base/include/csCommon.h	/^/;"	n	namespace:Cmd::Cmd
MiniChatType	base/include/csCommon.h	/^/;"	g	namespace:Cmd::Cmd
MiniClient	GatewayServer/old_back/GatewayServer.h	/^	MiniClient($/;"	f	class:MiniClient
MiniClient	GatewayServer/old_back/GatewayServer.h	/^class MiniClient : public x_tcp_buffer_client$/;"	c
MiniClient	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
MiniClient	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::MiniClient
MiniConfile	tmp/MiniServer/MiniServer.cpp	/^class MiniConfile:public zConfile$/;"	c	file:
MiniGame	tmp/MiniServer/MiniGame.cpp	/^MiniGame::MiniGame(Cmd::MiniGameID i,BYTE n,DWORD m)$/;"	f	class:MiniGame
MiniGame	tmp/MiniServer/MiniServer.h	/^class MiniGame$/;"	c
MiniGameID	base/include/csCommon.h	/^/;"	t	namespace:Cmd::Cmd
MiniGameScore	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniGameScore
MiniGameScore	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
MiniGameState	base/include/csCommon.h	/^/;"	g	namespace:Cmd::Cmd
MiniGameType	base/include/csCommon.h	/^/;"	g	namespace:Cmd::Cmd
MiniHall	tmp/MiniServer/MiniHall.cpp	/^MiniHall::MiniHall()$/;"	f	class:MiniHall
MiniHall	tmp/MiniServer/MiniServer.h	/^class MiniHall : public Singleton<MiniHall>$/;"	c
MiniRoom	tmp/MiniServer/MiniRoom.cpp	/^MiniRoom::MiniRoom(){}$/;"	f	class:MiniRoom
MiniRoom	tmp/MiniServer/MiniServer.h	/^class MiniRoom$/;"	c
MiniRoomData	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
MiniRoomID	base/include/csCommon.h	/^/;"	t	namespace:Cmd::Cmd
MiniSeatData	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
MiniSeatID	base/include/csCommon.h	/^/;"	t	namespace:Cmd::Cmd
MiniService	tmp/MiniServer/MiniServer.h	/^    MiniService() : x_subnetservice("–°”Œœ∑∑˛ŒÒ∆˜",MINISERVER)$/;"	f	class:MiniService
MiniService	tmp/MiniServer/MiniServer.h	/^class MiniService : public x_subnetservice$/;"	c
MiniTask	tmp/MiniServer/MiniServer.h	/^    MiniTask($/;"	f	class:MiniTask
MiniTask	tmp/MiniServer/MiniServer.h	/^class MiniTask : public zTCPTask,public MessageQueue$/;"	c
MiniTaskHashmap	tmp/MiniServer/MiniServer.h	/^    typedef hash_map<WORD,MiniTask *> MiniTaskHashmap;$/;"	t	class:MiniTaskManager
MiniTaskHashmap_const_iterator	tmp/MiniServer/MiniServer.h	/^    typedef MiniTaskHashmap::const_iterator MiniTaskHashmap_const_iterator;$/;"	t	class:MiniTaskManager
MiniTaskHashmap_iterator	tmp/MiniServer/MiniServer.h	/^    typedef MiniTaskHashmap::iterator MiniTaskHashmap_iterator;$/;"	t	class:MiniTaskManager
MiniTaskHashmap_pair	tmp/MiniServer/MiniServer.h	/^    typedef MiniTaskHashmap::value_type MiniTaskHashmap_pair;$/;"	t	class:MiniTaskManager
MiniTaskManager	tmp/MiniServer/MiniServer.h	/^    MiniTaskManager() {};$/;"	f	class:MiniTaskManager
MiniTaskManager	tmp/MiniServer/MiniServer.h	/^class MiniTaskManager$/;"	c
MiniTimeTick	tmp/MiniServer/MiniServer.h	/^    MiniTimeTick() : zThread("TimeTick") {};$/;"	f	class:MiniTimeTick
MiniTimeTick	tmp/MiniServer/MiniServer.h	/^class MiniTimeTick : public zThread$/;"	c
MiniUser	tmp/MiniServer/MiniServer.h	/^class MiniUser :public zEntry $/;"	c
MiniUser	tmp/MiniServer/MiniUser.cpp	/^MiniUser::MiniUser(DWORD i,char *n,WORD c,WORD f,MiniTask *t,MiniTask *s)$/;"	f	class:MiniUser
MiniUserData	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniUserData
MiniUserData	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
MiniUserManager	tmp/MiniServer/MiniServer.h	/^class MiniUserManager :public zEntryManager< zEntryID>$/;"	c
MiniUserManager	tmp/MiniServer/MiniUserManager.cpp	/^MiniUserManager::MiniUserManager()$/;"	f	class:MiniUserManager
MiniUserPosition	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniUserPosition
MiniUserPosition	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
MiniUserState	base/include/csCommon.h	/^/;"	g	namespace:Cmd::Cmd
MirageSummon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
MonkeyNpcs	SceneServer/libscenesserver/SceneServer1.h	/^typedef std::set<SceneNpc *,std::less<SceneNpc *> > MonkeyNpcs;$/;"	t
MoveChecker	GatewayServer/old_back/GatewayServer.h	/^	typedef CmdChecker< percent_up_off<512,10,5> > MoveChecker;$/;"	t	class:CheckerTable
MoveSceneM	SessionServer/libsessionserver/Queuing.cpp	/^void CArenaManager::MoveSceneM(DWORD index)$/;"	f	class:CArenaManager
MoveSceneMemberMap	SessionServer/libsessionserver/SessionServer.cpp	/^std::map<DWORD, DWORD> MoveSceneMemberMap;$/;"	v
MsgQueue	base/include/srvEngine.h	/^	MsgQueue()$/;"	f	class:MsgQueue
MsgQueue	base/include/srvEngine.h	/^class MsgQueue$/;"	c
MsgQueue	base/x_msgqueue.h	/^	MsgQueue() {$/;"	f	class:MsgQueue
MsgQueue	base/x_msgqueue.h	/^class MsgQueue {$/;"	c
Mul	SceneServer/libscenesserver/SceneServer1.h	/^  class Mul$/;"	c	namespace:Op
Mul	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
MultiByteToMultiByte	base/src/codeLib.c	/^size_t MultiByteToMultiByte(UINT cpMPI,PSTR szMBI,size_t nMBI,UINT cpMPO,PSTR szMBO,size_t nMBO)$/;"	f
MultiByteToMultiByteEx	base/src/codeLib.c	/^PSTR MultiByteToMultiByteEx(UINT cpMPI,PSTR szMBI,size_t nMBI,UINT cpMPO)$/;"	f
MultiByteToWideCharEx	base/src/codeLib.c	/^PWSTR MultiByteToWideCharEx(UINT CodePage,PSTR szMB,size_t nMB)$/;"	f
MultiHash	base/include/srvEngine.h	/^	MultiHash()$/;"	f	class:MultiHash
MultiHash	base/include/srvEngine.h	/^class MultiHash:private boost::noncopyable$/;"	c
MultiPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
N	SceneServer/libscenesserver/ScenesServer.h	/^NLe∫NÙV;eê—ç4/;"	e	enum:O::LiveSkills::NpcAIFlag
NANJIAO_MAP_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
NECKLACE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
NEED_EXIST	SceneServer/libscenesserver/SceneServer1.h	/^      NEED_EXIST = 0,$/;"	e	enum:Op::Differ::__anon106
NEED_EXIST	SceneServer/libscenesserver/SceneServer1.h	/^      NEED_EXIST = 0,$/;"	e	enum:Op::Less::__anon104
NEED_EXIST	SceneServer/libscenesserver/SceneServer1.h	/^      NEED_EXIST = 1,$/;"	e	enum:Op::Equal::__anon105
NEED_EXIST	SceneServer/libscenesserver/SceneServer1.h	/^      NEED_EXIST = 1,$/;"	e	enum:Op::Great::__anon103
NEED_EXIST	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:Op::Differ::__anon97
NEED_EXIST	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:Op::Equal::__anon96
NEED_EXIST	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:Op::Great::__anon94
NEED_EXIST	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:Op::Less::__anon95
NEUTRAL_COUNTRY_ID	SessionServer/libsessionserver/SessionServer.h	/^const DWORD NEUTRAL_COUNTRY_ID = 6; \/\/ ÷–¡¢π˙ID$/;"	v
NEW_HISTORY_STOCKPARA	base/include/csCommon.h	9047;"	d
NFilterModule	base/include/srvEngine.h	/^	}NFilterModule,*PFilterModule;$/;"	t	typeref:struct:__anon142
NFilterModuleArray	base/include/srvEngine.h	/^typedef std::vector<NFilterModule> NFilterModuleArray;$/;"	t
NJOBS	Makefile	/^NJOBS = `if [ ""=="$(NCPUS)" ]; then echo ""; else echo "-j$(NCPUS)"; fi`$/;"	m
NLe	SceneServer/libscenesserver/ScenesServer.h	/^NLe∫NÙV;eê—ç4/;"	e	enum:O::LiveSkills::NpcAIFlag
NONE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::PrivateStore::STEP
NONE_SKILL_STATE	base/include/srvEngine.h	4504;"	d
NONOPTION_P	base/src/getopt.c	441;"	d	file:
NOTE	SceneServer/libscenesserver/ScenePk.cpp	7;"	d	file:
NOTIFY_POINT_DDZ_MINI_PARA	base/include/csCommon.h	12581;"	d
NOTIFY_PUT_CARD_MINI_PARA	base/include/csCommon.h	12554;"	d
NOTIFY_SAFETY_PARA	base/include/csCommon.h	10678;"	d
NO_TASK_DIALOG	SceneServer/libscenesserver/Quest.cpp	850;"	d	file:
NP	base/include/csCommon.h	/^NPñ$/;"	e	enum:SkillDef::SKILL_STATUS
NPCDARE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
NPCSTATE_MAKE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
NPC_AI_ATTACK	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_ATTACK,\/\/\/‘⁄ƒ≥∑∂Œßƒ⁄π•ª˜$/;"	e	enum:SceneNpcAIType
NPC_AI_ATTACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_CALL_PET	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_CALL_PET,\/\/\/’–≥ËŒÔ$/;"	e	enum:SceneNpcAIType
NPC_AI_CALL_PET	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_CHANGE_MAP	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_CHANGE_MAP,\/\/\/«–ªªµÿÕº£®Õ¨“ª∑˛ŒÒ∆˜ƒ⁄£©$/;"	e	enum:SceneNpcAIType
NPC_AI_CHANGE_MAP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_CLEAR	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_CLEAR,\/\/\/«Â≥˝∏√npc$/;"	e	enum:SceneNpcAIType
NPC_AI_CLEAR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_DROP_ITEM	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_DROP_ITEM,\/\/\/∂™∂´Œ˜$/;"	e	enum:SceneNpcAIType
NPC_AI_DROP_ITEM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_FLEE	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_FLEE,\/\/\/Ã”¿ÎÕÊº“$/;"	e	enum:SceneNpcAIType
NPC_AI_FLEE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_GO_ON_PATH	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_GO_ON_PATH,\/\/\/∞¥’’“ª∂®¬∑œﬂ“∆∂Ø$/;"	e	enum:SceneNpcAIType
NPC_AI_GO_ON_PATH	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_GUARD_ARCHER	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_GUARD_ARCHER,\/\/\/π≠Œ¿$/;"	e	enum:SceneNpcAIType
NPC_AI_GUARD_ARCHER	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_GUARD_DOOR	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_GUARD_DOOR,\/\/\/√≈Œ¿$/;"	e	enum:SceneNpcAIType
NPC_AI_GUARD_DOOR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_GUARD_GUARD	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_GUARD_GUARD,\/\/\/ ÃŒ¿$/;"	e	enum:SceneNpcAIType
NPC_AI_GUARD_GUARD	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_GUARD_PATROL	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_GUARD_PATROL,\/\/\/—≤¬ﬂŒ¿ ø$/;"	e	enum:SceneNpcAIType
NPC_AI_GUARD_PATROL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_MOVETO	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_MOVETO,\/\/\/“∆∂ØµΩƒ≥Œª÷√$/;"	e	enum:SceneNpcAIType
NPC_AI_MOVETO	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_NORMAL	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_NORMAL,\/\/\/∆’Õ®AI$/;"	e	enum:SceneNpcAIType
NPC_AI_NORMAL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_PATROL	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_PATROL,\/\/\/—≤¬ﬂ$/;"	e	enum:SceneNpcAIType
NPC_AI_PATROL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_RANDOM_CHAT	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_RANDOM_CHAT\/\/\/ÀÊª˙Àµª∞$/;"	e	enum:SceneNpcAIType
NPC_AI_RANDOM_CHAT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_RETURN_TO_REGION	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_RETURN_TO_REGION,\/\/\/ªÿµΩªÓ∂Ø∑∂Œß$/;"	e	enum:SceneNpcAIType
NPC_AI_RETURN_TO_REGION	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_SAY	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_SAY,\/\/\/Àµª∞$/;"	e	enum:SceneNpcAIType
NPC_AI_SAY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_WAIT	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_WAIT,\/\/\/µ»¥˝, ≤√¥“≤≤ª◊ˆ$/;"	e	enum:SceneNpcAIType
NPC_AI_WAIT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_AI_WARP	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_AI_WARP,\/\/\/Õ¨“ªµÿÕºƒ⁄À≤º‰“∆∂Ø$/;"	e	enum:SceneNpcAIType
NPC_AI_WARP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneNpcAIType
NPC_ATYPE_ANIMAL	base/include/srvEngine.h	/^	NPC_ATYPE_ANIMAL    = 6  \/\/\/ Âä®Áâ©Á±ª$/;"	e	enum:__anon135
NPC_ATYPE_FAR	base/include/srvEngine.h	/^	NPC_ATYPE_FAR    = 2,\/\/\/ ËøúË∑ùÁ¶ªÊîªÂáª$/;"	e	enum:__anon135
NPC_ATYPE_MFAR	base/include/srvEngine.h	/^	NPC_ATYPE_MFAR    = 3,\/\/\/ Ê≥ïÊúØËøúÁ®ãÊîªÂáª$/;"	e	enum:__anon135
NPC_ATYPE_MNEAR	base/include/srvEngine.h	/^	NPC_ATYPE_MNEAR    = 4,\/\/\/ Ê≥ïÊúØËøëË∫´ÊîªÂáª$/;"	e	enum:__anon135
NPC_ATYPE_NEAR	base/include/srvEngine.h	/^	NPC_ATYPE_NEAR    = 1,\/\/\/ ËøëË∑ùÁ¶ªÊîªÂáª$/;"	e	enum:__anon135
NPC_ATYPE_NOACTION	base/include/srvEngine.h	/^	NPC_ATYPE_NOACTION  = 5,    \/\/\/ Êó†ÊîªÂáªÂä®‰Ωú$/;"	e	enum:__anon135
NPC_BUY_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_BUY_OBJECT    = 1, \/\/\/¬Ú$/;"	e	enum:NpcTrade::__anon99
NPC_BUY_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_CHAT_ON_ATTACK	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_ON_ATTACK,\/\/\/π•ª˜ ±Àµµƒª∞$/;"	e	enum:NpcChatType
NPC_CHAT_ON_BE_HELP	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_ON_BE_HELP,\/\/\/Õ¨∞È¿¥∞Ô÷˙ ±Àµµƒª∞$/;"	e	enum:NpcChatType
NPC_CHAT_ON_DIE	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_ON_DIE,\/\/\/À¿µƒ ±∫ÚÀµµƒª∞$/;"	e	enum:NpcChatType
NPC_CHAT_ON_FIND_ENEMY	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_ON_FIND_ENEMY = 1,\/\/\/∑¢œ÷µ–»À$/;"	e	enum:NpcChatType
NPC_CHAT_ON_FLEE	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_ON_FLEE,\/\/\/Ã”≈‹ ±Àµµƒª∞$/;"	e	enum:NpcChatType
NPC_CHAT_ON_HELP	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_ON_HELP,\/\/\/∞Ô÷˙Õ¨∞È ±Àµµƒª∞$/;"	e	enum:NpcChatType
NPC_CHAT_ON_HIT	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_ON_HIT,\/\/\/±ª¥Ú ±Àµµƒª∞$/;"	e	enum:NpcChatType
NPC_CHAT_ON_RETURN	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_ON_RETURN,\/\/\/◊∑÷∑µªÿ ±Àµµƒª∞$/;"	e	enum:NpcChatType
NPC_CHAT_RANDOM	SceneServer/libscenesserver/SceneServer1.h	/^  NPC_CHAT_RANDOM    \/\/\/ÀÊª˙Àµª∞$/;"	e	enum:NpcChatType
NPC_DECOMPOSE_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_DECOMPOSE_OBJECT = 1024,\/\/∑÷Ω‚$/;"	e	enum:NpcTrade::__anon99
NPC_DECOMPOSE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_ENCHANCE_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_ENCHANCE_OBJECT = 64,\/\/œ‚«∂$/;"	e	enum:NpcTrade::__anon99
NPC_ENCHANCE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_HOLE_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_HOLE_OBJECT = 256,\/\/¥Úø◊$/;"	e	enum:NpcTrade::__anon99
NPC_HOLE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_KILL	SceneServer/libscenesserver/SceneServer1.h	/^    NPC_KILL = 2,$/;"	e	enum:ScriptQuest::__anon108
NPC_MAKE_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_MAKE_OBJECT    = 8, \/\/\/¥Ú‘Ï$/;"	e	enum:NpcTrade::__anon99
NPC_MAKE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_MERGE_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_MERGE_OBJECT  = 32, \/\/\/∫œ≥…$/;"	e	enum:NpcTrade::__anon99
NPC_MERGE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_MERGE_SOUL_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_MERGE_SOUL_OBJECT = 128,\/\/ªÍ∆«∫œ≥…$/;"	e	enum:NpcTrade::__anon99
NPC_MERGE_SOUL_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_REPAIR_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_REPAIR_OBJECT  = 4, \/\/\/–ﬁ¿Ì$/;"	e	enum:NpcTrade::__anon99
NPC_REPAIR_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_SELL_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_SELL_OBJECT    = 2, \/\/\/¬Ù$/;"	e	enum:NpcTrade::__anon99
NPC_SELL_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_STORE_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_STORE_OBJECT = 512,\/\/≤÷ø‚$/;"	e	enum:NpcTrade::__anon99
NPC_STORE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_TYPE_ABERRANCE	base/include/srvEngine.h	/^	NPC_TYPE_ABERRANCE  = 14,\/\/\/ ÂèòÂºÇÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_AGGRANDIZEMENT	base/include/srvEngine.h	/^	NPC_TYPE_AGGRANDIZEMENT = 13,\/\/\/ Âº∫ÂåñÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_ANIMON	base/include/srvEngine.h	/^	NPC_TYPE_ANIMON   = 33,   \/\/\/ Âä®Áâ©Á±ªÊÄ™Áâ©$/;"	e	enum:__anon134
NPC_TYPE_AUCTION	base/include/srvEngine.h	/^	NPC_TYPE_AUCTION  =25,\/\/\/ÊãçÂçñÁÆ°ÁêÜÂëò$/;"	e	enum:__anon134
NPC_TYPE_BACKBONE	base/include/srvEngine.h	/^	NPC_TYPE_BACKBONE  = 4,\/\/\/ Á≤æËã±Á±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_BACKBONEBUG	base/include/srvEngine.h	/^	NPC_TYPE_BACKBONEBUG= 10,\/\/\/ Á≤æÊÄ™Á±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_BANNER	base/include/srvEngine.h	/^	NPC_TYPE_BANNER    = 22,\/\/\/ ÊóóÂ∏úÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_BARRACKS	base/include/srvEngine.h	/^	NPC_TYPE_BARRACKS = 40, \/\/\/ ÂÖµËê•$/;"	e	enum:__anon134
NPC_TYPE_BBOSS	base/include/srvEngine.h	/^	NPC_TYPE_BBOSS    = 2,\/\/\/ Â§ßBossÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_CAMP	base/include/srvEngine.h	/^	NPC_TYPE_CAMP = 41,		\/\/\/ Âü∫Âú∞$/;"	e	enum:__anon134
NPC_TYPE_CARTOONPET	base/include/srvEngine.h	/^	NPC_TYPE_CARTOONPET = 30,\/\/\/ ÊõøË∫´ÂÆùÂÆù$/;"	e	enum:__anon134
NPC_TYPE_DUCKHIT	base/include/srvEngine.h	/^	NPC_TYPE_DUCKHIT  = 21,\/\/\/ Ëπ≤‰∏ãÊâçËÉΩÊâìÁöÑnpc$/;"	e	enum:__anon134
NPC_TYPE_FIGHTPET	base/include/srvEngine.h	/^	NPC_TYPE_FIGHTPET	= 37, \/\/\/ÊàòÊñóÂÆ†Áâ©$/;"	e	enum:__anon134
NPC_TYPE_GHOST	base/include/srvEngine.h	/^	NPC_TYPE_GHOST	= 999,  \/\/\/ ÂÖÉÁ•ûÁ±ªNPC$/;"	e	enum:__anon134
NPC_TYPE_GOLD	base/include/srvEngine.h	/^	NPC_TYPE_GOLD    = 5,\/\/\/ ÈªÑÈáëÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_GOTO	base/include/srvEngine.h	/^	NPC_TYPE_GOTO	= 34,	\/\/\/‰º†ÈÄÅÁÇπ$/;"	e	enum:__anon134
NPC_TYPE_GUARD	base/include/srvEngine.h	/^	NPC_TYPE_GUARD    = 8,\/\/\/ Â£´ÂÖµÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_HUMAN	base/include/srvEngine.h	/^	NPC_TYPE_HUMAN    = 0,\/\/\/‰∫∫Âûã$/;"	e	enum:__anon134
NPC_TYPE_LBOSS	base/include/srvEngine.h	/^	NPC_TYPE_LBOSS    = 3,\/\/\/ Â∞èBossÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_LIVENPC	base/include/srvEngine.h	/^	NPC_TYPE_LIVENPC  = 20,\/\/\/ ÁîüÊ¥ªnpcÔºà‰∏çÊàòÊñóÔºåÊîªÂüéÊó∂Ê∂àÂ§±Ôºâ$/;"	e	enum:__anon134
NPC_TYPE_MAILBOX	base/include/srvEngine.h	/^	NPC_TYPE_MAILBOX  =24,\/\/\/ÈÇÆÁÆ±$/;"	e	enum:__anon134
NPC_TYPE_MOBILETRADE	base/include/srvEngine.h	/^	NPC_TYPE_MOBILETRADE  = 19,\/\/\/ ÊµÅÊµ™Â∞èË¥©$/;"	e	enum:__anon134
NPC_TYPE_NORMAL	base/include/srvEngine.h	/^	NPC_TYPE_NORMAL    = 1,\/\/\/ ÊôÆÈÄöÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_PBOSS	base/include/srvEngine.h	/^	NPC_TYPE_PBOSS = 31,\/\/\/ Á¥´Ëâ≤BOSS$/;"	e	enum:__anon134
NPC_TYPE_PET	base/include/srvEngine.h	/^	NPC_TYPE_PET    = 9,\/\/\/ ÂÆ†Áâ©Á±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_RESOURCE	base/include/srvEngine.h	/^	NPC_TYPE_RESOURCE = 32, \/\/\/ ËµÑÊ∫êÁ±ªNPC$/;"	e	enum:__anon134
NPC_TYPE_RESUR	base/include/srvEngine.h	/^	NPC_TYPE_RESUR  = 35,	\/\/\/Â§çÊ¥ªÁÇπ$/;"	e	enum:__anon134
NPC_TYPE_RIDE	base/include/srvEngine.h	/^	NPC_TYPE_RIDE		= 38, \/\/\/ÂùêÈ™ë$/;"	e	enum:__anon134
NPC_TYPE_ROADSIGN	base/include/srvEngine.h	/^	NPC_TYPE_ROADSIGN  = 16,\/\/\/ Ë∑ØÊ†áÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_SOLDIER	base/include/srvEngine.h	/^	NPC_TYPE_SOLDIER  =27,\/\/\/Â£´ÂÖµÔºåÂè™ÊîªÂáªÂ§ñÂõΩ‰∫∫$/;"	e	enum:__anon134
NPC_TYPE_STORAGE	base/include/srvEngine.h	/^	NPC_TYPE_STORAGE  = 15,\/\/\/ ‰ªìÂ∫ìÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_SUMMONS	base/include/srvEngine.h	/^	NPC_TYPE_SUMMONS  = 11,\/\/\/ Âè¨Âî§Á±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_SURFACE	base/include/srvEngine.h	/^	NPC_TYPE_SURFACE = 29,\/\/\/ Âú∞Ë°®Á±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_TASK	base/include/srvEngine.h	/^	NPC_TYPE_TASK    = 7,\/\/\/ ‰ªªÂä°Á±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_TOTEM	base/include/srvEngine.h	/^	NPC_TYPE_TOTEM    = 12,\/\/\/ ÂõæËÖæÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_TRADE	base/include/srvEngine.h	/^	NPC_TYPE_TRADE    = 6,\/\/\/ ‰π∞ÂçñÁ±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_TRAP	base/include/srvEngine.h	/^	NPC_TYPE_TRAP    = 23,\/\/\/ Èô∑Èò±Á±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_TREASURE	base/include/srvEngine.h	/^	NPC_TYPE_TREASURE  = 17,\/\/\/ ÂÆùÁÆ±Á±ªÂûã$/;"	e	enum:__anon134
NPC_TYPE_TURRET	base/include/srvEngine.h	/^	NPC_TYPE_TURRET	= 39, \/\/\/ ÁÇÆÂ°î$/;"	e	enum:__anon134
NPC_TYPE_UNFIGHTPET	base/include/srvEngine.h	/^	NPC_TYPE_UNFIGHTPET	= 36, \/\/\/ÈùûÊàòÊñóÂÆ†Áâ©$/;"	e	enum:__anon134
NPC_TYPE_UNIONATTACKER	base/include/srvEngine.h	/^	NPC_TYPE_UNIONATTACKER  =28,\/\/\/ÊîªÊñπÂ£´ÂÖµ$/;"	e	enum:__anon134
NPC_TYPE_UNIONGUARD	base/include/srvEngine.h	/^	NPC_TYPE_UNIONGUARD  =26,\/\/\/Â∏Æ‰ºöÂÆàÂç´$/;"	e	enum:__anon134
NPC_TYPE_WILDHORSE	base/include/srvEngine.h	/^	NPC_TYPE_WILDHORSE  = 18,\/\/\/ ÈáéÈ©¨Á±ªÂûã$/;"	e	enum:__anon134
NPC_UPDATE_OBJECT	SceneServer/libscenesserver/SceneServer1.h	/^      NPC_UPDATE_OBJECT  = 16, \/\/\/∏ƒ‘Ï$/;"	e	enum:NpcTrade::__anon99
NPC_UPDATE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_VISIT	SceneServer/libscenesserver/SceneServer1.h	/^    NPC_VISIT = 1,$/;"	e	enum:ScriptQuest::__anon108
NPC_ZSMAKE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NPC_ZSUPDATE_OBJECT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::NpcTrade::__anon89
NULL_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
NULL_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
NUM_ENTITY	deps/tinyxml/tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon212
Name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stxml_SuitAttribute
Name	deps/tinyxml/tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute.$/;"	f	class:TiXmlAttribute
NameTStr	deps/tinyxml/tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute
NationCondition	SceneServer/libscenesserver/SceneServer1.h	/^  NationCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:NationCondition
NationCondition	SceneServer/libscenesserver/SceneServer1.h	/^class NationCondition : public TeamCondition$/;"	c
NationCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
NationCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:NationCondition
Need_Probability	base/include/srvEngine.h	/^	uint32_t  Need_Probability; \/\/sky ÊûÅÂìÅÊ¶ÇÁéá$/;"	m	struct:zNpcB
NetType	BillServer/old_back/BillServer.h	/^enum NetType$/;"	g
NetType	SuperServer/RoleregCache.h	/^enum NetType$/;"	g
NetType	base/common.h	/^enum NetType {$/;"	g
NetType_far	BillServer/old_back/BillServer.h	/^  NetType_far = 1      \/\/‘∂∂À¬∑”…,µÁ–≈«¯¡¨Õ¯Õ®∑˛ŒÒ∆˜,Õ¯Õ®«¯¡¨µÁ–≈∑˛ŒÒ∆˜$/;"	e	enum:NetType
NetType_far	SuperServer/RoleregCache.h	/^  NetType_far = 1,  \/\/‘∂∂À¬∑”…£¨µÁ–≈«¯¡¨Õ¯Õ®∑˛ŒÒ∆˜£¨Õ¯Õ®«¯¡¨µÁ–≈∑˛ŒÒ∆˜$/;"	e	enum:NetType
NetType_far	base/common.h	/^	NetType_far = 1,$/;"	e	enum:NetType
NetType_near	BillServer/old_back/BillServer.h	/^  NetType_near = 0, \/\/Ω¸≥Ã¬∑”…,µÁ–≈«¯¡¨µÁ–≈∑˛ŒÒ∆˜,Õ¯Õ®«¯¡¨Õ¯Õ®∑˛ŒÒ∆˜$/;"	e	enum:NetType
NetType_near	SuperServer/RoleregCache.h	/^  NetType_near = 0,\/\/Ω¸≥Ã¬∑”…£¨µÁ–≈«¯¡¨µÁ–≈∑˛ŒÒ∆˜£¨Õ¯Õ®«¯¡¨Õ¯Õ®∑˛ŒÒ∆˜$/;"	e	enum:NetType
NetType_near	base/common.h	/^	NetType_near = 0,$/;"	e	enum:NetType
NetworkManager	client/NetworkManager.cpp	/^NetworkManager::NetworkManager():io_service_pool_(1)$/;"	f	class:NetworkManager
NetworkManager	client/NetworkManager.h	/^class NetworkManager : public Singleton<NetworkManager>$/;"	c
NewAssign	SceneServer/libscenesserver/RebuildObject.cpp	/^void EquipMaker::NewAssign(SceneUser* user,zObject* ob,zObjectB* base,DWORD npc_mul)$/;"	f	class:EquipMaker
NewMapLock	SessionServer/libsessionserver/SessionServer.h	/^	bool NewMapLock;$/;"	m	class:CQueuingManager
NewMap_Lock	SessionServer/libsessionserver/Queuing.cpp	/^void CArenaManager::NewMap_Lock(DWORD index, bool block)$/;"	f	class:CArenaManager
NewZoneVec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::SceneManager
Next	deps/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute
Next	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute
NextSibling	deps/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode
NextSibling	deps/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode
NextSibling	deps/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSibling	deps/tinyxml/tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:TiXmlNode
NextSibling	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSibling	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:TiXmlNode
NextSiblingElement	deps/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode
NextSiblingElement	deps/tinyxml/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode
NextSiblingElement	deps/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode
NextSiblingElement	deps/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NextSiblingElement	deps/tinyxml/tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode
NextSiblingElement	deps/tinyxml/tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingElement (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
NineScreen_map	GatewayServer/old_back/GatewayServer.h	/^	typedef \/*__gnu_cxx::*\/hash_map<DWORD,zPosIVector> NineScreen_map;$/;"	t	class:ScreenIndex
NineScreen_map	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
NineScreen_map_const_iter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
NineScreen_map_iter	GatewayServer/old_back/GatewayServer.h	/^	typedef NineScreen_map::iterator NineScreen_map_iter;$/;"	t	class:ScreenIndex
NineScreen_map_iter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
NineScreen_map_value_type	GatewayServer/old_back/GatewayServer.h	/^	typedef NineScreen_map::value_type NineScreen_map_value_type;$/;"	t	class:ScreenIndex
NineScreen_map_value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
NoChildren	deps/tinyxml/tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:TiXmlNode
NoRollUser	SceneServer/libscenesserver/TeamManager.cpp	/^	bool NoRollUser;$/;"	m	struct:GetNoRollUserExec	file:
Node	deps/tinyxml/tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:TiXmlHandle
NodeType	deps/tinyxml/tinyxml.h	/^	enum NodeType$/;"	g	class:TiXmlNode
Notallowed_Resurrection	SceneServer/libscenesserver/SceneBattlefiel.h	/^	Notallowed_Resurrection	= 2,$/;"	e	enum:enReliveType
NoticeRoll	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::NoticeRoll(zObject * obj)$/;"	f	class:TeamManager
NoticeRollExec	SceneServer/libscenesserver/TeamManager.cpp	/^	NoticeRollExec( zObject * obj )$/;"	f	struct:NoticeRollExec
NoticeRollExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct NoticeRollExec : public TeamMemExec$/;"	s	file:
Notify1Action	SceneServer/libscenesserver/SceneServer1.h	/^  Notify1Action(ScenesParser& p) : TeamAction(p)$/;"	f	class:Notify1Action
Notify1Action	SceneServer/libscenesserver/SceneServer1.h	/^class Notify1Action : public TeamAction$/;"	c
Notify1Action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
Notify1Action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Notify1Action
NotifyAction	SceneServer/libscenesserver/SceneServer1.h	/^  NotifyAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:NotifyAction
NotifyAction	SceneServer/libscenesserver/SceneServer1.h	/^class NotifyAction : public TeamAction$/;"	c
NotifyAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
NotifyAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:NotifyAction
NowHp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_NpcData
NpcAIController	SceneServer/libscenesserver/SceneNpcAI.cpp	/^  NpcAIController::NpcAIController(SceneNpc * sn)$/;"	f	class:NpcAIController
NpcAIController	SceneServer/libscenesserver/SceneServer1.h	/^class NpcAIController$/;"	c
NpcAIFlag	SceneServer/libscenesserver/SceneServer1.h	/^enum NpcAIFlag$/;"	g
NpcAIFlag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::LiveSkills
NpcAction	SceneServer/libscenesserver/SceneServer1.h	/^  NpcAction(ScenesParser& p)$/;"	f	class:NpcAction
NpcAction	SceneServer/libscenesserver/SceneServer1.h	/^class NpcAction : public Action$/;"	c
NpcAiXmlData	SceneServer/libscenesserver/SceneNpcAI.cpp	/^std::list<stNewAIData> NpcAiXmlData;$/;"	v
NpcBase	base/include/srvEngine.h	/^struct NpcBase$/;"	s
NpcCarryObject	base/include/srvEngine.h	/^	NpcCarryObject() {};$/;"	f	struct:NpcCarryObject
NpcCarryObject	base/include/srvEngine.h	/^struct NpcCarryObject : private boost::noncopyable$/;"	s
NpcChatType	SceneServer/libscenesserver/SceneServer1.h	/^enum NpcChatType$/;"	g
NpcCommonChatRate	SceneServer/libscenesserver/SceneServer1.h	/^    std::map<DWORD,int> NpcCommonChatRate;$/;"	m	class:SceneNpcManager
NpcCommonChatRate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneNpcManager
NpcCommonChatTable	SceneServer/libscenesserver/SceneServer1.h	/^    std::map<DWORD,std::vector<std::string> > NpcCommonChatTable;$/;"	m	class:SceneNpcManager
NpcCommonChatTable	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneNpcManager
NpcDareDef	base/include/srvEngine.h	/^namespace NpcDareDef$/;"	n
NpcDareObjectCompare	SceneServer/libscenesserver/SceneNpcDare.cpp	/^class NpcDareObjectCompare:public UserObjectCompare $/;"	c	file:
NpcDareRecord	base/include/srvEngine.h	/^	struct NpcDareRecord {$/;"	s	namespace:NpcDareDef
NpcDefineVector	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
NpcDialog	SceneServer/libscenesserver/SceneServer1.h	/^      NpcDialog()$/;"	f	struct:NpcTrade::NpcDialog
NpcDialog	SceneServer/libscenesserver/SceneServer1.h	/^      NpcDialog(const NpcDialog& nd)$/;"	f	struct:NpcTrade::NpcDialog
NpcDialog	SceneServer/libscenesserver/SceneServer1.h	/^    struct NpcDialog$/;"	s	class:NpcTrade
NpcDialog	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::NpcTrade::NpcDialog
NpcDialog	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::NpcTrade
NpcDialogMultiMap	SceneServer/libscenesserver/SceneServer1.h	/^    typedef hash_multimap<DWORD,NpcDialog> NpcDialogMultiMap;$/;"	t	class:NpcTrade
NpcDialogMultiMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::NpcTrade
NpcHpHashmap	SceneServer/libscenesserver/SceneServer1.h	/^  typedef std::map<DWORD,t_expRec> NpcHpHashmap;$/;"	t	class:SceneNpc
NpcHpHashmap_const_iterator	SceneServer/libscenesserver/SceneServer1.h	/^  typedef NpcHpHashmap::const_iterator NpcHpHashmap_const_iterator;$/;"	t	class:SceneNpc
NpcHpHashmap_iterator	SceneServer/libscenesserver/SceneServer1.h	/^  typedef NpcHpHashmap::iterator NpcHpHashmap_iterator;$/;"	t	class:SceneNpc
NpcHpHashmap_pair	SceneServer/libscenesserver/SceneServer1.h	/^  typedef NpcHpHashmap::value_type NpcHpHashmap_pair;$/;"	t	class:SceneNpc
NpcItem	SceneServer/libscenesserver/SceneServer1.h	/^      NpcItem()$/;"	f	struct:NpcTrade::NpcItem
NpcItem	SceneServer/libscenesserver/SceneServer1.h	/^    struct NpcItem$/;"	s	class:NpcTrade
NpcItem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::NpcTrade::NpcItem
NpcItem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::NpcTrade
NpcItemMultiMap	SceneServer/libscenesserver/SceneServer1.h	/^    typedef hash_multimap<DWORD,NpcItem> NpcItemMultiMap;$/;"	t	class:NpcTrade
NpcItemMultiMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::NpcTrade
NpcLostObject	base/include/srvEngine.h	/^typedef std::vector<CarryObject> NpcLostObject;$/;"	t
NpcSkill_Resurrection	SceneServer/libscenesserver/SceneBattlefiel.h	/^	NpcSkill_Resurrection	= 1,$/;"	e	enum:enReliveType
NpcTrade	SceneServer/libscenesserver/SceneServer1.h	/^    NpcTrade() {};$/;"	f	class:NpcTrade
NpcTrade	SceneServer/libscenesserver/SceneServer1.h	/^class NpcTrade$/;"	c
NpcTrade	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
NpcTrade	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::NpcTrade
Npc_Index	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
O	SceneServer/libscenesserver/ScenesServer.h	/^NÑvñ$/;"	n
OBJECTACTION_DROP	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon208
OBJECTACTION_UPDATE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon208
OBJMODE_TEAMMEMBER_USERCMD_PARA	base/include/csCommon.h	4867;"	d
OBJ_DROP	SceneServer/libscenesserver/SceneServer1.h	/^    OBJ_DROP = 16,$/;"	e	enum:ScriptQuest::__anon108
OBJ_GET	SceneServer/libscenesserver/SceneServer1.h	/^    OBJ_GET = 8,$/;"	e	enum:ScriptQuest::__anon108
OBJ_USE	SceneServer/libscenesserver/SceneServer1.h	/^    OBJ_USE = 4,$/;"	e	enum:ScriptQuest::__anon108
ODDS_BENCHMARK	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon186
ONE_SEAT_STATE_COMMON_MINI_PARA	base/include/csCommon.h	12143;"	d
OPERATION_WRITEBACK	base/recordcmd.h	/^			OPERATION_WRITEBACK,$/;"	e	enum:Cmd::Record::WriteBack_Type
OPTION_ALIAS	base/include/argp.h	74;"	d
OPTION_ARG_OPTIONAL	base/include/argp.h	66;"	d
OPTION_DOC	base/include/argp.h	86;"	d
OPTION_HIDDEN	base/include/argp.h	69;"	d
OPTION_NO_USAGE	base/include/argp.h	95;"	d
OPT_DOC_COL	base/src/getopt.c	2308;"	d	file:
OPT_HANG	base/src/getopt.c	1008;"	d	file:
OPT_PROGNAME	base/src/getopt.c	1006;"	d	file:
OPT_USAGE	base/src/getopt.c	1007;"	d	file:
OTHERS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
OTHERS1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
OTHERS2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
OTHERS3	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
OTHERS4	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
ObjID_vec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::UserObjectM
Obj_vec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::UserObjectM
Object	base/include/csCommon.h	/^/;"	n
ObjectBase	base/include/srvEngine.h	/^struct ObjectBase{$/;"	s
ObjectCompare	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	c	file:
ObjectPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
ObjectPack	SceneServer/libscenesserver/zObject.cpp	/^ObjectPack::ObjectPack(zObject* ob,int type,bool consume)  :$/;"	f	class:ObjectPack
ObjectsContainer	SceneServer/libscenesserver/SceneServer1.h	/^    typedef hash_multimap<WORD,InitObject> ObjectsContainer;$/;"	t	class:CharInitInfo
ObjectsContainer	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::CharInitInfo
Odds	SceneServer/libscenesserver/SceneServer1.h	/^      Odds() : per(0),luck(0),material_level(0),skill_level(0),odds(0),sleight(0),odds_gem(0)$/;"	f	struct:EquipMaker::Odds
Odds	SceneServer/libscenesserver/SceneServer1.h	/^    struct Odds$/;"	s	class:EquipMaker
Odds	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:EquipMaker::Odds
Odds	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:EquipMaker
Offline	SessionServer/libsessionserver/SessionServer.h	/^          Offline,$/;"	e	enum:CSeptMember::__anon111
Offline	SessionServer/libsessionserver/SessionServer.h	/^          Offline,$/;"	e	enum:CUnionMember::__anon110
OldMap	base/include/csCommon.h	/^/;"	m	struct:CharBase
OnDie	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnDrop	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnEnter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnGet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnKill	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnKillByLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnKillBySelf	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnOther	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnQuit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnRide	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnTimer	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnUse	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OnVisit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
OneCountryScene	SessionServer/libsessionserver/SessionServer.h	/^struct OneCountryScene: public execEntry<UserSession>$/;"	s
OneCountryUserSessionAction	SessionServer/libsessionserver/SessionTask.cpp	/^struct OneCountryUserSessionAction: public execEntry<UserSession>$/;"	s	file:
Online	SessionServer/libsessionserver/SessionServer.h	/^          Online$/;"	e	enum:CSeptMember::__anon111
Online	SessionServer/libsessionserver/SessionServer.h	/^          Online$/;"	e	enum:CUnionMember::__anon110
OnlineNum	SuperServer/ServerTask.h	/^		DWORD      OnlineNum;      \/**< ‘⁄œﬂ»À ˝Õ≥º∆ *\/$/;"	m	class:ServerTask
Online_Max	GatewayServer/old_back/GatewayServer.h	/^ 		DWORD Online_Max;$/;"	m	struct:CountryInfo::Info
Online_Now	GatewayServer/old_back/GatewayServer.h	/^ 		DWORD Online_Now;$/;"	m	struct:CountryInfo::Info
Online_Statue	base/include/csCommon.h	/^/;"	m	struct:Cmd::Country_Info
Online_vec	SceneServer/libscenesserver/TeamManager.cpp	/^	typedef std::vector<DWORD> Online_vec;$/;"	t	struct:CheckOfflineExec	file:
Online_vec_iterator	SceneServer/libscenesserver/TeamManager.cpp	/^	typedef Online_vec::iterator Online_vec_iterator;$/;"	t	struct:CheckOfflineExec	file:
Op	SceneServer/libscenesserver/SceneServer1.h	/^namespace Op {$/;"	n
Op	SceneServer/libscenesserver/ScenesServer.h	/^/;"	n
Other	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
OverBattGame	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::OverBattGame()$/;"	f	class:GangScene
OverTime	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD OverTime;$/;"	m	class:GangScene
PACKET_MASK	base/include/x_socket.h	/^	static const uint32_t PACKET_MASK      =  trunkSize - 1;  \/**< ÊúÄÂ§ßÊï∞ÊçÆÂåÖÈïøÂ∫¶Êé©Á†Å *\/$/;"	m	class:x_socket
PACKET_ZIP	base/include/x_socket.h	/^	static const uint32_t PACKET_ZIP    =  0x40000000;        \/**< Êï∞ÊçÆÂåÖÂéãÁº©Ê†áÂøó *\/$/;"	m	class:x_socket
PACKET_ZIP_BUFFER	base/src/x_buffer.h	/^const uint32_t PACKET_ZIP_BUFFER  =  unzip_size(trunkSize - 1) + sizeof(uint32_t) + 8;  \/**< ÂéãÁº©ÈúÄË¶ÅÁöÑÁºìÂÜ≤ *\/$/;"	v
PACKET_ZIP_MIN	base/include/x_socket.h	/^	static const uint32_t PACKET_ZIP_MIN  =  32;            \/**< Êï∞ÊçÆÂåÖÂéãÁº©ÊúÄÂ∞èÂ§ßÂ∞è *\/$/;"	m	class:x_socket
PACKE_TYPE	base/include/csBox.h	367;"	d
PACKHEADLASTSIZE	base/include/srvEngine.h	54;"	d
PACKHEADSIZE	base/include/srvEngine.h	56;"	d
PACKLASTSIZE	base/include/srvEngine.h	58;"	d
PACKNO	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::EquipPack
PACK_BUYTAB_NUM_USERCMD	base/include/csBox.h	370;"	d
PACK_HEAD	base/include/srvEngine.h	/^	PACK_HEAD()$/;"	f	struct:PACK_HEAD
PACK_HEAD	base/include/srvEngine.h	/^struct PACK_HEAD$/;"	s
PACK_HEIGHT	SceneServer/libscenesserver/ScenesServer.h	24;"	d
PACK_LAST	base/include/srvEngine.h	/^	PACK_LAST()$/;"	f	struct:PACK_LAST
PACK_LAST	base/include/srvEngine.h	/^struct PACK_LAST$/;"	s
PACK_WIDTH	SceneServer/libscenesserver/ScenesServer.h	23;"	d
PARA_BILL_IDINUSE	base/supercmd.h	/^		const BYTE PARA_BILL_IDINUSE = 2;$/;"	m	namespace:Cmd::Super
PARA_BILL_NEWSESSION	base/supercmd.h	/^		const BYTE PARA_BILL_NEWSESSION = 1;$/;"	m	namespace:Cmd::Super
PARA_BROADCAST_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_CANCELLISTALL_STOCKPARA	base/include/csCommon.h	9159;"	d
PARA_CHECKRELATION_EMPTY	base/include/csTurn.h	73;"	d
PARA_CHECKRELATION_RESULT	base/include/csTurn.h	/^	const BYTE PARA_CHECKRELATION_RESULT = 248;\/\/ 3$/;"	m	namespace:Cmd
PARA_FL_GYLIST	base/flcmd.h	/^		const BYTE PARA_FL_GYLIST = 1;$/;"	m	namespace:Cmd::FL
PARA_FL_RQGYLIST	base/flcmd.h	/^		const BYTE PARA_FL_RQGYLIST = 2;$/;"	m	namespace:Cmd::FL
PARA_FORWARD_BILL_TO_SCENE	base/billcmd.h	/^		const BYTE PARA_FORWARD_BILL_TO_SCENE = 3;$/;"	m	namespace:Cmd::Bill
PARA_FORWARD_MINI_TO_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_FORWARD_SCENE_TO_MINI	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_FORWARD_USER	base/billcmd.h	/^		const BYTE PARA_FORWARD_USER = 1;$/;"	m	namespace:Cmd::Bill
PARA_GAMETIME	base/supercmd.h	/^		const BYTE PARA_GAMETIME = 6;$/;"	m	namespace:Cmd::Super
PARA_GATEWAY_GYLIST	base/supercmd.h	/^		const BYTE PARA_GATEWAY_GYLIST = 1;$/;"	m	namespace:Cmd::Super
PARA_GATEWAY_NEWSESSION	base/supercmd.h	/^		const BYTE PARA_GATEWAY_NEWSESSION = 3;$/;"	m	namespace:Cmd::Super
PARA_GATEWAY_RQGYLIST	base/supercmd.h	/^		const BYTE PARA_GATEWAY_RQGYLIST = 2;$/;"	m	namespace:Cmd::Super
PARA_GATE_NEWSESSION	base/billcmd.h	/^		const BYTE PARA_GATE_NEWSESSION = 1;$/;"	m	namespace:Cmd::Bill
PARA_GATE_SESSION_TEST	base/sessioncmd.h	/^		const BYTE PARA_GATE_SESSION_TEST = 1;$/;"	m	namespace:Cmd::Session
PARA_GATE_TEST	base/recordcmd.h	/^		const BYTE PARA_GATE_TEST = 3;$/;"	m	namespace:Cmd::Record
PARA_GATE_USER_DELETE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_GATE_USER_LOGIN	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_GATE_USER_LOGOUT	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_LOGIN	base/billcmd.h	/^		const BYTE PARA_LOGIN = 1;$/;"	m	namespace:Cmd::Bill
PARA_LOGIN	base/flcmd.h	/^		const BYTE PARA_LOGIN = 1;$/;"	m	namespace:Cmd::FL
PARA_LOGIN	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_LOGIN	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_LOGIN	base/recordcmd.h	/^		const BYTE PARA_LOGIN = 1;$/;"	m	namespace:Cmd::Record
PARA_LOGIN	base/scenecmd.h	/^		const BYTE PARA_LOGIN = 1;$/;"	m	namespace:Cmd::Scene
PARA_LOGIN	base/sessioncmd.h	/^		const BYTE PARA_LOGIN = 1;$/;"	m	namespace:Cmd::Session
PARA_LOGIN_OK	base/flcmd.h	/^		const BYTE PARA_LOGIN_OK = 2;$/;"	m	namespace:Cmd::FL
PARA_MINI_FORWARD_USER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_NULL	base/x_nullcmd.h	/^	const BYTE PARA_NULL = 0;$/;"	m	namespace:Cmd
PARA_RESTART_SERVERENTRY_NOTIFYOTHER	base/supercmd.h	/^		const BYTE PARA_RESTART_SERVERENTRY_NOTIFYOTHER = 9;$/;"	m	namespace:Cmd::Super
PARA_SCENE_BAIL_CHECK	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_CHANEG_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_CHECK_DRAW	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_SCENE_CITY_RUSH	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_CITY_RUSH_CUST	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_CREATE_DARE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_CREATE_QUIZ	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_CREATE_SCHOOL	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_DEPOSIT	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_SCENE_DEPOSIT_RET	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_SCENE_DRAW_RET	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_SCENE_FORBID_TALK	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_FORWARD_USER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_GM_COMMAND	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_GUARD_FAIL	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_LEVELUPNOTIFY	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_PRIVATE_CHAT	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_REGSCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_REGSCENE_RET	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_REGUSER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_REGUSERSUCCESS	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_REMOVE_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_REQ_ADD_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_SEND_CMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_SEND_GIFT	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_SESSION_TEST	base/sessioncmd.h	/^		const BYTE PARA_SCENE_SESSION_TEST = 1;$/;"	m	namespace:Cmd::Session
PARA_SCENE_SET_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PARA_SCENE_SYS_SETTING	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_TEST	base/recordcmd.h	/^		const BYTE PARA_SCENE_TEST = 3;$/;"	m	namespace:Cmd::Record
PARA_SCENE_UNLOAD_SCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_UNREGSCENE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_UNREGUSER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SCENE_USER_READ	base/recordcmd.h	/^		const BYTE PARA_SCENE_USER_READ = 1;$/;"	m	namespace:Cmd::Record
PARA_SCENE_USER_READ_ERROR	base/include/csCommon.h	11511;"	d
PARA_SCENE_USER_WRITE	base/recordcmd.h	/^		const BYTE PARA_SCENE_USER_WRITE = 2;$/;"	m	namespace:Cmd::Record
PARA_SEND_USER_RELATION_ID	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SERVER_NOTIFY	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SESSION_IDINUSE	base/flcmd.h	/^		const BYTE PARA_SESSION_IDINUSE = 2;$/;"	m	namespace:Cmd::FL
PARA_SESSION_NEWSESSION	base/flcmd.h	/^		const BYTE PARA_SESSION_NEWSESSION = 1;$/;"	m	namespace:Cmd::FL
PARA_SET_SERVICE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_SHUTDOWN	base/supercmd.h	/^		const BYTE PARA_SHUTDOWN = 1;$/;"	m	namespace:Cmd::Super
PARA_SPEND_GOLD	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_STARTUP_OK	base/supercmd.h	/^		const BYTE PARA_STARTUP_OK = 5;$/;"	m	namespace:Cmd::Super
PARA_STARTUP_REQUEST	base/supercmd.h	/^		const BYTE PARA_STARTUP_REQUEST = 1;$/;"	m	namespace:Cmd::Super
PARA_STARTUP_RESPONSE	base/supercmd.h	/^		const BYTE PARA_STARTUP_RESPONSE = 2;$/;"	m	namespace:Cmd::Super
PARA_STARTUP_SERVERENTRY_NOTIFYME	base/supercmd.h	/^		const BYTE PARA_STARTUP_SERVERENTRY_NOTIFYME = 3;$/;"	m	namespace:Cmd::Super
PARA_STARTUP_SERVERENTRY_NOTIFYOTHER	base/supercmd.h	/^		const BYTE PARA_STARTUP_SERVERENTRY_NOTIFYOTHER = 4;$/;"	m	namespace:Cmd::Super
PARA_STARTUP_TEST	base/supercmd.h	/^		const BYTE PARA_STARTUP_TEST = 10;$/;"	m	namespace:Cmd::Super
PARA_UPDATE_CONSORT	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PARA_USER_FORWARD_MINI	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Mini
PASSWD_LOGON_USERCMD_PARA	base/command.h	/^	const BYTE PASSWD_LOGON_USERCMD_PARA = 5;$/;"	m	namespace:Cmd
PASSWD_LOGON_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
PASSWORD_LOGON_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
PASSWORD_STOCKPARA	base/include/csCommon.h	8769;"	d
PERMUTE	base/src/getopt.c	/^      REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:_getopt_data::__anon124	file:
PERSONAL_QUIZ	base/include/srvEngine.h	/^		PERSONAL_QUIZ = 1 \/\/ ‰∏™‰∫∫ÈóÆÁ≠î$/;"	e	enum:QuizDef::__anon141
PERSONAL_QUIZ_NEED_GOLD	base/include/srvEngine.h	/^	const uint32_t PERSONAL_QUIZ_NEED_GOLD = 100; \/\/ ‰∏™‰∫∫ÈóÆÁ≠îÔºåÊâÄÈúÄÈì∂‰∏§$/;"	m	namespace:QuizDef
PER_LEVEL_MAN_NUM	base/include/csCommon.h	/^/;"	m	namespace:SeptDef
PET	base/include/csCommon.h	/^/;"	e	enum:TempArchiveType
PET_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Packages::__anon57
PET_TYPE_CARTOON	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_TYPE_GUARDNPC	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_TYPE_NOTPET	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_TYPE_PET	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_TYPE_RIDE	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_TYPE_SEMI	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_TYPE_SUMMON	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_TYPE_TOTEM	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_TYPE_TURRET	base/include/csCommon.h	/^/;"	e	enum:Cmd::petType
PET_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
PFN_filter_command	base/include/srvEngine.h	/^	typedef BOOL (*PFN_filter_command)(PBYTE pCmd,uint32_t dwCmd);$/;"	t
PFN_filter_init	base/include/srvEngine.h	/^	typedef void (*PFN_filter_init)(void);$/;"	t
PFN_filter_term	base/include/srvEngine.h	/^	typedef void (*PFN_filter_term)(void);$/;"	t
PFilterModule	base/include/srvEngine.h	/^	}NFilterModule,*PFilterModule;$/;"	t	typeref:struct:__anon142
PH_LEN	base/common.h	80;"	d
PH_LEN	base/include/x_socket.h	/^	static const uint32_t PH_LEN       =  sizeof(uint32_t);  \/**< Êï∞ÊçÆÂåÖÂåÖÂ§¥Â§ßÂ∞è *\/$/;"	m	class:x_socket
PH_LEN	base/src/tcp_socket.h	11;"	d
PH_LEN	base/tcp_client.h	12;"	d
PICKUPITEM_PROPERTY_USERCMD_PARA	base/include/csCommon.h	3875;"	d
PING_LIST_PARA	base/command.h	/^	const BYTE PING_LIST_PARA = 1;$/;"	m	namespace:Cmd
PING_TIMER_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
PING_USERCMD	base/command.h	/^	const BYTE PING_USERCMD = 30;$/;"	m	namespace:Cmd
PING_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
PK_MAP_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
POINT_DDZ_MINI_PARA	base/include/csCommon.h	12593;"	d
POLLIN	base/include/srvEngine.h	435;"	d
POLLOUT	base/include/srvEngine.h	437;"	d
POLLPRI	base/include/srvEngine.h	436;"	d
PPT_CON	base/include/csBox.h	/^  PPT_CON,	\/\/ ÃÂ÷ $/;"	e	enum:Cmd::ATTRIBUTETYPE
PPT_DEX	base/include/csBox.h	/^  PPT_DEX,	\/\/ √ÙΩ›$/;"	e	enum:Cmd::ATTRIBUTETYPE
PPT_INTE	base/include/csBox.h	/^  PPT_INTE,	\/\/ ÷«¡¶$/;"	e	enum:Cmd::ATTRIBUTETYPE
PPT_SPI	base/include/csBox.h	/^  PPT_SPI,	\/\/ æ´…Ò$/;"	e	enum:Cmd::ATTRIBUTETYPE
PPT_STR	base/include/csBox.h	/^  PPT_STR,	\/\/ ¡¶¡ø$/;"	e	enum:Cmd::ATTRIBUTETYPE
PRINTF_SIZE_GUESS	base/src/getopt.c	1948;"	d	file:
PRISON_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
PRIVATE_CHAT_ACT_INVITE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PRIVATE_CHAT_ACT_JOIN	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PRIVATE_CHAT_ACT_LEAVE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PRIVATE_CHAT_ERR_FILTER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PRIVATE_CHAT_ERR_NOUSER	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
PROCESS_PROP	SceneServer/libscenesserver/RebuildObject.cpp	380;"	d	file:
PROFESSION_1	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFESSION_2	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFESSION_3	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFESSION_4	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFESSION_5	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFESSION_6	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFESSION_7	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFESSION_8	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFESSION_NONE	base/include/csCommon.h	/^/;"	e	enum:__anon179
PROFILE	deps/tinyxml/Makefile	/^PROFILE        := NO$/;"	m
PROPERTY_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
PSTR2BSTR	base/include/codeLib.h	52;"	d
PUBLIC_COUNTRY	base/include/csCommon.h	/^/;"	v
PUT_CARD_MINI_PARA	base/include/csCommon.h	12566;"	d
PUT_LIST_STOCKPARA	base/include/csCommon.h	8999;"	d
PackType	base/include/csBox.h	/^	BYTE PackType;  \/\/sky ±ª≤Ÿ◊˜µƒ∞¸∏§¿‡–Õ(PACKE_TYPE:∞¸π¸ SAVEBOX_TYPE:≤÷ø‚)$/;"	m	struct:Cmd::stPackBuyTanbNumUserCmd
Package	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
Package	SceneServer/libscenesserver/zObject.cpp	/^Package::Package(WORD type,DWORD id,WORD w,WORD h):_type(type),_id(id),_width(w),_height(h),_space(w*h),_size(_space)$/;"	f	class:Package
PackageCallback	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
Packages	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
Packages	SceneServer/libscenesserver/zObject.cpp	/^Packages::Packages(SceneUser* user) : owner(user),equip(user)$/;"	f	class:Packages
Param	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::DropFromPack::Param
Param	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	struct:O::DropFromPack
Parent	deps/tinyxml/tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:TiXmlNode
Parent	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:TiXmlNode
Parse	base/include/srvEngine.h	/^class Parse$/;"	c
Parse	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlAttribute
Parse	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment
Parse	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encoding )$/;"	f	class:TiXmlDeclaration
Parse	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
Parse	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement
Parse	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText
Parse	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown
Parse3	base/include/srvEngine.h	/^class Parse3$/;"	c
PartList	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute
PetBase	base/include/srvEngine.h	/^struct PetBase{$/;"	s
PetPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
PetPack	SceneServer/libscenesserver/zObject.cpp	/^PetPack::PetPack()$/;"	f	class:PetPack
PhyReflex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
PingTask	FLServer/PingTask.h	/^	PingTask(io_service& ios):tcp_task(ios) { }$/;"	f	class:PingTask
PingTask	FLServer/PingTask.h	/^class PingTask : public tcp_task$/;"	c
PkPreValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::PkPreValue
PkPreValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
PkTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
PkValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::PkValue
PkValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
Point	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::Point
Point	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
PosIMapIndex	GatewayServer/old_back/GatewayServer.h	/^	typedef \/*__gnu_cxx::*\/hash_map<DWORD,SceneEntry_SET> PosIMapIndex;$/;"	t	class:ScreenIndex
PosIMapIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
PosiEffectMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
PosiEffectMap_iter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
Pow	SceneServer/libscenesserver/SceneServer1.h	/^  class Pow$/;"	c	namespace:Op
Pow	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
Previous	deps/tinyxml/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute
Previous	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute
PreviousSibling	deps/tinyxml/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode
PreviousSibling	deps/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode
PreviousSibling	deps/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
PreviousSibling	deps/tinyxml/tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:TiXmlNode
PreviousSibling	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_value.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlNode
PreviousSibling	deps/tinyxml/tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:TiXmlNode
Print	deps/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute
Print	deps/tinyxml/tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment
Print	deps/tinyxml/tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration
Print	deps/tinyxml/tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument
Print	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement
Print	deps/tinyxml/tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText
Print	deps/tinyxml/tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown
Print	deps/tinyxml/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute
Print	deps/tinyxml/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration
Print	deps/tinyxml/tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument
PrintSet	SessionServer/libsessionserver/Quiz.cpp	/^    PrintSet(){}$/;"	f	class:PrintSet
PrintSet	SessionServer/libsessionserver/Quiz.cpp	/^class PrintSet$/;"	c	file:
PrivateStore	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
PrivateStore	SceneServer/libscenesserver/Trade.cpp	/^PrivateStore::PrivateStore() : _step(NONE)$/;"	f	class:PrivateStore
ProductFactory	SceneServer/libscenesserver/SceneServer1.h	/^  ProductFactory()$/;"	f	class:ProductFactory
ProductFactory	SceneServer/libscenesserver/SceneServer1.h	/^class ProductFactory$/;"	c
ProfessionCondition	SceneServer/libscenesserver/SceneServer1.h	/^  ProfessionCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:ProfessionCondition
ProfessionCondition	SceneServer/libscenesserver/SceneServer1.h	/^class ProfessionCondition : public TeamCondition$/;"	c
ProfessionCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ProfessionCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ProfessionCondition
Prop	SceneServer/libscenesserver/SceneServer1.h	/^    Prop(ScenesParser& p) : _p(p)$/;"	f	class:MakeFunction::Prop
Prop	SceneServer/libscenesserver/SceneServer1.h	/^  class Prop : public Maker<typename A::Base>$/;"	c	namespace:MakeFunction
QUERY_FUND_STOCKPARA	base/include/csCommon.h	8810;"	d
QUESTING	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Event::__anon76
QUESTION_OBJECT_USERCMD_PARA	base/include/csCommon.h	4798;"	d
QUESTS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Event
QUESTS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::QuestList
QUESTS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::QuestTable
QUIZ_ACTIVE_QUESTION	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_ACTIVE_QUESTION,\/\/ ¥Ã‚◊¥Ã¨$/;"	e	enum:CQuiz::__anon113
QUIZ_END_QUESTION	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_END_QUESTION,    \/\/ Ω· ¯±æ¬÷Œ ¥,≤¢◊ˆœ‡”¶¥¶¿Ì(»´«¯æ∫»¸ ±,Ω¯––≈≈–Ú¥¶¿Ì≤¢∑¢ÀÕ≈≈√˚”Îµ√∑÷,$/;"	e	enum:CQuiz::__anon113
QUIZ_OVER	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_OVER    \/\/ Ω· ¯«Â≥˝◊¥Ã¨$/;"	e	enum:CQuiz::__anon113
QUIZ_READY	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_READY,  \/\/ —˚«Îµ»¥˝◊¥Ã¨$/;"	e	enum:CQuiz::__anon113
QUIZ_READY_OVER	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_READY_OVER,      \/\/ Ω· ¯æ∫»¸,Õ®÷™≥°æ∞»°œ˚À˘”–»Àµƒ∂‘’Ω◊¥Ã¨,≤¢º∆À„ ‰”Æ,÷ÿ÷√≤Èø¥≈≈√˚ ±º‰$/;"	e	enum:CQuiz::__anon113
QUIZ_READY_QUESTION	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_READY_QUESTION,  \/\/ µ»¥˝±ª—˚”¶’ﬂªÿ”¶◊¥Ã¨,±£≥÷10√Î$/;"	e	enum:CQuiz::__anon113
QUIZ_READ_SORT	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_READ_SORT,  \/\/ ∏√◊¥Ã¨÷ª”√”⁄»´π˙,µ»¥˝ŒÂ√Î ±º‰∫Û,‘⁄¥À◊¥Ã¨‘Ÿ∑¢ÀÕ“ª¥ŒΩ· ¯$/;"	e	enum:CQuiz::__anon113
QUIZ_RETURN_GOLD	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_RETURN_GOLD,\/\/ ∏ˆ»ÀŒ ¥Ω· ¯,µ´ªπŒ¥Ω¯––Ω±¿¯$/;"	e	enum:CQuiz::__anon113
QUIZ_SEND_QUESTION	SessionServer/libsessionserver/SessionServer.h	/^      QUIZ_SEND_QUESTION,\/\/ ∑¢Ã‚◊¥Ã¨$/;"	e	enum:CQuiz::__anon113
QUIZ_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
QUOTE	base/src/getopt.c	986;"	d	file:
QWORD	base/include/csCommon.h	/^/;"	t
QWORD	base/type.h	/^typedef uint64_t    QWORD;$/;"	t
QueryBoolAttribute	deps/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const$/;"	f	class:TiXmlElement
QueryDoubleAttribute	deps/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement
QueryDoubleAttribute	deps/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement
QueryDoubleValue	deps/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute
QueryFloatAttribute	deps/tinyxml/tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement
QueryIntAttribute	deps/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement
QueryIntAttribute	deps/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement
QueryIntValue	deps/tinyxml/tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute
QueryStringAttribute	deps/tinyxml/tinyxml.h	/^	int QueryStringAttribute( const char* name, std::string* _value ) const {$/;"	f	class:TiXmlElement
QueryUnsignedAttribute	deps/tinyxml/tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const$/;"	f	class:TiXmlElement
QueryValueAttribute	deps/tinyxml/tinyxml.h	/^	int QueryValueAttribute( const std::string& name, std::string* outValue ) const$/;"	f	class:TiXmlElement
QueryValueAttribute	deps/tinyxml/tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement
Quest	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
QuestList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
QuestList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::QuestList
QuestTable	SceneServer/libscenesserver/QuestTable.cpp	/^QuestTable::QuestTable()$/;"	f	class:QuestTable
QuestTable	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
QueueTeamData	SessionServer/libsessionserver/SessionServer.h	/^	QueueTeamData()$/;"	f	struct:QueueTeamData
QueueTeamData	SessionServer/libsessionserver/SessionServer.h	/^struct QueueTeamData$/;"	s
QueueTeamLock	SessionServer/libsessionserver/SessionServer.h	/^	zMutex QueueTeamLock;$/;"	m	class:CQueueManager
QueueUserLock	SessionServer/libsessionserver/SessionServer.h	/^	zMutex QueueUserLock;$/;"	m	class:CQueueManager
Queue_AddTeam	SessionServer/libsessionserver/Queuing.cpp	/^void CQueueManager::Queue_AddTeam(DWORD UserID)$/;"	f	class:CQueueManager
Queue_AddUser	SessionServer/libsessionserver/Queuing.cpp	/^void CQueueManager::Queue_AddUser(DWORD UserID)$/;"	f	class:CQueueManager
Queue_RemoveTeam	SessionServer/libsessionserver/Queuing.cpp	/^bool CQueueManager::Queue_RemoveTeam(DWORD * UserID, int num)$/;"	f	class:CQueueManager
Queue_RemoveUser	SessionServer/libsessionserver/Queuing.cpp	/^bool CQueueManager::Queue_RemoveUser(DWORD * UserID, int num)$/;"	f	class:CQueueManager
Queuing	SessionServer/libsessionserver/SessionServer.h	/^	std::map<DWORD, CQueueManager*> Queuing;$/;"	m	class:CQueuingManager
Queuing_AddScene	SessionServer/libsessionserver/Queuing.cpp	/^bool CQueuingManager::Queuing_AddScene(Cmd::Session::t_Sports_ReturnMapID * cmd)		\/\/sky Ω´“ª∏ˆ¥¥Ω®∫√µƒ’Ω≥°µÿÕºµƒID∑≈µΩ’Ω≥°»›∆˜¿Ô$/;"	f	class:CQueuingManager
Queuing_AddUser	SessionServer/libsessionserver/Queuing.cpp	/^void CQueuingManager::Queuing_AddUser(DWORD UserID, BYTE UserType)$/;"	f	class:CQueuingManager
Queuing_Main	SessionServer/libsessionserver/Queuing.cpp	/^void CQueuingManager::Queuing_Main()$/;"	f	class:CQueuingManager
Quit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
QuizDef	base/include/srvEngine.h	/^namespace QuizDef$/;"	n
QuizDef	base/src/zMisc.cpp	/^namespace QuizDef$/;"	n	file:
RANLIB	deps/tinyxml/Makefile	/^RANLIB := ranlib$/;"	m
RC5_32_decrypt	base/src/zEncDec.cpp	/^void CEncrypt::RC5_32_decrypt(RC5_32_INT*d,RC5_32_KEY *key)$/;"	f	class:CEncrypt
RC5_32_encrypt	base/src/zEncDec.cpp	/^void CEncrypt::RC5_32_encrypt(RC5_32_INT*d,RC5_32_KEY *key)$/;"	f	class:CEncrypt
RC5_32_set_key	base/src/zEncDec.cpp	/^void CEncrypt::RC5_32_set_key(RC5_32_KEY *key,int len,const BYTE *data,int rounds)$/;"	f	class:CEncrypt
READYTIME	base/include/srvEngine.h	/^	const uint32_t READYTIME  = 300; \/\/ Á≠âÂæÖÂ∫îÊàòÁöÑÊó∂Èó¥ÔºåÂçï‰Ωç:Áßí$/;"	m	namespace:DareDef
READYTIME	base/include/srvEngine.h	/^	const uint32_t READYTIME  = 300; \/\/ Á≠âÂæÖÂ∫îÊàòÁöÑÊó∂Èó¥ÔºåÂçï‰Ωç:Áßí$/;"	m	namespace:QuizDef
RECOMMEND_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
RECORDSERVER	base/common.h	/^	RECORDSERVER  =  11, \/** Ê°£Ê°àÊúçÂä°Âô® *\/$/;"	e	enum:ServerType
REDEEM_RATE_GOLD	base/include/csCommon.h	8565;"	d
REDEEM_RATE_MONTH_CARD	base/include/csCommon.h	8566;"	d
REFCOUNTOBJECT_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	3850;"	d
REFRESHSTATE_MAPSCREEN_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
REFRESH_BOSS_USERCMD_PARA	base/include/csCommon.h	4965;"	d
REGSCENE_RET_REGERR	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
REGSCENE_RET_REGOK	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
REG_COMP	base/include/srvEngine.h	/^	static const int REG_COMP;$/;"	m	class:zRegex
REG_DEFAULT	base/include/srvEngine.h	/^	static const int REG_DEFAULT;$/;"	m	class:zRegex
REG_FLAGS	base/include/srvEngine.h	/^	static const int REG_FLAGS;$/;"	m	class:zRegex
REG_MATCH	base/include/srvEngine.h	/^	static const int REG_MATCH;$/;"	m	class:zRegex
REG_MULTILINE	base/include/srvEngine.h	/^	static const int REG_MULTILINE;$/;"	m	class:zRegex
REG_UNKNOW	base/include/srvEngine.h	/^	static const int REG_UNKNOW;$/;"	m	class:zRegex
RELATION_TYPE_COUNTRY	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Session::__anon209
RELATION_TYPE_NOTIFY	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Session::__anon209
RELATION_TYPE_SCHOOL	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Session::__anon209
RELATION_TYPE_SEPT	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Session::__anon209
RELATION_TYPE_UNION	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Session::__anon209
RELATION_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
RELEASE_CFLAGS	deps/tinyxml/Makefile	/^RELEASE_CFLAGS   := -Wall -Wno-unknown-pragmas -Wno-format -O3$/;"	m
RELEASE_CXXFLAGS	deps/tinyxml/Makefile	/^RELEASE_CXXFLAGS := ${RELEASE_CFLAGS}$/;"	m
RELEASE_LDFLAGS	deps/tinyxml/Makefile	/^RELEASE_LDFLAGS  :=$/;"	m
RELIVE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
REMAKEOBJECT_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
REMOVEMAPOBJECT_MAPSCREEN_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
REMOVEUSEROBJECT_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	3804;"	d
REMOVEUSERSKILL_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	3982;"	d
REMOVEUSER_MAPSCREEN_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
REMOVE_ARMY_PARA	base/include/csCommon.h	6916;"	d
REMOVE_CARTOON_PARA	base/include/csCommon.h	9550;"	d
REMOVE_OBJECT_SELL_USERCMD_PARAMETER	base/include/csCommon.h	5233;"	d
REMOVE_OBJECT_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5108;"	d
REMOVE_TEAMMEMBER_USERCMD_PARA	base/include/csCommon.h	4672;"	d
REMOVE_TEAM_GHAGELEADER_USERCMD_PARA	base/include/csCommon.h	4997;"	d
REMOVE_TEAM_USERCMD_PARA	base/include/csCommon.h	4638;"	d
REMOVE_WAITING_CARTOON_PARA	base/include/csCommon.h	9654;"	d
REPAIROBJECT_GOLD_NPCTRADE_USERCMD_PARAMETER	base/include/csCommon.h	5309;"	d
REPAIROBJECT_NPCTRADE_USERCMD_PARAMETER	base/include/csCommon.h	5163;"	d
REPAIR_CARTOON_PARA	base/include/csCommon.h	9739;"	d
REQUESTUSERDATA_MAPSCREEN_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
REQUESTUSERGAMETIME_TIMER_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
REQUEST_ADD_OBJECT_SELL_USERCMD_PARAMETER	base/include/csCommon.h	5362;"	d
REQUEST_CANCEL_LIST_STOCKPARA	base/include/csCommon.h	8943;"	d
REQUEST_CONSIGN_LIST_STOCKPARA	base/include/csCommon.h	8911;"	d
REQUEST_COUNTRY_HELP_USERCMD_PARA	base/include/csCommon.h	4942;"	d
REQUEST_COUNTRY_POWER_PARA	base/include/csCommon.h	6557;"	d
REQUEST_DRAGON_PARA	base/include/csCommon.h	7013;"	d
REQUEST_FIRSTTEN_LIST_STOCKPARA	base/include/csCommon.h	8971;"	d
REQUEST_GOLD_GIVE_USERCMD_PARAMETER	base/include/csCommon.h	5319;"	d
REQUEST_HISTORY_STOCKPARA	base/include/csCommon.h	9034;"	d
REQUEST_LIST_CARTOON_PARA	base/include/csCommon.h	9664;"	d
REQUEST_NAME_TEAM_USERCMD_PARA	base/include/csCommon.h	4932;"	d
REQUEST_PING_LIST_PARA	base/command.h	/^	const BYTE REQUEST_PING_LIST_PARA = 2;$/;"	m	namespace:Cmd
REQUEST_SELF_HISTORY_STOCKPARA	base/include/csCommon.h	9080;"	d
REQUEST_SELL_BUY_USERCMD_PARAMETER	base/include/csCommon.h	5255;"	d
REQUEST_SELL_INFO_USERCMD_PARAMETER	base/include/csCommon.h	5244;"	d
REQUEST_STATE_STOCKPARA	base/include/csCommon.h	9148;"	d
REQUEST_TEAMMEMBER_POSITION_USERCMD_PARA	base/include/csCommon.h	4770;"	d
REQUEST_TEAM_USERCMD_PARA	base/include/csCommon.h	4694;"	d
REQUEST_TIGER_PARA	base/include/csCommon.h	7023;"	d
REQUEST_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5023;"	d
REQUEST_VOTE_LIST_PARA	base/include/csCommon.h	6693;"	d
REQUIRE_ORDER	base/src/getopt.c	/^      REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:_getopt_data::__anon124	file:
REQ_ARMY_GEN_PARA	base/include/csCommon.h	6812;"	d
REQ_ARMY_LIST_PARA	base/include/csCommon.h	6831;"	d
REQ_ARMY_SPEC_PARA	base/include/csCommon.h	6868;"	d
REQ_CITY_OWNER_LIST_PARA	base/include/csCommon.h	6618;"	d
REQ_COUNTRY_ALLY_INFO_PARA	base/include/csCommon.h	10388;"	d
REQ_COUNTRY_ALLY_PARA	base/include/csCommon.h	10345;"	d
REQ_COUNTRY_NOTE_PARA	base/include/csCommon.h	6454;"	d
REQ_DAILY_EMPEROR_MONEY	base/include/csCommon.h	6578;"	d
REQ_GEN_COUNTRY_PARA	base/include/csCommon.h	6488;"	d
REQ_KING_LIST_PARA	base/include/csCommon.h	6588;"	d
REQ_MASTER_BOUNTY_PARA	base/include/csCommon.h	7616;"	d
REQ_NPC_OWNER_LIST_PARA	base/include/csCommon.h	6645;"	d
REQ_PRENTICE_BOUNTY_PARA	base/include/csCommon.h	7628;"	d
REQ_RECOMMENDED_BOUNTY_PARA	base/include/csCommon.h	10584;"	d
REQ_RECOMMEND_BOUNTY_PARA	base/include/csCommon.h	10572;"	d
REQ_ROOM_DATA_COMMON_MINI_PARA	base/include/csCommon.h	12413;"	d
REQ_TECH_PARA	base/include/csCommon.h	6283;"	d
REQ_TOP_COMMON_MINI_PARA	base/include/csCommon.h	12423;"	d
REQ_WAIT_GEN_PARA	base/include/csCommon.h	6775;"	d
REQ_WAIT_OFFICIAL_PARA	base/include/csCommon.h	6321;"	d
RESERVE_CARDS_DDZ_MINI_PARA	base/include/csCommon.h	12607;"	d
RESET	SceneServer/libscenesserver/ScenesServer.h	652;"	d
RESPONSE_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4490;"	d
REST_RESTITUTE_SP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneUser::__anon86
RESULT_MINI_PARA	base/include/csCommon.h	12699;"	d
RETUEN_PASSWORD_STOCKPARA	base/include/csCommon.h	8800;"	d
RETURN_CANCEL_LIST_STOCKPARA	base/include/csCommon.h	8959;"	d
RETURN_CARTOON_PARA	base/include/csCommon.h	9590;"	d
RETURN_COUNTRY_POWER_PARA	base/include/csCommon.h	6567;"	d
RETURN_FUND_STOCKPARA	base/include/csCommon.h	8821;"	d
RETURN_GOLD_GIVE_USERCMD_PARAMETER	base/include/csCommon.h	5328;"	d
RETURN_IN_ORDER	base/src/getopt.c	/^      REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER$/;"	e	enum:_getopt_data::__anon124	file:
RETURN_PASSWORD_STOCKPARA	base/command.h	/^	const BYTE RETURN_PASSWORD_STOCKPARA = 2;$/;"	m	namespace:Cmd
RETURN_PUT_LIST_STOCKPARA	base/include/csCommon.h	9011;"	d
RETURN_QUESTION_OBJECT_USERCMD_PARA	base/include/csCommon.h	4810;"	d
RETURN_TEAMMEMBER_POSITION_USERCMD_PARA	base/include/csCommon.h	4781;"	d
RETURN_VOTE_LIST_PARA	base/include/csCommon.h	6713;"	d
RET_GEN_COUNTRY_PARA	base/include/csCommon.h	6498;"	d
RET_TOP_COMMON_MINI_PARA	base/include/csCommon.h	12433;"	d
REWARD_HONOR	SceneServer/libscenesserver/SceneBattlefiel.h	/^	REWARD_HONOR	= 3,	\/\/sky »Ÿ”˛$/;"	e	enum:eRewardType
REWARD_ITEM	SceneServer/libscenesserver/SceneBattlefiel.h	/^	REWARD_ITEM		= 2,	\/\/sky µ¿æﬂ$/;"	e	enum:eRewardType
REWARD_MONEY	SceneServer/libscenesserver/SceneBattlefiel.h	/^	REWARD_MONEY	= 1,	\/\/sky Ω«Æ$/;"	e	enum:eRewardType
REWARD_NULL	SceneServer/libscenesserver/SceneBattlefiel.h	/^	REWARD_NULL		= 0,	\/\/sky ø’$/;"	e	enum:eRewardType
RIDE_MAPSCREEN_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
RIGHT_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Packages::__anon57
RINGL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
RINGR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::EQUIPNO
RMARGIN	base/src/getopt.c	2311;"	d	file:
RM_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Packages::__anon57
ROLL_MAX_TIME	base/include/csCommon.h	160;"	d
RTN_ARMY_LIST_PARA	base/include/csCommon.h	6853;"	d
RTN_ARMY_SPEC_PARA	base/include/csCommon.h	6886;"	d
RTN_CITY_OWNER_LIST_PARA	base/include/csCommon.h	6628;"	d
RTN_COUNTRY_ALLY_INFO_PARA	base/include/csCommon.h	10398;"	d
RTN_KING_LIST_PARA	base/include/csCommon.h	6605;"	d
RTN_MASTER_BOUNTY_PARA	base/include/csCommon.h	7640;"	d
RTN_NPC_OWNER_LIST_PARA	base/include/csCommon.h	6654;"	d
RTN_PRENTICE_BOUNTY_PARA	base/include/csCommon.h	7655;"	d
RTN_RECOMMENDED_BOUNTY_PARA	base/include/csCommon.h	10621;"	d
RTN_RECOMMEND_BOUNTY_PARA	base/include/csCommon.h	10603;"	d
RTN_TECH_PARA	base/include/csCommon.h	6305;"	d
RTN_WAIT_GEN_PARA	base/include/csCommon.h	6791;"	d
RTN_WAIT_OFFICIAL_PARA	base/include/csCommon.h	6337;"	d
RT_MAKE_TURRET_USERCMD	base/include/csBox.h	323;"	d
RT_NPC_CHANGE_USERCMD	base/include/csBox.h	355;"	d
RT_NPC_DIRITEM_DATA_USERCMD_PARA	base/include/csBox.h	259;"	d
RT_NPC_DIRITEM_USERCMD_PARA	base/include/csBox.h	248;"	d
RT_NPC_GIVEITEM_USERCMD	base/include/csBox.h	277;"	d
RT_NPC_START_CHANGE_USERCMD	base/include/csBox.h	341;"	d
RT_TEAM_ROLL_ITEM_NOTICE	base/include/csBox.h	301;"	d
RT_TEAM_ROLL_ITEM_START	base/include/csBox.h	289;"	d
RT_TEAM_ROLL_ITEM_USERTYPE	base/include/csBox.h	312;"	d
RUN_CONSUME_SP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneUser::__anon86
RUSH_ATTACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_BROADCAST	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_CLEAR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_END	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_MOVETO	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_NORMAL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_RECOVER	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_RELIVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_SUMMON	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_SUMMON_OFF	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_SUMMON_ON	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_SUMMON_PET	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
RUSH_SUMMON_RUSH	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Rush::rushAction
R_MAKE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::PACKNO
R_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::EquipPack::PACKNO
RandPos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
RandRegionX	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
RandRegionY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
RandTimer	base/include/zTime.h	/^	RandTimer(const float how_long,const int delay=0) : _long((int)(how_long*1000)),_timer(delay*1000)$/;"	f	class:RandTimer
RandTimer	base/include/zTime.h	/^	RandTimer(const float how_long,const zRTime cur) : _long((int)(how_long*1000)),_timer(cur)$/;"	f	class:RandTimer
RandTimer	base/include/zTime.h	/^class RandTimer$/;"	c
RangMapData	SceneServer/libscenesserver/SceneManager.cpp	/^std::map<WORD, stRangMap*> RangMapData;$/;"	v
ReCampThisID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
ReCampThisID	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^DWORD GangScene::ReCampThisID(BYTE index)$/;"	f	class:GangScene
ReadName	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
ReadText	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:TiXmlBase
ReadValue	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement
RebuildObject	SceneServer/libscenesserver/SceneServer1.h	/^  RebuildObject() { }$/;"	f	class:RebuildObject
RebuildObject	SceneServer/libscenesserver/SceneServer1.h	/^class RebuildObject : public Base$/;"	c
RebuildObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
RebuildObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:RebuildObject
Recommend	SessionServer/libsessionserver/RecommendManager.cpp	/^Recommend::Recommend()$/;"	f	class:Recommend
Recommend	SessionServer/libsessionserver/SessionServer.h	/^class Recommend$/;"	c
RecommendM	SessionServer/libsessionserver/RecommendManager.cpp	/^RecommendM::RecommendM()$/;"	f	class:RecommendM
RecommendM	SessionServer/libsessionserver/SessionServer.h	/^class RecommendM : public Singleton<RecommendM>$/;"	c
RecommendSub	SessionServer/libsessionserver/RecommendManager.cpp	/^RecommendSub::RecommendSub()$/;"	f	class:RecommendSub
RecommendSub	SessionServer/libsessionserver/SessionServer.h	/^class RecommendSub$/;"	c
Record	base/recordcmd.h	/^	namespace Record$/;"	n	namespace:Cmd
RecordClient	GatewayServer/RecordClient.h	/^	RecordClient(boost::asio::io_service &ios):tcp_client(ios){$/;"	f	class:RecordClient
RecordClient	GatewayServer/RecordClient.h	/^class RecordClient : public tcp_client$/;"	c
RecordClient	GatewayServer/old_back/GatewayServer.h	/^	RecordClient($/;"	f	class:RecordClient
RecordClient	GatewayServer/old_back/GatewayServer.h	/^class RecordClient : public x_tcp_buffer_client$/;"	c
RecordClient	SceneServer/RecordClient.h	/^	RecordClient(boost::asio::io_service &ios):tcp_client(ios){$/;"	f	class:RecordClient
RecordClient	SceneServer/RecordClient.h	/^class RecordClient : public tcp_client$/;"	c
RecordClient	SceneServer/libscenesserver/SceneServer1.h	/^    RecordClient(const std::string &name,const std::string &ip,const WORD port)$/;"	f	class:RecordClient
RecordClient	SceneServer/libscenesserver/SceneServer1.h	/^class RecordClient : public x_tcp_buffer_client,public MessageQueue$/;"	c
RecordClient	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
RecordClient	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::RecordClient
RecordClient	SessionServer/RecordClient.h	/^	RecordClient(boost::asio::io_service &ios):tcp_client(ios){$/;"	f	class:RecordClient
RecordClient	SessionServer/RecordClient.h	/^class RecordClient : public tcp_client$/;"	c
RecordClient	SessionServer/libsessionserver/SessionServer.h	/^    RecordClient($/;"	f	class:RecordClient
RecordClient	SessionServer/libsessionserver/SessionServer.h	/^class RecordClient : public x_tcp_client,public MessageQueue$/;"	c
RecordService	RecordServer/RecordServer.h	/^		RecordService():x_subnetservice("record server",RECORDSERVER) {$/;"	f	class:RecordService
RecordService	RecordServer/RecordServer.h	/^class RecordService : public x_subnetservice {$/;"	c
RecordTask	RecordServer/RecordTask.h	/^    RecordTask(io_service& ios) : tcp_task(ios) {$/;"	f	class:RecordTask
RecordTask	RecordServer/RecordTask.h	/^class RecordTask : public tcp_task\/\/, public MessageQueue$/;"	c
RecordUser	RecordServer/RecordUser.cpp	/^RecordUser::RecordUser(){$/;"	f	class:RecordUser
RecordUser	RecordServer/RecordUser.h	/^class RecordUser : boost::noncopyable{$/;"	c
RecordUserHashmap	RecordServer/RecordUserManager.h	/^	typedef boost::unordered_map<DWORD, RecordUserPtr > RecordUserHashmap;$/;"	t	class:RecordUserM
RecordUserHashmap_iterator	RecordServer/RecordUserManager.h	/^	typedef RecordUserHashmap::iterator RecordUserHashmap_iterator;$/;"	t	class:RecordUserM
RecordUserM	RecordServer/RecordUserManager.h	/^	RecordUserM() {}$/;"	f	class:RecordUserM
RecordUserM	RecordServer/RecordUserManager.h	/^class RecordUserM: public Singleton<RecordUserM>{$/;"	c
RecordUserPtr	RecordServer/RecordUser.h	/^typedef boost::shared_ptr<RecordUser> RecordUserPtr;$/;"	t
RefreshAction	SceneServer/libscenesserver/SceneServer1.h	/^  RefreshAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:RefreshAction
RefreshAction	SceneServer/libscenesserver/SceneServer1.h	/^class RefreshAction : public TeamAction$/;"	c
RefreshAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
RefreshAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:RefreshAction
RegMapType	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUser_SceneSession
RelativePos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::RelativePos
RelativePos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
ReliveSpecNpc	SceneServer/libscenesserver/CountryDare.cpp	/^  ReliveSpecNpc() {};$/;"	f	struct:ReliveSpecNpc
ReliveSpecNpc	SceneServer/libscenesserver/CountryDare.cpp	/^struct ReliveSpecNpc : public zSceneEntryCallBack$/;"	s	file:
Remove	deps/tinyxml/tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet
RemoveAttribute	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement
RemoveAttribute	deps/tinyxml/tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< STL std::string form.$/;"	f	class:TiXmlElement
RemoveChild	deps/tinyxml/tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode
RemoveItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  RemoveItemAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:RemoveItemAction
RemoveItemAction	SceneServer/libscenesserver/SceneServer1.h	/^class RemoveItemAction : public TeamAction$/;"	c
RemoveMemberExec	SceneServer/libscenesserver/TeamManager.cpp	/^	RemoveMemberExec(const Cmd::stRemoveTeamMemberUserCmd *rem)$/;"	f	struct:RemoveMemberExec
RemoveMemberExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct RemoveMemberExec : public TeamMemExec$/;"	s	file:
RemoveNpc	SceneServer/libscenesserver/SceneServer1.h	/^    RemoveNpc(Scene* s,int id,const zPos& ltpos,const zPos& rbpos) : _s(s),_id(id),_ltpos(ltpos),_rbpos(rbpos)$/;"	f	class:RemoveNpcAction::RemoveNpc
RemoveNpc	SceneServer/libscenesserver/SceneServer1.h	/^  class RemoveNpc : public removeEntry_Pred<SceneNpc>$/;"	c	class:RemoveNpcAction
RemoveNpcAction	SceneServer/libscenesserver/SceneServer1.h	/^  RemoveNpcAction(ScenesParser& p) : NpcAction(p),_remove(_s,_id,_ltpos,_rbpos)$/;"	f	class:RemoveNpcAction
RemoveNpcAction	SceneServer/libscenesserver/SceneServer1.h	/^class RemoveNpcAction : public NpcAction$/;"	c
RemoveSceneObjectCallBack	SceneServer/libscenesserver/Scene.cpp	/^  RemoveSceneObjectCallBack(Scene *scene) : scene(scene) {};$/;"	f	struct:RemoveSceneObjectCallBack
RemoveSceneObjectCallBack	SceneServer/libscenesserver/Scene.cpp	/^struct RemoveSceneObjectCallBack : public zSceneEntryCallBack$/;"	s	file:
Remove_vec	SceneServer/libscenesserver/TeamManager.cpp	/^	typedef std::vector<Cmd::stRemoveTeamMemberUserCmd> Remove_vec;$/;"	t	struct:CheckOfflineExec	file:
Remove_vec_iterator	SceneServer/libscenesserver/TeamManager.cpp	/^	typedef Remove_vec::iterator Remove_vec_iterator;$/;"	t	struct:CheckOfflineExec	file:
RepairCost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
RepairCost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::RepairCost
RepairEquip	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
RepairEquip	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::RepairEquip
RepairEquipUseGold	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
RepairEquipUseGold	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::RepairEquipUseGold
RepairMoney2RepairGold	SceneServer/libscenesserver/zObject.cpp	/^DWORD zObject::RepairMoney2RepairGold(DWORD dwObjectRepair)$/;"	f	class:zObject
ReplaceChild	deps/tinyxml/tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode
ReputeCondition	SceneServer/libscenesserver/SceneServer1.h	/^  ReputeCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:ReputeCondition
ReputeCondition	SceneServer/libscenesserver/SceneServer1.h	/^class ReputeCondition : public TeamCondition$/;"	c
ReputeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ReputeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ReputeCondition
ReuildType	SceneServer/libscenesserver/SceneServer1.h	/^  enum ReuildType{$/;"	g	class:Base
ReuildType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::Base
RewardData1	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD	RewardData1; \/\/≤π≥‰1$/;"	m	struct:stBattleReward
RewardData2	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD	RewardData2; \/\/≤π≥‰2$/;"	m	struct:stBattleReward
RewardType	SceneServer/libscenesserver/SceneBattlefiel.h	/^	eRewardType	RewardType;	\/\/¿‡–Õ$/;"	m	struct:stBattleReward
Ride	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
RideDownAction	SceneServer/libscenesserver/SceneServer1.h	/^  RideDownAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:RideDownAction
RideDownAction	SceneServer/libscenesserver/SceneServer1.h	/^class RideDownAction : public TeamAction$/;"	c
RightList	SessionServer/libsessionserver/SessionServer.h	/^	} RightList[10];$/;"	m	class:CSept	typeref:struct:CSept::stStepRight
RightName	SessionServer/libsessionserver/SessionServer.h	/^		char RightName[MAX_NAMESIZE];$/;"	m	struct:CSept::stStepRight
RoleData	SuperServer/RoleregCache.cpp	/^	RoleData(){accid=0;zone=0;game=0;memset(name,0,sizeof(name));}$/;"	f	struct:RoleData
RoleData	SuperServer/RoleregCache.cpp	/^	RoleData(const RoleData &rd)$/;"	f	struct:RoleData
RoleData	SuperServer/RoleregCache.cpp	/^struct RoleData$/;"	s	file:
RoleDataContainer	SuperServer/RoleregCache.cpp	/^	RoleDataContainer() {};$/;"	f	class:RoleDataContainer
RoleDataContainer	SuperServer/RoleregCache.cpp	/^class RoleDataContainer$/;"	c	file:
RoleregCache	SuperServer/RoleregCache.h	/^    RoleregCache() {};$/;"	f	class:RoleregCache
RoleregCache	SuperServer/RoleregCache.h	/^class RoleregCache$/;"	c
RollItem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
RollItemPos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
RollItem_A	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::RollItem_A()$/;"	f	class:TeamManager
RollNum	SceneServer/libscenesserver/TeamManager.cpp	/^	int  RollNum;$/;"	m	struct:SetMemberRollExec	file:
Roll_Exclude	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon80
Roll_GiveUp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon80
Roll_Greed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon80
Roll_Need	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon80
Roll_Null	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon80
Rolltype	base/include/csBox.h	/^	BYTE	Rolltype;	\/\/±ª—°÷–µƒROLL—°œÓ$/;"	m	struct:Cmd::stTeamRollItemTypeUserCmd
RootElement	deps/tinyxml/tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument
RootElement	deps/tinyxml/tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument
Row	deps/tinyxml/tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:TiXmlBase
Rush	SceneServer/libscenesserver/Rush.cpp	/^Rush::Rush(DWORD rushID,DWORD rushDelay,DWORD countryID)$/;"	f	class:Rush
Rush	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
SAFETY_COWBOX	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SAFETY_STATE	base/include/csCommon.h	/^/;"	e	enum:TempArchiveType
SAFETY_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SAFE_DELETE	base/common.h	78;"	d
SAFE_DELETE	base/include/csCommon.h	49;"	d
SAFE_DELETE_VEC	base/include/csCommon.h	50;"	d
SALE_CARTOON_PARA	base/include/csCommon.h	9673;"	d
SAVEBOX_HEIGHT	SceneServer/libscenesserver/ScenesServer.h	28;"	d
SAVEBOX_TYPE	base/include/csBox.h	368;"	d
SAVEBOX_WIDTH	SceneServer/libscenesserver/ScenesServer.h	27;"	d
SCENESSERVER	base/common.h	/^	SCENESSERVER  =  21, \/** Âú∫ÊôØÊúçÂä°Âô® *\/$/;"	e	enum:ServerType
SCENE_PACKET_USERDATASIZE	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	v
SCENE_RUNNINGSTATE_NORMAL	base/include/srvEngine.h	/^	SCENE_RUNNINGSTATE_NORMAL,\/\/Ê≠£Â∏∏ËøêË°å$/;"	e	enum:enumSceneRunningState
SCENE_RUNNINGSTATE_REMOVE	base/include/srvEngine.h	/^	SCENE_RUNNINGSTATE_REMOVE,\/\/Ê≠£Âú®Âç∏ËΩΩ$/;"	e	enum:enumSceneRunningState
SCENE_RUNNINGSTATE_UNLOAD	base/include/srvEngine.h	/^	SCENE_RUNNINGSTATE_UNLOAD,\/\/Ê≠£Âú®Âç∏ËΩΩ$/;"	e	enum:enumSceneRunningState
SCHOOL_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SCREEN_HEIGHT	base/include/csCommon.h	121;"	d
SCREEN_WIDTH	base/include/csCommon.h	116;"	d
SDWORD	base/include/csCommon.h	/^/;"	t
SEAL_DEBUG_OPT	Makefile	/^SEAL_DEBUG_OPT = -g -Werror -D_USE_CMD_NAMESPACE  $(LOKI_OPTIONS) -DVS=$(VERSIONSTRING)  \\$/;"	m
SEAL_DIST_OPT	Makefile	/^SEAL_DIST_OPT = -g -O2 -Werror -D_USE_CMD_NAMESPACE  -DVS=$(VERSIONSTRING) $(LOKI_OPTIONS) \\$/;"	m
SEAT_STATE_COMMON_MINI_PARA	base/include/csCommon.h	12131;"	d
SECOND_LAYER_PRENTICE_REQUEST_LEVEL	base/include/csCommon.h	330;"	d
SELECTED_HPMP_PROPERTY_USERCMD_PARA	base/include/csCommon.h	2724;"	d
SELECT_MAINUSER_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4248;"	d
SELECT_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4235;"	d
SELECT_RETURN_HORSE_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4450;"	d
SELECT_RETURN_MAINUSER_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4283;"	d
SELECT_RETURN_STATES_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4309;"	d
SELECT_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SELF_HISTORY_GOLD_STOCKPARA	base/include/csCommon.h	9106;"	d
SELF_HISTORY_MONEY_STOCKPARA	base/include/csCommon.h	9117;"	d
SELLHORSE_NPCTRADE_USERCMD_PARAMETER	base/include/csCommon.h	5175;"	d
SELLOBJECT_NPCTRADE_USERCMD_PARAMETER	base/include/csCommon.h	5152;"	d
SELL_ALL_CARTOON_PARA	base/include/csCommon.h	9708;"	d
SEPT_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SERVER_ID	SceneServer/libscenesserver/Quest.cpp	/^int UserVar::SERVER_ID = 0;$/;"	m	class:UserVar	file:
SERVER_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::GlobalVarImpl
SERVER_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::UserVar
SERVER_RETURN_COUNTRY_INFO	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SERVER_RETURN_LOGIN_FAILED	base/command.h	/^	const BYTE SERVER_RETURN_LOGIN_FAILED = 3;$/;"	m	namespace:Cmd
SERVER_RETURN_LOGIN_FAILED	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SERVER_RETURN_LOGIN_OK	base/command.h	/^	const BYTE SERVER_RETURN_LOGIN_OK = 4;$/;"	m	namespace:Cmd
SERVER_RETURN_LOGIN_OK	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SERVER_SKILL_ATTACK_NORMAL	base/include/csCommon.h	1123;"	d
SERVER_SKILL_DAGGER_ATTACK_NORMAL	base/include/csCommon.h	1124;"	d
SERVER_SKILL_DART_ATTACK_NORMAL	base/include/csCommon.h	1125;"	d
SERVER_SKILL_HANDS_ATTACK_NORMAL	base/include/csCommon.h	1126;"	d
SERVER_STATE	GatewayServer/old_back/GatewayServer.h	/^enum SERVER_STATE $/;"	g
SERVER_STATE	base/include/csCommon.h	/^/;"	g	namespace:Cmd
SERVER_TYPE	GatewayServer/old_back/GatewayServer.h	/^enum SERVER_TYPE$/;"	g
SERVER_TYPE	base/include/csCommon.h	/^/;"	g	namespace:Cmd
SERVICE_AUCTION	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
SERVICE_HORSE	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
SERVICE_MAIL	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
SERVICE_PROCESS	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
SESSIONSERVER	base/common.h	/^	SESSIONSERVER  =  20, \/** ‰ºöËØùÊúçÂä°Âô® *\/$/;"	e	enum:ServerType
SET	base/include/srvEngine.h	/^	struct SET$/;"	s	struct:zSetObjectB
SETHPANDMP_DATA_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SETMASTERPOWER	base/include/csCommon.h	390;"	d
SETMASTERPOWER_WD	base/include/csCommon.h	423;"	d
SETMEMBERPOWER	base/include/csCommon.h	388;"	d
SETMEMBERPOWER_WD	base/include/csCommon.h	412;"	d
SETS	base/include/srvEngine.h	/^	typedef std::vector<SET> SETS;$/;"	t	struct:zSetObjectB
SETSECONDPOWER	base/include/csCommon.h	402;"	d
SET_COWBOX_KEY_PARAMETER	base/include/csBox.h	26;"	d
SET_COWBOX_TIQU_ITEM	base/include/csBox.h	50;"	d
SET_NEW_MAKEOBJECT_RETURN_USERCMD_ITEM	base/include/csBox.h	130;"	d
SET_NEW_MAKEOBJECT_USERCMD_ITEM	base/include/csBox.h	114;"	d
SET_RECOMMEND_PARA	base/include/csCommon.h	10553;"	d
SET_SAFETY_DETAIL_PARA	base/include/csCommon.h	10713;"	d
SET_SAFETY_PARA	base/include/csCommon.h	10656;"	d
SET_TECH_SEARCH_PARA	base/include/csCommon.h	6351;"	d
SET_TEMP_UNSAFETY_PARA	base/include/csCommon.h	10693;"	d
SET_TRUN_EXITHOTSPRING_PARAMETER	base/include/csBox.h	92;"	d
SET_TRUN_GOTOFEMALE_PARAMETER	base/include/csBox.h	83;"	d
SET_TRUN_GOTOMALE_PARAMETER	base/include/csBox.h	74;"	d
SET_TRUN_REQUEST_PARAMETER	base/include/csTurn.h	25;"	d
SET_TRUN_RESULT_PARAMETER	base/include/csTurn.h	42;"	d
SHELLITEM_IN_COUNTRY	SceneServer/libscenesserver/SceneServer1.h	1774;"	d
SHELLITEM_IN_COUNTRY	SceneServer/libscenesserver/ScenesServer.h	11316;"	d
SHELLITEM_IN_FRIEND	SceneServer/libscenesserver/SceneServer1.h	1775;"	d
SHELLITEM_IN_FRIEND	SceneServer/libscenesserver/ScenesServer.h	11317;"	d
SHELLITEM_IN_NINE	SceneServer/libscenesserver/SceneServer1.h	1779;"	d
SHELLITEM_IN_NINE	SceneServer/libscenesserver/ScenesServer.h	11321;"	d
SHELLITEM_IN_PERSON	SceneServer/libscenesserver/SceneServer1.h	1780;"	d
SHELLITEM_IN_PERSON	SceneServer/libscenesserver/ScenesServer.h	11322;"	d
SHELLITEM_IN_PRIVATE	SceneServer/libscenesserver/SceneServer1.h	1778;"	d
SHELLITEM_IN_PRIVATE	SceneServer/libscenesserver/ScenesServer.h	11320;"	d
SHELLITEM_IN_SEPT	SceneServer/libscenesserver/SceneServer1.h	1772;"	d
SHELLITEM_IN_SEPT	SceneServer/libscenesserver/ScenesServer.h	11314;"	d
SHELLITEM_IN_SEPT_TOP	SceneServer/libscenesserver/SceneServer1.h	1773;"	d
SHELLITEM_IN_SEPT_TOP	SceneServer/libscenesserver/ScenesServer.h	11315;"	d
SHELLITEM_IN_TEAM	SceneServer/libscenesserver/SceneServer1.h	1776;"	d
SHELLITEM_IN_TEAM	SceneServer/libscenesserver/ScenesServer.h	11318;"	d
SHELLITEM_IN_UNION	SceneServer/libscenesserver/SceneServer1.h	1777;"	d
SHELLITEM_IN_UNION	SceneServer/libscenesserver/ScenesServer.h	11319;"	d
SHELLITEM_IN_ZONE	SceneServer/libscenesserver/SceneServer1.h	1781;"	d
SHELLITEM_IN_ZONE	SceneServer/libscenesserver/ScenesServer.h	11323;"	d
SHORT_OPT_COL	base/src/getopt.c	2305;"	d	file:
SHOW_HAND_DDZ_MINI_PARA	base/include/csCommon.h	12622;"	d
SHUT_RD	base/include/srvEngine.h	425;"	d
SHUT_RDWR	base/include/srvEngine.h	424;"	d
SHUT_WR	base/include/srvEngine.h	426;"	d
SINGLETON_H	base/singleton.h	2;"	d
SIZE_MAX	base/src/getopt.c	2292;"	d	file:
SKILL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::Equips
SKILLID_FEAR	SceneServer/libscenesserver/ScenesServer.h	34;"	d
SKILLID_FROZEN	SceneServer/libscenesserver/ScenesServer.h	35;"	d
SKILLID_IMMOLATE	SceneServer/libscenesserver/ScenesServer.h	31;"	d
SKILLID_LIME	SceneServer/libscenesserver/ScenesServer.h	36;"	d
SKILLID_REPENTANCE	SceneServer/libscenesserver/ScenesServer.h	37;"	d
SKILLID_SOUL	SceneServer/libscenesserver/ScenesServer.h	32;"	d
SKILLINVALID	base/include/csCommon.h	1122;"	d
SKILLSTATENUMBER	SceneServer/libscenesserver/ScenesServer.h	2236;"	d
SKILL_ACTIVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon67
SKILL_BAD	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon65
SKILL_BREAK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon67
SKILL_CENTER_TYPE_MOUSE	base/include/csCommon.h	1120;"	d
SKILL_CENTER_TYPE_SELF	base/include/csCommon.h	1119;"	d
SKILL_GOOD	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon65
SKILL_PASSIVENESS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon67
SKILL_RECOVERY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon67
SKILL_RETURN	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon67
SKILL_STATUS	base/include/csCommon.h	/^/;"	g	namespace:SkillDef
SKILL_TYPE_BUFF	base/include/csCommon.h	/^/;"	e	enum:SkillType
SKILL_TYPE_DAMAGE	base/include/csCommon.h	/^/;"	e	enum:SkillType
SKILL_TYPE_DEBUFF	base/include/csCommon.h	/^/;"	e	enum:SkillType
SKILL_TYPE_INITIAVITE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon66
SKILL_TYPE_PASSIVENESS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon66
SKILL_TYPE_RECOVER	base/include/csCommon.h	/^/;"	e	enum:SkillType
SKILL_TYPE_RECOVERY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon66
SKILL_TYPE_RELIVE	base/include/csCommon.h	/^/;"	e	enum:SkillType
SKILL_TYPE_SUMMON	base/include/csCommon.h	/^/;"	e	enum:SkillType
SKILL_akdodge	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_aspeed	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_atrating	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_bleeding	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_blind	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_blindp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_cancel	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_cancelatt	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_change	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_chaos	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_chaosp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_cold	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_coldp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_dam2ddef	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_default	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_dvalue	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_hitback	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_hp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_hppersist	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_hpspeed	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_maxhp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_maxmp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_maxsp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_mdam	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_mgspeed	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_mp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_mpdef	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_mppersist	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_mpspeed	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_mvspeed	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_palsy	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_pdam	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_petrify	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_petrifyp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_poison	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_poisonp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_reflect	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_relive	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_sdam	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_sevenp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_skillrating	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_sp	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_sppersist	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_spspeed	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKILL_topet	base/include/csCommon.h	/^/;"	e	enum:SkillDef::SKILL_STATUS
SKIPWS	base/src/getopt.c	2376;"	d	file:
SLEN	base/src/getopt.c	1408;"	d	file:
SMagicRange	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills	typeref:struct:O::LiveSkills::__anon75
SOCKET_MAXNUM	base/include/csCommon.h	126;"	d
SOTCK_MIN_NUM	BillServer/BillUser.cpp	1095;"	d	file:
SOTCK_TAX	BillServer/BillUser.cpp	1096;"	d	file:
SPAMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::taskType
SPEC_BUFF	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_DEBUFF	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_DRUG	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_IMMUNE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_MAGIC	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_NULL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_OTHER	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_PHYSICS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_REBOUND	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPEC_TREATMENT	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::__anon58
SPLITUSEROBJECT_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	3826;"	d
SQWORD	base/include/csCommon.h	/^/;"	t
SRCS	BillServer/Makefile	/^SRCS = $(objects:%.o=%.cpp)$/;"	m
SRCS	FLServer/Makefile	/^SRCS = $(objects:%.o=%.cpp)$/;"	m
SRCS	GatewayServer/Makefile	/^SRCS = $(objects:%.o=%.cpp)$/;"	m
SRCS	RecordServer/Makefile	/^SRCS = $(objects:%.o=%.cpp)$/;"	m
SRCS	SceneServer/Makefile	/^SRCS = $(objects:%.o=%.cpp)$/;"	m
SRCS	SessionServer/Makefile	/^SRCS = $(objects:%.o=%.cpp)$/;"	m
SRCS	SuperServer/Makefile	/^SRCS = $(objects:%.o=%.cpp)$/;"	m
SRCS	client/Makefile	/^SRCS = $(objects:%.o=%.cpp)$/;"	m
STAMP_CHECK_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
STAMP_DATA_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
START	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::PrivateStore::STEP
START_MINI_PARA	base/include/csCommon.h	12665;"	d
START_QUEST	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Event::__anon76
START_SELL_USERCMD_PARAMETER	base/include/csCommon.h	5199;"	d
START_SKILL_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon70
STATE_BUSY	GatewayServer/old_back/GatewayServer.h	/^	STATE_BUSY		=	3, \/\/ ∑±√¶$/;"	e	enum:SERVER_STATE
STATE_BUSY	base/include/csCommon.h	/^/;"	e	enum:Cmd::SERVER_STATE
STATE_FULL	GatewayServer/old_back/GatewayServer.h	/^	STATE_FULL		=	4, \/\/ ±¨¬˙$/;"	e	enum:SERVER_STATE
STATE_FULL	base/include/csCommon.h	/^/;"	e	enum:Cmd::SERVER_STATE
STATE_GOOD	GatewayServer/old_back/GatewayServer.h	/^	STATE_GOOD		=	2, \/\/ ¡º∫√$/;"	e	enum:SERVER_STATE
STATE_GOOD	base/include/csCommon.h	/^/;"	e	enum:Cmd::SERVER_STATE
STATE_NOMARL	GatewayServer/old_back/GatewayServer.h	/^	STATE_NOMARL	=	1, \/\/ ’˝≥£$/;"	e	enum:SERVER_STATE
STATE_NOMARL	base/include/csCommon.h	/^/;"	e	enum:Cmd::SERVER_STATE
STATE_SERVICING	GatewayServer/old_back/GatewayServer.h	/^	STATE_SERVICING	=	0, \/\/ Œ¨ª§$/;"	e	enum:SERVER_STATE
STATE_SERVICING	base/include/csCommon.h	/^/;"	e	enum:Cmd::SERVER_STATE
STATIC	SceneServer/libscenesserver/SceneServer1.h	/^    STATIC,       \/\/\/ æ≤Ã¨µƒ$/;"	e	enum:SceneNpc::SceneNpcType
STATIC	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Scene::SceneType
STEP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::LiveSkills::PrivateStore
STOCK_BILL_USERCMD	base/command.h	/^	const BYTE STOCK_BILL_USERCMD = 39;$/;"	m	namespace:Cmd
STOCK_BILL_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
STOCK_CHANGE_OK	base/command.h	/^		STOCK_CHANGE_OK,$/;"	e	enum:Cmd::__anon123
STOCK_DIFF	base/command.h	/^		STOCK_DIFF,$/;"	e	enum:Cmd::__anon123
STOCK_ERROR	base/command.h	/^		STOCK_ERROR,$/;"	e	enum:Cmd::__anon123
STOCK_EXIST	base/command.h	/^		STOCK_EXIST,$/;"	e	enum:Cmd::__anon123
STOCK_GOLDLIST_MAX	base/command.h	/^		STOCK_GOLDLIST_MAX,$/;"	e	enum:Cmd::__anon123
STOCK_LOGIN_NOTLOGIN	base/command.h	/^		STOCK_LOGIN_NOTLOGIN,$/;"	e	enum:Cmd::__anon123
STOCK_LOGIN_OK	base/command.h	/^		STOCK_LOGIN_OK,$/;"	e	enum:Cmd::__anon123
STOCK_MONEYLIST_MAX	base/command.h	/^		STOCK_MONEYLIST_MAX,$/;"	e	enum:Cmd::__anon123
STOCK_NONE	base/command.h	/^		STOCK_NONE,$/;"	e	enum:Cmd::__anon123
STOCK_OPEN_OK	base/command.h	/^		STOCK_OPEN_OK,$/;"	e	enum:Cmd::__anon123
STOCK_SCENE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
STOCK_SERVER_WRONG	base/command.h	/^		STOCK_SERVER_WRONG,$/;"	e	enum:Cmd::__anon123
STOCK_SHORT	base/command.h	/^		STOCK_SHORT,$/;"	e	enum:Cmd::__anon123
STOP_DICE_MINI_PARA	base/include/csCommon.h	12677;"	d
STOP_SERVICE_STOCKPARA	base/include/csCommon.h	9128;"	d
STORE_INFO_NPCTRADE_USERCMD_PARAMETER	base/include/csCommon.h	5187;"	d
STORE_PACK	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Packages::__anon57
ST_GAMETIME_HIGH	SuperServer/MassiveFlag.h	/^			ST_GAMETIME_HIGH = 1,$/;"	e	enum:Cmd::Super::SimpleTable::__anon1
ST_GAMETIME_LOW	SuperServer/MassiveFlag.h	/^			ST_GAMETIME_LOW = 2,$/;"	e	enum:Cmd::Super::SimpleTable::__anon1
SUB_DIRS	Makefile	/^SUB_DIRS = deps\/tinyxml base FLServer SuperServer RecordServer BillServer SessionServer SceneServer GatewayServer$/;"	m
SUCCESS	SceneServer/libscenesserver/SceneServer1.h	/^    SUCCESS = 0,$/;"	e	enum:Action::__anon107
SUCCESS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:Action::__anon98
SUPERSERVER	base/common.h	/^	SUPERSERVER      =  1, \/** ÁÆ°ÁêÜÊúçÂä°Âô® *\/$/;"	e	enum:ServerType
SUPER_GM_ID	SceneServer/libscenesserver/SceneServer1.h	1854;"	d
SUPER_GM_ID	SceneServer/libscenesserver/ScenesServer.h	11396;"	d
SURPLUS_ATTRIBUTE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
SURPLUS_ATTRIBUTE_USERCMD_ADD	base/include/csBox.h	195;"	d
SURPLUS_MOSAIGEM_USERCMD_ADD	base/include/csBox.h	227;"	d
SWAPUSEROBJECT_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	3814;"	d
SWORD	base/include/csCommon.h	/^/;"	t
SYSTEMSETTINGS_PROPERTY_USERCMD_PARA	base/include/csCommon.h	4072;"	d
SYSTEM_STATE_CREATING	GatewayServer/old_back/GatewayServer.h	/^		SYSTEM_STATE_CREATING,   \/\/\/ ¥¥Ω®Ω«…´◊¥Ã¨$/;"	e	enum:GateUser::Systemstate
SYSTEM_STATE_INITING	GatewayServer/old_back/GatewayServer.h	/^		SYSTEM_STATE_INITING,   \/\/\/ ≥ı º◊¥Ã¨$/;"	e	enum:GateUser::Systemstate
SYSTEM_STATE_PLAY	GatewayServer/old_back/GatewayServer.h	/^		SYSTEM_STATE_PLAY,     \/\/\/ ”Œœ∑◊¥Ã¨$/;"	e	enum:GateUser::Systemstate
SYSTEM_STATE_SELECT	GatewayServer/old_back/GatewayServer.h	/^		SYSTEM_STATE_SELECT,   \/\/\/ —°‘ÒΩ«…´◊¥Ã¨$/;"	e	enum:GateUser::Systemstate
SYSTEM_STATE_SELECTSERVER	GatewayServer/old_back/GatewayServer.h	/^		SYSTEM_STATE_SELECTSERVER, \/\/ [ranqd] µ»¥˝—°‘Ò∑˛ŒÒ∆˜◊¥Ã¨$/;"	e	enum:GateUser::Systemstate
SYSTEM_WAIT_STATE_PLAY	GatewayServer/old_back/GatewayServer.h	/^		SYSTEM_WAIT_STATE_PLAY,   \/\/\/ µ»¥˝”Œœ∑◊¥Ã¨$/;"	e	enum:GateUser::Systemstate
SYSTEM_WAIT_STATE_UNREG	GatewayServer/old_back/GatewayServer.h	/^		SYSTEM_WAIT_STATE_UNREG    \/\/\/ µ»¥˝ÕÀ≥ˆΩ«…´¡˜≥Ã$/;"	e	enum:GateUser::Systemstate
SacredAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
SacredAddDamA	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
Sacredflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
SaveFile	deps/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument
SaveFile	deps/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument
SaveFile	deps/tinyxml/tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument
SaveFile	deps/tinyxml/tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument
SaveObject	base/include/csCommon.h	/^/;"	s
SaveObjectExec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	c	file:
SaveSkill	base/include/csCommon.h	/^/;"	s
SaveSkillExec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	c	file:
ScenTeamMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
Scene	SceneServer/libscenesserver/Scene.cpp	/^Scene::Scene(): _one_sec(1)$/;"	f	class:Scene
Scene	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
Scene	base/scenecmd.h	/^	namespace Scene$/;"	n	namespace:Cmd
SceneArchitecture	SceneServer/libscenesserver/SceneBattlefiel.h	/^class SceneArchitecture : public SceneNpc$/;"	c
SceneArchitecture	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^SceneArchitecture::SceneArchitecture(Scene* scene,zNpcB *npc,const t_NpcDefine *define,const SceneNpcType type,const SceneEntryType entrytype,zNpcB *abase)$/;"	f	class:SceneArchitecture
SceneCallBack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
SceneClient	GatewayServer/old_back/GatewayServer.h	/^	SceneClient( const std::string &name,const Cmd::Super::ServerEntry *serverEntry)$/;"	f	class:SceneClient
SceneClient	GatewayServer/old_back/GatewayServer.h	/^class SceneClient : public x_tcp_clientTask$/;"	c
SceneClientManager	GatewayServer/old_back/GatewayServer.h	/^class SceneClientManager$/;"	c
SceneClientManager	GatewayServer/old_back/SceneClientManager.cpp	/^SceneClientManager::SceneClientManager()$/;"	f	class:SceneClientManager
SceneClient_map	GatewayServer/old_back/GatewayServer.h	/^	typedef std::map<const DWORD,SceneClient *> SceneClient_map;$/;"	t	class:SceneClientManager
SceneConfile	SceneServer/libscenesserver/ScenesServer.cpp	/^class SceneConfile:public zConfile$/;"	c	file:
SceneDelTeam	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::SceneDelTeam(DWORD TeamID)$/;"	f	class:SceneManager
SceneEntryAction	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::SceneEntryAction(const zRTime& ctv,const DWORD group)$/;"	f	class:Scene
SceneEntryPk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
SceneEntryPk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
SceneEntryPk_vec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	namespace:O
SceneEntryState	base/include/srvEngine.h	/^	enum SceneEntryState$/;"	g	struct:zSceneEntry
SceneEntryStateList	base/include/srvEngine.h	/^typedef std::list<uint16_t> SceneEntryStateList;$/;"	t
SceneEntryType	base/include/srvEngine.h	/^	enum SceneEntryType$/;"	g	struct:zSceneEntry
SceneEntry_Build	base/include/srvEngine.h	/^		SceneEntry_Build,\/**< Âª∫Á≠ë*\/$/;"	e	enum:zSceneEntry::SceneEntryType
SceneEntry_Death	base/include/srvEngine.h	/^		SceneEntry_Death,  \/**< Ê≠ª‰∫°Áä∂ÊÄÅ *\/$/;"	e	enum:zSceneEntry::SceneEntryState
SceneEntry_Hide	base/include/srvEngine.h	/^		SceneEntry_Hide      \/**< ÈöêËóèÁä∂ÊÄÅ *\/$/;"	e	enum:zSceneEntry::SceneEntryState
SceneEntry_MAX	base/include/srvEngine.h	/^		SceneEntry_MAX$/;"	e	enum:zSceneEntry::SceneEntryType
SceneEntry_NPC	base/include/srvEngine.h	/^		SceneEntry_NPC,  \/**< NPC*\/$/;"	e	enum:zSceneEntry::SceneEntryType
SceneEntry_Normal	base/include/srvEngine.h	/^		SceneEntry_Normal,  \/**< ÊôÆÈÄöÁä∂ÊÄÅ *\/$/;"	e	enum:zSceneEntry::SceneEntryState
SceneEntry_Object	base/include/srvEngine.h	/^		SceneEntry_Object,\/**< Âú∞‰∏äÁâ©ÂìÅ*\/$/;"	e	enum:zSceneEntry::SceneEntryType
SceneEntry_Pet	base/include/srvEngine.h	/^		SceneEntry_Pet,  \/**< ÂÆ†Áâ©*\/$/;"	e	enum:zSceneEntry::SceneEntryType
SceneEntry_Player	base/include/srvEngine.h	/^		SceneEntry_Player,\/**< Áé©ÂÆ∂ËßíËâ≤*\/$/;"	e	enum:zSceneEntry::SceneEntryType
SceneEntry_SET	GatewayServer/old_back/GatewayServer.h	/^	typedef std::set<GateUser *,std::less<GateUser *>\/*,__gnu_cxx::__pool_alloc<GateUser *>*\/ > SceneEntry_SET;$/;"	t	class:ScreenIndex
SceneEntry_SET	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
SceneGhost	SceneServer/libscenesserver/SceneGhost.cpp	/^SceneGhost::SceneGhost(Scene* scene,zNpcB *npc,const t_NpcDefine *define,const SceneNpcType type,const SceneEntryType entrytype,zNpcB *abase)$/;"	f	class:SceneGhost
SceneGhost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
SceneID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::RollItemPos
SceneID	SessionServer/libsessionserver/SessionServer.h	/^	DWORD SceneID;$/;"	m	struct:SceneMapData
SceneManager	SceneServer/libscenesserver/SceneManager.cpp	/^SceneManager::SceneManager()$/;"	f	class:SceneManager
SceneManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
SceneMapData	SessionServer/libsessionserver/SessionServer.h	/^struct SceneMapData$/;"	s
SceneNewTeam	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::SceneNewTeam(Cmd::Session::t_Team_Data* send)$/;"	f	class:SceneManager
SceneNewTeam	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::SceneNewTeam(SceneUser *pUser)$/;"	f	class:SceneManager
SceneNpc	SceneServer/libscenesserver/SceneServer1.h	/^class SceneNpc : public SceneEntryPk,public zAStar<>,public zAStar<2>$/;"	c
SceneNpcAIType	SceneServer/libscenesserver/SceneServer1.h	/^enum SceneNpcAIType$/;"	g
SceneNpcAIType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::LiveSkills
SceneNpcChase	SceneServer/libscenesserver/SceneServer1.h	/^  enum SceneNpcChase$/;"	g	class:SceneNpc
SceneNpcManager	SceneServer/libscenesserver/SceneNpcManager.cpp	/^SceneNpcManager::SceneNpcManager()$/;"	f	class:SceneNpcManager
SceneNpcManager	SceneServer/libscenesserver/SceneServer1.h	/^class SceneNpcManager : public zEntryManager< zEntryTempID >$/;"	c
SceneNpcManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
SceneNpcType	SceneServer/libscenesserver/SceneServer1.h	/^  enum SceneNpcType$/;"	g	class:SceneNpc
SceneNpc_vec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	t	file:
ScenePet	SceneServer/libscenesserver/ScenePet.cpp	/^ScenePet::ScenePet(Scene* scene,zNpcB *npc,const t_NpcDefine *define,const SceneNpcType type,const SceneEntryType entrytype,zNpcB *abase)$/;"	f	class:ScenePet
ScenePet	SceneServer/libscenesserver/SceneServer1.h	/^class ScenePet : public SceneNpc$/;"	c
ScenePet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
ScenePk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
ScenePkState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::ScenePkState
ScenePkState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
SceneRecycleUserManager	SceneServer/libscenesserver/SceneServer1.h	/^    SceneRecycleUserManager(){}$/;"	f	class:SceneRecycleUserManager
SceneRecycleUserManager	SceneServer/libscenesserver/SceneServer1.h	/^class SceneRecycleUserManager: public zEntryManager< zEntryID > $/;"	c
SceneRecycleUserManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
SceneRecycleUserManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneRecycleUserManager
SceneSendToEveryOne	SceneServer/libscenesserver/Scene.cpp	/^  SceneSendToEveryOne(const void *cmd,const int len) : cmd(cmd),len(len) {};$/;"	f	struct:SceneSendToEveryOne
SceneSendToEveryOne	SceneServer/libscenesserver/Scene.cpp	/^struct SceneSendToEveryOne : public zSceneEntryCallBack$/;"	s	file:
SceneSendToUnWatchTrap	SceneServer/libscenesserver/Scene.cpp	/^  SceneSendToUnWatchTrap(const void *cmd,const int len) : cmd(cmd),len(len) {};$/;"	f	struct:SceneSendToUnWatchTrap
SceneSendToUnWatchTrap	SceneServer/libscenesserver/Scene.cpp	/^struct SceneSendToUnWatchTrap : public zSceneEntryCallBack$/;"	s	file:
SceneSendToWatchTrap	SceneServer/libscenesserver/Scene.cpp	/^  SceneSendToWatchTrap(const void *cmd,const int len) : cmd(cmd),len(len) {};$/;"	f	struct:SceneSendToWatchTrap
SceneSendToWatchTrap	SceneServer/libscenesserver/Scene.cpp	/^struct SceneSendToWatchTrap : public zSceneEntryCallBack$/;"	s	file:
SceneService	SceneServer/SceneServer.h	/^		SceneService():x_subnetservice("scene server", SCENESSERVER) {$/;"	f	class:SceneService
SceneService	SceneServer/SceneServer.h	/^class SceneService : public x_subnetservice {$/;"	c
SceneSession	SessionServer/libsessionserver/SessionServer.h	/^    SceneSession::SceneSession(SessionTask *task):zScene(),Session(task)$/;"	f	class:SceneSession::SceneSession
SceneSession	SessionServer/libsessionserver/SessionServer.h	/^class SceneSession:public zScene,public Session$/;"	c
SceneSessionManager	SessionServer/libsessionserver/SessionManager.cpp	/^SceneSessionManager::SceneSessionManager():zSceneManager()$/;"	f	class:SceneSessionManager
SceneSessionManager	SessionServer/libsessionserver/SessionServer.h	/^class SceneSessionManager:public zSceneManager$/;"	c
SceneTask	SceneServer/SceneTask.h	/^    SceneTask(io_service& ios) : tcp_task(ios) {$/;"	f	class:SceneTask
SceneTask	SceneServer/SceneTask.h	/^class SceneTask : public tcp_task, public MessageQueue$/;"	c
SceneTask	SceneServer/libscenesserver/SceneServer1.h	/^    SceneTask($/;"	f	class:SceneTask
SceneTask	SceneServer/libscenesserver/SceneServer1.h	/^class SceneTask : public zTCPTask,public zEntry,public MessageQueue$/;"	c
SceneTask	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
SceneTask	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneTask
SceneTaskHashmap	SceneServer/libscenesserver/SceneServer1.h	/^    typedef hash_map<WORD,SceneTask *> SceneTaskHashmap;$/;"	t	class:SceneTaskManager
SceneTaskHashmap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::SceneTaskManager
SceneTaskHashmap_const_iterator	SceneServer/libscenesserver/SceneServer1.h	/^    typedef SceneTaskHashmap::const_iterator SceneTaskHashmap_const_iterator;$/;"	t	class:SceneTaskManager
SceneTaskHashmap_const_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::SceneTaskManager
SceneTaskHashmap_iterator	SceneServer/libscenesserver/SceneServer1.h	/^    typedef SceneTaskHashmap::iterator SceneTaskHashmap_iterator;$/;"	t	class:SceneTaskManager
SceneTaskHashmap_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::SceneTaskManager
SceneTaskHashmap_pair	SceneServer/libscenesserver/SceneServer1.h	/^    typedef SceneTaskHashmap::value_type SceneTaskHashmap_pair;$/;"	t	class:SceneTaskManager
SceneTaskHashmap_pair	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::SceneTaskManager
SceneTaskManager	SceneServer/libscenesserver/SceneServer1.h	/^    SceneTaskManager() {};$/;"	f	class:SceneTaskManager
SceneTaskManager	SceneServer/libscenesserver/SceneServer1.h	/^class SceneTaskManager : private boost::noncopyable$/;"	c
SceneTaskManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
SceneTaskManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneTaskManager
SceneTimeTick	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
SceneTimeTick	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneTimeTick
SceneType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::LiveSkills::Scene
SceneUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
SceneUser	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
SceneUserManager	SceneServer/libscenesserver/SceneServer1.h	/^class SceneUserManager:protected zUserManager$/;"	c
SceneUserManager	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUserManager::SceneUserManager() $/;"	f	class:SceneUserManager
SceneUserManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
ScenesParser	SceneServer/libscenesserver/SceneServer1.h	/^class ScenesParser$/;"	c
ScenesParser	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
ScenesService	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
ScenesService	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::ScenesService
School	base/include/csCommon.h	/^/;"	n
SchoolObjectCompare	SceneServer/libscenesserver/SceneSchool.cpp	/^class SchoolObjectCompare:public UserObjectCompare $/;"	c	file:
ScoreAction	SceneServer/libscenesserver/SceneServer1.h	/^  ScoreAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:ScoreAction
ScoreAction	SceneServer/libscenesserver/SceneServer1.h	/^class ScoreAction : public TeamAction$/;"	c
ScreenIndex	GatewayServer/old_back/GatewayServer.h	/^class ScreenIndex :private boost::noncopyable$/;"	c
ScreenIndex	GatewayServer/old_back/ScreenIndex.cpp	/^ScreenIndex::ScreenIndex(const DWORD x,const DWORD y):screenx(x),screeny(y),screenMax(x*y)$/;"	f	class:ScreenIndex
ScriptQuest	SceneServer/libscenesserver/SceneServer1.h	/^  ScriptQuest() {}  $/;"	f	class:ScriptQuest
ScriptQuest	SceneServer/libscenesserver/SceneServer1.h	/^class ScriptQuest$/;"	c
ScriptingSystemLua	SceneServer/libscenesserver/SceneServer1.h	/^class ScriptingSystemLua $/;"	c
ScriptingSystemLua	SceneServer/libscenesserver/script.cpp	/^ScriptingSystemLua::ScriptingSystemLua()$/;"	f	class:ScriptingSystemLua
Seal	base/common.cpp	/^namespace Seal$/;"	n	file:
Seal	base/common.h	/^namespace Seal$/;"	n
Seal_Startup	base/src/zMisc.cpp	/^void Seal_Startup(void)$/;"	f
Seat	tmp/MiniServer/MiniServer.h	/^  Seat():user(0),open(1){}$/;"	f	struct:Seat
Seat	tmp/MiniServer/MiniServer.h	/^struct Seat$/;"	s
SecGenCallback	SceneServer/libscenesserver/Scene.cpp	/^  SecGenCallback(){}$/;"	f	struct:SecGenCallback
SecGenCallback	SceneServer/libscenesserver/Scene.cpp	/^struct SecGenCallback : public zSceneEntryCallBack$/;"	s	file:
SelectedSet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	struct:O::SceneEntryPk
SelectedSet_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	struct:O::SceneEntryPk
SelectedSet_value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	struct:O::SceneEntryPk
SelfCountryCondition	SceneServer/libscenesserver/SceneServer1.h	/^  SelfCountryCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:SelfCountryCondition
SelfCountryCondition	SceneServer/libscenesserver/SceneServer1.h	/^class SelfCountryCondition : public TeamCondition$/;"	c
SelfCountryCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
SelfCountryCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SelfCountryCondition
SellInfo	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills::PrivateStore
SellInfo	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::PrivateStore::SellInfo
SendCmdExec	SceneServer/libscenesserver/TeamManager.cpp	/^  SendCmdExec(void *data,DWORD dataLen)$/;"	f	struct:SendCmdExec
SendCmdExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct SendCmdExec : public TeamMemExec$/;"	s	file:
SendCountryInfo	GatewayServer/old_back/GateUser.cpp	/^void GateUser::SendCountryInfo()$/;"	f	class:GateUser
SendMemberDataExec	SceneServer/libscenesserver/TeamManager.cpp	/^	SendMemberDataExec(SceneUser *n, DWORD leaberID)$/;"	f	struct:SendMemberDataExec
SendMemberDataExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct SendMemberDataExec : public TeamMemExec$/;"	s	file:
SendNineExec	GatewayServer/old_back/ScreenIndex.cpp	/^  SendNineExec(unsigned short _targetDupIndex,const void *cmd,const int cmdLen):_cmd(cmd),_cmdLen(cmdLen),_type(0),zip(false),$/;"	f	struct:SendNineExec
SendNineExec	GatewayServer/old_back/ScreenIndex.cpp	/^struct SendNineExec : public execEntry<GateUser>$/;"	s	file:
SendNineExecExceptMe	GatewayServer/old_back/ScreenIndex.cpp	/^  SendNineExecExceptMe(const DWORD exceptme_id,const void *cmd,const int cmdLen):_exceptme_id(exceptme_id),_cmd(cmd),_cmdLen(cmdLen),_type(0)$/;"	f	struct:SendNineExecExceptMe
SendNineExecExceptMe	GatewayServer/old_back/ScreenIndex.cpp	/^struct SendNineExecExceptMe : public execEntry<GateUser>$/;"	s	file:
SendSceneNewMap	SessionServer/libsessionserver/Queuing.cpp	/^bool CQueuingManager::SendSceneNewMap(int index)						\/\/sky Õ®÷™’Ω≥°ªÚ’ﬂæ∫ºº≥°¥¥Ω®“ª∏ˆµÿÕº$/;"	f	class:CQueuingManager
SendStateWarToNineEveryOne	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:SendStateWarToNineEveryOne
SendStateWarToNineEveryOne	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	s	file:
SendStatusToTeamExec	SceneServer/libscenesserver/Skill.cpp	/^  SendStatusToTeamExec(SceneUser *pUser,const SkillStatus *pSkillStatus)$/;"	f	struct:SendStatusToTeamExec
SendStatusToTeamExec	SceneServer/libscenesserver/Skill.cpp	/^struct SendStatusToTeamExec : public TeamMemExec$/;"	s	file:
SendTeamDataExec	SceneServer/libscenesserver/TeamManager.cpp	/^  SendTeamDataExec(SceneUser * l,SceneUser *user)$/;"	f	struct:SendTeamDataExec
SendTeamDataExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct SendTeamDataExec : public TeamMemExec$/;"	s	file:
SendToEveryOneExceptMe	SceneServer/libscenesserver/Scene.cpp	/^  SendToEveryOneExceptMe(const zSceneEntry *pEntry,const void *cmd,const int len) : me(pEntry),cmd(cmd),len(len){};$/;"	f	struct:SendToEveryOneExceptMe
SendToEveryOneExceptMe	SceneServer/libscenesserver/Scene.cpp	/^struct SendToEveryOneExceptMe : public zSceneEntryCallBack$/;"	s	file:
SeptDef	base/include/csCommon.h	/^/;"	n
SeptGuard	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SeptGuard
SeptGuard	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
SeptIDCondition	SceneServer/libscenesserver/SceneServer1.h	/^  SeptIDCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:SeptIDCondition
SeptIDCondition	SceneServer/libscenesserver/SceneServer1.h	/^class SeptIDCondition : public TeamCondition$/;"	c
SeptIDCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
SeptIDCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SeptIDCondition
SeptObjectCompare	SceneServer/libscenesserver/SceneSept.cpp	/^class SeptObjectCompare:public UserObjectCompare $/;"	c	file:
SerialNumber	BillServer/old_back/BillServer.h	/^    DWORD SerialNumber;$/;"	m	class:BillCache
ServerACL	FLServer/ServerACL.h	/^	ServerACL() {}$/;"	f	class:ServerACL
ServerACL	FLServer/ServerACL.h	/^class ServerACL : public Singleton<ServerACL>$/;"	c
ServerEntry	base/supercmd.h	/^			ServerEntry()$/;"	f	struct:Cmd::Super::ServerEntry
ServerEntry	base/supercmd.h	/^		struct ServerEntry$/;"	s	namespace:Cmd::Super
ServerManager	FLServer/ServerManager.h	/^	ServerManager() {}$/;"	f	class:ServerManager
ServerManager	FLServer/ServerManager.h	/^class ServerManager : boost::noncopyable$/;"	c
ServerManager	SessionServer/ServerManager.h	/^    ServerManager() {};$/;"	f	class:ServerManager
ServerManager	SessionServer/ServerManager.h	/^class ServerManager : boost::noncopyable$/;"	c
ServerManager	SuperServer/ServerManager.h	/^    ServerManager() {};$/;"	f	class:ServerManager
ServerManager	SuperServer/ServerManager.h	/^class ServerManager : boost::noncopyable$/;"	c
ServerTask	FLServer/ServerTask.h	/^	ServerTask(io_service & io) : tcp_task(io){ }$/;"	f	class:ServerTask
ServerTask	FLServer/ServerTask.h	/^class ServerTask : public tcp_task$/;"	c
ServerTask	SuperServer/ServerTask.h	/^		ServerTask(io_service& ios):tcp_task(ios) {$/;"	f	class:ServerTask
ServerTask	SuperServer/ServerTask.h	/^class ServerTask : public tcp_task$/;"	c
ServerTaskContainer	FLServer/ServerManager.h	/^	typedef boost::unordered_map<GameZone_t, shared_ptr<ServerTask> > ServerTaskContainer;$/;"	t	class:ServerManager
ServerTaskContainer_const_iterator	FLServer/ServerManager.h	/^	typedef ServerTaskContainer::const_iterator ServerTaskContainer_const_iterator;$/;"	t	class:ServerManager
ServerTaskContainer_iterator	FLServer/ServerManager.h	/^	typedef ServerTaskContainer::iterator ServerTaskContainer_iterator;$/;"	t	class:ServerManager
ServerTaskContainer_value_type	FLServer/ServerManager.h	/^	typedef ServerTaskContainer::value_type ServerTaskContainer_value_type;$/;"	t	class:ServerManager
ServerTaskHashmap	SuperServer/ServerManager.h	/^    typedef boost::unordered_map<WORD,shared_ptr<ServerTask> > ServerTaskHashmap;$/;"	t	class:ServerManager
ServerTaskHashmap_const_iterator	SuperServer/ServerManager.h	/^    typedef ServerTaskHashmap::const_iterator ServerTaskHashmap_const_iterator;$/;"	t	class:ServerManager
ServerTaskHashmap_iterator	SuperServer/ServerManager.h	/^    typedef ServerTaskHashmap::iterator ServerTaskHashmap_iterator;$/;"	t	class:ServerManager
ServerTaskHashmap_pair	SuperServer/ServerManager.h	/^    typedef ServerTaskHashmap::value_type ServerTaskHashmap_pair;$/;"	t	class:ServerManager
ServerType	base/common.h	/^enum ServerType$/;"	g
Session	SessionServer/libsessionserver/SessionServer.h	/^    Session(SessionTask *task)$/;"	f	class:Session
Session	SessionServer/libsessionserver/SessionServer.h	/^class Session:private boost::noncopyable$/;"	c
Session	base/include/csCommon.h	/^/;"	n	namespace:Cmd::Cmd
Session	base/sessioncmd.h	/^	namespace Session$/;"	n	namespace:Cmd
SessionChannel	SessionServer/libsessionserver/SessionChat.cpp	/^SessionChannel::SessionChannel(UserSession * creator):zEntry()$/;"	f	class:SessionChannel
SessionChannel	SessionServer/libsessionserver/SessionServer.h	/^class SessionChannel : public zEntry$/;"	c
SessionChannelManager	SessionServer/libsessionserver/SessionChat.cpp	/^SessionChannelManager::SessionChannelManager()$/;"	f	class:SessionChannelManager
SessionChannelManager	SessionServer/libsessionserver/SessionServer.h	/^class SessionChannelManager : public zEntryManager< zEntryTempID,zEntryName >$/;"	c
SessionClient	GatewayServer/SessionClient.h	/^	SessionClient(boost::asio::io_service &ios):tcp_client(ios){$/;"	f	class:SessionClient
SessionClient	GatewayServer/SessionClient.h	/^class SessionClient : public tcp_client$/;"	c
SessionClient	GatewayServer/old_back/GatewayServer.h	/^	SessionClient($/;"	f	class:SessionClient
SessionClient	GatewayServer/old_back/GatewayServer.h	/^class SessionClient : public x_tcp_buffer_client$/;"	c
SessionClient	SceneServer/SessionClient.h	/^	SessionClient(boost::asio::io_service &ios):tcp_client(ios){$/;"	f	class:SessionClient
SessionClient	SceneServer/SessionClient.h	/^class SessionClient : public tcp_client$/;"	c
SessionClient	SceneServer/libscenesserver/SceneServer1.h	/^    SessionClient($/;"	f	class:SessionClient
SessionClient	SceneServer/libscenesserver/SceneServer1.h	/^class SessionClient : public x_tcp_buffer_client,public MessageQueue$/;"	c
SessionClient	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
SessionClient	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SessionClient
SessionConfile	SessionServer/libsessionserver/SessionServer.cpp	/^class SessionConfile:public zConfile$/;"	c	file:
SessionItemObjectCompare	SceneServer/libscenesserver/SessionClient.cpp	/^class SessionItemObjectCompare:public UserObjectCompare $/;"	c	file:
SessionService	SessionServer/SessionServer.h	/^		SessionService():x_subnetservice("session server",SESSIONSERVER) {$/;"	f	class:SessionService
SessionService	SessionServer/SessionServer.h	/^class SessionService : public x_subnetservice {$/;"	c
SessionService	SessionServer/libsessionserver/SessionServer.h	/^    SessionService() : x_subnetservice("SessionServer",SESSIONSERVER)$/;"	f	class:SessionService
SessionService	SessionServer/libsessionserver/SessionServer.h	/^class SessionService : public x_subnetservice$/;"	c
SessionTask	SessionServer/SessionTask.h	/^    SessionTask(io_service& ios) : tcp_task(ios) {$/;"	f	class:SessionTask
SessionTask	SessionServer/SessionTask.h	/^class SessionTask : public tcp_task, public MessageQueue$/;"	c
SessionTask	SessionServer/libsessionserver/SessionServer.h	/^    SessionTask($/;"	f	class:SessionTask
SessionTask	SessionServer/libsessionserver/SessionServer.h	/^class SessionTask : public zTCPTask, public zEntry,public MessageQueue$/;"	c
SessionTaskHashmap	SessionServer/ServerManager.h	/^    typedef boost::unordered_map<WORD,shared_ptr<SessionTask> > SessionTaskHashmap;$/;"	t	class:ServerManager
SessionTaskHashmap	SessionServer/libsessionserver/SessionServer.h	/^    typedef hash_map<WORD,SessionTask *> SessionTaskHashmap;$/;"	t	class:SessionTaskManager
SessionTaskHashmap_const_iterator	SessionServer/ServerManager.h	/^    typedef SessionTaskHashmap::const_iterator SessionTaskHashmap_const_iterator;$/;"	t	class:ServerManager
SessionTaskHashmap_const_iterator	SessionServer/libsessionserver/SessionServer.h	/^    typedef SessionTaskHashmap::const_iterator SessionTaskHashmap_const_iterator;$/;"	t	class:SessionTaskManager
SessionTaskHashmap_iterator	SessionServer/ServerManager.h	/^    typedef SessionTaskHashmap::iterator SessionTaskHashmap_iterator;$/;"	t	class:ServerManager
SessionTaskHashmap_iterator	SessionServer/libsessionserver/SessionServer.h	/^    typedef SessionTaskHashmap::iterator SessionTaskHashmap_iterator;$/;"	t	class:SessionTaskManager
SessionTaskHashmap_pair	SessionServer/ServerManager.h	/^    typedef SessionTaskHashmap::value_type SessionTaskHashmap_pair;$/;"	t	class:ServerManager
SessionTaskHashmap_pair	SessionServer/libsessionserver/SessionServer.h	/^    typedef SessionTaskHashmap::value_type SessionTaskHashmap_pair;$/;"	t	class:SessionTaskManager
SessionTaskManager	SessionServer/libsessionserver/SessionServer.h	/^    SessionTaskManager() {};$/;"	f	class:SessionTaskManager
SessionTaskManager	SessionServer/libsessionserver/SessionServer.h	/^class SessionTaskManager : private boost::noncopyable$/;"	c
Set	SceneServer/libscenesserver/SceneServer1.h	/^  class Set$/;"	c	namespace:Op
Set	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
SetAttribute	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement
SetAttribute	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement
SetAttribute	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlElement
SetAttribute	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement
SetCDATA	deps/tinyxml/tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:TiXmlText
SetCondenseWhiteSpace	deps/tinyxml/tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase
SetDocument	deps/tinyxml/tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:TiXmlAttribute
SetDoubleAttribute	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement
SetDoubleAttribute	deps/tinyxml/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val )$/;"	f	class:TiXmlElement
SetDoubleValue	deps/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute
SetError	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument
SetIndent	deps/tinyxml/tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter
SetIntValue	deps/tinyxml/tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute
SetLineBreak	deps/tinyxml/tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter
SetMemberRoll	SceneServer/libscenesserver/TeamManager.cpp	/^int TeamManager::SetMemberRoll( DWORD tempid, BYTE rolltype )$/;"	f	class:TeamManager
SetMemberRollExec	SceneServer/libscenesserver/TeamManager.cpp	/^	SetMemberRollExec( DWORD tempid, BYTE type )$/;"	f	struct:SetMemberRollExec
SetMemberRollExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct SetMemberRollExec : public TeamMemExec$/;"	s	file:
SetMemberType	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::SetMemberType(DWORD memberID, DWORD leaberID, bool Being)$/;"	f	class:TeamManager
SetName	deps/tinyxml/tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute
SetName	deps/tinyxml/tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:TiXmlAttribute
SetObjectBase	base/include/srvEngine.h	/^struct SetObjectBase{$/;"	s
SetRoleInfo	SuperServer/RoleregCache.cpp	/^static RoleDataContainer SetRoleInfo; \/\/¥Ê∑≈Ω«…´–≈œ¢µƒcontainer$/;"	v	file:
SetRollItem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
SetStateAction	SceneServer/libscenesserver/SceneServer1.h	/^  SetStateAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:SetStateAction
SetStateAction	SceneServer/libscenesserver/SceneServer1.h	/^class SetStateAction : public TeamAction$/;"	c
SetStatuToRecovery	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
SetStreamPrinting	deps/tinyxml/tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:TiXmlPrinter
SetTabSize	deps/tinyxml/tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:TiXmlDocument
SetTeamThisID	SessionServer/libsessionserver/Team.cpp	/^void Team::SetTeamThisID(DWORD TeamThisID)$/;"	f	class:Team
SetUserData	deps/tinyxml/tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user data.$/;"	f	class:TiXmlBase
SetValue	deps/tinyxml/tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:TiXmlAttribute
SetValue	deps/tinyxml/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlAttribute
SetValue	deps/tinyxml/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlNode
SetValue	deps/tinyxml/tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode
ShopAdv	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
ShopAdv_GetSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
ShopAdv_canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
ShopAdv_getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
Silence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
SimpleTable	SuperServer/MassiveFlag.h	/^	namespace SimpleTable$/;"	n	namespace:Cmd::Super
Singleton	base/include/csCommon.h	/^/;"	c
Singleton	base/include/csCommon.h	/^/;"	f	class:Singleton
Singleton	base/singleton.h	/^	Singleton(void){$/;"	f	class:Singleton
Singleton	base/singleton.h	/^class Singleton{$/;"	c
SingletonBase	base/include/srvEngine.h	/^	SingletonBase() {}$/;"	f	class:SingletonBase
SingletonBase	base/include/srvEngine.h	/^class SingletonBase$/;"	c
SingletonFactory	base/include/csCommon.h	/^/;"	c
Size	deps/tinyxml/tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:TiXmlPrinter
SkillAction	SceneServer/libscenesserver/SceneServer1.h	/^  SkillAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:SkillAction
SkillAction	SceneServer/libscenesserver/SceneServer1.h	/^class SkillAction : public TeamAction$/;"	c
SkillBase	base/include/srvEngine.h	/^struct SkillBase$/;"	s
SkillDef	base/include/csCommon.h	/^/;"	n
SkillElement	base/include/srvEngine.h	/^	SkillElement()$/;"	f	struct:SkillElement
SkillElement	base/include/srvEngine.h	/^struct SkillElement$/;"	s
SkillManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
SkillState	SceneServer/libscenesserver/ScenePk.cpp	/^SkillState::SkillState()$/;"	f	class:SkillState
SkillState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
SkillStatus	base/include/srvEngine.h	/^	SkillStatus()$/;"	f	struct:SkillStatus
SkillStatus	base/include/srvEngine.h	/^struct SkillStatus$/;"	s
SkillStatusCarrier	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SkillStatusCarrier
SkillStatusCarrier	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
SkillStatusElement	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SkillStatusElement
SkillStatusElement	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
SkillStatusManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
SkillStatusManager	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
SkillStatus_0	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_1	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_10	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_100	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_101	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_102	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_11	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_110	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_111	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_113	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_114	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_115	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_116	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_117	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_119	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_12	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_120	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_121	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_122	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_123	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_124	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_125	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_126	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_127	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_128	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_129	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_13	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_130	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_131	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_132	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_133	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_134	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_135	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_136	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_137	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_138	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_139	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_14	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_140	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_141	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_142	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_143	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_144	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_145	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_146	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_147	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_148	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_149	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_15	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_150	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_151	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_152	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_153	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_154	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_155	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_156	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_157	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_158	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_159	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_16	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_160	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_161	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_163	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_165	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_168	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_169	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_17	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_170	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_172	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_173	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_176	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_177	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_178	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_179	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_18	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_180	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_182	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_184	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_185	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_186	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_187	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_188	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_189	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_19	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_190	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_191	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_192	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_193	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_194	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_195	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_196	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_197	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_198	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_199	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_2	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_20	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_200	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_201	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_202	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_203	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_204	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_205	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_206	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_207	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_208	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_209	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_21	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_210	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_216	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_217	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_218	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_219	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_22	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_220	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_221	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_222	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_223	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_224	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_225	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_226	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_227	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_228	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_229	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_23	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_230	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_231	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_232	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_233	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_234	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_235	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_236	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_237	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_238	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_239	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_24	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_240	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_241	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_242	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_243	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_244	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_245	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_246	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_247	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_248	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_249	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_25	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_250	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_251	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_252	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_253	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_254	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_255	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_256	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_257	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_258	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_259	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_26	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_260	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_261	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_262	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_263	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_264	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_265	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_266	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_268	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_27	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_270	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_271	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_272	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_273	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_274	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_275	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_276	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_277	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_278	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_279	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_28	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_280	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_281	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_282	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_283	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_284	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_285	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_286	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_287	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_288	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_289	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_29	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_290	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_292	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_293	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_294	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_295	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_296	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_298	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_299	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_3	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_30	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_300	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_301	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_302	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_303	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_304	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_305	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_306	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_307	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_308	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_309	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_31	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_311	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_312	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_315	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_316	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_317	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_318	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_319	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_32	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_320	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_321	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_322	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_323	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_324	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_325	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_326	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_327	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_328	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_329	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_33	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_330	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_331	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_332	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_333	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_334	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_335	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_336	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_337	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_338	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_339	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_34	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_340	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_341	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_342	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_343	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_344	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_345	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_346	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_347	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_348	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_349	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_35	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_350	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_351	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_352	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_353	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_354	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_36	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_37	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_38	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_39	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_4	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_40	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_41	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_42	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_43	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_44	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_45	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_46	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_47	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_48	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_49	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_5	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_50	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_51	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_52	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_53	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_54	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_55	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_56	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_57	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_58	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_59	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_6	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_60	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_61	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_62	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_63	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_64	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_65	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_66	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_67	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_68	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_69	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_7	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_70	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_71	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_72	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_73	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_74	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_75	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_76	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_77	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_78	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_79	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_8	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_80	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_81	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_82	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_83	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_84	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_85	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_86	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_87	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_88	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_89	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_9	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_90	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_91	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_92	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_93	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_94	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_95	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_96	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_97	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_98	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillStatus_99	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f
SkillType	base/include/csCommon.h	/^/;"	g
SkipWhiteSpace	deps/tinyxml/tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
Sock2Port	base/include/srvEngine.h	/^	typedef std::map<int,uint16_t> Sock2Port;$/;"	t	class:zMTCPServer
Sock2Port_const_iterator	base/include/srvEngine.h	/^	typedef Sock2Port::const_iterator Sock2Port_const_iterator;$/;"	t	class:zMTCPServer
Sock2Port_iterator	base/include/srvEngine.h	/^	typedef Sock2Port::iterator Sock2Port_iterator;$/;"	t	class:zMTCPServer
Sock2Port_value_type	base/include/srvEngine.h	/^	typedef Sock2Port::value_type Sock2Port_value_type;$/;"	t	class:zMTCPServer
SoulStone	SceneServer/libscenesserver/SceneServer1.h	/^class SoulStone$/;"	c
SoulStone	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
SoulStoneBase	base/include/srvEngine.h	/^struct SoulStoneBase{$/;"	s
SoulUserNum	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD SoulUserNum;$/;"	m	struct:BCampData
Soulflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
SpaceCondition	SceneServer/libscenesserver/SceneServer1.h	/^  SpaceCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:SpaceCondition
SpaceCondition	SceneServer/libscenesserver/SceneServer1.h	/^class SpaceCondition : public TeamCondition$/;"	c
SpaceCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
SpaceCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SpaceCondition
Spade	base/include/csCommon.h	/^/;"	e	enum:Cmd::Cmd::Card::Suit
SpecialAI	SceneServer/libscenesserver/SceneNpcManager.cpp	/^void SceneNpcManager::SpecialAI()$/;"	f	class:SceneNpcManager
SpecialNpc_Index	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::zSceneEntryIndex
Split	base/include/srvEngine.h	/^class Split$/;"	c
SportsHonor	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stUserBattfieldData
Stamp	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData
Standalone	deps/tinyxml/tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration
StartTime	SceneServer/libscenesserver/ItemCoolTime.h	/^	QWORD StartTime; \/\/¿‰»¥ø™ º ±º‰$/;"	m	struct:stCoolTimeType
StartTime	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD StartTime;$/;"	m	class:GangScene
StaticScene	SceneServer/libscenesserver/Scene.cpp	/^StaticScene::StaticScene():Scene()$/;"	f	class:StaticScene
StaticScene	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
StlToSendData	SceneServer/libscenesserver/ScenesServer.cpp	/^bool ScenesService::StlToSendData()$/;"	f	class:ScenesService
StorePack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
StorePack	SceneServer/libscenesserver/zObject.cpp	/^StorePack::StorePack() : Package(Cmd::OBJECTCELLTYPE_STORE,0,W,SAVEBOX_HEIGHT)$/;"	f	class:StorePack
Str	deps/tinyxml/tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:TiXmlPrinter
StrVec	GatewayServer/old_back/GatewayServer.h	/^	typedef std::vector<Info> StrVec;$/;"	t	class:CountryInfo
StrVec_iterator	GatewayServer/old_back/GatewayServer.h	/^	typedef StrVec::iterator StrVec_iterator;$/;"	t	class:CountryInfo
StreamIn	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment
StreamIn	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration
StreamIn	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument
StreamIn	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement
StreamIn	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText
StreamIn	deps/tinyxml/tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown
StreamTo	deps/tinyxml/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase
StreamWhiteSpace	deps/tinyxml/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase
StringEqual	deps/tinyxml/tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase
Sub	SceneServer/libscenesserver/SceneServer1.h	/^  class Sub$/;"	c	namespace:Op
Sub	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:Op
SubMenuAction	SceneServer/libscenesserver/SceneServer1.h	/^  SubMenuAction(const std::string& menu) : _menu(menu)$/;"	f	class:SubMenuAction
SubMenuAction	SceneServer/libscenesserver/SceneServer1.h	/^class SubMenuAction : public Action$/;"	c
SubMenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
SubMenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SubMenuAction
Suit	base/include/csCommon.h	/^/;"	g	class:Cmd::Cmd::Card
SuitAttribute	base/include/csCommon.h	/^/;"	m	struct:_Object	typeref:struct:_Object::Suit_Attribute
Suit_Attribute	base/include/csCommon.h	/^/;"	s	struct:_Object
Suit_ID	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute
Suit_name	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute
SummonAI	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD SummonAI;						\/\/sky À¢≥ˆ¿¥µƒ ø±¯ π”√µƒ“∆∂ØAI_ID$/;"	m	class:SceneArchitecture
SummonCountdown	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD SummonCountdown;$/;"	m	class:SceneArchitecture
SummonLevel	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BYTE SummonLevel;							\/\/sky ’ŸªΩµƒ ø±¯µ±«∞µ»º∂$/;"	m	class:SceneArchitecture
SummonNpc	SceneServer/libscenesserver/SceneBattlefiel.h	/^	std::vector<SummonNpcData> SummonNpc;	\/\/sky ’ŸªΩµƒNPC–≈œ¢(ID,  ˝¡ø)$/;"	m	class:SceneArchitecture
SummonTime	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD SummonTime;					\/\/sky ’ŸªΩº‰∏Ù(∫¡√Î)$/;"	m	class:SceneArchitecture
Super	SuperServer/MassiveFlag.h	/^namespace Super$/;"	n	namespace:Cmd
Super	base/supercmd.h	/^	namespace Super$/;"	n	namespace:Cmd
SuperService	SuperServer/SuperServer.h	/^	SuperService() : x_service("superserver") {$/;"	f	class:SuperService
SuperService	SuperServer/SuperServer.h	/^class SuperService : public x_service {$/;"	c
Surplus_Attribute	base/include/csCommon.h	/^/;"	m	struct:_Object::Freedom_Attribute
SysAllocStringA	base/src/codeLib.c	/^BSTR SysAllocStringA(PSTR szText,size_t cbText)$/;"	f
Systemstate	GatewayServer/old_back/GatewayServer.h	/^	enum Systemstate$/;"	g	class:GateUser
TARGET_ENEMY	base/include/csCommon.h	1112;"	d
TARGET_FRIEND	base/include/csCommon.h	1111;"	d
TARGET_NPC	base/include/csCommon.h	1113;"	d
TARGET_PET	base/include/csCommon.h	1115;"	d
TARGET_SELF	base/include/csCommon.h	1110;"	d
TARGET_SUMMON	base/include/csCommon.h	1116;"	d
TARGET_TERRASURFACE	base/include/csCommon.h	1114;"	d
TASK_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
TEACHER_LEVEL	base/include/csCommon.h	325;"	d
TEAD_STATE_MEMBER	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon201
TEAD_STATE_NONE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon201
TEAM	base/include/csCommon.h	/^/;"	e	enum:TempArchiveType
TEAMMEMBER_OFFLINE_USERCMD_PARA	base/include/csCommon.h	4823;"	d
TEAM_ALL_NPC_FLAG_USERCMD_PARA	base/include/csBox.h	409;"	d
TEAM_HONOR_LEADER_LEVEL	SceneServer/libscenesserver/ScenesServer.h	7162;"	d
TEAM_HONOR_MEMBER_LEVEL	SceneServer/libscenesserver/ScenesServer.h	7161;"	d
TEAM_MODE_USERCMD_PARA	base/include/csCommon.h	4877;"	d
TEAM_SET_NPC_FLAG_USERCMD_PARA	base/include/csBox.h	421;"	d
TEAM_STATE_LEADER	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon201
TECH_MAX_NUM	SessionServer/libsessionserver/SessionServer.h	/^const int TECH_MAX_NUM = 15; \/\/ ø∆ººµƒ◊Ó¥Û ˝ƒø$/;"	v
TILE_BLOCK	SceneServer/libscenesserver/ScenesServer.h	1686;"	d
TILE_DOOR	SceneServer/libscenesserver/ScenesServer.h	1689;"	d
TILE_ENTRY_BLOCK	SceneServer/libscenesserver/ScenesServer.h	1690;"	d
TILE_MAGIC_BLOCK	SceneServer/libscenesserver/ScenesServer.h	1687;"	d
TILE_NOCREATE	SceneServer/libscenesserver/ScenesServer.h	1688;"	d
TILE_OBJECT_BLOCK	SceneServer/libscenesserver/ScenesServer.h	1691;"	d
TIMETICK_WRITEBACK	base/recordcmd.h	/^			TIMETICK_WRITEBACK,$/;"	e	enum:Cmd::Record::WriteBack_Type
TIME_CONSUME_PERMANENCE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::Mask::__anon79
TIME_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
TINYXML_COMMENT	deps/tinyxml/tinyxml.h	/^		TINYXML_COMMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DECLARATION	deps/tinyxml/tinyxml.h	/^		TINYXML_DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DOCUMENT	deps/tinyxml/tinyxml.h	/^		TINYXML_DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_ELEMENT	deps/tinyxml/tinyxml.h	/^		TINYXML_ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_INCLUDED	deps/tinyxml/tinyxml.h	27;"	d
TINYXML_TEXT	deps/tinyxml/tinyxml.h	/^		TINYXML_TEXT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_TYPECOUNT	deps/tinyxml/tinyxml.h	/^		TINYXML_TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TINYXML_UNKNOWN	deps/tinyxml/tinyxml.h	/^		TINYXML_UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_USE_STL	deps/tinyxml/Makefile	/^TINYXML_USE_STL := NO$/;"	m
TIXML_DEFAULT_ENCODING	deps/tinyxml/tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	v
TIXML_ENCODING_LEGACY	deps/tinyxml/tinyxml.h	/^	TIXML_ENCODING_LEGACY$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UNKNOWN	deps/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN,$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UTF8	deps/tinyxml/tinyxml.h	/^	TIXML_ENCODING_UTF8,$/;"	e	enum:TiXmlEncoding
TIXML_ERROR	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_DOCUMENT_EMPTY	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_DOCUMENT_TOP_ONLY	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_EMBEDDED_NULL	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_OPENING_FILE	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_PARSING_CDATA	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_PARSING_COMMENT	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_PARSING_DECLARATION	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_PARSING_ELEMENT	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_PARSING_EMPTY	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_PARSING_UNKNOWN	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_READING_ATTRIBUTES	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_READING_ELEMENT_VALUE	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_READING_END_TAG	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon211
TIXML_ERROR_STRING_COUNT	deps/tinyxml/tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon211
TIXML_LOG	deps/tinyxml/tinyxmlparser.cpp	34;"	d	file:
TIXML_LOG	deps/tinyxml/tinyxmlparser.cpp	36;"	d	file:
TIXML_MAJOR_VERSION	deps/tinyxml/tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	v
TIXML_MINOR_VERSION	deps/tinyxml/tinyxml.h	/^const int TIXML_MINOR_VERSION = 6;$/;"	v
TIXML_NO_ATTRIBUTE	deps/tinyxml/tinyxml.h	/^	TIXML_NO_ATTRIBUTE,$/;"	e	enum:__anon210
TIXML_NO_ERROR	deps/tinyxml/tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon211
TIXML_PATCH_VERSION	deps/tinyxml/tinyxml.h	/^const int TIXML_PATCH_VERSION = 2;$/;"	v
TIXML_SAFE	deps/tinyxml/tinyxml.h	62;"	d
TIXML_SNPRINTF	deps/tinyxml/tinyxml.h	67;"	d
TIXML_SNPRINTF	deps/tinyxml/tinyxml.h	72;"	d
TIXML_SNPRINTF	deps/tinyxml/tinyxml.h	77;"	d
TIXML_SNPRINTF	deps/tinyxml/tinyxml.h	80;"	d
TIXML_SSCANF	deps/tinyxml/tinyxml.h	68;"	d
TIXML_SSCANF	deps/tinyxml/tinyxml.h	73;"	d
TIXML_SSCANF	deps/tinyxml/tinyxml.h	78;"	d
TIXML_SSCANF	deps/tinyxml/tinyxml.h	81;"	d
TIXML_STRING	deps/tinyxml/tinyxml.h	52;"	d
TIXML_STRING	deps/tinyxml/tinyxml.h	55;"	d
TIXML_SUCCESS	deps/tinyxml/tinyxml.h	/^	TIXML_SUCCESS,$/;"	e	enum:__anon210
TIXML_USE_STL	deps/tinyxml/tinyxml.h	29;"	d
TIXML_UTF_LEAD_0	deps/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v
TIXML_UTF_LEAD_1	deps/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v
TIXML_UTF_LEAD_2	deps/tinyxml/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v
TIXML_WRONG_TYPE	deps/tinyxml/tinyxml.h	/^	TIXML_WRONG_TYPE$/;"	e	enum:__anon210
TM_no	base/include/srvEngine.h	/^		TM_no,          \/**< Ê≤°ÊúâÁªìÊùü‰ªªÂä° *\/$/;"	e	enum:x_tcp_clientTask::TerminateMethod
TM_service_close	base/include/srvEngine.h	/^		TM_service_close      \/**< ÊúçÂä°Âô®Âç≥Â∞ÜÂÖ≥Èó≠ *\/$/;"	e	enum:x_tcp_clientTask::TerminateMethod
TM_sock_error	base/include/srvEngine.h	/^		TM_sock_error,      \/**< Ê£ÄÊµãÂà∞Â•óÊé•Âè£ÂÖ≥Èó≠ÊàñËÄÖÂ•óÊé•Âè£ÂºÇÂ∏∏ *\/$/;"	e	enum:x_tcp_clientTask::TerminateMethod
TOGGLE_READY_COMMON_MINI_PARA	base/include/csCommon.h	12260;"	d
TOGGLE_SEAT_COMMON_MINI_PARA	base/include/csCommon.h	12234;"	d
TRADE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
TRANSFER_FUND_FETCH_STOCKPARA	base/include/csCommon.h	8845;"	d
TRANSFER_FUND_SAVE_STOCKPARA	base/include/csCommon.h	8833;"	d
TURN_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
TYPE_GENERAL	GatewayServer/old_back/GatewayServer.h	/^	TYPE_GENERAL		=	0, \/\/ ∆’Õ®$/;"	e	enum:SERVER_TYPE
TYPE_GENERAL	base/include/csCommon.h	/^/;"	e	enum:Cmd::SERVER_TYPE
TYPE_PEACE	GatewayServer/old_back/GatewayServer.h	/^	TYPE_PEACE		=	1,     \/\/ ∫Õ∆Ω$/;"	e	enum:SERVER_TYPE
TYPE_PEACE	base/include/csCommon.h	/^/;"	e	enum:Cmd::SERVER_TYPE
T_ChangeLeaderExec	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::T_ChangeLeaderExec( const char * LeaderName)$/;"	f	class:TeamManager
T_DelTeamExec	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::T_DelTeamExec(const Cmd::stRemoveTeamMemberUserCmd *rev)$/;"	f	class:TeamManager
T_MSEC	base/include/srvEngine.h	/^	static const int T_MSEC =2100;      \/**< ËΩÆËØ¢Ë∂ÖÊó∂ÔºåÊØ´Áßí *\/$/;"	m	class:zMTCPServer
T_MSEC	base/src/x_tcpserver.h	/^	static const int T_MSEC =2100;      \/**< ËΩÆËØ¢Ë∂ÖÊó∂ÔºåÊØ´Áßí *\/$/;"	m	class:x_tcpserver
T_RD_MSEC	base/include/x_socket.h	/^	static const int T_RD_MSEC          =  2100;          \/**< ËØªÂèñË∂ÖÊó∂ÁöÑÊØ´ÁßíÊï∞ *\/$/;"	m	class:x_socket
T_WR_MSEC	base/include/x_socket.h	/^	static const int T_WR_MSEC          =  2100;          \/**< ÂèëÈÄÅË∂ÖÊó∂ÁöÑÊØ´ÁßíÊï∞ *\/$/;"	m	class:x_socket
TabNum	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::MainPack
TabNum	base/include/csBox.h	/^	BYTE TabNum;$/;"	m	struct:Cmd::stPackBuyTanbNumUserCmd
TabSize	deps/tinyxml/tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:TiXmlDocument
TaskContainer	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::list<SessionTask *> TaskContainer;$/;"	t	class:SessionTaskManager
TaskContainer_iterator	SessionServer/libsessionserver/SessionServer.h	/^    typedef TaskContainer::iterator TaskContainer_iterator;$/;"	t	class:SessionTaskManager
Team	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::Team
Team	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
Team	SessionServer/libsessionserver/SessionServer.h	/^  Team():leaderid(0){};$/;"	f	struct:Team
Team	SessionServer/libsessionserver/SessionServer.h	/^struct Team$/;"	s
TeamAction	SceneServer/libscenesserver/SceneServer1.h	/^  TeamAction(ScenesParser& p)$/;"	f	class:TeamAction
TeamAction	SceneServer/libscenesserver/SceneServer1.h	/^class TeamAction : public Action$/;"	c
TeamAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
TeamAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TeamAction
TeamAddMemberSceneExec	SessionServer/libsessionserver/SessionServer.h	/^	TeamAddMemberSceneExec(DWORD leaberID, DWORD TeamThisID, char * AddMemberName, DWORD dwID, DWORD face)$/;"	f	struct:TeamAddMemberSceneExec
TeamAddMemberSceneExec	SessionServer/libsessionserver/SessionServer.h	/^struct TeamAddMemberSceneExec : public TeamSceneExec$/;"	s
TeamChangeLeaberSceneExec	SessionServer/libsessionserver/SessionServer.h	/^	TeamChangeLeaberSceneExec(DWORD TeamThisID, char * NewName)$/;"	f	struct:TeamChangeLeaberSceneExec
TeamChangeLeaberSceneExec	SessionServer/libsessionserver/SessionServer.h	/^struct TeamChangeLeaberSceneExec : public TeamSceneExec$/;"	s
TeamCondition	SceneServer/libscenesserver/SceneServer1.h	/^  TeamCondition(ScenesParser& p)$/;"	f	class:TeamCondition
TeamCondition	SceneServer/libscenesserver/SceneServer1.h	/^class TeamCondition : public Condition$/;"	c
TeamCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
TeamCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TeamCondition
TeamDelMemberSceneExec	SessionServer/libsessionserver/SessionServer.h	/^	TeamDelMemberSceneExec(DWORD TeamID, char * DelName)$/;"	f	struct:TeamDelMemberSceneExec
TeamDelMemberSceneExec	SessionServer/libsessionserver/SessionServer.h	/^struct TeamDelMemberSceneExec : public TeamSceneExec$/;"	s
TeamDelTeamSceneExec	SessionServer/libsessionserver/SessionServer.h	/^	TeamDelTeamSceneExec(DWORD TeamThisID)$/;"	f	struct:TeamDelTeamSceneExec
TeamDelTeamSceneExec	SessionServer/libsessionserver/SessionServer.h	/^struct TeamDelTeamSceneExec : public TeamSceneExec$/;"	s
TeamID	SessionServer/libsessionserver/SessionServer.h	/^	DWORD	TeamID;		\/\/ID$/;"	m	struct:QueueTeamData
TeamManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
TeamManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
TeamMap	SessionServer/libsessionserver/SessionServer.h	/^	typedef map<DWORD,Team> TeamMap;$/;"	t	class:GlobalTeamIndex
TeamMap_const_iterator	SessionServer/libsessionserver/SessionServer.h	/^	typedef TeamMap::const_iterator TeamMap_const_iterator;$/;"	t	class:GlobalTeamIndex
TeamMap_iterator	SessionServer/libsessionserver/SessionServer.h	/^	typedef TeamMap::iterator TeamMap_iterator;$/;"	t	class:GlobalTeamIndex
TeamMap_value_type	SessionServer/libsessionserver/SessionServer.h	/^	typedef TeamMap::value_type TeamMap_value_type;$/;"	t	class:GlobalTeamIndex
TeamMemExec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
TeamMember	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::TeamMember
TeamMember	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
TeamRollItme	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::TeamRollItme()$/;"	f	class:SceneManager
TeamSceneExec	SessionServer/libsessionserver/SessionServer.h	/^struct TeamSceneExec$/;"	s
TeamSkillExec	SceneServer/libscenesserver/SceneSkill.cpp	/^  TeamSkillExec(SceneUser *user,zSkill *s)$/;"	f	struct:TeamSkillExec
TeamSkillExec	SceneServer/libscenesserver/SceneSkill.cpp	/^struct TeamSkillExec : public TeamMemExec$/;"	s	file:
TeamThisID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
TeamedCondition	SceneServer/libscenesserver/SceneServer1.h	/^  TeamedCondition(ScenesParser& p) $/;"	f	class:TeamedCondition
TeamedCondition	SceneServer/libscenesserver/SceneServer1.h	/^class TeamedCondition : public Condition$/;"	c
TeamedCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
TeamedCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TeamedCondition
Teamnum	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD Teamnum;$/;"	m	struct:BCampData
Teamnum	SessionServer/libsessionserver/SessionServer.h	/^	WORD Teamnum;			\/\/sky ’Û”™≥…‘± ˝$/;"	m	struct:CampData
TechMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryTechM
TempArchive	SessionServer/libsessionserver/SessionServer.h	/^  TempArchive() $/;"	f	struct:TempArchive
TempArchive	SessionServer/libsessionserver/SessionServer.h	/^struct TempArchive $/;"	s
TempArchiveMember	base/include/csCommon.h	/^/;"	s
TempArchiveType	base/include/csCommon.h	/^/;"	g
TempArchive_iterator	SessionServer/libsessionserver/SessionServer.h	/^    typedef TempArchive_map::iterator TempArchive_iterator;$/;"	t	class:GlobalTempArchiveIndex
TempArchive_map	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,TempArchive *> TempArchive_map;$/;"	t	class:GlobalTempArchiveIndex
TempArchive_value_type	SessionServer/libsessionserver/SessionServer.h	/^    typedef TempArchive_map::value_type TempArchive_value_type;$/;"	t	class:GlobalTempArchiveIndex
Terminate	GatewayServer/old_back/GateUser.cpp	/^void GateUser::Terminate()$/;"	f	class:GateUser
Terminate	GatewayServer/old_back/GatewayTask.cpp	/^void GatewayTask::Terminate(const TerminateMethod method)$/;"	f	class:GatewayTask
Terminate	base/include/srvEngine.h	/^	void Terminate(const TerminateMethod method)$/;"	f	class:x_tcp_clientTask
Terminate	base/src/x_tcptask.h	/^	virtual void Terminate(const TerminateMethod method = terminate_passive)$/;"	f	class:x_tcptask
Terminate	base/x_service.h	/^	virtual void Terminate() { $/;"	f	class:x_service
TerminateMethod	base/include/srvEngine.h	/^	enum TerminateMethod$/;"	g	class:x_tcp_clientTask
TerminateMethod	base/src/x_tcptask.h	/^	enum TerminateMethod$/;"	g	class:x_tcptask
TerminateWait	base/src/x_tcptask.h	/^	void TerminateWait()$/;"	f	class:x_tcptask
Text	deps/tinyxml/tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:TiXmlHandle
ThroAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
ThroAddDamA	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
Throflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
TiXmlAttribute	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute
TiXmlAttribute	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute
TiXmlAttribute	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute
TiXmlAttribute	deps/tinyxml/tinyxml.h	/^class TiXmlAttribute : public TiXmlBase$/;"	c
TiXmlAttributeSet	deps/tinyxml/tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet
TiXmlAttributeSet	deps/tinyxml/tinyxml.h	/^class TiXmlAttributeSet$/;"	c
TiXmlBase	deps/tinyxml/tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:TiXmlBase
TiXmlBase	deps/tinyxml/tinyxml.h	/^class TiXmlBase$/;"	c
TiXmlComment	deps/tinyxml/tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT )$/;"	f	class:TiXmlComment
TiXmlComment	deps/tinyxml/tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment
TiXmlComment	deps/tinyxml/tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {}$/;"	f	class:TiXmlComment
TiXmlComment	deps/tinyxml/tinyxml.h	/^class TiXmlComment : public TiXmlNode$/;"	c
TiXmlCursor	deps/tinyxml/tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:TiXmlCursor
TiXmlCursor	deps/tinyxml/tinyxml.h	/^struct TiXmlCursor$/;"	s
TiXmlDeclaration	deps/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	deps/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	deps/tinyxml/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	deps/tinyxml/tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {}$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	deps/tinyxml/tinyxml.h	/^class TiXmlDeclaration : public TiXmlNode$/;"	c
TiXmlDocument	deps/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	deps/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	deps/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	deps/tinyxml/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	deps/tinyxml/tinyxml.h	/^class TiXmlDocument : public TiXmlNode$/;"	c
TiXmlElement	deps/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement
TiXmlElement	deps/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement
TiXmlElement	deps/tinyxml/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement
TiXmlElement	deps/tinyxml/tinyxml.h	/^class TiXmlElement : public TiXmlNode$/;"	c
TiXmlEncoding	deps/tinyxml/tinyxml.h	/^enum TiXmlEncoding$/;"	g
TiXmlFOpen	deps/tinyxml/tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode )$/;"	f
TiXmlHandle	deps/tinyxml/tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:TiXmlHandle
TiXmlHandle	deps/tinyxml/tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:TiXmlHandle
TiXmlHandle	deps/tinyxml/tinyxml.h	/^class TiXmlHandle$/;"	c
TiXmlNode	deps/tinyxml/tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode
TiXmlNode	deps/tinyxml/tinyxml.h	/^class TiXmlNode : public TiXmlBase$/;"	c
TiXmlParsingData	deps/tinyxml/tinyxmlparser.cpp	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:
TiXmlParsingData	deps/tinyxml/tinyxmlparser.cpp	/^class TiXmlParsingData$/;"	c	file:
TiXmlPrinter	deps/tinyxml/tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter
TiXmlPrinter	deps/tinyxml/tinyxml.h	/^class TiXmlPrinter : public TiXmlVisitor$/;"	c
TiXmlText	deps/tinyxml/tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText
TiXmlText	deps/tinyxml/tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TINYXML_TEXT )	{ copy.CopyTo( this ); }$/;"	f	class:TiXmlText
TiXmlText	deps/tinyxml/tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText
TiXmlText	deps/tinyxml/tinyxml.h	/^class TiXmlText : public TiXmlNode$/;"	c
TiXmlUnknown	deps/tinyxml/tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )		{ copy.CopyTo( this ); }$/;"	f	class:TiXmlUnknown
TiXmlUnknown	deps/tinyxml/tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )	{}$/;"	f	class:TiXmlUnknown
TiXmlUnknown	deps/tinyxml/tinyxml.h	/^class TiXmlUnknown : public TiXmlNode$/;"	c
TiXmlVisitor	deps/tinyxml/tinyxml.h	/^class TiXmlVisitor$/;"	c
Tile	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	namespace:O
TimeType	SceneServer/libscenesserver/ItemCoolTime.h	/^	DWORD TimeType;  \/\/¿‰»¥¿‡–Õ$/;"	m	struct:stCoolTimeType
TimeoutsAction	SceneServer/libscenesserver/SceneServer1.h	/^  TimeoutsAction(ScenesParser& p)$/;"	f	class:TimeoutsAction
TimeoutsAction	SceneServer/libscenesserver/SceneServer1.h	/^class TimeoutsAction : public Action$/;"	c
TimeoutsCondition	SceneServer/libscenesserver/SceneServer1.h	/^  TimeoutsCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:TimeoutsCondition
TimeoutsCondition	SceneServer/libscenesserver/SceneServer1.h	/^class TimeoutsCondition : public TeamCondition$/;"	c
TimeoutsCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
TimeoutsCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TimeoutsCondition
Timer	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
Timer	base/include/zTime.h	/^	Timer(const float how_long,const int delay=0) : _long((int)(how_long*1000)),_timer(delay*1000)$/;"	f	class:Timer
Timer	base/include/zTime.h	/^	Timer(const float how_long,const zRTime cur) : _long((int)(how_long*1000)),_timer(cur)$/;"	f	class:Timer
Timer	base/include/zTime.h	/^class Timer$/;"	c
TimerCondition	SceneServer/libscenesserver/SceneServer1.h	/^  TimerCondition(ScenesParser& p)$/;"	f	class:TimerCondition
TimerCondition	SceneServer/libscenesserver/SceneServer1.h	/^class TimerCondition : public Condition$/;"	c
TimerCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
TimerCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TimerCondition
ToComment	deps/tinyxml/tinyxml.h	/^	virtual		  TiXmlComment*  ToComment()		{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment
ToComment	deps/tinyxml/tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToComment	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToComment	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlComment
ToDeclaration	deps/tinyxml/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration
ToDeclaration	deps/tinyxml/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDeclaration	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDeclaration	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDeclaration
ToDocument	deps/tinyxml/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument
ToDocument	deps/tinyxml/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDocument	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToDocument	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlDocument
ToElement	deps/tinyxml/tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() : 0 ); }$/;"	f	class:TiXmlHandle
ToElement	deps/tinyxml/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement
ToElement	deps/tinyxml/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToElement	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToElement	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlElement
ToLower	base/include/srvEngine.h	/^struct ToLower$/;"	s
ToLower	deps/tinyxml/tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase
ToNode	deps/tinyxml/tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:TiXmlHandle
ToText	deps/tinyxml/tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle
ToText	deps/tinyxml/tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToText	deps/tinyxml/tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText
ToText	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToText	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlText
ToUnknown	deps/tinyxml/tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() : 0 ); }$/;"	f	class:TiXmlHandle
ToUnknown	deps/tinyxml/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()				{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown
ToUnknown	deps/tinyxml/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToUnknown	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const	{ return this; } \/\/\/< Cast to a more defined type. Will return null not of the requested type.$/;"	f	class:TiXmlUnknown
ToUnknown	deps/tinyxml/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defined type. Will return null if not of the requested type.$/;"	f	class:TiXmlNode
ToUpper	base/include/srvEngine.h	/^struct ToUpper$/;"	s
TongVar	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
TongVarAction	SceneServer/libscenesserver/SceneServer1.h	/^  TongVarAction(ScenesParser& p) : GlobalAction<Operation>(p)$/;"	f	class:TongVarAction
TongVarAction	SceneServer/libscenesserver/SceneServer1.h	/^class TongVarAction : public GlobalAction<Operation>$/;"	c
TongVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  TongVarCondition(ScenesParser& p) : GlobalCondition<Operation>(p)$/;"	f	class:TongVarCondition
TongVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^class TongVarCondition : public GlobalCondition<Operation>$/;"	c
TongVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
TongVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TongVarCondition
Top100	tmp/MiniServer/MiniServer.h	/^class Top100 : public Singleton<Top100>$/;"	c
TotalAllNpc	SceneServer/libscenesserver/CountryDare.cpp	/^  TotalAllNpc() : count(0),dwNpcID(0) {};$/;"	f	struct:TotalAllNpc
TotalAllNpc	SceneServer/libscenesserver/CountryDare.cpp	/^struct TotalAllNpc : public zSceneEntryCallBack$/;"	s	file:
TradeOrder	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
TradeOrder	SceneServer/libscenesserver/Trade.cpp	/^TradeOrder::TradeOrder(SceneUser* owner) : _me(owner),_target(NULL),_targetid(0),_money(0)$/;"	f	class:TradeOrder
Trigger	SceneServer/libscenesserver/ScenesServer.h	/^/;"	n	class:O::LiveSkills
Type	base/include/csBox.h	/^	BYTE  Type;				\/\/sky ≈≈∂”¿‡–Õ(0:∏ˆ»À 1:∂”ŒÈ)$/;"	m	struct:Cmd::stArenaQueuingUserCmd
Type	deps/tinyxml/tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:TiXmlNode
Type2Type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
TypeCoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stXmlItemCoolTime
UNIONUSEROBJECT_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	3839;"	d
UNION_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
UNKNOWNSERVER	base/common.h	/^	UNKNOWNSERVER  =  0, \/** Êú™Áü•ÊúçÂä°Âô®Á±ªÂûã *\/$/;"	e	enum:ServerType
UNMARRY_PARA	base/include/csCommon.h	7364;"	d
UNREGUSER_RET_ERROR	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
UNREGUSER_RET_LOGOUT	base/include/csCommon.h	/^/;"	m	namespace:Cmd::Cmd::Session
UPDATE_COUNTRY_ALLY_PARA	base/include/csCommon.h	10362;"	d
UPDATE_SHOP_ADV_USERCMD_PARAMETER	base/include/csCommon.h	5382;"	d
UPDATE_STORE_PASS_USERCMD_PARAMETER	base/include/csCommon.h	5267;"	d
UPDATE_TRADE_MONEY_USERCMD	base/include/csCommon.h	5400;"	d
UPDATE_USER_STATE_COMMON_MINI_PARA	base/include/csCommon.h	12309;"	d
UPGRADE	SceneServer/libscenesserver/SceneServer1.h	/^    UPGRADE = 3,$/;"	e	enum:Base::ReuildType
UPGRADE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Base::ReuildType
UPGRADEITEM_PROPERTY_USERCMD_PARA	base/include/csCommon.h	3902;"	d
UPGRADEUSERSKILL_PROPERTY_USERCMD_PARA	base/include/csCommon.h	3969;"	d
UP_TECH_DEGREE_PARA	base/include/csCommon.h	6366;"	d
USAGE_INDENT	base/src/getopt.c	2310;"	d	file:
USERGAMETIME_TIMER_USERCMD_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
USER_BITS	base/src/getopt.c	992;"	d	file:
USER_DATA_COMMON_MINI_PARA	base/include/csCommon.h	12482;"	d
USER_MASK	base/src/getopt.c	993;"	d	file:
USER_RELOGIN_PARA	base/command.h	/^	const BYTE USER_RELOGIN_PARA = 14;$/;"	m	namespace:Cmd
USER_REQUEST_LOGIN_PARA	base/command.h	/^	const BYTE USER_REQUEST_LOGIN_PARA = 2;$/;"	m	namespace:Cmd
USER_REQUEST_LOGIN_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
USER_SCORE_COMMON_MINI_PARA	base/include/csCommon.h	12376;"	d
USER_VERIFY_VER_PARA	base/command.h	/^	const BYTE USER_VERIFY_VER_PARA = 120;$/;"	m	namespace:Cmd
USER_VERIFY_VER_PARA	base/include/csCommon.h	/^/;"	m	namespace:Cmd
USEUSEROBJECT_PROPERTY_USERCMD_PARAMETER	base/include/csCommon.h	3861;"	d
USE_BUILDIN_UNICODE	base/include/codeLib.h	10;"	d
USE_FIGHT_NULL	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::useFightState
USE_FIGHT_PVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::useFightState
USE_FIGHT_PVP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::useFightState
USTATE_ABLEPSIA	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_ALERTNESS	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_AT_FULL_SPLIT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_BANISH	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_BELLOW	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_BLAZE_SHIELD	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_BOMB	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_BOUNCE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_BRANDISH	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_CELENRITY_CHOP	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_COMA	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_CRACK	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_DAOJISHI	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_DEADLINESS_TOXICANT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_DEATH	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_DECELERATE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_DOING_QUEST	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_DREAD	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_EMBLAZE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_ENTHRALL_TOXICANT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_EXP_125	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_EXP_150	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_EXP_175	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_FINISH_QUEST	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_FROST	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_FURY	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_GALLOW	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_GROW_ON	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_GUARD	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_HALE_AND_HEARTY	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_HIDE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_ICE_SHIELD	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_ICY_WATER	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_IMPREGNABLE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_INCISE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_INVINCIBLE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_LULL_TOXICANT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_MAGIC_ECHO	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_MAGIC_SHIELD	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_MUM	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_OFFER	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_PAIN	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_PHYSICS_ECHO	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_PK	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_PRIVATE_STORE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_PVE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_PVP	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_REJUVENATION	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_RELIVEWEAK	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_RIDE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_SANGUINARY	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_SCOUR	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_SEVER_MUSCLE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_SITDOWN	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_SOUL	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_SPUNK	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_START_QUEST	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_SUNDERARMOR	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_TEAM_ATTACK_BIRD_FLAG	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_TEAM_ATTACK_FLOW_CLOUD	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_TEAM_ATTACK_ONE_DIM	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_TERRIFIC	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_TOGETHER_WITH_DRAGON	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_TOGETHER_WITH_TIGER	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_TOXICANT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_ULTRA_EQUIPMENT	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_UNARM	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_VAMPIRE	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_WAR	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_WEAKNESS	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_WINDMILL	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
USTATE_WISDOM	base/include/csCommon.h	/^/;"	e	enum:Cmd::__anon199
U_ID	SceneServer/libscenesserver/script_func.cpp	278;"	d	file:
UnicodeToGb2312	base/src/codeLib.c	/^size_t UnicodeToGb2312(PWSTR szWC,size_t nWC,PSTR szGb2312,size_t nGb2312)$/;"	f
UnicodeToUtf8	base/src/codeLib.c	/^size_t UnicodeToUtf8(PWSTR szWC,size_t nWC,PSTR szUtf8,size_t nUtf8)$/;"	f
UnionDef	base/include/csCommon.h	/^/;"	n
UnionIDCondition	SceneServer/libscenesserver/SceneServer1.h	/^  UnionIDCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:UnionIDCondition
UnionIDCondition	SceneServer/libscenesserver/SceneServer1.h	/^class UnionIDCondition : public TeamCondition$/;"	c
UnionIDCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
UnionIDCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UnionIDCondition
UnionObjectCompare	SceneServer/libscenesserver/SceneUnion.cpp	/^class UnionObjectCompare:public UserObjectCompare $/;"	c	file:
Unknown	deps/tinyxml/tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:TiXmlHandle
UpDataMapID	SessionServer/libsessionserver/Team.cpp	/^void GlobalTeamIndex::UpDataMapID(DWORD useID, DWORD TeamThisID)$/;"	f	class:GlobalTeamIndex
UpDataMapID	SessionServer/libsessionserver/Team.cpp	/^void Team::UpDataMapID(DWORD useID)$/;"	f	class:Team
Update	SceneServer/libscenesserver/SceneServer1.h	/^    Update(ScenesParser& p) : _p(p)$/;"	f	class:MakeFunction::Update
Update	SceneServer/libscenesserver/SceneServer1.h	/^  class Update : public Maker<Action>$/;"	c	namespace:MakeFunction
UpdateCountryOnline	GatewayServer/old_back/CountryInfo.cpp	/^void CountryInfo::UpdateCountryOnline( DWORD country_id, DWORD online_numbers )$/;"	f	class:CountryInfo
UpdateSceneObjectCallBack	SceneServer/libscenesserver/Scene.cpp	/^  UpdateSceneObjectCallBack(Scene *scene) : scene(scene) {};$/;"	f	struct:UpdateSceneObjectCallBack
UpdateSceneObjectCallBack	SceneServer/libscenesserver/Scene.cpp	/^struct UpdateSceneObjectCallBack : public zSceneEntryCallBack$/;"	s	file:
Upgrade	SceneServer/libscenesserver/SceneServer1.h	/^class Upgrade$/;"	c
Upgrade	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
UpgradeObjectBase	base/include/srvEngine.h	/^struct UpgradeObjectBase{$/;"	s
UrlInfo	base/include/srvEngine.h	/^	UrlInfo()$/;"	f	struct:UrlInfo
UrlInfo	base/include/srvEngine.h	/^	UrlInfo(const UrlInfo &ui)$/;"	f	struct:UrlInfo
UrlInfo	base/include/srvEngine.h	/^	UrlInfo(const uint32_t hashcode,const std::string &url,const bool supportTransactions)$/;"	f	struct:UrlInfo
UrlInfo	base/include/srvEngine.h	/^struct UrlInfo$/;"	s
Use	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
UseIocp	base/include/srvEngine.h	/^	bool UseIocp()$/;"	f	class:x_tcp_clientTask
UseSkillAction	SceneServer/libscenesserver/SceneServer1.h	/^  UseSkillAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:UseSkillAction
UseSkillAction	SceneServer/libscenesserver/SceneServer1.h	/^class UseSkillAction : public TeamAction$/;"	c
UseableMagicList	SceneServer/libscenesserver/ScenesServer.cpp	/^std::vector<DWORD> UseableMagicList;$/;"	v
UserDeathRun	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::UserDeathRun(DWORD DeathID, DWORD MurderID)$/;"	f	class:GangScene
UserID	SessionServer/libsessionserver/SessionServer.h	/^	std::vector<DWORD> UserID;	\/\/sky ∑÷≈‰∫√µƒ≥…‘±$/;"	m	struct:CampData
UserID	base/include/csBox.h	/^	uint32_t UserID;			\/\/sky ”√ªßID(typeŒ™∂”ŒÈ ±∫Ú∏√IDŒ™∂”ŒÈŒ®“ªID)$/;"	m	struct:Cmd::stArenaQueuingUserCmd
UserObjectCompare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
UserObjectComparePos	SceneServer/libscenesserver/ObjectManager.cpp	/^class UserObjectComparePos:public UserObjectCompare $/;"	c	file:
UserObjectExec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
UserObjectM	SceneServer/libscenesserver/ObjectManager.cpp	/^UserObjectM::UserObjectM()$/;"	f	class:UserObjectM
UserObjectM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
UserSession	SessionServer/libsessionserver/Session.cpp	/^UserSession::UserSession(SessionTask *task):zUser(),Session(task)$/;"	f	class:UserSession
UserSession	SessionServer/libsessionserver/SessionServer.h	/^class UserSession:public zUser,public Session$/;"	c
UserSessionManager	SessionServer/libsessionserver/SessionManager.cpp	/^UserSessionManager::UserSessionManager():zUserManager()$/;"	f	class:UserSessionManager
UserSessionManager	SessionServer/libsessionserver/SessionServer.h	/^class UserSessionManager:public zUserManager$/;"	c
UserSkillExec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
UserSkillM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
UserSkillM	SceneServer/libscenesserver/SkillManager.cpp	/^UserSkillM::UserSkillM()$/;"	f	class:UserSkillM
UserTemID	base/include/csBox.h	/^	uint32_t	UserTemID;	\/\/±ª∑÷≈‰»ÀµƒŒ®“ªID$/;"	m	struct:Cmd::stNpcGiveItemUserCmd
UserVar	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
UserVar	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::UserVar
UserVarAction	SceneServer/libscenesserver/SceneServer1.h	/^  UserVarAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:UserVarAction
UserVarAction	SceneServer/libscenesserver/SceneServer1.h	/^class UserVarAction : public TeamAction$/;"	c
UserVarAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
UserVarAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UserVarAction
UserVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  UserVarCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:UserVarCondition
UserVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^class UserVarCondition : public TeamCondition$/;"	c
UserVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
UserVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UserVarCondition
UsersVar	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
UsersVarAction	SceneServer/libscenesserver/SceneServer1.h	/^  UsersVarAction(ScenesParser& p) : TongVarAction<Operation>(p)$/;"	f	class:UsersVarAction
UsersVarAction	SceneServer/libscenesserver/SceneServer1.h	/^class UsersVarAction : public TongVarAction<Operation>$/;"	c
UsersVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  UsersVarCondition(ScenesParser& p) : TongVarCondition<Operation>(p)$/;"	f	class:UsersVarCondition
UsersVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^class UsersVarCondition : public TongVarCondition<Operation>$/;"	c
UsersVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
UsersVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UsersVarCondition
Utf8ToUnicode	base/src/codeLib.c	/^size_t Utf8ToUnicode(PSTR szUtf8,size_t nUtf8,PWSTR szWC,size_t nWC)$/;"	f
V	SceneServer/libscenesserver/ScenesServer.h	/^NLe∫NÙV;eê—ç4/;"	e	enum:O::LiveSkills::NpcAIFlag
VALUE_TYPE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::SkillStatusManager
VAR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills::UserVar
VAR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills::Vars
VAR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars::VAR
VARS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::GlobalVarImpl
VARS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::UserVar
VARS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Vars
VERSIONSTRING	Makefile	/^VERSIONSTRING = `if [ $(VERSION_STRING) ];then echo &(VERSION_STRING); else echo "0.0.0"; fi`$/;"	m
VISITNPC_TRADE_USERCMD_PARAMETER	base/include/csCommon.h	5120;"	d
VMList	SceneServer/libscenesserver/SceneServer1.h	/^  typedef std::vector< LuaVM* > VMList;$/;"	t	class:ScriptingSystemLua
VOTE_ACTIVE	SessionServer/libsessionserver/SessionServer.h	/^      VOTE_ACTIVE,          \/\/ ’˝‘⁄Õ∂∆±◊¥Ã¨$/;"	e	enum:CVote::__anon114
VOTE_OVER	SessionServer/libsessionserver/SessionServer.h	/^      VOTE_OVER               \/\/ Ω· ¯«Â≥˝◊¥Ã¨$/;"	e	enum:CVote::__anon114
VOTE_READY	SessionServer/libsessionserver/SessionServer.h	/^      VOTE_READY,           \/\/ ◊º±∏◊¥Ã¨$/;"	e	enum:CVote::__anon114
VOTE_READY_OVER	SessionServer/libsessionserver/SessionServer.h	/^      VOTE_READY_OVER,      \/\/ Ω· ¯Õ∂∆±£¨–ﬁ∏ƒ∂‘”¶π˙º“ø∆ºº◊¥Ã¨$/;"	e	enum:CVote::__anon114
VOTE_USERCMD	base/include/csCommon.h	/^/;"	m	namespace:Cmd
Value	base/include/srvEngine.h	/^	struct Value$/;"	s	struct:zSoulStoneB
Value	deps/tinyxml/tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode
Value	deps/tinyxml/tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute
ValueStr	deps/tinyxml/tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attribute.$/;"	f	class:TiXmlAttribute
ValueStr	deps/tinyxml/tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode
ValueTStr	deps/tinyxml/tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode
VarAction	SceneServer/libscenesserver/SceneServer1.h	/^  VarAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:VarAction
VarAction	SceneServer/libscenesserver/SceneServer1.h	/^class VarAction : public TeamAction$/;"	c
VarAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
VarAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarAction
VarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  VarCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:VarCondition
VarCondition	SceneServer/libscenesserver/SceneServer1.h	/^class VarCondition : public TeamCondition$/;"	c
VarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
VarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarCondition
Vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
Vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars
VarsAction	SceneServer/libscenesserver/SceneServer1.h	/^  VarsAction(ScenesParser& p) : TeamAction(p)$/;"	f	class:VarsAction
VarsAction	SceneServer/libscenesserver/SceneServer1.h	/^class VarsAction : public TeamAction$/;"	c
VarsAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
VarsAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarsAction
Version	deps/tinyxml/tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:TiXmlDeclaration
Victory	SceneServer/libscenesserver/SceneBattlefiel.h	/^	std::vector<stBattleReward> Victory;$/;"	m	class:GangScene
VictoryData	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD VictoryData;$/;"	m	class:GangScene
VictoryType	SceneServer/libscenesserver/SceneBattlefiel.h	/^	eVictoryType VictoryType;$/;"	m	class:GangScene
Visit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O::LiveSkills::Trigger
Visit	deps/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter
Visit	deps/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter
Visit	deps/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter
Visit	deps/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter
Visit	deps/tinyxml/tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
Visit	deps/tinyxml/tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor
Visit	deps/tinyxml/tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:TiXmlVisitor
Visit	deps/tinyxml/tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
VisitEnter	deps/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter
VisitEnter	deps/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute )$/;"	f	class:TiXmlPrinter
VisitEnter	deps/tinyxml/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
VisitEnter	deps/tinyxml/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttribute*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor
VisitExit	deps/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter
VisitExit	deps/tinyxml/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter
VisitExit	deps/tinyxml/tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor
VisitExit	deps/tinyxml/tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:TiXmlVisitor
Void	SceneServer/libscenesserver/SceneServer1.h	/^    Void()$/;"	f	class:MakeFunction::Void
Void	SceneServer/libscenesserver/SceneServer1.h	/^  class Void : public Maker<Action>$/;"	c	namespace:MakeFunction
W	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::StorePack::__anon56
W	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::PetPack
WAIT_CREATE	SessionServer/libsessionserver/SessionServer.h	/^      WAIT_CREATE = 1,$/;"	e	enum:CArmy::__anon116
WAIT_LOGIN	BillServer/BillUser.h	/^      WAIT_LOGIN,   \/**< µ»¥˝Õ®π˝µ«¬Ω—È÷§µƒøÕªß∂Àµ«¬ΩÕ¯πÿ∑˛ŒÒ∆˜ *\/$/;"	e	enum:BillUser::LoginState
WAIT_LOGIN	BillServer/old_back/BillServer.h	/^      WAIT_LOGIN,   \/**< µ»¥˝Õ®π˝µ«¬Ω—È÷§µƒøÕªß∂Àµ«¬ΩÕ¯πÿ∑˛ŒÒ∆˜ *\/$/;"	e	enum:BillUser::LoginState
WAIT_LOGIN	BillServer/old_back/BillServer.h	/^    WAIT_LOGIN,   \/**< µ»¥˝Õ®π˝µ«¬Ω—È÷§µƒøÕªß∂Àµ«¬ΩÕ¯πÿ∑˛ŒÒ∆˜ *\/$/;"	e	enum:BillInfo::__anon2
WAIT_LOGIN_TIMEOUT	BillServer/BillUser.h	/^      WAIT_LOGIN_TIMEOUT,$/;"	e	enum:BillUser::LoginState
WAIT_LOGIN_TIMEOUT	BillServer/old_back/BillServer.h	/^      WAIT_LOGIN_TIMEOUT,\/**< µ»¥˝µ«¬Ω≥¨ ± *\/$/;"	e	enum:BillUser::LoginState
WAIT_TECH	SessionServer/libsessionserver/SessionServer.h	/^      WAIT_TECH, \/\/ Õ∂∆±—°≥ˆµƒø∆ºº,µ»¥˝π˙Õı—°‘ÒπŸ‘±$/;"	e	enum:CTech::__anon109
WALK_RESTITUTE_SP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::SceneUser::__anon86
WANGCHENG_MAP_ID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
WD2BA	base/include/csCommon.h	373;"	d
WIDTH	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::PrivateStore::__anon82
WIDTH	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::TradeOrder::__anon81
WIDTH	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::MainPack::__anon55
WORD	base/type.h	/^typedef uint16_t    WORD;$/;"	t
WORKING_TIME	base/include/csCommon.h	/^/;"	e	enum:LiveSkill::__anon186
WORKING_TIME	base/include/srvEngine.h	/^		WORKING_TIME = 6,$/;"	e	enum:zLiveSkillB::__anon140
WORLD_QUIZ	base/include/srvEngine.h	/^		WORLD_QUIZ = 0, \/\/ ÂÖ®Âå∫Á´ûËµõ$/;"	e	enum:QuizDef::__anon141
WaitRecv	base/include/srvEngine.h	/^	int WaitRecv( bool bWait = false, int timeout = 0 )$/;"	f	class:x_tcp_clientTask
WaitSend	base/include/srvEngine.h	/^	int WaitSend( bool bWait = false, int timeout = 0 )$/;"	f	class:x_tcp_clientTask
WaitTeamID	SessionServer/libsessionserver/SessionServer.h	/^	std::vector<QueueTeamData>	WaitTeamID;		\/\/sky µ»¥˝µƒ∂”ŒÈ∂”¡–$/;"	m	class:CQueueManager
WaitUserID	SessionServer/libsessionserver/SessionServer.h	/^	std::vector<DWORD>			WaitUserID;		\/\/sky µ»¥˝µƒ”√ªß∂”¡–$/;"	m	class:CQueueManager
WarIter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	struct:O::LiveSkills::SceneUser
WarRecord	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::WarRecord
WarRecord	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
WayPoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
WayPoint	SceneServer/libscenesserver/WayPoint.cpp	/^WayPoint::WayPoint()$/;"	f	class:WayPoint
WayPointM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	namespace:O
WeekCondition	SceneServer/libscenesserver/SceneServer1.h	/^  WeekCondition(ScenesParser& p) : TeamCondition(p)$/;"	f	class:WeekCondition
WeekCondition	SceneServer/libscenesserver/SceneServer1.h	/^class WeekCondition : public TeamCondition$/;"	c
WeekCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c
WeekCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:WeekCondition
WideCharToMultiByteEx	base/src/codeLib.c	/^PSTR WideCharToMultiByteEx(UINT CodePage,PWSTR szWC,size_t nWC)$/;"	f
WinnerCamp	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD WinnerCamp;$/;"	m	class:GangScene
WriteBack_Type	base/recordcmd.h	/^		enum WriteBack_Type{$/;"	g	namespace:Cmd::Record
XMD_H	base/include/csCommon.h	25;"	d
Xlogger	base/common.h	75;"	d
ZEBRA_CLIENT_VERSION	base/include/csCommon.h	209;"	d
ZES_encrypt1	base/src/zEncDec.cpp	/^void CEncrypt::ZES_encrypt1(ZES_LONG *data,ZES_key_schedule *ks,int enc)$/;"	f	class:CEncrypt
ZES_random_key	base/src/zEncDec.cpp	/^void CEncrypt::ZES_random_key(ZES_cblock *ret)$/;"	f	class:CEncrypt
ZES_set_key	base/src/zEncDec.cpp	/^void CEncrypt::ZES_set_key(const_ZES_cblock *key,ZES_key_schedule *schedule)$/;"	f	class:CEncrypt
ZONE_ABSOLUTE_SAFE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_COUNTRY_WAR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_DARE_SAFE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_EMPEROR_ATT_RELIVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_EMPEROR_DEF_RELIVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_FOREIGN_RELIVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_NEWBIE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_NONE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_PK_SAFE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_PRIVATE_DARE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_PRIVATE_DARE_UNION	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_PRIVATE_RELIVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_PRIVATE_STORE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_PRIVATE_THIRD_UNION	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_PRIVATE_UNION	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_RELIVE	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
ZONE_SPORTS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::ZoneTypeDef::__anon77
Zebra	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon88
ZlibObject	base/include/csCommon.h	/^/;"	f	struct:ZlibObject
ZlibObject	base/include/csCommon.h	/^/;"	s
ZlibSkill	base/include/csCommon.h	/^/;"	f	struct:ZlibSkill
ZlibSkill	base/include/csCommon.h	/^/;"	s
ZoneTypeDef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::ZoneTypeDef
ZoneTypeDef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
ZoneTypeDefVector	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
_1_id	SceneServer/libscenesserver/SceneServer1.h	/^    int _1_id;$/;"	m	class:EquipMaker
_1_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_1_level	SceneServer/libscenesserver/SceneServer1.h	/^    int _1_level;$/;"	m	class:EquipMaker
_1_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_1_min	tmp/MiniServer/MiniServer.h	/^    static Timer _1_min;$/;"	m	class:MiniTimeTick
_2_id	SceneServer/libscenesserver/SceneServer1.h	/^    int _2_id;$/;"	m	class:EquipMaker
_2_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_2_level	SceneServer/libscenesserver/SceneServer1.h	/^    int _2_level;$/;"	m	class:EquipMaker
_2_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_3_sec	SceneServer/libscenesserver/SceneServer1.h	/^  Timer _3_sec;$/;"	m	class:SceneNpc
_3_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_5_sec	SceneServer/libscenesserver/SceneServer1.h	/^    Timer _5_sec;$/;"	m	class:CartoonPet
_5_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::CartoonPet
_5_sec_count	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD _5_sec_count;$/;"	m	class:CartoonPet
_5_sec_count	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::CartoonPet
_5_sec_count	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_ARGP_H	base/include/argp.h	2;"	d
_ArenaMap	SessionServer/libsessionserver/SessionServer.h	/^	std::map<DWORD,CQueuingManager*> _ArenaMap;		\/\/sky 3c’Ω≥°∂”¡–π‹¿Ì¿‡$/;"	m	class:CArenaManager
_BOXCIRCLE_H	SceneServer/libscenesserver/boxCircle.h	12;"	d
_CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES	base/include/csCommon.h	6;"	d
_CSBOX_H	base/include/csBox.h	3;"	d
_CSTURN_H	base/include/csTurn.h	3;"	d
_DUPLICATEMANAGER_H	SceneServer/libscenesserver/duplicateManager.h	10;"	d
_EPESDK_IMP_	base/src/zEncDec.cpp	2;"	d	file:
_GETOPT_DATA_INITIALIZER	base/src/getopt.c	109;"	d	file:
_GIFTBOX_H	SceneServer/libscenesserver/giftBox.h	2;"	d
_INC_CODELIB_	base/include/codeLib.h	2;"	d
_INC_CSCOMMON_H_	base/include/csCommon.h	4;"	d
_INC_SRVENGINE_H_	base/include/srvEngine.h	3;"	d
_METERIALSMANAGER_H	SceneServer/libscenesserver/meterialsManager.h	2;"	d
_MODULE	SceneServer/libscenesserver/script.cpp	315;"	d	file:
_Object	base/include/csCommon.h	/^/;"	s
_SCENESSERVER_H	SceneServer/libscenesserver/ScenesServer.h	7;"	d
_SCRIPTTICKTASK_H	SceneServer/libscenesserver/scriptTickTask.h	2;"	d
_SERVICE_H_	base/x_service.h	2;"	d
_SSIZE_T_	base/src/getopt.c	19;"	d	file:
_Skill	base/include/csCommon.h	/^/;"	s
_StatusElementList	base/include/srvEngine.h	/^	std::vector<SkillElement> _StatusElementList;$/;"	m	struct:SkillStatus
_X86	base/include/csCommon.h	23;"	d
__Attr	base/include/csCommon.h	/^/;"	s	struct:_Object::Suit_Attribute
__CAT	base/include/csCommon.h	47;"	d
__LCC__	base/include/csCommon.h	26;"	d
__error_t_defined	base/include/argp.h	20;"	d
__first_nonopt	base/src/getopt.c	/^  int __first_nonopt;$/;"	m	struct:_getopt_data	file:
__initialized	base/src/getopt.c	/^  int __initialized;$/;"	m	struct:_getopt_data	file:
__last_nonopt	base/src/getopt.c	/^  int __last_nonopt;$/;"	m	struct:_getopt_data	file:
__mt_alloc	base/include/srvEngine.h	/^	__mt_alloc<BYTE> __mt_alloc;$/;"	m	class:MsgQueue
__mt_alloc	base/include/srvEngine.h	/^class __mt_alloc$/;"	c
__need_error_t	base/include/argp.h	15;"	d
__nextchar	base/src/getopt.c	/^  char *__nextchar;$/;"	m	struct:_getopt_data	file:
__ordering	base/src/getopt.c	/^    } __ordering;$/;"	m	struct:_getopt_data	typeref:enum:_getopt_data::__anon124	file:
__posixly_correct	base/src/getopt.c	/^  int __posixly_correct;$/;"	m	struct:_getopt_data	file:
_action	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _action;$/;"	m	class:GlobalAction
_action	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _action;$/;"	m	class:UserVarAction
_action	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _action;$/;"	m	class:VarAction
_action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:UserVarAction
_action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarAction
_actions	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Event::Embranchment
_active	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Event::Embranchment
_activeElement	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SkillStatusManager
_add	base/src/x_tcptaskpool.cpp	/^		void _add(shared_ptr<x_tcptask> task)$/;"	f	class:x_sync_thread_functor	file:
_add	base/src/x_tcptaskpool.cpp	/^	void _add(shared_ptr<x_tcptask> task)$/;"	f	class:x_okay_thread_functor	file:
_add	base/src/x_tcptaskpool.cpp	/^	void _add(shared_ptr<x_tcptask> task)$/;"	f	class:x_recycle_thread_functor	file:
_add	base/src/x_tcptaskpool.cpp	/^	void _add(shared_ptr<x_tcptask> task)$/;"	f	class:x_verify_thread_functor	file:
_add	base/src/zTCPClientTaskPool.cpp	/^	void _add(x_tcp_clientTask *task)$/;"	f	class:x_tcp_clientTaskThread	file:
_add	base/src/zTCPClientTaskPool.cpp	/^	void _add(x_tcp_clientTask *task)$/;"	f	class:zCheckwaitThread	file:
_ap	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _ap;$/;"	m	class:ActionPointAction
_argp_hang	base/src/getopt.c	/^static volatile int _argp_hang;$/;"	v	file:
_base	SceneServer/libscenesserver/SceneServer1.h	/^    double _base;$/;"	m	class:EquipMaker
_base	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_begin	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DropFromPack
_boxItems	SceneServer/libscenesserver/giftBox.h	/^	std::map<unsigned int,struct boxItem> _boxItems;$/;"	m	class:globalBox
_boxObjects	SceneServer/libscenesserver/boxCircle.h	/^	boxObject _boxObjects[17];$/;"	m	struct:box
_boxType	SceneServer/libscenesserver/giftBox.h	/^	boxType _boxType;$/;"	m	struct:giftBox
_boxitem	SceneServer/libscenesserver/giftBox.h	/^	boxitem _boxitem;$/;"	m	struct:giftBox
_buf__map_user	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetEnvryOneAndSend	file:
_buf__map_user	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_buf_map_ghost	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetEnvryOneAndSend	file:
_buf_map_ghost	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetRequestNpcAndSend	file:
_buf_map_ghost	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_buf_map_ghost	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestNpcAndSend	file:
_buf_map_npc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetEnvryOneAndSend	file:
_buf_map_npc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetRequestNpcAndSend	file:
_buf_map_npc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_buf_map_npc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestNpcAndSend	file:
_buf_map_shopAdv	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetEnvryOneAndSend	file:
_buf_map_shopAdv	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_buf_map_user	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetRequestUserAndSend	file:
_buf_map_user	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestUserAndSend	file:
_buffer	base/src/x_buffer.h	/^	_type _buffer;$/;"	m	class:ByteBuffer
_buffered	base/src/x_tcp_client.h	/^	volatile bool _buffered;$/;"	m	class:x_tcp_buffer_client
_check	GatewayServer/old_back/GatewayServer.h	/^	CheckInfo _check;$/;"	m	class:CmdChecker
_checkSignal	base/src/x_tcptask.h	/^	const bool _checkSignal;            \/**< ÊòØÂê¶ÂèëÈÄÅÈìæË∑ØÊ£ÄÊµã‰ø°Âè∑ *\/$/;"	m	class:x_tcptask
_checkers	GatewayServer/old_back/GatewayServer.h	/^	CHECK _checkers; $/;"	m	class:CheckerTable
_cmd	GatewayServer/old_back/ScreenIndex.cpp	/^  const void  *_cmd;$/;"	m	struct:SendNineExec	file:
_cmd	GatewayServer/old_back/ScreenIndex.cpp	/^  const void  *_cmd;$/;"	m	struct:SendNineExecExceptMe	file:
_cmdLen	GatewayServer/old_back/ScreenIndex.cpp	/^  DWORD _cmdLen;$/;"	m	struct:SendNineExec	file:
_cmdLen	GatewayServer/old_back/ScreenIndex.cpp	/^  DWORD _cmdLen;$/;"	m	struct:SendNineExecExceptMe	file:
_cmds	GatewayServer/old_back/GatewayServer.h	/^	set _cmds; $/;"	m	class:CmdChecker
_cmds	SceneServer/libscenesserver/scriptTickTask.cpp	/^scriptMessageFilter::cmds *scriptMessageFilter::_cmds = new scriptMessageFilter::cmds(scriptMessageFilter::maxcmds);/;"	m	class:scriptMessageFilter	file:
_cmds	SceneServer/libscenesserver/scriptTickTask.h	/^	static cmds *_cmds;$/;"	m	class:scriptMessageFilter
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  int _condition;    $/;"	m	class:GoldCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:CheckSexCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:ConfraternityCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:HaveSkillCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:InNationCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:ItemCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:LevelCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:NationCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:ProfessionCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:SeptIDCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;    $/;"	m	class:UnionIDCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;$/;"	m	class:GlobalCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;$/;"	m	class:UserVarCondition
_condition	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _condition;$/;"	m	class:VarCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:CheckSexCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ConfraternityCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:GlobalCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:GoldCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:HaveSkillCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:InNationCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ItemCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:LevelCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:NationCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ProfessionCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:SeptIDCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:UnionIDCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:UserVarCondition
_condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarCondition
_conditions	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Event::Embranchment
_cost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::RepairCost
_cosume_by_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ObjectPack
_cpos	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _cpos;$/;"	m	class:GotoAction
_currPtr	base/src/x_buffer.h	/^	uint32_t _currPtr;$/;"	m	class:ByteBuffer
_current	SceneServer/libscenesserver/SceneServer1.h	/^    double _current;$/;"	m	class:EquipMaker
_current	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_current_cmd	base/include/x_socket.h	/^	uint32_t _current_cmd;$/;"	m	class:x_socket
_dareStep	SessionServer/libsessionserver/SessionServer.h	/^    BYTE  _dareStep;$/;"	m	class:CNpcDareObj
_data	base/CmdAnalysis.h	/^	}_data[256][256] ;$/;"	m	struct:CmdAnalysis	typeref:struct:CmdAnalysis::__anon126
_day	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::GlobalVarImpl
_description	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Quest
_dest	SceneServer/libscenesserver/SceneServer1.h	/^    zPos _dest;$/;"	m	class:AddGuardAction
_dest	SceneServer/libscenesserver/SceneServer1.h	/^  zPos _dest;$/;"	m	class:GuardNpc
_dest	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GuardNpc
_disc	base/CmdAnalysis.h	/^	char _disc[256];$/;"	m	struct:CmdAnalysis
_drop	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Mask
_dupMapCopy	SceneServer/libscenesserver/duplicateManager.h	/^	dupMapCopy _dupMapCopy;$/;"	m	class:duplicateManager
_dupMapNpc	SceneServer/libscenesserver/duplicateManager.h	/^	dupMapNpc _dupMapNpc;$/;"	m	class:duplicateManager
_dupMapObj	SceneServer/libscenesserver/duplicateManager.h	/^	dupMapObj _dupMapObj;$/;"	m	class:duplicateManager
_dupScenes	SceneServer/libscenesserver/duplicateManager.h	/^	dupScenes _dupScenes;$/;"	m	class:duplicateManager
_dupToUserMap	SceneServer/libscenesserver/duplicateManager.h	/^	dupToUserMap _dupToUserMap;$/;"	m	class:duplicateManager
_dwCountry	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwCountry;$/;"	m	class:CNpcDareObj
_dwDareSeptID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwDareSeptID;$/;"	m	class:CNpcDareObj
_dwGold	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwGold;$/;"	m	class:CNpcDareObj
_dwHoldSeptID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwHoldSeptID;$/;"	m	class:CNpcDareObj
_dwMapID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwMapID;$/;"	m	class:CNpcDareObj
_dwNpcID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwNpcID;$/;"	m	class:CNpcDareObj
_dwPosX	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwPosX;$/;"	m	class:CNpcDareObj
_dwPosY	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwPosY;$/;"	m	class:CNpcDareObj
_dwResultDare	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwResultDare;$/;"	m	class:CNpcDareObj
_dwResultHold	SessionServer/libsessionserver/SessionServer.h	/^    DWORD _dwResultHold;$/;"	m	class:CNpcDareObj
_effectState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
_end	SceneServer/libscenesserver/SceneServer1.h	/^  struct tm _end;  $/;"	m	class:TimerCondition	typeref:struct:TimerCondition::tm
_end	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TimerCondition	typeref:struct:TimerCondition::tm
_entry	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
_events	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::EventManager
_exceptme_id	GatewayServer/old_back/ScreenIndex.cpp	/^  const DWORD _exceptme_id;$/;"	m	struct:SendNineExecExceptMe	file:
_exp	SceneServer/libscenesserver/SceneServer1.h	/^    int _exp;$/;"	m	class:AddGuardAction
_exp	SceneServer/libscenesserver/SceneServer1.h	/^  int _exp;$/;"	m	class:ExpAction
_exp	SceneServer/libscenesserver/SceneServer1.h	/^  int _exp;$/;"	m	class:GuardNpc
_exp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ExpAction
_exp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GuardNpc
_exp	base/include/srvEngine.h	/^	const char *_exp;$/;"	m	class:zRegex
_female	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _female;$/;"	m	class:TeamedCondition
_female	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TeamedCondition
_file	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::GlobalVarImpl
_file	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::UserVar
_five_min	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_five_props	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	union:O::Equips::__anon53
_five_props	base/include/csCommon.h	/^/;"	m	union:_Object::__anon182
_five_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneTimeTick
_five_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_func	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Vars
_get	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Combination
_getopt_data	base/src/getopt.c	/^struct _getopt_data$/;"	s	file:
_getopt_initialize	base/src/getopt.c	/^_getopt_initialize(int argc,char *const *argv,const char *optstring,$/;"	f	file:
_getopt_internal	base/src/getopt.c	/^int _getopt_internal(int argc,char *const *argv,const char *optstring,const struct option *longopts,int *longind,int long_only)$/;"	f
_getopt_internal_r	base/src/getopt.c	/^_getopt_internal_r(int argc,char *const *argv,const char *optstring,$/;"	f
_getopt_long_only_r	base/src/getopt.c	/^_getopt_long_only_r (int argc, char *const *argv, const char *options,$/;"	f
_getopt_long_r	base/src/getopt.c	/^_getopt_long_r (int argc, char *const *argv, const char *options,$/;"	f
_gold	SceneServer/libscenesserver/SceneServer1.h	/^    int _gold;$/;"	m	class:AddGuardAction
_gold	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD _gold;$/;"	m	class:GuardNpc
_gold	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GuardNpc
_grade	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _grade;$/;"	m	class:GradeCondition
_grade	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:GradeCondition
_guard	SceneServer/libscenesserver/SceneServer1.h	/^  int _guard;$/;"	m	class:DropAction
_half_sec	SceneServer/libscenesserver/SceneServer1.h	/^  Timer _half_sec;$/;"	m	class:SceneNpc
_half_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_height	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Package
_help	base/src/getopt.c	/^static void _help (const struct argp *argp, const struct argp_state *state, FILE *stream,unsigned flags, char *name)$/;"	f	file:
_honor	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _honor;$/;"	m	class:HonorAction
_honor	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _honor;$/;"	m	class:MaxHonorAction
_horse	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Horse
_id	SceneServer/libscenesserver/MiniClient.cpp	/^    DWORD _id;$/;"	m	struct:Capacity	file:
_id	SceneServer/libscenesserver/MiniClient.cpp	/^    DWORD _id;$/;"	m	struct:DrawCombin	file:
_id	SceneServer/libscenesserver/SceneServer1.h	/^    int _id;$/;"	m	class:RemoveNpcAction::RemoveNpc
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:AddBindItemAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:AddGreenBindItemAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:AddItemAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:DropAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:DropItemAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:ExpAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:GlobalAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:GlobalCondition
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:HorseAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:ItemCondition
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:MapCountryCondition
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:NpcAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:RefreshAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:RemoveItemAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:TimeoutsAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:TimeoutsCondition
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:UseSkillAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:UserVarAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:UserVarCondition
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:VarAction
_id	SceneServer/libscenesserver/SceneServer1.h	/^  int _id;$/;"	m	class:VarCondition
_id	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _id;$/;"	m	class:HorseCondition
_id	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _id;$/;"	m	class:SkillAction
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ExpAction
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:GlobalCondition
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:HorseCondition
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ItemCondition
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:MapCountryCondition
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Event
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::EventTrigger
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Quest
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Package
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:RefreshAction
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TimeoutsCondition
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:UserVarAction
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:UserVarCondition
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarAction
_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarCondition
_id1	SceneServer/libscenesserver/SceneServer1.h	/^  int _id1;$/;"	m	class:VarsAction
_id1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarsAction
_id2	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD _id2,_id3;$/;"	m	class:AddGuardAction
_id2	SceneServer/libscenesserver/SceneServer1.h	/^  int _id2;$/;"	m	class:VarsAction
_id2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarsAction
_id3	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD _id2,_id3;$/;"	m	class:AddGuardAction
_ids	SceneServer/libscenesserver/RebuildObject.cpp	/^const int SoulStone::_ids[] = {\/*680,*\/748,749,750,751};$/;"	m	class:SoulStone	file:
_ids	SceneServer/libscenesserver/SceneServer1.h	/^  static const int _ids[];$/;"	m	class:SoulStone
_ids	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SoulStone
_index	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
_index	SceneServer/libscenesserver/duplicateManager.h	/^	  unsigned int _index;\/\/”√ªßµ±«∞‘⁄ƒƒ,0 ¿ΩÁµÿÕº,>0,∏±±æ$/;"	m	struct:userDupMap
_info	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _info;  $/;"	m	class:BulletinAction
_info	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _info;  $/;"	m	class:LogAction
_info	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _info;  $/;"	m	class:Notify1Action
_info	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _info;  $/;"	m	class:NotifyAction
_info	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:BulletinAction
_info	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:LogAction
_info	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:Notify1Action
_info	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:NotifyAction
_instance	SceneServer/libscenesserver/CountryDare.cpp	/^CountryDareM *CountryDareM::_instance = 0;$/;"	m	class:CountryDareM	file:
_instance	SceneServer/libscenesserver/Quest.cpp	/^UserVar* UserVar::_instance = NULL;$/;"	m	class:UserVar	file:
_instance	SceneServer/libscenesserver/QuestTable.cpp	/^EventTable* EventTable::_instance = NULL;$/;"	m	class:EventTable	file:
_instance	SceneServer/libscenesserver/QuestTable.cpp	/^QuestTable* QuestTable::_instance = NULL;$/;"	m	class:QuestTable	file:
_instance	SceneServer/libscenesserver/RebuildObject.cpp	/^RebuildObject* RebuildObject::_instance = NULL;$/;"	m	class:RebuildObject	file:
_instance	SceneServer/libscenesserver/SceneServer1.h	/^  static RebuildObject* _instance;$/;"	m	class:RebuildObject
_instance	SceneServer/libscenesserver/SceneServer1.h	/^  static ScriptQuest*   _instance;$/;"	m	class:ScriptQuest
_instance	SceneServer/libscenesserver/SceneServer1.h	/^  static ScriptingSystemLua* _instance;$/;"	m	class:ScriptingSystemLua
_instance	SceneServer/libscenesserver/SceneServer1.h	/^  static self_t* _instance;$/;"	m	class:ProductFactory
_instance	SceneServer/libscenesserver/SceneServer1.h	/^ProductFactory<I,C>* ProductFactory<I,C>::_instance = NULL;$/;"	m	class:ProductFactory
_instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryDareM
_instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::EventManager
_instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::EventTable
_instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::GlobalVarImpl
_instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::QuestTable
_instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::UserVar
_instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:RebuildObject
_instance	SceneServer/libscenesserver/script.cpp	/^ScriptQuest* ScriptQuest::_instance = NULL;$/;"	m	class:ScriptQuest	file:
_instance	SceneServer/libscenesserver/script.cpp	/^ScriptingSystemLua* ScriptingSystemLua::_instance = NULL;$/;"	m	class:ScriptingSystemLua	file:
_instance	SessionServer/libsessionserver/SessionServer.h	/^    static GlobalTempArchiveIndex *_instance;$/;"	m	class:GlobalTempArchiveIndex
_instance	SessionServer/libsessionserver/TempArchive.cpp	/^GlobalTempArchiveIndex *GlobalTempArchiveIndex::_instance = NULL;$/;"	m	class:GlobalTempArchiveIndex	file:
_items	SceneServer/libscenesserver/RebuildObject.cpp	/^const int Decompose::_items[] = {540,548,556,562,576,577,662,663,664,666,667,668,669,\/*670,671,672,673,674,675,676,*\/ \/*removed (TASK 731)*\/677,678,679,681,683,655,685,686,0};$/;"	m	class:Decompose	file:
_items	SceneServer/libscenesserver/SceneServer1.h	/^  const static int _items[];$/;"	m	class:Decompose
_items	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Decompose
_items	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::PrivateStore
_items	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TradeOrder
_kind	SceneServer/libscenesserver/SceneServer1.h	/^  int _kind; $/;"	m	class:BulletinAction
_kind	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:BulletinAction
_kvs	SceneServer/libscenesserver/SceneServer1.h	/^  KV _kvs;  $/;"	m	class:ScenesParser
_kvs	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ScenesParser
_last	GatewayServer/old_back/GatewayServer.h	/^	zRTime _last;$/;"	m	class:CheckInfo
_last	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Mask
_less	SceneServer/libscenesserver/SceneServer1.h	/^  int _less;$/;"	m	class:TimeoutsCondition
_less	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TimeoutsCondition
_level	SceneServer/libscenesserver/MiniClient.cpp	/^    DWORD _level;$/;"	m	struct:Capacity	file:
_level	SceneServer/libscenesserver/MiniClient.cpp	/^    DWORD _level;$/;"	m	struct:DrawCombin	file:
_level	SceneServer/libscenesserver/SceneServer1.h	/^  int _level;$/;"	m	class:DropItemAction
_level	SceneServer/libscenesserver/SceneServer1.h	/^  int _level;$/;"	m	class:ItemCondition
_level	SceneServer/libscenesserver/SceneServer1.h	/^  int _level;$/;"	m	class:UseSkillAction
_level	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _level;$/;"	m	class:ActionPointCondition
_level	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _level;$/;"	m	class:FamilyLevelAction
_level	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _level;$/;"	m	class:FamilyLevelCondition
_level	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _level;$/;"	m	class:FiveLevelAction
_level	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _level;$/;"	m	class:FiveLevelCondition
_level	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _level;$/;"	m	class:ReputeCondition
_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ActionPointCondition
_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:FamilyLevelCondition
_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:FiveLevelCondition
_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ItemCondition
_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ReputeCondition
_levelObj	SceneServer/libscenesserver/giftBox.h	/^	struct _levelObj$/;"	s	struct:boxItem
_list	SceneServer/libscenesserver/SceneServer1.h	/^  LIST _list;$/;"	m	class:ProductFactory
_log_timer	base/CmdAnalysis.h	/^	Timer _log_timer;$/;"	m	struct:CmdAnalysis
_long	base/include/zTime.h	/^	int _long;$/;"	m	class:RandTimer
_long	base/include/zTime.h	/^	int _long;$/;"	m	class:Timer
_ltpos	SceneServer/libscenesserver/SceneServer1.h	/^    const zPos& _ltpos;$/;"	m	class:RemoveNpcAction::RemoveNpc
_ltpos	SceneServer/libscenesserver/SceneServer1.h	/^  zPos _ltpos;$/;"	m	class:NpcAction
_make	SceneServer/libscenesserver/SceneServer1.h	/^    bool _make;$/;"	m	class:EquipMaker
_make	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_male	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _male;$/;"	m	class:TeamedCondition
_male	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TeamedCondition
_map	SceneServer/libscenesserver/SceneServer1.h	/^    std::string _map;$/;"	m	class:AddGuardAction
_map	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _map;$/;"	m	class:GuardNpc
_map	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GuardNpc
_map	SceneServer/libscenesserver/meterialsManager.h	/^	std::map<DWORD,char*> _map;$/;"	m	class:meterialsManager
_map_ghost	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_map_ghost	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestNpcAndSend	file:
_map_npc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_map_npc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestNpcAndSend	file:
_map_pet	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_map_pet	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestNpcAndSend	file:
_map_shopAdv	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_map_user	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_map_user	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestUserAndSend	file:
_mask	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Mask
_maxSize	base/src/x_buffer.h	/^	uint32_t _maxSize;$/;"	m	class:ByteBuffer
_me	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TradeOrder
_menu	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _menu;  $/;"	m	class:MainMenuAction
_menu	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _menu;  $/;"	m	class:MenuAction
_menu	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _menu;  $/;"	m	class:SubMenuAction
_menu	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:MainMenuAction
_menu	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:MenuAction
_menu	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::QuestList
_menu	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:SubMenuAction
_money	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::PrivateStore::SellInfo
_money	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TradeOrder
_mount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Horse
_msecs	base/include/zTime.h	/^	Quint16_t _msecs;$/;"	m	class:zRTime
_mutex	base/CmdAnalysis.h	/^	zMutex _mutex;$/;"	m	struct:CmdAnalysis
_name	GatewayServer/old_back/ScreenIndex.cpp	/^  char _name[MAX_NAMESIZE];$/;"	m	struct:SendNineExec	file:
_name	GatewayServer/old_back/ScreenIndex.cpp	/^  char _name[MAX_NAMESIZE];$/;"	m	struct:SendNineExecExceptMe	file:
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:ExpAction
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:GlobalAction
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:GlobalCondition
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:GotoAction
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:GuardNpc
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:MapCountryCondition
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:RefreshAction
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:UserVarAction
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:UserVarCondition
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:VarAction
_name	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name;$/;"	m	class:VarCondition
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:ExpAction
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:GlobalCondition
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:MapCountryCondition
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GuardNpc
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:RefreshAction
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:UserVarAction
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:UserVarCondition
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarAction
_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarCondition
_name1	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name1;$/;"	m	class:VarsAction
_name1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarsAction
_name2	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _name2;$/;"	m	class:VarsAction
_name2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarsAction
_need	SceneServer/libscenesserver/SceneServer1.h	/^    int _need;$/;"	m	class:EquipMaker
_need	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _need;$/;"	m	class:FiveTypeCondition
_need	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _need;$/;"	m	class:IsGuardCondition
_need	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_need	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:FiveTypeCondition
_need	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:IsGuardCondition
_notDare	SessionServer/libsessionserver/SessionServer.h	/^    bool _notDare;$/;"	m	class:CNpcDareM
_notifyDareMessage	SessionServer/libsessionserver/SessionServer.h	/^    bool _notifyDareMessage;$/;"	m	class:CNpcDareM
_now	base/include/zTime.h	/^	Quint16_t _now()$/;"	f	class:zRTime
_npc_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Event
_npc_vec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetEnvryOneAndSend	file:
_npc_vec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetRequestNpcAndSend	file:
_npc_vec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
_npc_vec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestNpcAndSend	file:
_num	SceneServer/libscenesserver/MiniClient.cpp	/^    DWORD &_num;$/;"	m	struct:DrawCombin	file:
_num	SceneServer/libscenesserver/MiniClient.cpp	/^    DWORD _num;$/;"	m	struct:Capacity	file:
_num	SceneServer/libscenesserver/SceneServer1.h	/^  int _num;$/;"	m	class:NpcAction
_num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Combination
_number	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _number;  $/;"	m	class:TeamedCondition
_number	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TeamedCondition
_ob	SceneServer/libscenesserver/SceneServer1.h	/^  zObject* _ob;$/;"	m	class:Decompose
_ob	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Decompose
_ob	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::PrivateStore::SellInfo
_ob	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ObjectPack
_obj	SceneServer/libscenesserver/giftBox.h	/^		zObjectB *_obj;$/;"	m	struct:boxItem::_levelObj
_objList	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CNpcDareObj*> _objList;$/;"	m	class:CNpcDareM
_odds	SceneServer/libscenesserver/RebuildObject.cpp	/^const int Decompose::_odds[] = $/;"	m	class:Decompose	file:
_odds	SceneServer/libscenesserver/SceneServer1.h	/^    Odds _odds;$/;"	m	class:EquipMaker
_odds	SceneServer/libscenesserver/SceneServer1.h	/^  const static int _odds[];$/;"	m	class:Decompose
_odds	SceneServer/libscenesserver/SceneServer1.h	/^  int _odds;$/;"	m	class:AddBindItemAction
_odds	SceneServer/libscenesserver/SceneServer1.h	/^  int _odds;$/;"	m	class:AddGreenBindItemAction
_odds	SceneServer/libscenesserver/SceneServer1.h	/^  int _odds;$/;"	m	class:AddItemAction
_odds	SceneServer/libscenesserver/SceneServer1.h	/^  int _odds;$/;"	m	class:DropAction
_odds	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:EquipMaker
_odds	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Decompose
_odds1	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD _odds1,_odds2,_odds3;$/;"	m	class:AddGuardAction
_odds2	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD _odds1,_odds2,_odds3;$/;"	m	class:AddGuardAction
_odds3	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD _odds1,_odds2,_odds3;$/;"	m	class:AddGuardAction
_offPtr	base/src/x_buffer.h	/^	uint32_t _offPtr;$/;"	m	class:ByteBuffer
_offset	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::EventTrigger2
_one_min	BillServer/old_back/BillServer.h	/^    Timer _one_min;$/;"	m	class:ConsignHistoryManager
_one_min	BillServer/old_back/BillServer.h	/^    static Timer _one_min;$/;"	m	class:BillTimeTick
_one_min	SceneServer/libscenesserver/SceneBattlefiel.h	/^	Timer _one_min;$/;"	m	class:GangScene
_one_min	SceneServer/libscenesserver/SceneBattlefiel.h	/^	Timer _one_min;$/;"	m	class:SceneArchitecture
_one_min	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneTimeTick
_one_min	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ObjectPack
_one_min	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_one_sec	BillServer/old_back/BillServer.h	/^    static Timer _one_sec;$/;"	m	class:BillTimeTick
_one_sec	SceneServer/libscenesserver/SceneServer1.h	/^  Timer _one_sec;$/;"	m	class:SceneNpc
_one_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
_one_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneTimeTick
_one_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_option_is_end	base/src/getopt.c	/^int _option_is_end(const struct argp_option *opt)$/;"	f
_option_is_short	base/src/getopt.c	/^int _option_is_short (const struct argp_option *opt)$/;"	f
_owner	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Horse
_p	SceneServer/libscenesserver/SceneServer1.h	/^      ScenesParser _p;$/;"	m	class:MakeFunction::Compare
_p	SceneServer/libscenesserver/SceneServer1.h	/^      ScenesParser _p;$/;"	m	class:MakeFunction::Update
_p	SceneServer/libscenesserver/SceneServer1.h	/^    ScenesParser _p;$/;"	m	class:MakeFunction::Prop
_p	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DropFromPack
_p1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zObject
_p1	base/include/srvEngine.h	/^		luckRangeValue _p1[5];$/;"	m	union:zColorObjectB::__anon128
_p2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zObject
_p2	base/include/srvEngine.h	/^		luckRangeValue _p2[18];$/;"	m	union:zColorObjectB::__anon130
_packets	GatewayServer/old_back/GatewayServer.h	/^	int _packets;$/;"	m	class:CheckInfo
_passivenessElement	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SkillStatusManager
_path	SceneServer/libscenesserver/SceneServer1.h	/^    std::string _path;$/;"	m	class:AddGuardAction
_pos	SceneServer/libscenesserver/Scene.cpp	/^  const zPos &_pos;    \/\/\/ÊñΩÊ≥ïËÄÖ‰∏≠ÂøÉÂùêÊ†á$/;"	m	struct:findPosInNine	file:
_pos	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _pos;$/;"	m	class:GotoAction
_pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DropFromPack
_pos1	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _pos1;$/;"	m	class:GotoAction
_pos2	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _pos2;$/;"	m	class:GotoAction
_pos3	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _pos3;$/;"	m	class:GotoAction
_pos4	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _pos4;$/;"	m	class:GotoAction
_poses	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
_poses	SceneServer/libscenesserver/zObject.cpp	/^const int EquipPack::_poses[] = {   -1,  1,  2,  3,  4,  5,  6,  7,  8,  9,$/;"	m	class:EquipPack	file:
_previous	GatewayServer/old_back/GatewayServer.h	/^	zRTime _previous;$/;"	m	class:CheckInfo
_ps	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ClearPack
_ps	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DropFromPack
_qualitys	SceneServer/libscenesserver/giftBox.h	/^	std::vector<struct qualitys> _qualitys;$/;"	m	struct:giftBox
_quest_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::EventTrigger2
_quest_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Vars
_quests	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Event
_quests	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::QuestList
_quests	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::QuestTable
_queue	base/src/x_tcptaskpool.cpp	/^	std::vector<shared_ptr<x_tcptask> > _queue;$/;"	m	class:zTCPTaskQueue	file:
_queue	base/src/zTCPClientTaskPool.cpp	/^	std::queue<x_tcp_clientTask *> _queue;$/;"	m	class:x_tcp_clientTaskQueue	file:
_range	SceneServer/libscenesserver/Scene.cpp	/^  zPosVector &_range;  \/\/\/ÂùêÊ†áÁÇπÂàóË°®$/;"	m	struct:findPosInNine	file:
_rbpos	SceneServer/libscenesserver/SceneServer1.h	/^    const zPos& _rbpos;$/;"	m	class:RemoveNpcAction::RemoveNpc
_rbpos	SceneServer/libscenesserver/SceneServer1.h	/^  zPos _rbpos;$/;"	m	class:NpcAction
_rcv_queue	base/include/x_socket.h	/^	t_BufferCmdQueue _rcv_queue;        \/**< Êé•Êî∂ÁºìÂÜ≤Êåá‰ª§ÈòüÂàó *\/$/;"	m	class:x_socket
_rcv_raw_size	base/include/x_socket.h	/^	uint32_t _rcv_raw_size;          \/**< Êé•Êî∂ÁºìÂÜ≤Ëß£ÂØÜÊï∞ÊçÆÂ§ßÂ∞è *\/$/;"	m	class:x_socket
_recoveryElement	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SkillStatusManager
_recycleList	SceneServer/libscenesserver/duplicateManager.h	/^	recycleList _recycleList;\/\/µ»¥˝«Â¿Ìµƒ∏±±æ¡–±Ì$/;"	m	class:duplicateManager
_remove	SceneServer/libscenesserver/SceneServer1.h	/^  RemoveNpc _remove;$/;"	m	class:RemoveNpcAction
_remove_list	SceneServer/libscenesserver/SessionClient.cpp	/^	std::vector<SceneUser*> _remove_list;$/;"	m	struct:ClearAllNotUnion	file:
_retset_gametime	GatewayServer/old_back/GatewayServer.h	/^	Timer _retset_gametime;$/;"	m	class:GatewayTask
_rlen	SceneServer/libscenesserver/SceneServer1.h	/^  std::string _rlen;$/;"	m	class:GotoAction
_s	SceneServer/libscenesserver/SceneServer1.h	/^    Scene* _s;$/;"	m	class:RemoveNpcAction::RemoveNpc
_s	SceneServer/libscenesserver/SceneServer1.h	/^  Scene* _s;$/;"	m	class:NpcAction
_scene	SceneServer/libscenesserver/SceneManager.cpp	/^  Scene *_scene;$/;"	m	struct:EveryMapExec	file:
_script	SceneServer/libscenesserver/SceneServer1.h	/^    int _script;$/;"	m	class:AddGuardAction
_sendLen	GatewayServer/old_back/ScreenIndex.cpp	/^  int _sendLen;$/;"	m	struct:SendNineExec	file:
_sendLen	GatewayServer/old_back/ScreenIndex.cpp	/^  int _sendLen;$/;"	m	struct:SendNineExecExceptMe	file:
_size	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _size;    $/;"	m	class:SpaceCondition
_size	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Package
_size	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:SpaceCondition
_size	base/src/x_tcptaskpool.cpp	/^	uint32_t _size;$/;"	m	class:zTCPTaskQueue	file:
_size	base/src/zTCPClientTaskPool.cpp	/^	uint32_t _size;$/;"	m	class:x_tcp_clientTaskQueue	file:
_skillStatus	SceneServer/libscenesserver/Skill.cpp	/^  const SkillStatus *_skillStatus;$/;"	m	struct:SendStatusToTeamExec	file:
_snd_queue	base/include/x_socket.h	/^	t_BufferCmdQueue _snd_queue;        \/**< Âä†ÂØÜÁºìÂÜ≤Êåá‰ª§ÈòüÂàó *\/$/;"	m	class:x_socket
_sortKey	SessionServer/libsessionserver/SessionServer.h	/^    std::multimap<QWORD,DWORD,ltqword> _sortKey;$/;"	m	class:CSortM
_sortMap	SessionServer/libsessionserver/SessionServer.h	/^    std::map<DWORD,QWORD> _sortMap;$/;"	m	class:CSortM
_space	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Package
_sq	SceneServer/libscenesserver/SceneServer1.h	/^  hash_set<int> _sq;$/;"	m	class:ScriptQuest
_start	SceneServer/libscenesserver/SceneServer1.h	/^  struct tm _start;$/;"	m	class:TimerCondition	typeref:struct:TimerCondition::tm
_start	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TimerCondition	typeref:struct:TimerCondition::tm
_start_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Vars
_state	SceneServer/libscenesserver/SceneServer1.h	/^  int _state;$/;"	m	class:ClearStateAction
_state	SceneServer/libscenesserver/SceneServer1.h	/^  int _state;$/;"	m	class:SetStateAction
_status	SceneServer/libscenesserver/SceneServer1.h	/^  int _status;$/;"	m	class:GuardNpc
_status	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GuardNpc
_step	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::PrivateStore
_subs	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::QuestList
_swap	SceneServer/libscenesserver/boxCircle.cpp	/^void _swap(unsigned short &a,unsigned short &b)$/;"	f
_switch	base/CmdAnalysis.h	/^	bool _switch;\/\/ÂºÄÂÖ≥$/;"	m	struct:CmdAnalysis
_target	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TradeOrder
_targetid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TradeOrder
_tasklist	SceneServer/libscenesserver/scriptTickTask.h	/^	std::map<QWORD,scriptTask*> _tasklist;$/;"	m	class:scriptTaskManagement
_team	SceneServer/libscenesserver/SceneServer1.h	/^  int _team;$/;"	m	class:TeamAction
_team	SceneServer/libscenesserver/SceneServer1.h	/^  int _team;$/;"	m	class:TeamCondition
_team	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TeamAction
_team	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TeamCondition
_ten_min	base/include/srvEngine.h	/^	Timer _ten_min;$/;"	m	class:x_tcp_clientTask
_ten_sec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_tick_timer	base/src/x_tcptask.h	/^	boost::timer _tick_timer;$/;"	m	class:x_tcptask
_time	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _time;    $/;"	m	class:TimeoutsCondition
_time	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime _time;  $/;"	m	class:GuardNpc
_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GuardNpc
_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:TimeoutsCondition
_timeout	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Vars
_timer	base/include/zTime.h	/^	zRTime _timer;$/;"	m	class:RandTimer
_timer	base/include/zTime.h	/^	zRTime _timer;$/;"	m	class:Timer
_title	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Quest
_tmp	SceneServer/libscenesserver/SceneServer1.h	/^  int _tmp;$/;"	m	class:GlobalAction
_tmp	SceneServer/libscenesserver/SceneServer1.h	/^  int _tmp;$/;"	m	class:UserVarAction
_tmp	SceneServer/libscenesserver/SceneServer1.h	/^  int _tmp;$/;"	m	class:VarAction
_tmp	SceneServer/libscenesserver/SceneServer1.h	/^  int _tmp;$/;"	m	class:VarsAction
_tmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Vars::VAR
_tmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:UserVarAction
_tmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarAction
_tmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:VarsAction
_type	GatewayServer/old_back/ScreenIndex.cpp	/^  DWORD _type;$/;"	m	struct:SendNineExec	file:
_type	GatewayServer/old_back/ScreenIndex.cpp	/^  DWORD _type;$/;"	m	struct:SendNineExecExceptMe	file:
_type	SceneServer/libscenesserver/SceneServer1.h	/^  int _type;$/;"	m	class:FiveTypeAction
_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Package
_update	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Vars
_user	SceneServer/libscenesserver/MiniClient.cpp	/^    SceneUser* _user;$/;"	m	struct:Capacity	file:
_user	SceneServer/libscenesserver/MiniClient.cpp	/^    SceneUser* _user;$/;"	m	struct:DrawCombin	file:
_user	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Mask
_user	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::RepairEquip
_user	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::RepairEquipUseGold
_user	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Combination
_user	SceneServer/libscenesserver/Skill.cpp	/^  SceneUser * _user;$/;"	m	struct:SendStatusToTeamExec	file:
_userDupMaps	SceneServer/libscenesserver/duplicateManager.h	/^	userDupMaps _userDupMaps;$/;"	m	class:duplicateManager
_userScriptTaskContainer	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_valid	tmp/MiniServer/MiniServer.h	/^    bool _valid;$/;"	m	class:CardPattern
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:AddBindItemAction
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:AddGreenBindItemAction
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:AddItemAction
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:CaptionCondition
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:CountryPowerCondition
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:DropAction
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:HonorCondition
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:MaxHonorCondition
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:RemoveItemAction
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:SelfCountryCondition
_value	SceneServer/libscenesserver/SceneServer1.h	/^  int _value;$/;"	m	class:WeekCondition
_value	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _value;$/;"	m	class:GoldAction
_value	SceneServer/libscenesserver/SceneServer1.h	/^  value_type _value;$/;"	m	class:ScoreAction
_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:CaptionCondition
_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:CountryPowerCondition
_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:HonorCondition
_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:MaxHonorCondition
_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Vars::VAR
_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:SelfCountryCondition
_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:WeekCondition
_vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::GlobalVarImpl
_vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::UserVar
_vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::UserVar::VAR
_vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Vars
_width	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Package
_writeback_timer	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
_x	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::PrivateStore::SellInfo
_y	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::PrivateStore::SellInfo
a	base/charbase.h	/^	int a;$/;"	m	struct:CharBase
aTypeS	base/include/srvEngine.h	/^	aTypeS()$/;"	f	struct:aTypeS
aTypeS	base/include/srvEngine.h	/^struct aTypeS{$/;"	s
abandon	SceneServer/libscenesserver/Quest.cpp	/^int Quest::abandon(SceneUser& user,DWORD id)$/;"	f	class:Quest
abandon	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::abandon(SceneUser& user,DWORD id,bool force,bool destroy)$/;"	f	class:QuestList
abandonCity	SessionServer/libsessionserver/CityManager.cpp	/^bool CCity::abandonCity()$/;"	f	class:CCity
abandon_npc	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::abandon_npc()$/;"	f	class:CNpcDareObj
accPriv	base/include/csCommon.h	/^/;"	m	struct:CharBase
accSafe	base/flcmd.h	/^		BYTE accSafe;$/;"	m	struct:Cmd::t_NewLoginSession
accelData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
accept	base/src/x_tcpserver.cpp	/^int x_tcpserver::accept(struct sockaddr_in *addr)$/;"	f	class:x_tcpserver
accept	base/src/zMTCPServer.cpp	/^int zMTCPServer::accept(Sock2Port &res)$/;"	f	class:zMTCPServer
accepted	tmp/base3/reply.cpp	/^const char accepted[] =$/;"	m	namespace:http::server2::stock_replies	file:
accepted	tmp/base3/reply.cpp	/^const std::string accepted =$/;"	m	namespace:http::server2::status_strings	file:
accepted	tmp/base3/reply.hpp	/^    accepted = 202,$/;"	e	enum:http::server2::reply::status_type
acceptor_	base/server.h	/^		boost::asio::ip::tcp::acceptor acceptor_;$/;"	m	class:server
acceptor_	tmp/base3/server.hpp	/^  boost::asio::ip::tcp::acceptor acceptor_;$/;"	m	class:server
acceptor_	tmp/base3/x_tcp_server.cpp	/^		tcp::acceptor acceptor_;$/;"	m	class:chat_server	file:
acceptor_	tmp/base3/x_tcp_server.h	/^		tcp::acceptor acceptor_;$/;"	m	class:x_tcp_server
accessory	SessionServer/libsessionserver/SessionServer.h	/^  BYTE accessory;$/;"	m	struct:mailContentInfo
accessory	SessionServer/libsessionserver/SessionServer.h	/^  BYTE accessory;$/;"	m	struct:mailHeadInfo
accessory	SessionServer/libsessionserver/SessionServer.h	/^  BYTE accessory;$/;"	m	struct:mailTurnBackInfo
accid	BillServer/old_back/BillServer.h	/^  DWORD  accid;      \/\/\/ ’ ∫≈±‡∫≈$/;"	m	struct:BillSession
accid	BillServer/old_back/BillServer.h	/^  DWORD accid;          \/**< ’À∫≈±‡∫≈ *\/$/;"	m	struct:BillInfo
accid	BillServer/old_back/BillServer.h	/^  DWORD accid;$/;"	m	struct:ConsignTrait
accid	GatewayServer/old_back/GatewayServer.h	/^	DWORD accid;$/;"	m	class:GateSelectUserSession
accid	GatewayServer/old_back/GatewayServer.h	/^	DWORD accid;$/;"	m	class:GatewayTask
accid	RecordServer/RecordUser.h	/^	uint32_t accid;$/;"	m	class:RecordUser
accid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
accid	SessionServer/libsessionserver/SessionServer.h	/^    DWORD accid;$/;"	m	class:UserSession
accid	SuperServer/RoleregCache.cpp	/^	DWORD accid;  \/\/’ ∫≈±‡∫≈$/;"	m	struct:RoleData	file:
accid	SuperServer/RoleregCache.h	/^      DWORD accid;        \/**< ’À∫≈±‡∫≈ *\/$/;"	m	struct:RoleregCache::Data
accid	base/flcmd.h	/^			DWORD accid;$/;"	m	struct:Cmd::FL::t_idinuse_Session
accid	base/flcmd.h	/^		DWORD accid;$/;"	m	struct:Cmd::t_NewLoginSession
accid	base/include/csCommon.h	/^/;"	m	struct:CharBase
accid	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUser_SceneSession
accid	base/recordcmd.h	/^			DWORD accid;$/;"	m	struct:Cmd::Record::t_ReadUser_SceneRecord
accid	base/recordcmd.h	/^			DWORD accid;$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
accid	base/supercmd.h	/^			DWORD accid;$/;"	m	struct:Cmd::Super::t_idinuse_Bill
account	BillServer/BillUser.h	/^    char account[Cmd::UserServer::ID_MAX_LENGTH+1];$/;"	m	class:BillUser
account	BillServer/old_back/BillServer.h	/^    char account[Cmd::UserServer::ID_MAX_LENGTH+1];$/;"	m	class:BillUser
account	BillServer/old_back/BillServer.h	/^  char   account[Cmd::UserServer::ID_MAX_LENGTH+1];     \/\/\/ ’ ∫≈(–Ë“™∑¢ÀÕ∏¯º«∑—∑˛ŒÒ∆˜)$/;"	m	struct:BillSession
account	GatewayServer/old_back/GatewayServer.h	/^	char account[MAX_ACCNAMESIZE+1];$/;"	m	class:GatewayTask
account	base/flcmd.h	/^		char account[MAX_ACCNAMESIZE];$/;"	m	struct:Cmd::t_NewLoginSession
accountClient	GatewayServer/old_back/BillClient.cpp	/^BillClient *accountClient = NULL;$/;"	v
accountVerified	GatewayServer/old_back/GatewayServer.h	/^	}accountVerified;$/;"	m	class:GatewayTask	typeref:enum:GatewayTask::__anon213
accountVerifyOK	GatewayServer/old_back/GatewayServer.h	/^	void accountVerifyOK(const bool ok)$/;"	f	class:GatewayTask
accountVerifyOK	GatewayServer/old_back/GatewayTaskManager.cpp	/^void GatewayTaskManager::accountVerifyOK(const DWORD accid,const bool ok)$/;"	f	class:GatewayTaskManager
act	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_privateChat_SceneSession
actID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
actInfo	SessionServer/libsessionserver/SessionServer.h	/^struct actInfo$/;"	s
actList	SessionServer/libsessionserver/Gift.cpp	/^std::vector<actInfo> Gift::actList;$/;"	m	class:Gift	file:
actList	SessionServer/libsessionserver/SessionServer.h	/^    static std::vector<actInfo> actList;$/;"	m	class:Gift
actPos	SceneServer/libscenesserver/SceneServer1.h	/^  zPos actPos;$/;"	m	class:NpcAIController
actRegionX	SceneServer/libscenesserver/SceneServer1.h	/^  int actRegionX,actRegionY;$/;"	m	class:NpcAIController
actRegionY	SceneServer/libscenesserver/SceneServer1.h	/^  int actRegionX,actRegionY;$/;"	m	class:NpcAIController
act_define	SessionServer/libsessionserver/Gift.cpp	/^const dbCol act_define[] = {$/;"	v
action	BillServer/old_back/BillClient.cpp	/^bool BillClient::action(BillData *bd)$/;"	f	class:BillClient
action	BillServer/old_back/BillClientManager.cpp	/^bool BillClientManager::action(BillData *bd)$/;"	f	class:BillClientManager
action	BillServer/old_back/BillServer.cpp	/^bool action(const BillData *bd)$/;"	f
action	BillServer/old_back/BillServer.h	/^    bool (*action)(const BillData *bd);$/;"	m	struct:BillCallback
action	SceneServer/libscenesserver/SceneServer1.h	/^      WORD  action;        \/\/\/∂Ø◊˜¿‡–Õ$/;"	m	struct:NpcTrade::NpcItem
action	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:sendAllObjectListToUser	file:
action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::DamagCallback
action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::phaseDefine
action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcItem
action	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::action(const Cmd::stAttackMagicUserCmd *rev,const DWORD cmdLen)$/;"	f	class:zSkill
action	base/include/csCommon.h	/^/;"	m	struct:Cmd::stAddMapObjectMapScreenUserCmd
actionTimer	BillServer/old_back/BillServer.h	/^    zTime actionTimer;$/;"	m	class:BillClientManager
actionTimer	GatewayServer/old_back/GatewayServer.h	/^	zTime actionTimer;$/;"	m	class:SceneClientManager
actionTimer	SuperServer/FLClientManager.h	/^    zTime actionTimer;$/;"	m	class:FLClientManager
actionTimer	SuperServer/InfoClientManager.h	/^    zTime actionTimer;$/;"	m	class:InfoClientManager
actionTimer	SuperServer/RoleregCache.h	/^    zTime actionTimer;$/;"	m	class:RoleregCache
actionbase	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
active	SceneServer/libscenesserver/QuestEvent.cpp	/^bool Event::Embranchment::active() const$/;"	f	class:Event::Embranchment
active	SceneServer/libscenesserver/QuestEvent.cpp	/^void Event::Embranchment::active(bool flag)$/;"	f	class:Event::Embranchment
active	SceneServer/libscenesserver/SceneServer1.h	/^  bool active;$/;"	m	class:NpcAIController
activeDare_sceneSession	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
active_time	SessionServer/libsessionserver/SessionServer.h	/^    DWORD active_time;$/;"	m	class:CDare
active_time	SessionServer/libsessionserver/SessionServer.h	/^    DWORD active_time;$/;"	m	class:CQuiz
active_time	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createDare_SceneSession
active_time	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createQuiz_SceneSession
add	BillServer/old_back/BillCache.cpp	/^BillData *BillCache::add(BillData *bd,const char *gameZone_str)$/;"	f	class:BillCache
add	BillServer/old_back/BillClientManager.cpp	/^void BillClientManager::add(BillClient *billClient)$/;"	f	class:BillClientManager
add	BillServer/old_back/BillSessionManager.cpp	/^bool BillSessionManager::add(BillSession &bs)$/;"	f	class:BillSessionManager
add	FLServer/LoginManager.cpp	/^bool LoginManager::add(shared_ptr<LoginTask> task) {$/;"	f	class:LoginManager
add	FLServer/ServerACL.cpp	/^bool ServerACL::add(const ACLZone &zone)$/;"	f	class:ServerACL
add	GatewayServer/old_back/GatewayServer.h	/^	void add(I cmd)$/;"	f	class:CmdChecker
add	GatewayServer/old_back/SceneClientManager.cpp	/^void SceneClientManager::add(SceneClient *sceneClient)$/;"	f	class:SceneClientManager
add	RecordServer/RecordUserManager.cpp	/^bool RecordUserM::add(shared_ptr<RecordUser> u){$/;"	f	class:RecordUserM
add	SceneServer/libscenesserver/Leechdom.cpp	/^void Leechdom::add(LeechdomType type,WORD value,WORD times)$/;"	f	class:Leechdom
add	SceneServer/libscenesserver/Quest.cpp	/^Vars* UserVar::add(DWORD id,QWORD key)$/;"	f	class:UserVar
add	SceneServer/libscenesserver/QuestEvent.cpp	/^void Event::Embranchment::add(Action* action)$/;"	f	class:Event::Embranchment
add	SceneServer/libscenesserver/QuestEvent.cpp	/^void Event::Embranchment::add(Condition* condition)$/;"	f	class:Event::Embranchment
add	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills
add	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
add	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::UserVar::VAR
add	SceneServer/libscenesserver/Trade.cpp	/^void PrivateStore::add(zObject* ob,DWORD money,BYTE x,BYTE y)$/;"	f	class:PrivateStore
add	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::add(zObject* ob)$/;"	f	class:TradeOrder
add	SceneServer/libscenesserver/script.cpp	/^void ScriptQuest::add(int type,int id)$/;"	f	class:ScriptQuest
add	SceneServer/libscenesserver/scriptTickTask.h	/^		static void add(BYTE cmd,BYTE para,const char *func)$/;"	f	class:scriptMessageFilter
add	SceneServer/libscenesserver/scriptTickTask.h	/^	bool add(taskType _type,scriptTask *_task)$/;"	f	class:userScriptTaskContainer
add	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::add(zObject *object,bool find)$/;"	f	class:EquipPack
add	SceneServer/libscenesserver/zObject.cpp	/^bool MainPack::add(zObject *object,bool find)$/;"	f	class:MainPack
add	SceneServer/libscenesserver/zObject.cpp	/^bool Package::add(zObject* object,bool find)$/;"	f	class:Package
add	SessionServer/libsessionserver/EmperorForbid.cpp	/^bool EmperorForbid::add(DWORD id)$/;"	f	class:EmperorForbid
add	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::add(UserSession *pUser)$/;"	f	class:SessionChannel
add	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannelManager::add(SessionChannel *ch)$/;"	f	class:SessionChannelManager
add	SuperServer/FLClientManager.cpp	/^void FLClientManager::add(FLClient *flClient)$/;"	f	class:FLClientManager
add	SuperServer/InfoClientManager.cpp	/^void InfoClientManager::add(InfoClient *infoClient)$/;"	f	class:InfoClientManager
add	SuperServer/RoleregCache.cpp	/^	bool add(const RoleData &data)$/;"	f	class:RoleDataContainer
add	SuperServer/RoleregCache.cpp	/^void RoleregCache::add(const Cmd::Super::t_Charname_Gateway &cmd)$/;"	f	class:RoleregCache
add	base/CmdAnalysis.h	/^	void add(const BYTE &cmd,const BYTE &para,const uint32_t &size)$/;"	f	struct:CmdAnalysis
add	base/src/x_tcptaskpool.cpp	/^	inline void add(shared_ptr<x_tcptask> task)$/;"	f	class:zTCPTaskQueue
add	base/src/zTCPClientTaskPool.cpp	/^	inline void add(x_tcp_clientTask *task)$/;"	f	class:x_tcp_clientTaskQueue
add	tmp/MiniServer/MiniServer.h	/^    BYTE add;\/\/”–º∏’≈∏Ω¥¯≈∆(3À≥)$/;"	m	class:CardPattern
addBadRelation	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::addBadRelation(const char *name)$/;"	f	class:CRelationManager
addBadSkillStatusPersistTime	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
addBadSkillStatusPersistTimePercent	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
addBlackList	GatewayServer/old_back/GateUser.cpp	/^void GateUser::addBlackList(const char *name)$/;"	f	class:GateUser
addBoxItem	SceneServer/libscenesserver/globalBox.cpp	/^void globalBox::addBoxItem(boxItem _boxItem)$/;"	f	class:globalBox
addCaptain	SessionServer/libsessionserver/Army.cpp	/^bool CArmyM::addCaptain(DWORD dwUserID,CCaptain* pCaptain)$/;"	f	class:CArmyM
addCheckwait	base/src/zTCPClientTaskPool.cpp	/^void x_tcp_clientTaskPool::addCheckwait(x_tcp_clientTask *task)$/;"	f	class:x_tcp_clientTaskPool
addCountryTech	SceneServer/libscenesserver/CountryTech.cpp	/^void CountryTechM::addCountryTech(DWORD dwCountryID)$/;"	f	class:CountryTechM
addCountryUser	GatewayServer/old_back/GateUserManager.cpp	/^bool GateUserManager::addCountryUser(GateUser *user)$/;"	f	class:GateUserManager
addDBMoney	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::addDBMoney(DWORD userID,DWORD num)$/;"	f	class:MiniTask
addDareList	SessionServer/libsessionserver/CityManager.cpp	/^bool CCity::addDareList(DWORD dwUnionID)$/;"	f	class:CCity
addDelay	base/include/zTime.h	/^	void addDelay(int delay)$/;"	f	class:zRTime
addEnemyRelation	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::addEnemyRelation(const char *name)$/;"	f	class:CRelationManager
addEntry	base/include/srvEngine.h	/^	inline bool addEntry(zEntry * e)$/;"	f	class:zEntryManager
addExp	SceneServer/libscenesserver/CartoonPet.cpp	/^bool CartoonPet::addExp(DWORD num)$/;"	f	class:CartoonPet
addExp	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::addExp(DWORD num)$/;"	f	class:ScenePet
addExp	SceneServer/libscenesserver/script_func.cpp	/^bool addExp(SceneUser *pUser,const char *para)$/;"	f
addFieldMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
addFirstID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareCountry
addFirstID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
addFirstID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
addFirstID	SessionServer/libsessionserver/DareEmperor.cpp	/^void CDareEmperor::addFirstID(DWORD dwID)$/;"	f	class:CDareEmperor
addFirstID	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::addFirstID(DWORD dwID)$/;"	f	class:CDareSept
addFirstID	SessionServer/libsessionserver/SessionServer.h	/^    virtual void addFirstID(DWORD dwID){CDareSept::addFirstID(dwID);}$/;"	f	class:CDareSeptNpc
addFirstID	SessionServer/libsessionserver/SessionServer.h	/^    virtual void addFirstID(DWORD dwID){CDareUnion::addFirstID(dwID);}$/;"	f	class:CDareUnionCity
addGeneralExp	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::addGeneralExp(DWORD num)$/;"	f	class:CCountry
addGold	BillServer/BillUser.cpp	/^bool BillUser::addGold(DWORD num,const char *disc,bool transfer,bool tax)$/;"	f	class:BillUser
addGold	BillServer/old_back/StockConsign.cpp	/^bool Consign::addGold(DWORD accid,DWORD num)$/;"	f	class:Consign
addGold	SceneServer/libscenesserver/zObject.cpp	/^void Packages::addGold(DWORD num,const char *disc,const char *note,bool notify,bool pack)$/;"	f	class:Packages
addGrade	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
addGrade	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
addGrade	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::addGrade(UserSession* pAtt,UserSession* pDef)$/;"	f	class:CDareSept
addGrade	SessionServer/libsessionserver/SessionServer.h	/^    virtual void addGrade(UserSession* pAtt,UserSession* pDef){};$/;"	f	class:CDareCountry
addGrade	SessionServer/libsessionserver/SessionServer.h	/^    virtual void addGrade(UserSession* pAtt,UserSession* pDef){};$/;"	f	class:CDareSeptNpc
addGrade	SessionServer/libsessionserver/SessionServer.h	/^    virtual void addGrade(UserSession* pAtt,UserSession* pDef){};$/;"	f	class:CDareUnionCity
addGreenObjectNum	SceneServer/libscenesserver/ObjectManager.cpp	/^int UserObjectM::addGreenObjectNum(SceneUser* user,DWORD id,DWORD number,zObject* & orig_ob,Obj_vec& new_obs,BYTE upgrade)$/;"	f	class:UserObjectM
addIncMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
addMain	base/src/zTCPClientTaskPool.cpp	/^bool x_tcp_clientTaskPool::addMain(x_tcp_clientTask *task)$/;"	f	class:x_tcp_clientTaskPool
addMainMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
addMember	SceneServer/libscenesserver/Team.cpp	/^bool Team::addMember(DWORD id,DWORD tempid,const char *pname)$/;"	f	class:Team
addMember	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::addMember(CSchoolMember *member)$/;"	f	class:CSchool
addMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::addMember(UserSession *master, UserSession *prentice)$/;"	f	class:CSchoolM
addMember	SessionServer/libsessionserver/Team.cpp	/^bool GlobalTeamIndex::addMember(const DWORD tempid, const DWORD leaderid,const DWORD userid)$/;"	f	class:GlobalTeamIndex
addMember	SessionServer/libsessionserver/Team.cpp	/^bool Team::addMember(const DWORD userid)$/;"	f	class:Team
addMemberByID	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::addMemberByID(SceneUser *pUser,DWORD id)$/;"	f	class:TeamManager
addMemberByTempID	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::addMemberByTempID(SceneUser *pUser,DWORD tempid)$/;"	f	class:TeamManager
addMemberIndex	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::addMemberIndex(const char *pName,CSchoolMember *pSchoolMember)$/;"	f	class:CSchoolM
addMemberIndex	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::addMemberIndex(const char *pName,CSeptMember *pSeptMember)$/;"	f	class:CSeptM
addMemberToSession	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::addMemberToSession(char * userName)$/;"	f	class:TeamManager
addMoney	BillServer/BillUser.cpp	/^bool BillUser::addMoney(DWORD num,const char *disc,bool transfer,bool tax)$/;"	f	class:BillUser
addMoney	BillServer/old_back/StockConsign.cpp	/^bool Consign::addMoney(DWORD accid,DWORD num)$/;"	f	class:Consign
addMoney	SceneServer/libscenesserver/zObject.cpp	/^void Packages::addMoney(DWORD num,const char *disc,const char *note,bool notify)$/;"	f	class:Packages
addMoney	tmp/MiniServer/MiniUser.cpp	/^bool MiniUser::addMoney(int num)$/;"	f	class:MiniUser
addNPC	SceneServer/libscenesserver/duplicateManager.cpp	/^bool duplicateManager::addNPC(SceneNpc *npc)$/;"	f	class:duplicateManager
addNewAlly	SessionServer/libsessionserver/Ally.cpp	/^bool   CAllyM::addNewAlly(DWORD dwCountryID1,DWORD dwCountryID2)$/;"	f	class:CAllyM
addNewCity	SessionServer/libsessionserver/CityManager.cpp	/^bool CCityM::addNewCity(Cmd::Session::t_UnionCity_Dare_SceneSession* pCmd)$/;"	f	class:CCityM
addNewCountry	SessionServer/libsessionserver/CountryManager.cpp	/^CCountry* CCountryM::addNewCountry(DWORD country)$/;"	f	class:CCountryM
addNewDareRecord	SessionServer/libsessionserver/DareRecordManager.cpp	/^bool CDareRecordM::addNewDareRecord(DWORD dwAttCountry,DWORD dwDefCountry,DWORD dwResult)$/;"	f	class:CDareRecordM
addNewGem	SessionServer/libsessionserver/Gem.cpp	/^bool CGemM::addNewGem(DWORD dwCountryID)$/;"	f	class:CGemM
addNewMember	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::addNewMember(Cmd::Session::stMember Member, SceneUser *pUser)$/;"	f	class:TeamManager
addNewMember	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::addNewMember(SceneUser *leader,SceneUser *pUser)$/;"	f	class:TeamManager
addNewMember	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::addNewMember(SceneUser *pUser,Cmd::stAnswerNameTeamUserCmd *rev, Cmd::Session::t_Team_AnswerTeam * rev1)$/;"	f	class:TeamManager
addNewMemberToSept	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::addNewMemberToSept(const DWORD dwSeptID,const stSeptMemberInfo& info)$/;"	f	class:CSeptM
addNewMemberToUnion	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
addNewQuiz_sceneSession	SessionServer/libsessionserver/Quiz.cpp	/^bool CQuizM::addNewQuiz_sceneSession(Cmd::Session::t_createQuiz_SceneSession* pCmd)$/;"	f	class:CQuizM
addNewZonePos	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::addNewZonePos(DWORD x,DWORD y)$/;"	f	class:SceneManager
addNextLevelNode	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::addNextLevelNode(CSchoolMember *member)$/;"	f	class:CSchoolMember
addNineSeptExp	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
addNineSeptNormalExp	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
addNode	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::addNode(const stSchoolMemberInfo &info)$/;"	f	class:CSchool
addObj	SceneServer/libscenesserver/duplicateManager.cpp	/^bool duplicateManager::addObj(zSceneObject *obj)$/;"	f	class:duplicateManager
addObjToPackByThisID	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
addObject	SceneServer/libscenesserver/ObjectManager.cpp	/^bool GlobalObjectIndex::addObject(zObject * o)$/;"	f	class:GlobalObjectIndex
addObject	SceneServer/libscenesserver/ObjectManager.cpp	/^bool UserObjectM::addObject(zObject * o)$/;"	f	class:UserObjectM
addObject	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::addObject(unsigned short dupIndex,zObject *ob,const zPos &pos,const unsigned long overdue_msecs,const unsigned long dwID,int protime)$/;"	f	class:Scene
addObject	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::addObject(unsigned short dupIndex,zObjectB *ob,const int num,const zPos &pos,const unsigned long dwID,DWORD npc_mul, DWORD teamID )$/;"	f	class:Scene
addObject	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::addObject(zObject *srcObj,bool needFind,int packs)$/;"	f	class:Packages
addObjectNum	SceneServer/libscenesserver/ObjectManager.cpp	/^int UserObjectM::addObjectNum(SceneUser* user,DWORD id,DWORD number,zObject* & orig_ob,Obj_vec& new_obs,BYTE upgrade)$/;"	f	class:UserObjectM
addObjectToUserPacket	SceneServer/libscenesserver/SceneRelation.cpp	/^void SceneUser::addObjectToUserPacket(int objectid,SceneUser *pUser)$/;"	f	class:SceneUser
addOkay	base/src/x_tcptaskpool.cpp	/^bool x_tcptaskpool::addOkay(shared_ptr<x_tcptask> task)$/;"	f	class:x_tcptaskpool
addPetExp	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::addPetExp(DWORD num)$/;"	f	class:ScenePet
addPetExp	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void addPetExp(DWORD num,bool addPet,bool addCartoon){}$/;"	f	class:SceneNpc
addPothunters	SessionServer/libsessionserver/Quiz.cpp	/^bool CQuizPersonal::addPothunters(UserSession* pUser)$/;"	f	class:CQuizPersonal
addPothunters	SessionServer/libsessionserver/Quiz.cpp	/^bool CQuizWorld::addPothunters(UserSession* pUser)$/;"	f	class:CQuizWorld
addPrentice	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember *CSchoolMember::addPrentice(UserSession *pUser)$/;"	f	class:CSchoolMember
addProtect	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePkState::addProtect(SceneUser * pThis,DWORD time)$/;"	f	class:ScenePkState
addReadyAlly	SessionServer/libsessionserver/Ally.cpp	/^void   CAllyM::addReadyAlly(DWORD dwCountryID1,DWORD dwCountryID2)$/;"	f	class:CAllyM
addRecommend	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendM::addRecommend(DWORD dwUserID,Recommend* r)$/;"	f	class:RecommendM
addRecommendSub	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendM::addRecommendSub(DWORD dwUserID,RecommendSub* rs)$/;"	f	class:RecommendM
addRecommended	SessionServer/libsessionserver/RecommendManager.cpp	/^bool Recommend::addRecommended(DWORD dwUserID)$/;"	f	class:Recommend
addRecycle	base/src/x_tcptaskpool.cpp	/^void x_tcptaskpool::addRecycle(shared_ptr<x_tcptask> task)$/;"	f	class:x_tcptaskpool
addRelation	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::addRelation(const DWORD dwID,const BYTE type)$/;"	f	class:CRelationManager
addRush	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::addRush(Rush *rush)$/;"	f	class:Scene
addScene	SessionServer/libsessionserver/SessionManager.cpp	/^bool SceneSessionManager::addScene(SceneSession *scene)$/;"	f	class:SceneSessionManager
addSceneNpc	SceneServer/libscenesserver/SceneNpcManager.cpp	/^bool SceneNpcManager::addSceneNpc(SceneNpc *sceneNpc)$/;"	f	class:SceneNpcManager
addScore	tmp/MiniServer/MiniUser.cpp	/^void MiniUser::addScore(Cmd::MiniGameScore s,bool isNew)$/;"	f	class:MiniUser
addScriptTask	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
addSeptMaster	SessionServer/libsessionserver/Sept.cpp	/^CSeptMember * CSept::addSeptMaster(const stSeptInfo& info)$/;"	f	class:CSept
addSeptMember	SessionServer/libsessionserver/Sept.cpp	/^CSeptMember * CSept::addSeptMember(const stSeptMemberInfo& info)$/;"	f	class:CSept
addServer	SessionServer/ServerManager.cpp	/^void ServerManager::addServer(shared_ptr<SessionTask> task) {$/;"	f	class:ServerManager
addServer	SuperServer/ServerManager.cpp	/^void ServerManager::addServer(shared_ptr<ServerTask> task) {$/;"	f	class:ServerManager
addServerEntry	base/x_subnetservice.cpp	/^void x_subnetservice::addServerEntry(const Cmd::Super::ServerEntry &entry)$/;"	f	class:x_subnetservice
addSessionTask	SessionServer/libsessionserver/SessionTaskManager.cpp	/^void SessionTaskManager::addSessionTask(SessionTask *task)$/;"	f	class:SessionTaskManager
addSkill	SceneServer/libscenesserver/SkillManager.cpp	/^bool UserSkillM::addSkill(zSkill *s)$/;"	f	class:UserSkillM
addSkill	base/include/srvEngine.h	/^	void addSkill(int type,uint32_t id,int needLevel,int rate,int coefficient = 0)$/;"	f	struct:zNpcB
addSkillData	SceneServer/libscenesserver/SceneSkill.cpp	/^bool SceneUser::addSkillData(const Cmd::stAddUserSkillPropertyUserCmd *rev)$/;"	f	class:SceneUser
addSpecialNpc	SceneServer/libscenesserver/SceneNpcManager.cpp	/^bool SceneNpcManager::addSpecialNpc(SceneNpc *sceneNpc,bool force)$/;"	f	class:SceneNpcManager
addSync	base/src/x_tcptaskpool.cpp	/^bool x_tcptaskpool::addSync(shared_ptr<x_tcptask> task)$/;"	f	class:x_tcptaskpool
addTask	SceneServer/libscenesserver/scriptTickTask.h	/^	bool addTask(scriptTask *_task)$/;"	f	class:scriptTaskManagement
addTaxMoney	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::addTaxMoney(QWORD qwTaxMoney)$/;"	f	class:CCountry
addTeacher	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember * CSchool::addTeacher(UserSession *master)$/;"	f	class:CSchool
addTech	SceneServer/libscenesserver/CountryTech.cpp	/^void CountryTech::addTech(DWORD dwType,CTech* pTech)$/;"	f	class:CountryTech
addTech	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::addTech(DWORD dwType,CTech* pTech)$/;"	f	class:CCountry
addTicket	SceneServer/libscenesserver/zObject.cpp	/^void Packages::addTicket(DWORD num,const char *disc,const char *note,bool notify)$/;"	f	class:Packages
addToContainer	BillServer/old_back/BillClient.cpp	/^void BillClient::addToContainer()$/;"	f	class:BillClient
addToContainer	GatewayServer/old_back/GatewayTask.cpp	/^void GatewayTask::addToContainer()$/;"	f	class:GatewayTask
addToContainer	GatewayServer/old_back/SceneClient.cpp	/^void SceneClient::addToContainer()$/;"	f	class:SceneClient
addToContainer	SessionServer/SessionTask.cpp	/^void SessionTask::addToContainer()$/;"	f	class:SessionTask
addToContainer	SessionServer/libsessionserver/SessionTask.cpp	/^void SessionTask::addToContainer()$/;"	f	class:SessionTask
addToContainer	SuperServer/InfoClient.cpp	/^void InfoClient::addToContainer()$/;"	f	class:InfoClient
addToContainer	SuperServer/ServerTask.cpp	/^void ServerTask::addToContainer()$/;"	f	class:ServerTask
addToContainer	base/include/srvEngine.h	/^	virtual void addToContainer() {};$/;"	f	class:x_tcp_clientTask
addToContainer	base/src/x_tcptask.h	/^	virtual void addToContainer() {}$/;"	f	class:x_tcptask
addToContainer	base/tcp_task.h	/^	virtual void addToContainer(){}$/;"	f	class:tcp_task
addUnionMaster	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
addUnionMember	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
addUser	BillServer/BillUserManager.h	/^    bool addUser(BillUser *user)$/;"	f	class:BillUserManager
addUser	BillServer/old_back/BillServer.h	/^    bool addUser(BillUser *user)$/;"	f	class:BillUserManager
addUser	SceneServer/libscenesserver/SceneUserManager.cpp	/^bool SceneRecycleUserManager::addUser(zSceneEntry *user)$/;"	f	class:SceneRecycleUserManager
addUser	SceneServer/libscenesserver/SceneUserManager.cpp	/^bool SceneUserManager::addUser(SceneUser *user)$/;"	f	class:SceneUserManager
addUser	base/include/srvEngine.h	/^	bool addUser(zSceneEntry *user)$/;"	f	class:zUserManager
addUser	tmp/MiniServer/MiniServer.h	/^    bool addUser(MiniUser *user)$/;"	f	class:MiniUserManager
addUserCount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
addUserOnlyByAccID	GatewayServer/old_back/GateUserManager.cpp	/^bool GateUserManager::addUserOnlyByAccID(GateUser *user)$/;"	f	class:GateUserManager
addVerify	base/src/x_tcptaskpool.cpp	/^bool x_tcptaskpool::addVerify(shared_ptr<x_tcptask> task)$/;"	f	class:x_tcptaskpool
addVoteMemberToSept	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::addVoteMemberToSept(const UserSession *pUser,const char *pName)$/;"	f	class:CSeptM
addVoted	SessionServer/libsessionserver/Vote.cpp	/^bool CVote::addVoted(DWORD dwCharID)$/;"	f	class:CVote
addWAwayMember	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::addWAwayMember(Cmd::Session::stMember * AwayUser)$/;"	f	class:TeamManager
addWayPoint	SceneServer/libscenesserver/WayPoint.cpp	/^bool WayPointM::addWayPoint(const WayPoint &wp)$/;"	f	class:WayPointM
add_argless_short_opt	base/src/getopt.c	/^static int add_argless_short_opt (const struct argp_option *opt,$/;"	f	file:
add_epoll	base/include/x_socket.cpp	/^void x_socket::add_epoll(int efd,uint32_t events,void* ptr)$/;"	f	class:x_socket
add_epoll	base/src/x_tcptask.h	/^	void add_epoll(int efd, uint32_t events, void* ptr){$/;"	f	class:x_tcptask
add_exp	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::add_exp(SceneUser& user,DWORD coefficient)$/;"	f	class:EquipMaker
add_exp	SceneServer/libscenesserver/script_func.cpp	/^void add_exp(SceneUser* user,DWORD num,bool addPet,DWORD dwTempID,BYTE byType,bool addCartoon)$/;"	f
add_f	SceneServer/libscenesserver/script_func.cpp	/^Vars* GlobalVars::add_f()$/;"	f	class:GlobalVars
add_g	SceneServer/libscenesserver/script_func.cpp	/^Vars* GlobalVars::add_g()$/;"	f	class:GlobalVars
add_hole	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Hole::add_hole(zObject* ob,int index)$/;"	f	class:Hole
add_hole_num	SceneServer/libscenesserver/RebuildObject.cpp	/^int Hole::add_hole_num(zObject* ob,int num)$/;"	f	class:Hole
add_menu	SceneServer/libscenesserver/Quest.cpp	/^void QuestList::add_menu(const std::string& menu)$/;"	f	class:QuestList
add_money	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::add_money(DWORD money)$/;"	f	class:TradeOrder
add_money	SceneServer/libscenesserver/script_func.cpp	/^void add_money(SceneUser* user,int money)$/;"	f
add_object	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Base::add_object(SceneUser& user,zObject* ob,bool add)$/;"	f	class:Base
add_quest	SceneServer/libscenesserver/Quest.cpp	/^void QuestList::add_quest(DWORD id,const Vars& vars,SceneUser& user,bool notify)$/;"	f	class:QuestList
add_skill	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::add_skill(SceneUser& user,zObjectB* ob)$/;"	f	class:EquipMaker
add_t	SceneServer/libscenesserver/script_func.cpp	/^Vars* GlobalVars::add_t()$/;"	f	class:GlobalVars
add_vec	SceneServer/libscenesserver/TeamManager.cpp	/^	Online_vec add_vec;$/;"	m	struct:CheckOfflineExec	file:
additive	SceneServer/libscenesserver/SceneServer1.h	/^      bool additive(T& ret,const luckRangeValue & lv)$/;"	f	class:EquipMaker
additive	SceneServer/libscenesserver/SceneServer1.h	/^      bool additive(T& ret,const luckRangeValue & lv,int& property)$/;"	f	class:EquipMaker
additive	SceneServer/libscenesserver/SceneServer1.h	/^      void additive(T& ret,const rangeValue &rv)$/;"	f	class:EquipMaker
additive	SceneServer/libscenesserver/SceneServer1.h	/^  static void additive(T first,T second,T& result,int level)$/;"	f	class:SoulStone
additive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:EquipMaker
additive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SoulStone
additivePercent	SceneServer/libscenesserver/SceneServer1.h	/^      bool additivePercent(T& ret,const luckRangeValue & lv)$/;"	f	class:EquipMaker
additivePercent	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:EquipMaker
addmenp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
addr	base/include/x_socket.h	/^	struct sockaddr_in addr;          \/**< Â•óÊé•Âè£Âú∞ÂùÄ *\/$/;"	m	class:x_socket	typeref:struct:x_socket::sockaddr_in
adistance	base/include/srvEngine.h	/^	uint32_t  adistance;      \/\/ ÊîªÂáªÈó¥Èöî$/;"	m	struct:zNpcB
adoptList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
adopt_it	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	struct:O::LiveSkills::SceneUser
adoptedCartoon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
adoptedPetMap	SessionServer/libsessionserver/SessionServer.h	/^    hash_map<std::string,hash_set<DWORD>\/*,key_hash*\/> adoptedPetMap;$/;"	m	class:CartoonPetService
afpoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
afreetMode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
aftype	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
agi	base/include/srvEngine.h	/^	uint32_t agi;        \/\/ ÊïèÊç∑$/;"	m	struct:zPetB
ai	base/include/srvEngine.h	/^	uint32_t  ai;          \/\/ ai$/;"	m	struct:zNpcB
aif	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD aif;$/;"	m	class:SceneNpc
akdodge	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
akdodge	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
akdodge	base/include/csCommon.h	/^/;"	m	struct:_Object
akdodge	base/include/srvEngine.h	/^			luckRangeValue akdodge;    \/\/ Èó™ÈÅøÁéá$/;"	m	struct:zColorObjectB::__anon130::__anon131
akdodge	base/include/srvEngine.h	/^	luckRangeValue akdodge;      \/\/ Èó™ÈÅøÁéá$/;"	m	struct:zHolyObjectB
akdodge	base/include/srvEngine.h	/^	uint16_t akdodge;        \/\/ Ë∫≤ÈÅøÁéá$/;"	m	struct:zObjectB
akspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
akspeed	base/include/csCommon.h	/^/;"	m	struct:_Object
akspeed	base/include/srvEngine.h	/^	luckRangeValue akspeed;    \/\/ ÊîªÂáªÈÄüÂ∫¶$/;"	m	struct:zColorObjectB
akspeed	base/include/srvEngine.h	/^	luckRangeValue akspeed;    \/\/ ÊîªÂáªÈÄüÂ∫¶$/;"	m	struct:zHolyObjectB
akspeed	base/include/srvEngine.h	/^	uint16_t akspeed;        \/\/ ÊîªÂáªÈÄüÂ∫¶$/;"	m	struct:zObjectB
aliasname	SessionServer/libsessionserver/SessionServer.h	/^    char  aliasname[MAX_NAMESIZE+1];$/;"	m	struct:CSeptMember
aliasname	SessionServer/libsessionserver/SessionServer.h	/^    char  aliasname[MAX_NAMESIZE+1];$/;"	m	struct:CUnionMember
aliasname	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptMemberInfo
aliasname	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionMemberInfo
all	GatewayServer/old_back/GatewayServer.h	/^	SceneEntry_SET all;$/;"	m	class:ScreenIndex
all	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
allCardList	tmp/MiniServer/MiniServer.h	/^    std::vector<Cmd::Card> allCardList;$/;"	m	class:DDZCardGame
allClients	BillServer/old_back/BillServer.h	/^    BillClientContainer allClients;$/;"	m	class:BillClientManager
allClients	GatewayServer/old_back/GatewayServer.h	/^	SceneClient_map allClients;$/;"	m	class:SceneClientManager
allClients	SuperServer/FLClientManager.h	/^    FLClientContainer allClients;$/;"	m	class:FLClientManager
allClients	SuperServer/InfoClientManager.h	/^    InfoClient_map allClients;$/;"	m	class:InfoClientManager
allEnd	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::FixedRush
allStart	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::FixedRush
allTiles	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
all_in_gold	BillServer/BillUser.h	/^    DWORD all_in_gold;    \/**< ◊‹≥Â÷µΩ±“ ˝¡ø *\/$/;"	m	class:BillUser
all_in_gold	BillServer/old_back/BillServer.h	/^    DWORD all_in_gold;    \/**< ◊‹≥Â÷µΩ±“ ˝¡ø *\/$/;"	m	class:BillUser
all_in_money	BillServer/BillUser.h	/^    DWORD all_in_money;    \/**< ◊‹≥Â÷µ“¯±“ ˝¡ø *\/$/;"	m	class:BillUser
all_in_money	BillServer/old_back/BillServer.h	/^    DWORD all_in_money;    \/**< ◊‹≥Â÷µ“¯±“ ˝¡ø *\/$/;"	m	class:BillUser
all_mode	SceneServer/libscenesserver/SceneServer1.h	/^      all_mode =   0x1f,\/\/\/ all_mode$/;"	e	enum:Gm::__anon100
all_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Gm::__anon90
all_out_gold	BillServer/BillUser.h	/^    DWORD all_out_gold;    \/**< ◊‹Ã·»°Ω±“ ˝¡ø *\/$/;"	m	class:BillUser
all_out_gold	BillServer/old_back/BillServer.h	/^    DWORD all_out_gold;    \/**< ◊‹Ã·»°Ω±“ ˝¡ø *\/$/;"	m	class:BillUser
all_out_money	BillServer/BillUser.h	/^    DWORD all_out_money;    \/**< ◊‹Ã·»°“¯±“ ˝¡ø *\/$/;"	m	class:BillUser
all_out_money	BillServer/old_back/BillServer.h	/^    DWORD all_out_money;    \/**< ◊‹Ã·»°“¯±“ ˝¡ø *\/$/;"	m	class:BillUser
all_targets	base/Makefile	/^all_targets = libseal.a$/;"	m
all_targets	deps/tinyxml/Makefile	/^all_targets = libtinyxml.a$/;"	m
all_targets	tmp/base2/makefile	/^all_targets = main$/;"	m
all_tax_gold	BillServer/BillUser.h	/^    DWORD all_tax_gold;    \/**< ◊‹À∞ ’ *\/$/;"	m	class:BillUser
all_tax_gold	BillServer/old_back/BillServer.h	/^    DWORD all_tax_gold;    \/**< ◊‹À∞ ’ *\/$/;"	m	class:BillUser
all_tax_money	BillServer/BillUser.h	/^    DWORD all_tax_money;  \/**< ◊‹À∞ ’ *\/ $/;"	m	class:BillUser
all_tax_money	BillServer/old_back/BillServer.h	/^    DWORD all_tax_money;  \/**< ◊‹À∞ ’ *\/ $/;"	m	class:BillUser
allies	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryAllyM
allies	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CAlly*> allies;$/;"	m	class:CAllyM
allocate	base/include/srvEngine.h	/^	char * allocate(size_t  len){return (char*)malloc(len);}$/;"	f	class:__mt_alloc
allset	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::MultiPack
allyVisit	base/include/srvEngine.h	/^	uint32_t  allyVisit;      \/\/ÂèØË¢´ÁõüÂõΩËÆøÈóÆÁöÑÁ≠âÁ∫ß 0Ôºö‰∏çÂèØËÆøÈóÆ 1Ôºö1Á∫ßÂèØËÆøÈóÆ 2Ôºö2Á∫ßÂèØËÆøÈóÆ$/;"	m	struct:zNpcB
angelMode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
anpc	SceneServer/libscenesserver/SceneServer1.h	/^  zNpcB *anpc;$/;"	m	class:SceneNpc
answer	SessionServer/libsessionserver/Quiz.cpp	/^int CQuizPersonal::answer(Cmd::stAnswerQuiz* pCmd,DWORD dwUserID)$/;"	f	class:CQuizPersonal
answer	SessionServer/libsessionserver/Quiz.cpp	/^int CQuizWorld::answer(Cmd::stAnswerQuiz* pCmd,DWORD dwUserID)$/;"	f	class:CQuizWorld
answer	SessionServer/libsessionserver/SessionServer.h	/^    DWORD answer;$/;"	m	class:CSubject
answerCount	base/include/csCommon.h	/^/;"	m	struct:CharBase
answerMarry	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
answer_a	SessionServer/libsessionserver/SessionServer.h	/^    char answer_a[56];$/;"	m	class:CSubject
answer_b	SessionServer/libsessionserver/SessionServer.h	/^    char answer_b[56];$/;"	m	class:CSubject
answer_c	SessionServer/libsessionserver/SessionServer.h	/^    char answer_c[56];$/;"	m	class:CSubject
answer_d	SessionServer/libsessionserver/SessionServer.h	/^    char answer_d[56];$/;"	m	class:CSubject
answer_e	SessionServer/libsessionserver/SessionServer.h	/^    char answer_e[56];$/;"	m	class:CSubject
answer_f	SessionServer/libsessionserver/SessionServer.h	/^    char answer_f[56];$/;"	m	class:CSubject
answered	SessionServer/libsessionserver/SessionServer.h	/^    std::set<int> answered;$/;"	m	class:CQuiz
appendAttack	SceneServer/libscenesserver/ScenePk.cpp	/^void SceneUser::appendAttack(const Cmd::stAttackMagicUserCmd *rev)$/;"	f	class:SceneUser
appendAttack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
appendMaxDamage	SceneServer/libscenesserver/SceneServer1.h	/^  WORD appendMaxDamage;$/;"	m	class:SceneNpc
appendMinDamage	SceneServer/libscenesserver/SceneServer1.h	/^  WORD appendMinDamage;$/;"	m	class:SceneNpc
appenddam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
appendmaxpet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
appendminpet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
arg	base/include/argp.h	/^  const  char *arg;$/;"	m	struct:argp_option
arg	base/src/getopt.c	/^arg (const struct argp_option *real, const char *req_fmt, const char *opt_fmt,$/;"	f	file:
arg_num	base/include/argp.h	/^  unsigned arg_num;$/;"	m	struct:argp_state
argc	base/include/argp.h	/^  int argc;$/;"	m	struct:argp_state
argp	base/include/argp.h	/^  const  struct argp *argp;$/;"	m	struct:argp_child	typeref:struct:argp_child::argp
argp	base/include/argp.h	/^struct argp$/;"	s
argp	base/src/getopt.c	/^  const struct argp *argp;$/;"	m	struct:group	typeref:struct:group::argp	file:
argp	base/src/getopt.c	/^  const struct argp *argp;$/;"	m	struct:hol_cluster	typeref:struct:hol_cluster::argp	file:
argp	base/src/getopt.c	/^  const struct argp *argp;$/;"	m	struct:hol_entry	typeref:struct:hol_entry::argp	file:
argp	base/src/getopt.c	/^  const struct argp *argp;$/;"	m	struct:parser	typeref:struct:parser::argp	file:
argp_args_levels	base/src/getopt.c	/^static size_t argp_args_levels (const struct argp *argp)$/;"	f	file:
argp_args_usage	base/src/getopt.c	/^argp_args_usage (const struct argp *argp, const struct argp_state *state,$/;"	f	file:
argp_child	base/include/argp.h	/^struct argp_child$/;"	s
argp_default_argp	base/src/getopt.c	/^static const struct argp argp_default_argp =$/;"	v	typeref:struct:argp	file:
argp_default_options	base/src/getopt.c	/^static const struct argp_option argp_default_options[] =$/;"	v	typeref:struct:argp_option	file:
argp_default_parser	base/src/getopt.c	/^argp_default_parser (int key, char *arg, struct argp_state *state)$/;"	f	file:
argp_doc	base/src/getopt.c	/^static int argp_doc (const struct argp *argp, const struct argp_state *state,$/;"	f	file:
argp_domain	base/include/argp.h	/^  const char *argp_domain;$/;"	m	struct:argp
argp_err_exit_status	base/src/getopt.c	/^error_t argp_err_exit_status = EX_USAGE;$/;"	v
argp_error	base/src/getopt.c	/^void argp_error (const struct argp_state *state, const char *fmt, ...)$/;"	f
argp_failure	base/src/getopt.c	/^void argp_failure (const struct argp_state *state, int status, int errnum,$/;"	f
argp_fmtstream	base/src/getopt.c	/^struct argp_fmtstream$/;"	s	file:
argp_fmtstream_ensure	base/src/getopt.c	/^argp_fmtstream_ensure (struct argp_fmtstream *fs, size_t amount)$/;"	f
argp_fmtstream_free	base/src/getopt.c	/^argp_fmtstream_free (argp_fmtstream_t fs)$/;"	f
argp_fmtstream_lmargin	base/src/getopt.c	183;"	d	file:
argp_fmtstream_point	base/src/getopt.c	/^size_t argp_fmtstream_point (argp_fmtstream_t __fs)$/;"	f
argp_fmtstream_printf	base/src/getopt.c	/^argp_fmtstream_printf (struct argp_fmtstream *fs, const char *fmt, ...)$/;"	f
argp_fmtstream_putc	base/src/getopt.c	/^int argp_fmtstream_putc (argp_fmtstream_t __fs, int __ch)$/;"	f
argp_fmtstream_puts	base/src/getopt.c	/^argp_fmtstream_puts (argp_fmtstream_t __fs, const char *__str)$/;"	f
argp_fmtstream_rmargin	base/src/getopt.c	184;"	d	file:
argp_fmtstream_set_lmargin	base/src/getopt.c	/^size_t argp_fmtstream_set_lmargin (argp_fmtstream_t __fs, size_t __lmargin)$/;"	f
argp_fmtstream_set_rmargin	base/src/getopt.c	/^size_t argp_fmtstream_set_rmargin (argp_fmtstream_t __fs, size_t __rmargin)$/;"	f
argp_fmtstream_set_wmargin	base/src/getopt.c	/^size_t argp_fmtstream_set_wmargin (argp_fmtstream_t __fs, size_t __wmargin)$/;"	f
argp_fmtstream_t	base/src/getopt.c	/^typedef struct argp_fmtstream *argp_fmtstream_t;$/;"	t	typeref:struct:argp_fmtstream	file:
argp_fmtstream_update	base/src/getopt.c	/^argp_fmtstream_update (argp_fmtstream_t fs)$/;"	f
argp_fmtstream_wmargin	base/src/getopt.c	185;"	d	file:
argp_fmtstream_write	base/src/getopt.c	/^argp_fmtstream_write (argp_fmtstream_t __fs,$/;"	f
argp_help	base/src/getopt.c	/^void argp_help (const struct argp *argp, FILE *stream,$/;"	f
argp_hol	base/src/getopt.c	/^static struct hol *argp_hol (const struct argp *argp, struct hol_cluster *cluster)$/;"	f	file:
argp_input	base/src/getopt.c	/^argp_input (const struct argp *argp, const struct argp_state *state)$/;"	f
argp_make_fmtstream	base/src/getopt.c	/^argp_make_fmtstream (FILE *stream,$/;"	f
argp_option	base/include/argp.h	/^struct argp_option$/;"	s
argp_parse	base/src/getopt.c	/^argp_parse (const struct argp *argp, int argc, char **argv, unsigned flags,$/;"	f
argp_parser_t	base/include/argp.h	/^typedef error_t(*argp_parser_t)(int key,char *arg,struct argp_state *state);$/;"	t
argp_program_bug_address	base/src/getopt.c	/^const char *argp_program_bug_address;$/;"	v
argp_program_version	base/src/getopt.c	/^const char *argp_program_version;$/;"	v
argp_program_version_hook	base/src/getopt.c	/^void (*argp_program_version_hook) (FILE *stream, struct argp_state *state);$/;"	v
argp_state	base/include/argp.h	/^struct argp_state$/;"	s
argp_state_help	base/src/getopt.c	/^void argp_state_help (const struct argp_state *state, FILE *stream, unsigned flags)$/;"	f
argp_usage	base/src/getopt.c	/^void argp_usage(const  struct argp_state *state)$/;"	f
argp_version_argp	base/src/getopt.c	/^static const struct argp argp_version_argp =$/;"	v	typeref:struct:argp	file:
argp_version_options	base/src/getopt.c	/^static const struct argp_option argp_version_options[] =$/;"	v	typeref:struct:argp_option	file:
argp_version_parser	base/src/getopt.c	/^argp_version_parser (int key, char *arg, struct argp_state *state)$/;"	f	file:
args_doc	base/include/argp.h	/^  const  char *args_doc;$/;"	m	struct:argp
args_processed	base/src/getopt.c	/^  unsigned args_processed;$/;"	m	struct:group	file:
argv	base/include/argp.h	/^  char **argv;$/;"	m	struct:argp_state
armyName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
armys	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CArmy*> armys;$/;"	m	class:CArmyM
array_ddefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
array_dmvspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
array_udamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
arrived	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool NpcAIController::arrived(zPos pos,int regionX,int regionY)$/;"	f	class:NpcAIController
as	SessionServer/libsessionserver/AuctionService.cpp	/^AuctionService *AuctionService::as = 0;$/;"	m	class:AuctionService	file:
as	SessionServer/libsessionserver/SessionServer.h	/^    static AuctionService *as;$/;"	m	class:AuctionService
aspeedRate	SceneServer/libscenesserver/SceneServer1.h	/^  float aspeedRate;$/;"	m	class:SceneNpc
aspeedUpUnder50	SceneServer/libscenesserver/SceneServer1.h	/^  bool aspeedUpUnder50;$/;"	m	class:SceneNpc
assault	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
assaultMe	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
assign	SceneServer/libscenesserver/RebuildObject.cpp	/^bool SoulStone::assign(zObject* ob,int monster)$/;"	f	class:SoulStone
assign	SceneServer/libscenesserver/RebuildObject.cpp	/^void EquipMaker::assign(SceneUser* user,zObject* ob,zObjectB* base,BYTE kind)$/;"	f	class:EquipMaker
assign_color	SceneServer/libscenesserver/SceneServer1.h	/^      bool assign_color(T* bob,zObject* ob,int kind,int props = 0,zObjectB *base=NULL,bool drop=false)$/;"	f	class:EquipMaker
assign_color	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:EquipMaker
assign_holy	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::assign_holy(zObject* ob,int holy)$/;"	f	class:EquipMaker
assign_set	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::assign_set(zObject* ob)$/;"	f	class:EquipMaker
assign_set	SceneServer/libscenesserver/script_func.cpp	/^void assign_set(DWORD thisid)$/;"	f
async_read	base/tcp_task.cpp	/^void tcp_task::async_read(){$/;"	f	class:tcp_task
async_read_msg	base/include/tcp_task_new.h	/^	virtual void async_read_msg(){$/;"	f	class:tcp_task
async_write	base/src/tcp_socket.h	/^	void async_write(void* data, const int len)$/;"	f	class:tcp_socket
async_write	base/tcp_client.h	/^	void async_write(void* data, const int len) {$/;"	f	class:tcp_client
at	BillServer/old_back/BillServer.h	/^  int            at;                                          \/\/Ωª“◊¿‡–Õ $/;"	m	struct:BillData
atk	base/include/srvEngine.h	/^	uint32_t atk;        \/\/ Áâ©Êîª‰∏ãÈôê$/;"	m	struct:zPetB
atkB	SceneServer/libscenesserver/SceneServer1.h	/^  WORD atkB;$/;"	m	struct:petBonus
atkB	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::petBonus
atkhpp	base/include/srvEngine.h	/^	uint16_t atkhpp;  \/\/È≠îÊ≥ïÂÖç‰º§$/;"	m	struct:zObjectB
atrating	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
atrating	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
atrating	base/include/csCommon.h	/^/;"	m	struct:_Object
atrating	base/include/srvEngine.h	/^			luckRangeValue atrating;    \/\/ ÂëΩ‰∏≠Áéá$/;"	m	struct:zColorObjectB::__anon130::__anon131
atrating	base/include/srvEngine.h	/^	luckRangeValue atrating;    \/\/ ÂëΩ‰∏≠Áéá$/;"	m	struct:zHolyObjectB
atrating	base/include/srvEngine.h	/^	uint16_t atrating;        \/\/ ÂëΩ‰∏≠Áéá$/;"	m	struct:zObjectB
attGood	SceneServer/libscenesserver/ScenePk.cpp	1066;"	d	file:
attKingName	SessionServer/libsessionserver/SessionServer.h	/^    char    attKingName[MAX_NAMESIZE+1];$/;"	m	class:CDareRecord
attList	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<DWORD> attList;  \/\/ ÃÙ’Ω∑Ω¡–±Ì$/;"	m	class:CDare
attProtect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::ScenePkState::attProtect
attProtect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	struct:O::ScenePkState
attSub	SceneServer/libscenesserver/ScenePk.cpp	1068;"	d	file:
attackAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
attackDeathNpc	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePk::attackDeathNpc(SceneEntryPk *pAtt,SceneNpc *pDef)$/;"	f	class:ScenePk
attackDeathUser	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePk::attackDeathUser(SceneUser *pAtt,SceneUser *pDef)$/;"	f	class:ScenePk
attackEnemy	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::attackEnemy(SceneEntryPk * enemy)$/;"	f	class:SceneNpc
attackFailToMe	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePk::attackFailToMe(const Cmd::stAttackMagicUserCmd *rev,SceneEntryPk * pAtt,bool failed,bool me)$/;"	f	class:ScenePk
attackMagic	SceneServer/libscenesserver/ScenePk.cpp	/^bool SceneUser::attackMagic(const Cmd::stAttackMagicUserCmd *rev,const DWORD cmdLen)$/;"	f	class:SceneUser
attackRTCmdToNine	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePk::attackRTCmdToNine(const Cmd::stAttackMagicUserCmd *rev,SceneEntryPk *pAtt,SceneEntryPk *pDef,const SDWORD sdwHP,BYTE byLuck)$/;"	f	class:ScenePk
attackRTHpAndMp	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::attackRTHpAndMp(SceneUser *pUser)$/;"	f	class:ScenePk
attackRTHpAndMp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
attackTarget	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
attackUserCmdToNine	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePk::attackUserCmdToNine(const Cmd::stAttackMagicUserCmd *rev,SceneEntryPk *pAtt)$/;"	f	class:ScenePk
attack_time	SceneServer/libscenesserver/SceneServer1.h	/^  zTime  attack_time;$/;"	m	struct:t_expRec
attackaddhpnum	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
attackdodge	base/include/csCommon.h	/^/;"	m	struct:CharState
attackdodge	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
attacker	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusCarrier
attackfive	base/include/csCommon.h	/^/;"	m	struct:CharState
attacklow	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
attackrating	base/include/csCommon.h	/^/;"	m	struct:CharState
attackrating	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
attackspeed	base/include/csCommon.h	/^/;"	m	struct:CharState
attackspeed	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
attacktype	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
attributeSet	deps/tinyxml/tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement
atypelist	base/include/srvEngine.h	/^	std::vector<aTypeS> atypelist;  \/\/ ÊîªÂáªÁ±ªÂûã$/;"	m	struct:zNpcB
auctionBidInfo	SessionServer/libsessionserver/SessionServer.h	/^struct auctionBidInfo$/;"	s
auctionID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD auctionID;$/;"	m	struct:auctionBidInfo
auction_bid_define	SessionServer/libsessionserver/AuctionService.cpp	/^const dbCol auction_bid_define[] = {$/;"	v
auction_bidder_define	SessionServer/libsessionserver/AuctionService.cpp	/^const dbCol auction_bidder_define[] = {$/;"	v
auction_define	SessionServer/libsessionserver/AuctionService.cpp	/^const dbCol auction_define[] = {$/;"	v
auction_state_define	SessionServer/libsessionserver/AuctionService.cpp	/^const dbCol auction_state_define[] = {$/;"	v
autoReply	SessionServer/libsessionserver/SessionServer.h	/^    char autoReply[MAX_CHATINFO];\/\/◊‘∂Øªÿ∏¥$/;"	m	class:UserSession
auto_point	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::auto_point()$/;"	f	class:DDZCardGame
auto_put	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::auto_put()$/;"	f	class:DDZCardGame
available	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::PetPack
avar	base/x_logger.cpp	5;"	d	file:
averageExp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Team
award	SessionServer/libsessionserver/Quiz.cpp	/^bool CQuizPersonal::award()$/;"	f	class:CQuizPersonal
awardTaxGold	SessionServer/libsessionserver/CityManager.cpp	/^void   CCityM::awardTaxGold(UserSession *pUser)$/;"	f	class:CCityM
bAccess	SessionServer/libsessionserver/SessionServer.h	/^	bool bAccess;$/;"	m	class:CQueuingManager
bOutcome	SceneServer/libscenesserver/SceneBattlefiel.h	/^	bool bOutcome;						\/\/sky À¿Õˆ «∑Ò”∞œÏ §∏∫$/;"	m	class:SceneArchitecture
bRoll	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
bVictory	SceneServer/libscenesserver/SceneBattlefiel.h	/^	bool bVictory;$/;"	m	class:GangScene
backOff	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
backOffing	SceneServer/libscenesserver/SceneServer1.h	/^  int backOffing;$/;"	m	class:SceneNpc
backOffing	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
backSelect	GatewayServer/old_back/GatewayServer.h	/^	bool backSelect;$/;"	m	class:GateUser
backto	GatewayServer/old_back/GatewayServer.h	/^		DWORD backto;$/;"	m	struct:CountryInfo::MapDic
backto	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
backtoCity	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
backtoCityMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
backtoCityMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
backtoDareMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
backtoMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
backtoMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
backtodare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
bad_gateway	tmp/base3/reply.cpp	/^const char bad_gateway[] =$/;"	m	namespace:http::server2::stock_replies	file:
bad_gateway	tmp/base3/reply.cpp	/^const std::string bad_gateway =$/;"	m	namespace:http::server2::status_strings	file:
bad_gateway	tmp/base3/reply.hpp	/^    bad_gateway = 502,$/;"	e	enum:http::server2::reply::status_type
bad_request	tmp/base3/reply.cpp	/^const char bad_request[] =$/;"	m	namespace:http::server2::stock_replies	file:
bad_request	tmp/base3/reply.cpp	/^const std::string bad_request =$/;"	m	namespace:http::server2::status_strings	file:
bad_request	tmp/base3/reply.hpp	/^    bad_request = 400,$/;"	e	enum:http::server2::reply::status_type
balance	BillServer/old_back/BillServer.h	/^  int           balance;                                    \/\/”‡∂Ó$/;"	m	struct:BillData
bang	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
bang	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
bang	base/include/csCommon.h	/^/;"	m	struct:CharState
bang	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
bang	base/include/csCommon.h	/^/;"	m	struct:_Object
bang	base/include/srvEngine.h	/^	luckRangeValue bang;    \/\/ ÈáçÂáª$/;"	m	struct:zColorObjectB
bang	base/include/srvEngine.h	/^	uint16_t bang;          \/\/ÈáçÂáª$/;"	m	struct:zObjectB
banish	base/include/csCommon.h	/^/;"	m	struct:_Object
banish_def	base/include/csCommon.h	/^/;"	m	struct:_Object
barrel	SuperServer/RoleregCache.cpp	/^	container_type barrel;$/;"	m	class:RoleDataContainer	file:
base	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zObject
base	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
base_id	base/include/srvEngine.h	/^	uint32_t base_id;    \/\/ id$/;"	m	struct:zPetB
basic_skill_id	base/include/srvEngine.h	/^	uint32_t basic_skill_id; \/\/ÂâçÊèêÊäÄËÉΩid$/;"	m	struct:zLiveSkillB
basic_skill_level	base/include/srvEngine.h	/^	uint32_t basic_skill_level; \/\/ÂâçÊèêÊäÄËÉΩÁ≠âÁ∫ß]$/;"	m	struct:zLiveSkillB
bc	BillServer/old_back/BillServer.h	/^    BillCallback &bc;$/;"	m	class:BillClient
bc	BillServer/old_back/BillServer.h	/^    BillCallback bc;$/;"	m	class:BillClientManager
bclearActiveSkillStatus	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SkillStatusManager
bcopy	base/include/csCommon.h	224;"	d
bdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::__anon53::__anon54
bdam	base/include/csCommon.h	/^/;"	m	struct:_Object::__anon182::__anon183
bdam	base/include/srvEngine.h	/^	rangeValue bdam; \/\/Â¢ûÂä†‰º§ÂÆ≥x%$/;"	m	struct:zFiveSetB
bear_type	base/include/srvEngine.h	/^	uint32_t  bear_type;      \/\/ÊÄ™Áâ©Á±ªÂà´$/;"	m	struct:zNpcB
begin	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::begin()$/;"	f	class:TradeOrder
beginAntiDare	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::beginAntiDare(DWORD dwAttCountry)$/;"	f	class:CCountry
beginDare	SessionServer/libsessionserver/CityManager.cpp	/^void CCity::beginDare()$/;"	f	class:CCity
beginDare	SessionServer/libsessionserver/CityManager.cpp	/^void CCityM::beginDare()$/;"	f	class:CCityM
beginDare	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::beginDare()$/;"	f	class:CCountry
beginDare	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::beginDare()$/;"	f	class:CCountryM
beginGame	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::beginGame()$/;"	f	class:GateUser
beginGem	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::beginGem()$/;"	f	class:CCountryM
beginSelect	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::beginSelect()$/;"	f	class:GateUser
beginTechVote	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::beginTechVote()$/;"	f	class:CCountry
begin_tid	BillServer/BillUser.cpp	/^bool BillUser::begin_tid(const char *t)$/;"	f	class:BillUser
begined	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TradeOrder
begintime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::TeamMember
bfailure	SceneServer/libscenesserver/SceneBattlefiel.h	/^	bool bfailure;$/;"	m	class:GangScene
bidType	SessionServer/libsessionserver/SessionServer.h	/^  BYTE bidType;$/;"	m	struct:auctionBidInfo
bidder	SessionServer/libsessionserver/SessionServer.h	/^  char bidder[MAX_NAMESIZE+1];$/;"	m	struct:auctionBidInfo
bidder2	SessionServer/libsessionserver/SessionServer.h	/^  char bidder2[MAX_NAMESIZE+1];$/;"	m	struct:auctionBidInfo
bidder2ID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD bidder2ID;$/;"	m	struct:auctionBidInfo
bidderID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD bidderID;$/;"	m	struct:auctionBidInfo
billClient	GatewayServer/GatewayServer.h	/^		boost::shared_ptr<BillClient> billClient;$/;"	m	class:GatewayService
billClientPool	BillServer/old_back/BillServer.h	/^    x_tcp_clientTaskPool *billClientPool;$/;"	m	class:BillClientManager
bin	base/include/csCommon.h	/^/;"	m	struct:Cmd::stStampDataUserCmd
bind	SceneServer/libscenesserver/script.cpp	/^void Binder::bind(LuaVM* vm)$/;"	f	class:Binder
bind	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
bind	base/include/csCommon.h	/^/;"	m	struct:_Object
bind	base/include/srvEngine.h	/^	bool bind(const std::string &name,const uint16_t port)$/;"	f	class:zMNetService
bind	base/src/x_tcpserver.cpp	/^bool x_tcpserver::bind(const std::string &name,const uint16_t port)$/;"	f	class:x_tcpserver
bind	base/src/zMTCPServer.cpp	/^bool zMTCPServer::bind(const std::string &name,const uint16_t port) $/;"	f	class:zMTCPServer
bitMask	SceneServer/libscenesserver/ScenePk.cpp	1070;"	d	file:
bite	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
bite	base/include/csCommon.h	/^/;"	m	struct:_Object
bite	base/include/srvEngine.h	/^	rangeValue bite; \/\/Âô¨ÂäõÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
bitedef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
bitedef	base/include/csCommon.h	/^/;"	m	struct:_Object
bitedef	base/include/srvEngine.h	/^			luckRangeValue bitedef;    \/\/ ÊäóÂô¨ÂäõÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
bitedef	base/include/srvEngine.h	/^	rangeValue bitedef; \/\/ÊäóÂô¨ÂäõÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
bitmask	base/include/csCommon.h	/^/;"	m	struct:CharBase
bitmask	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
bitmask	base/include/x_socket.h	/^	uint32_t bitmask;            \/**< Ê†áÂøóÊé©Á†Å *\/$/;"	m	class:x_socket
blackListValueType	GatewayServer/old_back/GatewayServer.h	/^	typedef std::set<std::string>::value_type blackListValueType;$/;"	t	class:GateUser
blacklist	GatewayServer/old_back/GatewayServer.h	/^	std::set<std::string> blacklist; $/;"	m	class:GateUser
blazeappend	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
blazeflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
blind	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
blind	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
blind	base/include/csCommon.h	/^/;"	m	struct:_Object
blind	base/include/srvEngine.h	/^	rangeValue blind; \/\/Â§±ÊòéÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
blindProcess	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
blindRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
blinddef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
blinddef	base/include/csCommon.h	/^/;"	m	struct:_Object
blinddef	base/include/srvEngine.h	/^			luckRangeValue blinddef;    \/\/ ÊäóÂ§±ÊòéÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
blinddef	base/include/srvEngine.h	/^	rangeValue blinddef; \/\/ÊäóÂ§±ÊòéÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
blindp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
blueobjectbm	base/src/zDatabaseManager.cpp	/^zDataBM<zBlueObjectB,BlueObjectBase> &blueobjectbm=zDataBM<zBlueObjectB,BlueObjectBase>::getMe();$/;"	v
bodyColor	base/include/csCommon.h	/^/;"	m	struct:CharBase
bomb	tmp/MiniServer/MiniServer.h	/^    BYTE bomb;$/;"	m	class:CardPattern
bombCount	tmp/MiniServer/DDZCardGame.cpp	/^BYTE DDZCardGame::bombCount()$/;"	f	class:DDZCardGame
bombskillId	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
bonus	BillServer/old_back/BillServer.h	/^  int           bonus;                                      \/\/ª˝∑÷$/;"	m	struct:BillData
bonusTable	SceneServer/libscenesserver/ScenePet.cpp	/^petBonus bonusTable[] = $/;"	v
bonus_exp	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Decompose::bonus_exp(SceneUser& user)$/;"	f	class:Decompose
bonus_hole	SceneServer/libscenesserver/RebuildObject.cpp	/^void EquipMaker::bonus_hole(zObject* ob)$/;"	f	class:EquipMaker
bonus_items	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Decompose::bonus_items(SceneUser& user)$/;"	f	class:Decompose
boost_home	BillServer/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boost_home	FLServer/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boost_home	GatewayServer/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boost_home	RecordServer/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boost_home	SceneServer/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boost_home	SessionServer/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boost_home	SuperServer/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boost_home	base/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boost_home	client/Makefile	/^boost_home = `echo $(BOOST_HOME)`$/;"	m
boostupHpMaxP	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD boostupHpMaxP;  \/\/\/‘ˆº”…˙√¸÷µ…œœﬁ$/;"	m	class:SceneNpc
boostupPet	SceneServer/libscenesserver/SceneServer1.h	/^  int boostupPet; \/\/\/ ‘ˆ«ø±»¿˝$/;"	m	class:SceneNpc
boostupPetMDef	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD boostupPetMDef; \/\/‘ˆ«ø≥ËŒÔµƒ∑® ı∑¿”˘$/;"	m	class:SceneNpc
boostupSummon	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD boostupSummon; \/\/\/’ŸªΩ ﬁπ•ª˜º”«ø$/;"	m	class:SceneNpc
boss	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
bossDefine	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills::Rush
bossID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
bossMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
bossName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
bossName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_cityRush_SceneSession
bossVector	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
box	SceneServer/libscenesserver/boxCircle.h	/^struct box$/;"	s
boxCircle	SceneServer/libscenesserver/boxCircle.h	/^	boxCircle()$/;"	f	class:boxCircle
boxCircle	SceneServer/libscenesserver/boxCircle.h	/^class boxCircle : public SingletonBase<boxCircle>$/;"	c
boxItem	SceneServer/libscenesserver/giftBox.h	/^struct boxItem$/;"	s
boxObject	SceneServer/libscenesserver/giftBox.h	/^struct boxObject$/;"	s
boxType	SceneServer/libscenesserver/giftBox.h	/^enum boxType$/;"	g
box_item	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
box_target	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	struct:O::LiveSkills::SceneUser
boxitem	SceneServer/libscenesserver/giftBox.h	/^struct boxitem$/;"	s
bpenalty	SceneServer/libscenesserver/SceneBattlefiel.h	/^	bool bpenalty;$/;"	m	class:GangScene
brappenddam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
broadcast	BillServer/BillTaskManager.cpp	/^void BillTaskManager::broadcast(const void *pstrCmd, const int nCmdLen) {$/;"	f	class:BillTaskManager
broadcast	FLServer/LoginManager.cpp	/^bool LoginManager::broadcast(const DWORD loginTempID,const void *pstrCmd,int nCmdLen) {$/;"	f	class:LoginManager
broadcast	FLServer/ServerManager.cpp	/^bool ServerManager::broadcast(const GameZone_t &gameZone,const void *pstrCmd,int nCmdLen)$/;"	f	class:ServerManager
broadcast	SessionServer/ServerManager.cpp	/^bool ServerManager::broadcast(const void *pstrCmd,int nCmdLen)$/;"	f	class:ServerManager
broadcast	SuperServer/FLClientManager.cpp	/^void FLClientManager::broadcast(const void *pstrCmd,int nCmdLen)$/;"	f	class:FLClientManager
broadcast	SuperServer/ServerManager.cpp	/^bool ServerManager::broadcast(const void *pstrCmd,int nCmdLen)$/;"	f	class:ServerManager
broadcastByID	BillServer/BillTaskManager.cpp	/^bool BillTaskManager::broadcastByID(const uint32_t dwServerID, const void *pstrCmd, const int nCmdLen) {$/;"	f	class:BillTaskManager
broadcastByID	BillServer/old_back/BillTaskManager.cpp	/^bool BillTaskManager::broadcastByID(const WORD wdServerID,const void *pstrCmd,int nCmdLen)$/;"	f	class:BillTaskManager
broadcastByID	SessionServer/ServerManager.cpp	/^bool ServerManager::broadcastByID(const WORD wdServerID,const void *pstrCmd,int nCmdLen)$/;"	f	class:ServerManager
broadcastByID	SessionServer/libsessionserver/SessionTaskManager.cpp	/^bool SessionTaskManager::broadcastByID(const WORD wdServerID,const void *pstrCmd,int nCmdLen)$/;"	f	class:SessionTaskManager
broadcastByID	SuperServer/ServerManager.cpp	/^bool ServerManager::broadcastByID(const WORD wdServerID,const void *pstrCmd,int nCmdLen)$/;"	f	class:ServerManager
broadcastByID	tmp/MiniServer/MiniTaskManager.cpp	/^bool MiniTaskManager::broadcastByID(const WORD wdServerID,const void *pstrCmd,int nCmdLen)$/;"	f	class:MiniTaskManager
broadcastByType	SessionServer/ServerManager.cpp	/^bool ServerManager::broadcastByType(const WORD wdType,const void *pstrCmd,int nCmdLen)$/;"	f	class:ServerManager
broadcastByType	SuperServer/ServerManager.cpp	/^bool ServerManager::broadcastByType(const WORD wdType,const void *pstrCmd,int nCmdLen)$/;"	f	class:ServerManager
broadcastCmd	SceneServer/libscenesserver/SceneTaskManager.cpp	/^bool SceneTaskManager::broadcastCmd(const void *pstrCmd,const int nCmdLen)$/;"	f	class:SceneTaskManager
broadcastGateway	SessionServer/libsessionserver/SessionTaskManager.cpp	/^bool SessionTaskManager::broadcastGateway(const void *pstrCmd,int nCmdLen)$/;"	f	class:SessionTaskManager
broadcastOne	GatewayServer/old_back/SceneClientManager.cpp	/^bool SceneClientManager::broadcastOne(const void *pstrCmd,int nCmdLen)$/;"	f	class:SceneClientManager
broadcastOne	SuperServer/InfoClientManager.cpp	/^bool InfoClientManager::broadcastOne(const void *pstrCmd,int nCmdLen)$/;"	f	class:InfoClientManager
broadcastRushToEveryUser	SessionServer/libsessionserver/SessionTask.cpp	/^struct broadcastRushToEveryUser: public execEntry<UserSession>$/;"	s	file:
broadcastScene	SessionServer/libsessionserver/SessionTaskManager.cpp	/^bool SessionTaskManager::broadcastScene(const void *pstrCmd,int nCmdLen)$/;"	f	class:SessionTaskManager
broadcastTech	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::broadcastTech(DWORD dwCountryID)$/;"	f	class:CCountryM
broadcastToEveryUser	SessionServer/libsessionserver/SessionTask.cpp	/^struct broadcastToEveryUser: public execEntry<UserSession>$/;"	s	file:
buf	base/src/getopt.c	/^  char *buf;			\/* Output buffer.  *\/$/;"	m	struct:argp_fmtstream	file:
buf2	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetAllRemovePosNpc	file:
buf2	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetAllRemovePosUser	file:
buff	base/x_logger.h	/^	char buff[MAX_LOG_SIZE];$/;"	m	class:x_logger
buffFellow	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::buffFellow(SceneEntryPk_vec &fellows)$/;"	f	class:SceneNpc
buffSelf	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::buffSelf()$/;"	f	class:SceneNpc
buffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:sendAllObjectListToUser	file:
buffer	base/src/x_buffer.h	/^	BYTE buffer[size];$/;"	m	class:CmdBuffer_wrapper
buffer	deps/tinyxml/tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter
buffer_	tmp/base3/connection.hpp	/^  boost::array<char, 8192> buffer_;$/;"	m	class:http::server2::connection
buffer_type	base/src/tcp_socket.h	/^	typedef asio::streambuf buffer_type;$/;"	t	class:tcp_socket
buffer_type	base/tcp_client.h	/^	typedef asio::streambuf buffer_type;$/;"	t	class:tcp_client
buffer_type	base/tcp_task.h	/^	typedef asio::streambuf buffer_type;$/;"	t	class:tcp_task
buffered	base/src/x_tcptask.h	/^	bool buffered;                  \/**< ÂèëÈÄÅÊåá‰ª§ÊòØÂê¶ÁºìÂÜ≤ *\/$/;"	m	class:x_tcptask
buildMapID	SceneServer/libscenesserver/SceneManager.cpp	/^DWORD SceneManager::buildMapID(DWORD countryid,DWORD mapid)$/;"	f	class:SceneManager
buildMapName	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::buildMapName(DWORD countryid,DWORD mapid,char *out)$/;"	f	class:SceneManager
buildMapName	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::buildMapName(DWORD countryid,const char *in,char *out)$/;"	f	class:SceneManager
buildTable	base/src/codeLib.c	/^void buildTable(void)$/;"	f
bulletin	SessionServer/libsessionserver/SessionServer.h	/^    std::string bulletin;$/;"	m	class:CSchool
byAType	base/include/srvEngine.h	/^			BYTE byAType;$/;"	m	struct:aTypeS::__anon132::__anon133
byAction	base/include/srvEngine.h	/^			BYTE byAction;$/;"	m	struct:aTypeS::__anon132::__anon133
byCmd	base/command.h	/^		BYTE byCmd;$/;"	m	struct:Cmd::stNullUserCmd
byCmd	base/include/csCommon.h	/^/;"	m	struct:Cmd::stNullUserCmd::__anon193::__anon194
byCmdType	base/include/csCommon.h	/^/;"	m	struct:Cmd::stNullUserCmd::__anon193::__anon195
byDirect	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_NpcData
byGoodnessType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
byKingConsort	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_updateConsort
byLevel	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regScene_SceneSession
byMapName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUser_SceneSession
byMutexType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
byName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regScene_SceneSession
byName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUser_SceneSession
byParam	base/command.h	/^		BYTE byParam;$/;"	m	struct:Cmd::stNullUserCmd
byParam	base/include/csCommon.h	/^/;"	m	struct:Cmd::stNullUserCmd::__anon193::__anon194
byParameterType	base/include/csCommon.h	/^/;"	m	struct:Cmd::stNullUserCmd::__anon193::__anon195
byPower	SessionServer/libsessionserver/SessionServer.h	/^    BYTE  byPower[2];$/;"	m	struct:CUnionMember
byReturnCode	base/command.h	/^		BYTE byReturnCode;	\/\/return sub param$/;"	m	struct:Cmd::stServerReturnLoginFailedCmd
byReturnCode	base/include/csCommon.h	/^/;"	m	struct:Cmd::stServerReturnLoginFailedCmd
byState	SessionServer/libsessionserver/SessionServer.h	/^  BYTE  byState; \/\/ ◊¥Ã¨,0Œ™µ¿æﬂŒ¥±ª»ÀªÒ»°,1Œ™µ¿æﬂ“—±ª»ÀªÒ»°$/;"	m	class:CArhat
byState	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapNpcData
byState	base/include/srvEngine.h	/^	BYTE byState[(Cmd::MAX_STATE + 7) \/ 8];$/;"	m	struct:zSceneEntry
byStatus	SessionServer/libsessionserver/SessionServer.h	/^    BYTE  byStatus; \/\/ 2“—Ω®¡¢,1µ»¥˝Ω®¡¢$/;"	m	class:CAlly
byStatus	SessionServer/libsessionserver/SessionServer.h	/^    BYTE  byStatus;$/;"	m	class:CArmy
byStatus	SessionServer/libsessionserver/SessionServer.h	/^    BYTE  byStatus;$/;"	m	struct:CSeptMember
byStatus	SessionServer/libsessionserver/SessionServer.h	/^    BYTE  byStatus;$/;"	m	struct:CUnionMember
byStep	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
bySwitch	base/include/csCommon.h	/^/;"	m	struct:Cmd::stRideMapScreenUserCmd
byTag	SessionServer/libsessionserver/SessionServer.h	/^    BYTE  byTag;$/;"	m	class:CSchoolMember
byTag	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
byType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stTempDegreeMember
byValue	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regScene_ret_SceneSession
byValue	base/include/srvEngine.h	/^		BYTE byValue[2];$/;"	m	union:aTypeS::__anon132
byVote	SessionServer/libsessionserver/SessionServer.h	/^    BYTE          byVote;$/;"	m	class:CSept
byVote	SessionServer/libsessionserver/SessionServer.h	/^    BYTE          byVote;$/;"	m	class:CUnion
byVote	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
byVote	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
bzero	base/include/csCommon.h	223;"	d
c	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zRegion
cache	BillServer/old_back/BillServer.h	/^    CacheContainer cache;$/;"	m	class:BillCache
caculateOnlineNum	SuperServer/ServerManager.cpp	/^const DWORD ServerManager::caculateOnlineNum()$/;"	f	class:ServerManager
calAverageExp	SceneServer/libscenesserver/Team.cpp	/^void Team::calAverageExp(zPosI pos,DWORD sceneid)$/;"	f	class:Team
calAverageExp	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::calAverageExp(zPosI pos,DWORD sceneid)$/;"	f	class:TeamManager
calPreValue	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
calReliveWeaknessProperty	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
calcAll	SceneServer/libscenesserver/zObject.cpp	/^void EquipPack::calcAll() $/;"	f	class:EquipPack
calcFleeScore	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::calcFleeScore(BYTE seat)$/;"	f	class:DDZCardGame
calcNormalScore	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::calcNormalScore(BYTE seat)$/;"	f	class:DDZCardGame
calc_sizes	base/src/getopt.c	/^calc_sizes (const struct argp *argp,  struct parser_sizes *szs)$/;"	f	file:
calculate	tmp/MiniServer/Top100.cpp	/^void Top100::calculate(MiniUser *u)$/;"	f	class:Top100
callTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
callback	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars
callback_func	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Vars
calldaytime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD calldaytime;$/;"	m	class:CSept
calldaytime	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
calltimes	SessionServer/libsessionserver/SessionServer.h	/^    DWORD calltimes;  \/\/¡Ó≈∆ π”√¥Œ ˝$/;"	m	class:CCountry
calltimes	SessionServer/libsessionserver/SessionServer.h	/^    DWORD calltimes;$/;"	m	class:CSept
calltimes	SessionServer/libsessionserver/SessionServer.h	/^    DWORD calltimes;$/;"	m	class:CUnion
calltimes	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
calltimes	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
calmdamN2N	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::calmdamN2N(const Cmd::stAttackMagicUserCmd *rev,SceneNpc *pAtt,SceneNpc *pDef)$/;"	f	class:ScenePk
calmdamN2U	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::calmdamN2U(const Cmd::stAttackMagicUserCmd *rev,SceneNpc *pAtt,SceneUser *pDef)$/;"	f	class:ScenePk
calmdamU2N	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::calmdamU2N(const Cmd::stAttackMagicUserCmd *rev,SceneUser *pAtt,SceneNpc *pDef)$/;"	f	class:ScenePk
calmdamU2U	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::calmdamU2U(const Cmd::stAttackMagicUserCmd *rev,SceneUser *pAtt,SceneUser *pDef)$/;"	f	class:ScenePk
calpdamN2N	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::calpdamN2N(const Cmd::stAttackMagicUserCmd *rev,SceneNpc *pAtt,SceneNpc *pDef)$/;"	f	class:ScenePk
calpdamN2U	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::calpdamN2U(const Cmd::stAttackMagicUserCmd *rev,SceneNpc *pAtt,SceneUser *pDef)$/;"	f	class:ScenePk
calpdamU2N	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::calpdamU2N(const Cmd::stAttackMagicUserCmd *rev,SceneUser *pAtt,SceneNpc *pDef)$/;"	f	class:ScenePk
calpdamU2U	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::calpdamU2U(const Cmd::stAttackMagicUserCmd *rev,SceneUser *pAtt,SceneUser *pDef)$/;"	f	class:ScenePk
camp	SceneServer/libscenesserver/SceneBattlefiel.h	/^	std::map<DWORD ,BCampData* > camp;$/;"	m	class:GangScene
canAddCaptain	SessionServer/libsessionserver/Army.cpp	/^bool CArmy::canAddCaptain()$/;"	f	class:CArmy
canAnswer	SceneServer/libscenesserver/Trade.cpp	/^bool TradeOrder::canAnswer()$/;"	f	class:TradeOrder
canBeAttack	SceneServer/libscenesserver/SceneNpc.cpp	/^bool SceneNpc::canBeAttack()$/;"	f	class:SceneNpc
canChangeColor	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::canChangeColor()$/;"	f	class:EquipPack
canContribute	SceneServer/libscenesserver/zObject.cpp	/^zCountryMaterialB* zObject::canContribute()$/;"	f	class:zObject
canFight	SceneServer/libscenesserver/Horse.cpp	/^bool Horse::canFight()$/;"	f	class:Horse
canFight	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::canFight()$/;"	f	class:ScenePet
canMail	SceneServer/libscenesserver/zObject.cpp	/^bool zObject::canMail()$/;"	f	class:zObject
canMove	SceneServer/libscenesserver/GuardNpc.cpp	/^bool GuardNpc::canMove()$/;"	f	class:GuardNpc
canMove	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::canMove()$/;"	f	class:ScenePet
canProduce	SceneServer/libscenesserver/CountryTech.cpp	/^bool CTech::canProduce(DWORD dwObjectLevel)$/;"	f	class:CTech
canProduce	SceneServer/libscenesserver/CountryTech.cpp	/^bool CountryTechM::canProduce(DWORD dwCountry,DWORD dwObjectType,DWORD dwObjectLevel)$/;"	f	class:CountryTechM
canPut	tmp/MiniServer/DDZCardGame.cpp	/^bool DDZCardGame::canPut(BYTE seat,const Cmd::stPutCardMiniGameCmd *cmd,DWORD len)$/;"	f	class:DDZCardGame
canPutSkill	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::canPutSkill()$/;"	f	class:TeamManager
canRecycle	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
canReg	SceneServer/libscenesserver/SceneUserManager.cpp	/^bool SceneRecycleUserManager::canReg(DWORD id)$/;"	f	class:SceneRecycleUserManager
canRequest	SceneServer/libscenesserver/Trade.cpp	/^bool TradeOrder::canRequest()$/;"	f	class:TradeOrder
canRide	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
canRush	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::canRush()$/;"	f	class:SceneNpc
canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosNpc
canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosUser
canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestUserAndSend
canStart	tmp/MiniServer/MiniGame.cpp	/^bool MiniGame::canStart()$/;"	f	class:MiniGame
canSummon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
canUpgrade	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::canUpgrade(SceneEntryPk *pEntry)$/;"	f	class:zSkill
canUse	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::canUse()$/;"	f	class:zSkill
canUserScroll	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
can_hole	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Hole::can_hole(zObject* ob)$/;"	f	class:Hole
can_input	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ObjectPack
can_trade	SceneServer/libscenesserver/Trade.cpp	/^bool TradeOrder::can_trade()$/;"	f	class:TradeOrder
cancel	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::cancel()$/;"	f	class:TradeOrder
cancelCatcher	SessionServer/libsessionserver/CityManager.cpp	/^bool CCity::cancelCatcher()$/;"	f	class:CCity
cancelCatcher	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::cancelCatcher()$/;"	f	class:CCountry
cancelDiplomat	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::cancelDiplomat()$/;"	f	class:CCountry
cancelList	BillServer/old_back/StockConsign.cpp	/^bool ConsignGoldManager::cancelList(BillUser *pUser,DWORD listid)$/;"	f	class:ConsignGoldManager
cancelList	BillServer/old_back/StockConsign.cpp	/^bool ConsignMoneyManager::cancelList(BillUser *pUser,DWORD listid)$/;"	f	class:ConsignMoneyManager
cancelListAll	BillServer/old_back/StockConsign.cpp	/^bool Consign::cancelListAll()$/;"	f	class:Consign
cancelProtect	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePkState::cancelProtect(SceneUser *pThis,DWORD time)$/;"	f	class:ScenePkState
cancelVistNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
cancel_country_need_money	SceneServer/libscenesserver/ScenesServer.cpp	/^DWORD cancel_country_need_money = 50000; \/\/ƒ¨»œŒÂ∂ß$/;"	v
canon_doc_option	base/src/getopt.c	/^canon_doc_option (const char **name)$/;"	f	file:
capIter	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,CCaptain *>::iterator capIter;$/;"	t	class:CArmyM
captainIndex	SessionServer/libsessionserver/SessionServer.h	/^    std::map<DWORD,CCaptain*> captainIndex;$/;"	m	class:CArmyM
captainIndexValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,CCaptain*>::value_type captainIndexValueType;$/;"	t	class:CArmyM
captain_mode	SceneServer/libscenesserver/SceneServer1.h	/^      captain_mode =   0x04,$/;"	e	enum:Gm::__anon100
captain_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Gm::__anon90
captains	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CCaptain*> captains;$/;"	m	class:CArmy
caption	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
caption	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
caption	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
card_iter	tmp/MiniServer/MiniServer.h	/^typedef std::map<Cmd::Card,DWORD>::iterator card_iter;$/;"	t
cardid	BillServer/old_back/BillServer.h	/^  char          cardid[Cmd::UserServer::CARDID_LENGTH +1];  \/\/≥‰÷µø®∫≈$/;"	m	struct:BillData
cardpoint	base/include/csCommon.h	/^/;"	m	struct:_Object
cardpoint	base/include/srvEngine.h	/^		uint32_t cardpoint;      \/\/ ÈáëÂ≠ê (Â∑≤ÁªèÊó†Áî®)$/;"	m	union:zObjectB::__anon127
cards	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stDealCardMiniGameCmd
cards	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stPutCardMiniGameCmd
cards	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stReserveCardsDDZMiniGameCmd
cards	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stShowHandDDZMiniGameCmd
carrier	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
cartoon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
cartoonData	SceneServer/libscenesserver/SceneServer1.h	/^    Cmd::t_CartoonData cartoonData;$/;"	m	class:CartoonPet
cartoonData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::CartoonPet
cartoonID	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD cartoonID;$/;"	m	class:CartoonPet
cartoonID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::CartoonPet
cartoonID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD cartoonID;        $/;"	m	struct:cartoon_load_struct
cartoonList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
cartoonPetList	SessionServer/libsessionserver/SessionServer.h	/^    hash_map<DWORD,Cmd::t_CartoonData> cartoonPetList;$/;"	m	class:CartoonPetService
cartoonPetMap	SessionServer/libsessionserver/SessionServer.h	/^    hash_map<DWORD,hash_set<DWORD> > cartoonPetMap;$/;"	m	class:CartoonPetService
cartoon_it	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	struct:O::LiveSkills::SceneUser
cartoon_load_define	SessionServer/libsessionserver/CartoonPetService.cpp	/^const dbCol cartoon_load_define[] = {$/;"	v
cartoon_load_struct	SessionServer/libsessionserver/SessionServer.h	/^  cartoon_load_struct()$/;"	f	struct:cartoon_load_struct
cartoon_load_struct	SessionServer/libsessionserver/SessionServer.h	/^struct cartoon_load_struct$/;"	s
cartoon_relation_struct	SessionServer/libsessionserver/SessionServer.h	/^struct cartoon_relation_struct$/;"	s
cartoon_update_define	SessionServer/libsessionserver/CartoonPetService.cpp	/^const dbCol cartoon_update_define[] = {$/;"	v
catcherName	SessionServer/libsessionserver/SessionServer.h	/^    char  catcherName[MAX_NAMESIZE+1]; \/\/ ≤∂Õ∑√˚≥∆$/;"	m	class:CCountry
catcherName	SessionServer/libsessionserver/SessionServer.h	/^    char  catcherName[MAX_NAMESIZE];$/;"	m	class:CCity
catchme	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD catchme; \/\/\/Œ¸“˝π÷ŒÔπ•ª˜◊‘º∫$/;"	m	class:SceneNpc
cc	base/include/srvEngine.h	/^		int cc;$/;"	m	struct:zAStar::zPathPoint
cdata	deps/tinyxml/tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText
center	base/include/srvEngine.h	/^			uint16_t center;\/\/‰∏≠ÂøÉÁÇπ$/;"	m	struct:SkillStatus::__anon138::__anon139
chance	SceneServer/libscenesserver/RebuildObject.cpp	/^int Decompose::chance() const$/;"	f	class:Decompose
changeActionPoint	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
changeAllRepute	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::changeAllRepute(DWORD countryid,int repute)$/;"	f	class:CSeptM
changeAllSeptRepute	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
changeAndRefreshHMS	SceneServer/libscenesserver/ScenePet.cpp	/^void  ScenePet::changeAndRefreshHMS(bool lock,bool sendData)$/;"	f	class:ScenePet
changeAndRefreshHMS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
changeAttackTarget	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
changeCatcher	SessionServer/libsessionserver/CityManager.cpp	/^bool CCity::changeCatcher(UserSession* pUser)$/;"	f	class:CCity
changeCatcher	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::changeCatcher(UserSession* pUser)$/;"	f	class:CCountry
changeDiplomat	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::changeDiplomat(UserSession* pUser)$/;"	f	class:CCountry
changeEmperor	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::changeEmperor(DWORD dwCountryID)$/;"	f	class:CCountry
changeFriendDegree	SessionServer/libsessionserver/Ally.cpp	/^bool CAlly::changeFriendDegree(int degree)$/;"	f	class:CAlly
changeKing	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::changeKing(UserSession* pUser)$/;"	f	class:CCountry
changeLeader	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::changeLeader(char * NewLeaberName)$/;"	f	class:TeamManager
changeLevel	SessionServer/libsessionserver/Sept.cpp	/^void CSept::changeLevel(int level)$/;"	f	class:CSept
changeLevel	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::changeLevel(DWORD dwSeptID,int level)$/;"	f	class:CSeptM
changeMap	SceneServer/libscenesserver/Scene.cpp	/^int Scene::changeMap(SceneUser *pUser,bool deathBackto,bool ignoreWar)$/;"	f	class:Scene
changeMaster	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
changeMaterial	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::changeMaterial(int type,int value)$/;"	f	class:CCountry
changeMaterialByPer	SessionServer/libsessionserver/CountryManager.cpp	/^int CCountry::changeMaterialByPer(int type,float per)$/;"	f	class:CCountry
changeMoney	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
changeName	SessionServer/libsessionserver/Army.cpp	/^void CArmy::changeName(const char* newname)$/;"	f	class:CArmy
changeRelationType	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::changeRelationType(const char * name,const BYTE type)$/;"	f	class:CRelationManager
changeRepute	SessionServer/libsessionserver/Sept.cpp	/^void CSept::changeRepute(int repute)$/;"	f	class:CSept
changeRepute	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::changeRepute(DWORD dwSeptID,int repute)$/;"	f	class:CSeptM
changeScene	RecordServer/RecordUserManager.cpp	/^bool RecordUserM::changeScene(const uint32_t accid, const uint32_t id, const uint32_t dwServerID){$/;"	f	class:RecordUserM
changeStar	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::changeStar(int star)$/;"	f	class:CCountry
changeUnion	SessionServer/libsessionserver/CityManager.cpp	/^bool CCity::changeUnion(DWORD unionid)$/;"	f	class:CCity
change_aliasname	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::change_aliasname(UserSession* pUser,Cmd::stChangeSeptMemberAliasName* pCmd)$/;"	f	class:CSeptM
change_aliasname	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::change_aliasname(const char* aliasname)$/;"	f	class:CSeptMember
change_aliasname	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
change_country	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::change_country(const Cmd::Session::t_changeCountry_SceneSession* cmd)$/;"	f	class:SessionTask
changeface	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
channelUniqeID	SceneServer/libscenesserver/SceneServer1.h	/^                zUniqueDWORDID *channelUniqeID;$/;"	m	class:ChannelM
channelUniqeID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ChannelM
channelUniqeID	SessionServer/libsessionserver/SessionServer.h	/^    zUniqueDWORDID *channelUniqeID;$/;"	m	class:CDareM
channelUniqeID	SessionServer/libsessionserver/SessionServer.h	/^    zUniqueDWORDID *channelUniqeID;$/;"	m	class:CQuizM
channelUniqeID	SessionServer/libsessionserver/SessionServer.h	/^    zUniqueDWORDID *channelUniqeID;$/;"	m	class:SessionChannelManager
channelUniqeID	SessionServer/libsessionserver/SessionServer.h	/^  zUniqueDWORDID *channelUniqeID;$/;"	m	class:CGemM
chaos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
chaos	base/include/csCommon.h	/^/;"	m	struct:_Object
chaos	base/include/srvEngine.h	/^	rangeValue chaos; \/\/Ê∑∑‰π±Â¢ûÂä†$/;"	m	struct:zSoulStoneB
chaosRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
chaosdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
chaosdef	base/include/csCommon.h	/^/;"	m	struct:_Object
chaosdef	base/include/srvEngine.h	/^			luckRangeValue chaosdef;  \/\/ ÊäóÊ∑∑‰π±Â¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
chaosdef	base/include/srvEngine.h	/^	rangeValue chaosdef; \/\/ÊäóÊ∑∑‰π±Â¢ûÂä†$/;"	m	struct:zSoulStoneB
chaosp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
charID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
charInfoFull	GatewayServer/old_back/GatewayServer.h	/^	bool charInfoFull()$/;"	f	class:GateSelectUserSession
charbase	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
charbase	base/include/csCommon.h	/^/;"	m	struct:CharSave
charbase	base/recordcmd.h	/^			CharBase charbase;$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
charge	SessionServer/libsessionserver/SessionServer.h	/^  DWORD charge;$/;"	m	struct:auctionBidInfo
charid	BillServer/old_back/BillServer.h	/^  DWORD  charid;      \/\/\/ Ω«…´±‡∫≈$/;"	m	struct:BillSession
charid	RecordServer/RecordUser.h	/^	uint32_t charid;$/;"	m	class:RecordUser
charid	SessionServer/libsessionserver/SessionServer.h	/^  DWORD charid;$/;"	m	struct:CRelation
charm	base/include/csCommon.h	/^/;"	m	struct:CharState
charm	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
charstate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
chartest	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
chaseMode	SceneServer/libscenesserver/SceneServer1.h	/^  SceneNpcChase chaseMode;$/;"	m	class:SceneNpc
chatColor	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
chatInterval	GatewayServer/old_back/GatewayServer.h	/^	static const DWORD chatInterval = 1000;$/;"	m	class:GatewayTask
chat_cmd	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_privateChat_SceneSession
chat_server	tmp/base3/x_tcp_server.cpp	/^		chat_server(boost::asio::io_service& io_service,$/;"	f	class:chat_server
chat_server	tmp/base3/x_tcp_server.cpp	/^class chat_server$/;"	c	file:
check	FLServer/ServerACL.cpp	/^bool ServerACL::check(const char *strIP,const WORD port,GameZone_t &gameZone,std::string &name) {$/;"	f	class:ServerACL
check	GatewayServer/old_back/CmdChecker.cpp	/^bool CheckerTable::check(int cmd,const zRTime& current) const$/;"	f	class:CheckerTable
check	GatewayServer/old_back/GatewayServer.h	/^	bool check(I cmd,const zRTime& current)$/;"	f	class:CmdChecker
check	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::check()$/;"	f	class:GuardNpc
check	SceneServer/libscenesserver/MessageSystem.cpp	/^void MessageSystem::check(SceneUser *sceneUser,const bool init)$/;"	f	class:MessageSystem
check	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void check() { }$/;"	f	class:SceneNpc
check	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void check(){};$/;"	f	class:ScenePet
check	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ScenePet
check	base/include/csCommon.h	/^/;"	m	struct:Cmd::stStampDataUserCmd
checkAdd	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::checkAdd(SceneUser *pUser,zObject *ob,WORD x,WORD y)$/;"	f	class:EquipPack
checkAdd	SceneServer/libscenesserver/zObject.cpp	/^bool MainPack::checkAdd(SceneUser *pUser,zObject *object,WORD x,WORD y)$/;"	f	class:MainPack
checkAdd	SceneServer/libscenesserver/zObject.cpp	/^bool ObjectPack::checkAdd(SceneUser *pUser,zObject *object,WORD x,WORD y)$/;"	f	class:ObjectPack
checkAdd	SceneServer/libscenesserver/zObject.cpp	/^bool Package::checkAdd(SceneUser *pUser,zObject *object,WORD x,WORD y)$/;"	f	class:Package
checkAdd	SceneServer/libscenesserver/zObject.cpp	/^bool PetPack::checkAdd(SceneUser* pUser,zObject* object,WORD x,WORD y)$/;"	f	class:PetPack
checkAdd	SceneServer/libscenesserver/zObject.cpp	/^bool StorePack::checkAdd(SceneUser * pUser,zObject * object,WORD x,WORD y)$/;"	f	class:StorePack
checkAdoptable	SessionServer/libsessionserver/CartoonPetService.cpp	/^void CartoonPetService::checkAdoptable(DWORD id)$/;"	f	class:CartoonPetService
checkAndReloadConfig	SceneServer/libscenesserver/ScenesServer.cpp	/^void ScenesService::checkAndReloadConfig()$/;"	f	class:ScenesService
checkAndSave	RecordServer/RecordUserManager.cpp	/^void RecordUserM::checkAndSave(){$/;"	f	class:RecordUserM
checkAttackSpeed	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePk::checkAttackSpeed(SceneUser *pAtt,const Cmd::stAttackMagicUserCmd *rev)$/;"	f	class:ScenePk
checkBind	SceneServer/libscenesserver/zObject.cpp	/^void zObject::checkBind()$/;"	f	class:zObject
checkBlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
checkCallObj	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
checkChatCmd	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::checkChatCmd(DWORD type,const char *strName)$/;"	f	class:GateUser
checkChatCmd	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
checkChatCmd	SessionServer/libsessionserver/Session.cpp	/^bool UserSession::checkChatCmd(const Cmd::stNullUserCmd *pstrCmd,const DWORD nCmdLen) const$/;"	f	class:UserSession
checkConn	base/src/zTCPClientTask.cpp	/^void x_tcp_clientTask::checkConn()$/;"	f	class:x_tcp_clientTask
checkCooling	SceneServer/libscenesserver/Leechdom.cpp	/^void Leechdom::checkCooling()$/;"	f	class:Leechdom
checkCountry	SessionServer/libsessionserver/SessionServer.cpp	/^void SessionService::checkCountry(struct tm &tmValue,bool donow)$/;"	f	class:SessionService
checkDB	SessionServer/libsessionserver/AuctionService.cpp	/^void AuctionService::checkDB()$/;"	f	class:AuctionService
checkDB	SessionServer/libsessionserver/ForbidTalkManager.cpp	/^void ForbidTalkManager::checkDB()$/;"	f	class:ForbidTalkManager
checkDB	SessionServer/libsessionserver/MailService.cpp	/^void MailService::checkDB()$/;"	f	class:MailService
checkDependency	SuperServer/ServerTask.cpp	/^bool ServerTask::checkDependency() {$/;"	f	class:ServerTask
checkEndBattleTime	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::checkEndBattleTime(const zRTime &ct)$/;"	f	class:SceneEntryPk
checkEndTime	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::checkEndTime()$/;"	f	class:Rush
checkField	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
checkFirstMainLoop	base/include/srvEngine.h	/^	bool checkFirstMainLoop()$/;"	f	class:x_tcp_clientTask
checkGold	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::checkGold(DWORD need)$/;"	f	class:Packages
checkGoodness	SceneServer/libscenesserver/ScenePk.cpp	/^bool SceneUser::checkGoodness()$/;"	f	class:SceneUser
checkIOForRead	base/include/x_socket.cpp	/^int x_socket::checkIOForRead()$/;"	f	class:x_socket
checkIOForWrite	base/include/x_socket.cpp	/^int x_socket::checkIOForWrite()$/;"	f	class:x_socket
checkIncCity	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
checkInterval	base/src/x_tcptask.h	/^	bool checkInterval(const double ct)$/;"	f	class:x_tcptask
checkMagicFlyRoute	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::checkMagicFlyRoute(zSceneEntry *pTarget,BYTE aType)$/;"	f	class:SceneEntryPk
checkMainCity	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
checkMasterTarget	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::checkMasterTarget(SceneEntryPk *&ret)$/;"	f	class:ScenePet
checkMeAndPrenticeNumberAndLevel	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::checkMeAndPrenticeNumberAndLevel()$/;"	f	class:CSchoolMember
checkMessageTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
checkMoney	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::checkMoney(DWORD need)$/;"	f	class:Packages
checkMoney	tmp/MiniServer/MiniUser.cpp	/^bool MiniUser::checkMoney(int num)$/;"	f	class:MiniUser
checkMountHorse	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
checkNewName	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::checkNewName(char * newName)$/;"	f	class:GatewayTask
checkObjectBlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
checkOffline	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::checkOffline(SceneUser *pUser)$/;"	f	class:TeamManager
checkOverdue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
checkOverdue	SessionServer/libsessionserver/TempArchive.cpp	/^void GlobalTempArchiveIndex::checkOverdue()$/;"	f	class:GlobalTempArchiveIndex
checkPassport	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::checkPassport(const char *passport)$/;"	f	class:GateUser
checkPhaseTime	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::checkPhaseTime()$/;"	f	class:Rush
checkProtect	SceneServer/libscenesserver/ScenePk.cpp	/^void ScenePk::checkProtect(SceneEntryPk *psAtt,SceneEntryPk *psDef)$/;"	f	class:ScenePk
checkProtectOverdue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
checkRebound	BillServer/old_back/BillClient.cpp	/^int BillClient::checkRebound()$/;"	f	class:BillClient
checkRebound	GatewayServer/old_back/SceneClient.cpp	/^int SceneClient::checkRebound()$/;"	f	class:SceneClient
checkRebound	SuperServer/InfoClient.cpp	/^int InfoClient::checkRebound()$/;"	f	class:InfoClient
checkRebound	base/include/srvEngine.h	/^	virtual int checkRebound()$/;"	f	class:x_tcp_clientTask
checkRecycle	BillServer/old_back/BillTask.cpp	/^bool BillTask::checkRecycle()$/;"	f	class:BillTask
checkRecycle	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::checkRecycle()$/;"	f	class:SceneTask
checkRecycle	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::checkRecycle()$/;"	f	class:SessionTask
checkRecycle	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::checkRecycle()$/;"	f	class:MiniTask
checkSchoolCreateCondition	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::checkSchoolCreateCondition(const UserSession *pUser)$/;"	f	class:CSchoolM
checkSchoolCreateCondition	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::checkSchoolCreateCondition()$/;"	f	class:CSchoolMember
checkSequence	SuperServer/ServerManager.cpp	/^void ServerManager::checkSequence(){$/;"	f	class:ServerManager
checkSequenceTime	SuperServer/ServerTask.h	/^		bool checkSequenceTime()$/;"	f	class:ServerTask
checkShutdown	SessionServer/libsessionserver/SessionServer.cpp	/^bool SessionService::checkShutdown()$/;"	f	class:SessionService
checkSignal	base/src/x_tcptask.cpp	/^void x_tcptask::checkSignal(const double ct)$/;"	f	class:x_tcptask
checkSkillBook	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::checkSkillBook(bool nextbase)$/;"	f	class:zSkill
checkSkillStudy	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::checkSkillStudy(bool nextbase)$/;"	f	class:zSkill
checkStateTimeout	base/include/srvEngine.h	/^	bool checkStateTimeout(const ConnState state,const zTime &ct,const time_t timeout) const$/;"	f	class:x_tcp_clientTask
checkStockLogin	BillServer/BillUser.cpp	/^bool BillUser::checkStockLogin()$/;"	f	class:BillUser
checkSummonTime	SceneServer/libscenesserver/Horse.cpp	/^bool Horse::checkSummonTime()$/;"	f	class:Horse
checkSummonTime	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::checkSummonTime()$/;"	f	class:Rush
checkTable	base/src/codeLib.c	/^void checkTable(void)$/;"	f
checkTick	base/src/x_tcptask.h	/^	bool checkTick() const$/;"	f	class:x_tcptask
checkTicket	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::checkTicket(DWORD need)$/;"	f	class:Packages
checkTime	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::checkTime(const zRTime &ct)$/;"	f	class:GatewayTask
checkTimeInterval	GatewayServer/old_back/GatewayTask.cpp	11;"	d	file:
checkTwoPosIInNine	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
checkUnloadOneScene	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::checkUnloadOneScene()$/;"	f	class:SceneManager
checkUpdateTime	GatewayServer/LoginSessionManager.cpp	/^bool LoginSessionManager::checkUpdateTime(const ptime &ct) {$/;"	f	class:LoginSessionManager
checkUpdateTime	GatewayServer/old_back/GatewayServer.h	/^	bool checkUpdateTime(const zRTime &ct)$/;"	f	class:LoginSessionManager
checkUserCmd	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::checkUserCmd(const Cmd::stNullUserCmd *pCmd,const zRTime &ct)$/;"	f	class:GatewayTask
checkUserCmd	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
checkUserDup	SceneServer/libscenesserver/duplicateManager.cpp	/^dupScenePair duplicateManager::checkUserDup(SceneUser *user)$/;"	f	class:duplicateManager
checkUserLevel	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::checkUserLevel(SceneUser *pUser)$/;"	f	class:Scene
checkVerifyTimeout	base/src/x_tcptask.h	/^	bool checkVerifyTimeout(const double interval = 2.0) const$/;"	f	class:x_tcptask
checkVisitNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
checkWeapon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
checkWinnerExp	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::checkWinnerExp()$/;"	f	class:CCountry
checkZoneType	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::checkZoneType(const zPos &pos,const int type) const$/;"	f	class:Scene
check_args	SceneServer/libscenesserver/QuestAction.cpp	/^bool Action::check_args(SceneUser* user,Vars* vars) const$/;"	f	class:Action
check_args	SceneServer/libscenesserver/QuestCondition.cpp	/^bool Condition::check_args(const SceneUser* user,const Vars* vars) const$/;"	f	class:Condition
check_args	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_args(SceneUser* user,Vars* vars) const$/;"	f	class:AddGuardAction
check_args	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_args(SceneUser* user,Vars* vars) const$/;"	f	class:GlobalAction
check_args	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_args(SceneUser* user,Vars* vars) const$/;"	f	class:NpcAction
check_args	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_args(SceneUser* user,Vars* vars) const$/;"	f	class:TongVarAction
check_args	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_args(const SceneUser* user,const Vars* vars) const$/;"	f	class:GlobalCondition
check_args	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_args(const SceneUser* user,const Vars* vars) const$/;"	f	class:TimerCondition
check_args	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_args(const SceneUser* user,const Vars* vars) const$/;"	f	class:TongVarCondition
check_args	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GlobalCondition
check_args	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TimerCondition
check_args	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TongVarCondition
check_count	GatewayServer/old_back/GatewayServer.h	/^	static bool check_count(const zRTime& current,CheckInfo& check)$/;"	f	class:percent_up_off
check_interval	GatewayServer/old_back/GatewayServer.h	/^	static bool check_interval(const zRTime& current,CheckInfo& check)$/;"	f	class:percent_up_off
check_material	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::check_material(zObjectB* ob,const std::map<DWORD,DWORD>& list,bool is_resource)$/;"	f	class:EquipMaker
check_material1	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::check_material1(zObjectB* ob,const std::map<DWORD,DWORD>& list)$/;"	f	class:EquipMaker
check_money	SceneServer/libscenesserver/script_func.cpp	/^bool check_money(SceneUser* user,int money)$/;"	f
check_npc	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Base::check_npc(SceneUser& user,zObjectB* base,int action)$/;"	f	class:Base
check_queue	base/src/x_tcptaskpool.cpp	/^	inline void check_queue()	\/\/move the tcptask from x_tcptaskpool to thread$/;"	f	class:zTCPTaskQueue
check_queue	base/src/zTCPClientTaskPool.cpp	/^	inline void check_queue()$/;"	f	class:x_tcp_clientTaskQueue
check_skill	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::check_skill(SceneUser& user,zObjectB* ob)$/;"	f	class:EquipMaker
check_space	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Base::check_space(SceneUser& user,DWORD w,DWORD h)$/;"	f	class:Base
check_tid	BillServer/BillUser.cpp	/^bool BillUser::check_tid(const char *t)$/;"	f	class:BillUser
check_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool CaptionCondition::check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:CaptionCondition
check_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool CountryPowerCondition::check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:CountryPowerCondition
check_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool HonorCondition::check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:HonorCondition
check_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool MapCountryCondition::check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:MapCountryCondition
check_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool MaxHonorCondition::check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:MaxHonorCondition
check_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool SelfCountryCondition::check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:SelfCountryCondition
check_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool TeamedCondition::check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:TeamedCondition
check_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool WeekCondition::check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:WeekCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:ActionPointCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:FamilyLevelCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:FamilyVarCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:FiveLevelCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:GlobalCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:ReputeCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:TongVarCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:UserVarCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:UsersVarCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid (const SceneUser* user,const Vars* vars) const$/;"	f	class:VarCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:CheckSexCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:ConfraternityCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:FiveTypeCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:GoldCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:GradeCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:HaveSkillCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:HorseCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:InNationCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:IsGuardCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:ItemCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:LevelCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:NationCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:ProfessionCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:SeptIDCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:SpaceCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:TimeoutsCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:TimerCondition
check_valid	SceneServer/libscenesserver/SceneServer1.h	/^  bool check_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:UnionIDCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ActionPointCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:CheckSexCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ConfraternityCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FamilyLevelCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FamilyVarCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FiveLevelCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FiveTypeCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GlobalCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GoldCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GradeCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:HaveSkillCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:HorseCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:InNationCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:IsGuardCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ItemCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:LevelCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:NationCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ProfessionCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ReputeCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SeptIDCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SpaceCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TimeoutsCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TimerCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TongVarCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UnionIDCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UserVarCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UsersVarCondition
check_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarCondition
checkconnectThread	base/include/srvEngine.h	/^	zCheckconnectThread *checkconnectThread;;$/;"	m	class:x_tcp_clientTaskPool
checkholym	SceneServer/libscenesserver/ScenePk.cpp	2459;"	d	file:
checkholyp	SceneServer/libscenesserver/ScenePk.cpp	2445;"	d	file:
checkwaitThread	base/include/srvEngine.h	/^	zCheckwaitThread *checkwaitThread;;$/;"	m	class:x_tcp_clientTaskPool
child_inputs	base/include/argp.h	/^  void **child_inputs;$/;"	m	struct:argp_state
child_inputs	base/src/getopt.c	/^  void **child_inputs;$/;"	m	struct:parser	file:
child_inputs	base/src/getopt.c	/^  void *input, **child_inputs;$/;"	m	struct:group	file:
child_inputs_end	base/src/getopt.c	/^  void **child_inputs_end;$/;"	m	struct:parser_convert_state	file:
children	base/include/argp.h	/^  const  struct argp_child *children;$/;"	m	struct:argp	typeref:struct:argp::argp_child
chooseEnemy	SceneServer/libscenesserver/SceneNpcAI.cpp	/^SceneEntryPk * SceneNpc::chooseEnemy(SceneEntryPk_vec& enemies)$/;"	f	class:SceneNpc
chooseEnemy	SceneServer/libscenesserver/ScenePet.cpp	/^SceneEntryPk * ScenePet::chooseEnemy(SceneEntryPk_vec &enemies)$/;"	f	class:ScenePet
chr	deps/tinyxml/tinyxml.h	/^		char		    chr;$/;"	m	struct:TiXmlBase::Entity
circleDups	SceneServer/libscenesserver/duplicateManager.h	/^	  std::map<DWORD,unsigned short> circleDups;\/\/÷‹∆⁄–‘∏±±æ$/;"	m	struct:userDupMap
cityCallback	SessionServer/libsessionserver/SessionServer.h	/^    struct cityCallback$/;"	s	class:CCityM
cityID	SessionServer/libsessionserver/TimeTick.cpp	/^	DWORD cityID;$/;"	m	struct:rushCallback	file:
citys	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CCity*> citys;$/;"	m	class:CCityM
clean	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::clean()$/;"	f	class:DDZCardGame
clear	SceneServer/libscenesserver/Leechdom.cpp	/^void Leechdom::clear()$/;"	f	class:Leechdom
clear	SceneServer/libscenesserver/Quest.cpp	/^void QuestList::clear(SceneUser* pUser)$/;"	f	class:QuestList
clear	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
clear	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:stIncrementBySuit
clear	SceneServer/libscenesserver/SkillManager.cpp	/^void UserSkillM::clear()$/;"	f	class:UserSkillM
clear	SceneServer/libscenesserver/Trade.cpp	/^void PrivateStore::clear()$/;"	f	class:PrivateStore
clear	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::clear()$/;"	f	class:TradeOrder
clear	SessionServer/libsessionserver/EmperorForbid.cpp	/^void EmperorForbid::clear()$/;"	f	class:EmperorForbid
clear	base/include/srvEngine.h	/^			uint16_t clear;\/\/ËÉΩÂê¶Ê∏ÖÈô§$/;"	m	struct:SkillStatus::__anon138::__anon139
clear	base/include/srvEngine.h	/^	inline void clear()$/;"	f	class:LimitHash
clear	base/include/srvEngine.h	/^	inline void clear()$/;"	f	class:MultiHash
clear	base/include/srvEngine.h	/^	inline void clear()$/;"	f	class:zEntryManager
clear	base/include/srvEngine.h	/^	inline void clear(){}$/;"	f	class:zEntryNone
clear	base/include/srvEngine.h	/^	void clear()$/;"	f	class:MsgQueue
clear	base/x_msgqueue.h	/^	void clear() {$/;"	f	class:MsgQueue
clear	tmp/MiniServer/MiniServer.h	/^    void clear(){_valid = false;}$/;"	f	class:CardPattern
clearActiveElement	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
clearActiveSkillStatus	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
clearActiveSkillStatusOnlyUseToStatus48	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
clearAllNextLevelRelation	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::clearAllNextLevelRelation()$/;"	f	class:CSchoolMember
clearAllUseTime	SceneServer/libscenesserver/SkillManager.cpp	/^void UserSkillM::clearAllUseTime(DWORD skillID)$/;"	f	class:UserSkillM
clearBadActiveSkillStatus	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
clearBlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
clearCatcher	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::clearCatcher()$/;"	f	class:CCountryM
clearDBTable	SessionServer/libsessionserver/Sort.cpp	/^bool CSortM::clearDBTable()$/;"	f	class:CSortM
clearDefTarget	SceneServer/libscenesserver/SceneEntryPk.cpp	/^void SceneEntryPk::clearDefTarget()$/;"	f	class:SceneEntryPk
clearDelay	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
clearDiplomat	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::clearDiplomat()$/;"	f	class:CCountryM
clearDup	SceneServer/libscenesserver/duplicateManager.cpp	/^void duplicateManager::clearDup(std::list<clearDupStruct>::iterator &it)$/;"	f	class:duplicateManager
clearDupStruct	SceneServer/libscenesserver/duplicateManager.h	/^struct clearDupStruct$/;"	s
clearEmperorDare	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::clearEmperorDare(Scene *scene)$/;"	f	class:SceneUserManager
clearExp	SessionServer/libsessionserver/SessionServer.h	/^    void  clearExp()$/;"	f	class:CSept
clearFieldMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
clearForbid	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::clearForbid()$/;"	f	class:CCountryM
clearForbidTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD clearForbidTime;$/;"	m	class:CCountryM
clearInValidNodeRelation	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMemberListCallback::clearInValidNodeRelation()$/;"	f	class:CSchoolMemberListCallback
clearIncMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
clearMainMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
clearMana	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
clearMapElement	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
clearMaster	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::clearMaster()$/;"	f	class:ScenePet
clearMaster	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::clearMaster()$/;"	f	class:CSchoolMember
clearMe	SceneServer/libscenesserver/SceneServer1.h	/^  bool clearMe;$/;"	m	class:SceneNpc
clearNPC	SessionServer/libsessionserver/Gem.cpp	/^bool CArhat::clearNPC()$/;"	f	class:CArhat
clearObject	SceneServer/libscenesserver/Scene.cpp	/^  void clearObject()$/;"	f	struct:RemoveSceneObjectCallBack
clearObject	SceneServer/libscenesserver/Scene.cpp	/^  void clearObject()$/;"	f	struct:UpdateSceneObjectCallBack
clearObjectBlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
clearPreLevelNode	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::clearPreLevelNode()$/;"	f	class:CSchoolMember
clearProtect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::ScenePkState
clearQuizState	GatewayServer/old_back/GatewayServer.h	/^	void clearQuizState()$/;"	f	class:GateUser
clearRecoveryElement	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
clearSearcher	SessionServer/libsessionserver/CountryManager.cpp	/^void CTech::clearSearcher(UserSession* pUser)$/;"	f	class:CTech
clearServants	SceneServer/libscenesserver/Rush.cpp	/^void Rush::clearServants()$/;"	f	class:Rush
clearSkill	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
clearState	base/src/x_tcptaskpool.h	/^	void clearState(const int state)$/;"	f	class:x_tcptaskpool
clearTeacherRelation	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::clearTeacherRelation()$/;"	f	class:CSchoolMember
clearTick	base/src/x_tcptask.h	/^	void clearTick()$/;"	f	class:x_tcptask
clearUState	base/include/srvEngine.h	/^	inline bool clearUState(const int state)$/;"	f	struct:zSceneEntry
clearUnion	SessionServer/libsessionserver/SessionServer.h	/^    void clearUnion()$/;"	f	class:CSept
clearUseTime	SceneServer/libscenesserver/Skill.cpp	/^void zSkill::clearUseTime()$/;"	f	class:zSkill
clearVoted	SessionServer/libsessionserver/Vote.cpp	/^bool CVote::clearVoted()$/;"	f	class:CVote
clearWarRecord	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
clear_flag	base/include/x_socket.h	/^	void clear_flag(uint32_t _f) { bitmask &= ~_f; }$/;"	f	class:x_socket
clear_state	base/include/csCommon.h	/^/;"	f	namespace:Cmd
clearskill	SceneServer/libscenesserver/SkillManager.cpp	/^void UserSkillM::clearskill(DWORD skillid)$/;"	f	class:UserSkillM
client_ip	BillServer/BillUser.h	/^	DWORD client_ip;$/;"	m	class:BillUser
client_ip	BillServer/old_back/BillServer.h	/^    char     client_ip[MAX_IP_LENGTH];              \/\/øÕªß«Î«Ûip$/;"	m	class:BillUser
client_ip	BillServer/old_back/BillServer.h	/^  char client_ip[MAX_IP_LENGTH];$/;"	m	struct:BillInfo
client_ip	base/flcmd.h	/^		DWORD client_ip;$/;"	m	struct:Cmd::t_NewLoginSession
close	SuperServer/ServerTask.cpp	/^void ServerTask::close()$/;"	f	class:ServerTask
close	base/include/srvEngine.h	/^		close    =  0,            \/**< ËøûÊé•ÂÖ≥Èó≠Áä∂ÊÄÅ *\/$/;"	e	enum:x_tcp_clientTask::ConnState
close	base/src/tcp_socket.h	/^	void close() {$/;"	f	class:tcp_socket
close	base/src/x_tcp_client.h	/^	virtual void close()$/;"	f	class:x_tcp_client
close	base/src/x_tcp_client.h	/^	void close()$/;"	f	class:x_tcp_buffer_client
close	base/tcp_client.h	/^	void close() {$/;"	f	class:tcp_client
close	base/tcp_task.cpp	/^void tcp_task::close() { $/;"	f	class:tcp_task
closeCount	SceneServer/libscenesserver/SceneServer1.h	/^  int closeCount;\/\/◊∑÷º∆ ˝,10≤Ω“‘ƒ⁄◊Ó∂Ãæ‡¿Î√ª”–ºı…Ÿ‘Ú»œŒ™ƒø±Í≤ªø…µΩ¥Ô$/;"	m	class:SceneNpc
closeFunctionNpc	SceneServer/libscenesserver/SceneNpcManager.cpp	/^void SceneNpcManager::closeFunctionNpc()$/;"	f	class:SceneNpcManager
cluster	base/src/getopt.c	/^  struct hol_cluster *cluster;$/;"	m	struct:hol_entry	typeref:struct:hol_entry::hol_cluster	file:
clusters	base/src/getopt.c	/^  struct hol_cluster *clusters;$/;"	m	struct:hol	typeref:struct:hol::hol_cluster	file:
cm	SceneServer/libscenesserver/SceneServer1.h	/^                static ChannelM * cm;$/;"	m	class:ChannelM
cm	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ChannelM
cmd	SceneServer/libscenesserver/Scene.cpp	/^  const void *cmd;    \/\/\/ ÂæÖÂèëÈÄÅÁöÑÊåá‰ª§$/;"	m	struct:SceneSendToEveryOne	file:
cmd	SceneServer/libscenesserver/Scene.cpp	/^  const void *cmd;    \/\/\/ ÂæÖÂèëÈÄÅÁöÑÊåá‰ª§$/;"	m	struct:SceneSendToUnWatchTrap	file:
cmd	SceneServer/libscenesserver/Scene.cpp	/^  const void *cmd;    \/\/\/ ÂæÖÂèëÈÄÅÁöÑÊåá‰ª§$/;"	m	struct:SceneSendToWatchTrap	file:
cmd	SceneServer/libscenesserver/Scene.cpp	/^  const void *cmd;    \/\/\/ ÂæÖÂèëÈÄÅÁöÑÊåá‰ª§$/;"	m	struct:SendToEveryOneExceptMe	file:
cmd	SceneServer/libscenesserver/SceneServer1.h	/^        const char *cmd;$/;"	m	struct:Gm
cmd	SceneServer/libscenesserver/SceneServer1.h	/^      Cmd::stChannelChatUserCmd cmd;$/;"	m	struct:MessageSystem::t_Message
cmd	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Gm
cmd	SceneServer/libscenesserver/TeamManager.cpp	/^  void *cmd;$/;"	m	struct:SendCmdExec	file:
cmd	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forwardUser_SceneSession
cmd	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendCmd_SceneSession
cmd	base/x_nullcmd.h	/^		BYTE cmd;$/;"	m	struct:Cmd::t_NullCmd
cmdFilter	GatewayServer/old_back/GateUser.cpp	/^void GateUser::cmdFilter(Cmd::stNullUserCmd *cmd,DWORD &type,char *name,DWORD &cmdLen)$/;"	f	class:GateUser
cmdLen	SceneServer/libscenesserver/TeamManager.cpp	/^  DWORD cmdLen;$/;"	m	struct:SendCmdExec	file:
cmdLen	SessionServer/libsessionserver/SessionServer.h	/^  DWORD cmdLen;$/;"	m	struct:OneCountryScene
cmdLen	SessionServer/libsessionserver/SessionTask.cpp	/^  DWORD cmdLen;$/;"	m	struct:EveryUserSessionAction	file:
cmdLen	SessionServer/libsessionserver/SessionTask.cpp	/^  DWORD cmdLen;$/;"	m	struct:OneCountryUserSessionAction	file:
cmdLen	SessionServer/libsessionserver/SessionTask.cpp	/^  DWORD cmdLen;$/;"	m	struct:broadcastToEveryUser	file:
cmdMsgParse	BillServer/BillTask.cpp	/^bool BillTask::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen) {$/;"	f	class:BillTask
cmdMsgParse	BillServer/old_back/BillClient.cpp	/^bool BillClient::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:BillClient
cmdMsgParse	BillServer/old_back/BillTask.cpp	/^bool BillTask::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:BillTask
cmdMsgParse	GatewayServer/BillClient.cpp	/^bool BillClient::cmdMsgParse(const Cmd::t_NullCmd* cmd, const uint32_t len)$/;"	f	class:BillClient
cmdMsgParse	GatewayServer/RecordClient.h	/^	virtual bool cmdMsgParse(const Cmd::t_NullCmd* cmd, const uint32_t len){$/;"	f	class:RecordClient
cmdMsgParse	GatewayServer/SessionClient.h	/^	virtual bool cmdMsgParse(const Cmd::t_NullCmd* cmd, const uint32_t len){$/;"	f	class:SessionClient
cmdMsgParse	RecordServer/RecordTask.cpp	/^bool RecordTask::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen)$/;"	f	class:RecordTask
cmdMsgParse	SceneServer/RecordClient.h	/^	virtual bool cmdMsgParse(const Cmd::t_NullCmd* cmd, const uint32_t len){$/;"	f	class:RecordClient
cmdMsgParse	SceneServer/SceneTask.cpp	/^bool SceneTask::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen)$/;"	f	class:SceneTask
cmdMsgParse	SceneServer/SessionClient.h	/^	virtual bool cmdMsgParse(const Cmd::t_NullCmd* cmd, const uint32_t len){$/;"	f	class:SessionClient
cmdMsgParse	SceneServer/libscenesserver/RecordClient.cpp	/^bool RecordClient::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:RecordClient
cmdMsgParse	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::cmdMsgParse(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SceneTask
cmdMsgParse	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse	SessionServer/RecordClient.h	/^	virtual bool cmdMsgParse(const Cmd::t_NullCmd* cmd, const uint32_t len){$/;"	f	class:RecordClient
cmdMsgParse	SessionServer/SessionTask.cpp	/^bool SessionTask::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen)$/;"	f	class:SessionTask
cmdMsgParse	SessionServer/libsessionserver/RecordClient.cpp	/^bool RecordClient::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:RecordClient
cmdMsgParse	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::cmdMsgParse(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SessionTask
cmdMsgParse	SuperServer/FLClient.cpp	/^bool FLClient::cmdMsgParse(const Cmd::t_NullCmd* pNullCmd, const uint32_t nCmdLen) {$/;"	f	class:FLClient
cmdMsgParse	base/super_client.h	/^	virtual bool cmdMsgParse(const Cmd::t_NullCmd* cmd, const uint32_t len)$/;"	f	class:super_client
cmdMsgParse	client/ClientConn.cpp	/^bool ClientConn::cmdMsgParse(const Cmd::t_NullCmd* cmd, const uint32_t len){$/;"	f	class:ClientConn
cmdMsgParse	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::cmdMsgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:MiniTask
cmdMsgParse_Army	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Army(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Country	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Country(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Dare	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Dare(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Gem	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Gem(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Other	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Other(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Recommend	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Recommend(const Cmd::t_NullCmd* pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Sept	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Sept(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Sports	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Sports(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Temp	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Temp(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdMsgParse_Union	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::cmdMsgParse_Union(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
cmdQueue	base/include/srvEngine.h	/^	CmdQueue cmdQueue[QueueSize];$/;"	m	class:MsgQueue
cmdQueue	base/include/srvEngine.h	/^	MsgQueue<> cmdQueue;$/;"	m	class:MessageQueue
cmdQueue	base/x_msgqueue.h	/^	CmdQueue cmdQueue[QueueSize];$/;"	m	class:MsgQueue
cmdQueue	base/x_msgqueue.h	/^	MsgQueue<> cmdQueue;$/;"	m	class:MessageQueue
cmd_len	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forwardUser_SceneSession
cmd_queue	GatewayServer/old_back/ScreenIndex.cpp	/^  t_StackCmdQueue cmd_queue;$/;"	m	struct:SendNineExec	file:
cmd_queue	GatewayServer/old_back/ScreenIndex.cpp	/^  t_StackCmdQueue cmd_queue;$/;"	m	struct:SendNineExecExceptMe	file:
cmd_size	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_privateChat_SceneSession
cmd_size	base/src/x_buffer.h	/^	uint32_t cmd_size;$/;"	m	class:CmdBuffer_wrapper
cmd_state	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
cmds	SceneServer/libscenesserver/scriptTickTask.h	/^	typedef std::vector<paras*> cmds;$/;"	t	class:scriptMessageFilter
cnt	base/src/x_buffer.h	/^	type *cnt;$/;"	m	class:CmdBuffer_wrapper
coefficient	base/include/srvEngine.h	/^	int coefficient;\/\/\/ÂçáÁ∫ßÁ≥ªÊï∞$/;"	m	struct:npcSkill
cointype	base/include/srvEngine.h	/^		uint32_t cointype;        \/\/ Ë¥ßÂ∏ÅÁ±ªÂûã$/;"	m	union:zObjectB::__anon127
col	deps/tinyxml/tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor
cold	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
cold	base/include/csCommon.h	/^/;"	m	struct:_Object
cold	base/include/srvEngine.h	/^	rangeValue cold; \/\/ÂÜ∞ÂÜªÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
colddef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
colddef	base/include/csCommon.h	/^/;"	m	struct:_Object
colddef	base/include/srvEngine.h	/^			luckRangeValue colddef;    \/\/ ÊäóÂÜ∞ÂÜªÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
colddef	base/include/srvEngine.h	/^	rangeValue colddef; \/\/ÊäóÂÜ∞ÂÜªÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
coldp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
color	base/include/csCommon.h	/^/;"	m	struct:_Object
color	base/include/srvEngine.h	/^	uint32_t  color;        \/\/ È¢úËâ≤$/;"	m	struct:zNpcB
color	base/include/srvEngine.h	/^	uint32_t color;        \/\/ È¢úËâ≤  $/;"	m	struct:zObjectB
color	base/include/srvEngine.h	/^	uint32_t color;$/;"	m	struct:zHairColourB
coma	base/include/csCommon.h	/^/;"	m	struct:_Object
coma_def	base/include/csCommon.h	/^/;"	m	struct:_Object
comeOut	SceneServer/libscenesserver/Horse.cpp	/^bool Horse::comeOut()$/;"	f	class:Horse
comma	base/src/getopt.c	/^comma (unsigned col, struct pentry_state *pest)$/;"	f	file:
commit	SceneServer/libscenesserver/Trade.cpp	/^bool TradeOrder::commit()$/;"	f	class:TradeOrder
commited	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TradeOrder
commonCountryBacktoMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
commonUserBacktoMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
commoncountrybackto	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
commonuserbackto	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
compile_debug	base/Makefile	/^compile_debug = -g -Wall$/;"	m
compile_debug	tmp/base2/makefile	/^compile_debug = -g -Wall -Werror $(LOKI_OPTIONS)$/;"	m
compile_opt	base/Makefile	/^compile_opt = $(compile_debug) $(SEAL_COMPILE_OPT)$/;"	m
compile_opt	tmp/base2/makefile	/^compile_opt = $(compile_debug)$/;"	m
compile_relase	base/Makefile	/^compile_relase = -g -Wall -O2$/;"	m
compile_relase	tmp/base2/makefile	/^compile_relase = -g -Wall -O2 -Werror $(LOKI_OPTIONS)$/;"	m
compose	SceneServer/libscenesserver/RebuildObject.cpp	/^bool RebuildObject::compose(SceneUser& user,const Cmd::stPropertyUserCmd* cmd)$/;"	f	class:RebuildObject
compose	SceneServer/libscenesserver/RebuildObject.cpp	/^zObject* SoulStone::compose(SceneUser& user,zObject* first,zObject* second,int odds)$/;"	f	class:SoulStone
compose_soul_stone	SceneServer/libscenesserver/RebuildObject.cpp	/^bool RebuildObject::compose_soul_stone(SceneUser& user,const Cmd::stPropertyUserCmd* cmd)$/;"	f	class:RebuildObject
compress	base/include/srvEngine.h	/^	const bool compress;              \/**< ÊòØÂê¶ÊîØÊåÅÂéãÁº© *\/$/;"	m	class:x_tcp_clientTask
compressSaveData	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f
computeResult	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
con	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
con	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
con	base/include/csCommon.h	/^/;"	m	struct:_Object
con	base/include/srvEngine.h	/^			luckRangeValue con;      \/\/ ‰ΩìË¥®$/;"	m	struct:zColorObjectB::__anon128::__anon129
con	base/include/srvEngine.h	/^	rangeValue con;      \/\/ ‰ΩìË¥®$/;"	m	struct:zSoulStoneB
con	base/include/srvEngine.h	/^	uint16_t con;				 \/\/ËÄêÂäõ$/;"	m	struct:zObjectB
con	base/include/srvEngine.h	/^	uint32_t   con;        \/\/ ‰ΩìË¥®$/;"	m	struct:zNpcB
con_Attribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::Freedom_Attribute
con_Attribute	base/include/csCommon.h	/^/;"	m	struct:_Object::Freedom_Attribute
condenseWhiteSpace	deps/tinyxml/tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	file:
condenseWhiteSpace	deps/tinyxml/tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase
confile	base/include/srvEngine.h	/^	std::string confile;$/;"	m	class:zConfile
connPerThread	base/include/srvEngine.h	/^	const uint32_t connPerThread;$/;"	m	class:x_tcp_clientTaskPool
connPerThread	base/src/x_tcptaskpool.cpp	/^	static const x_list_tcptask::size_type connPerThread = 512;  \/\/per thread keep connection num$/;"	m	class:x_okay_thread_functor	file:
connPerThread	base/src/zTCPClientTaskPool.cpp	/^	static const x_tcp_clientTaskContainer::size_type connPerThread = 256;  \/**< √ø∏ˆœﬂ≥Ã¥¯µƒ¡¨Ω” ˝¡ø *\/$/;"	m	class:x_tcp_clientTaskThread	file:
conn_	base/x_simple_db_table.h	/^		boost::shared_ptr<sql::Connection> conn_;$/;"	m	class:x_simple_db_table
connect	BillServer/old_back/BillClient.cpp	/^bool BillClient::connect()$/;"	f	class:BillClient
connect	GatewayServer/old_back/SceneClient.cpp	/^bool SceneClient::connect()$/;"	f	class:SceneClient
connect	SuperServer/InfoClient.cpp	/^bool InfoClient::connect()$/;"	f	class:InfoClient
connect	base/src/tcp_socket.h	/^	bool connect(const std::string& ip, const uint16_t port) {$/;"	f	class:tcp_socket
connect	base/src/x_tcp_client.cpp	/^bool x_tcp_client::connect()$/;"	f	class:x_tcp_client
connect	base/src/x_tcp_client.h	/^	bool connect(const char *ip,const uint16_t port)$/;"	f	class:x_tcp_client
connect	base/src/zTCPClientTask.cpp	/^bool x_tcp_clientTask::connect()$/;"	f	class:x_tcp_clientTask
connect	base/tcp_client.h	/^	bool connect(const std::string& ip, const uint16_t port) {$/;"	f	class:tcp_client
connectToBillServer	GatewayServer/old_back/BillClient.cpp	/^bool BillClient::connectToBillServer()$/;"	f	class:BillClient
connectToMiniServer	GatewayServer/old_back/MiniClient.cpp	/^bool MiniClient::connectToMiniServer()$/;"	f	class:MiniClient
connectToMiniServer	SceneServer/libscenesserver/MiniClient.cpp	/^bool MiniClient::connectToMiniServer()$/;"	f	class:MiniClient
connectToRecordServer	GatewayServer/old_back/RecordClient.cpp	/^bool RecordClient::connectToRecordServer()$/;"	f	class:RecordClient
connectToRecordServer	SceneServer/libscenesserver/RecordClient.cpp	/^bool RecordClient::connectToRecordServer()$/;"	f	class:RecordClient
connectToRecordServer	SessionServer/libsessionserver/RecordClient.cpp	/^bool RecordClient::connectToRecordServer()$/;"	f	class:RecordClient
connectToSceneServer	GatewayServer/old_back/SceneClient.cpp	/^bool SceneClient::connectToSceneServer()$/;"	f	class:SceneClient
connectToSessionServer	GatewayServer/old_back/SessionClient.cpp	/^bool SessionClient::connectToSessionServer()$/;"	f	class:SessionClient
connectToSessionServer	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::connectToSessionServer()$/;"	f	class:SessionClient
connection	tmp/base3/connection.cpp	/^connection::connection(boost::asio::io_service& io_service,$/;"	f	class:http::server2::connection
connection	tmp/base3/connection.hpp	/^class connection$/;"	c	namespace:http::server2
connection_ptr	tmp/base3/connection.hpp	/^typedef boost::shared_ptr<connection> connection_ptr;$/;"	t	namespace:http::server2
consort	base/include/csCommon.h	/^/;"	m	struct:CharBase
consortList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
const_embranchment_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Event
const_iter	BillServer/old_back/BillServer.h	/^    typedef BillClientContainer::const_iterator const_iter;$/;"	t	class:BillClientManager
const_iter	BillServer/old_back/BillServer.h	/^    typedef CacheContainer::const_iterator const_iter;$/;"	t	class:BillCache
const_iter	GatewayServer/old_back/GatewayServer.h	/^	typedef SceneClient_map::const_iterator const_iter;$/;"	t	class:SceneClientManager
const_iter	SuperServer/FLClientManager.h	/^    typedef FLClientContainer::const_iterator const_iter;$/;"	t	class:FLClientManager
const_iter	SuperServer/InfoClientManager.h	/^    typedef InfoClient_map::const_iterator const_iter;$/;"	t	class:InfoClientManager
const_iter	base/include/srvEngine.h	/^	typedef typename hashmap::const_iterator const_iter;$/;"	t	class:LimitHash
const_iter	base/include/srvEngine.h	/^	typedef typename hashmap::const_iterator const_iter;$/;"	t	class:MultiHash
const_iterator	GatewayServer/old_back/GatewayServer.h	/^	typedef CHECK::const_iterator const_iterator;$/;"	t	class:CheckerTable
const_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::Equips
const_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
const_iterator1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::Equips
const_list_iterator	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename LIST::const_iterator const_list_iterator;$/;"	t	class:ProductFactory
const_quest_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::QuestList
const_quest_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::QuestTable
const_user_iter	tmp/MiniServer/MiniServer.h	/^    typedef std::set<MiniUser *,Cmd::MiniUserState>::const_iterator const_user_iter;$/;"	t	class:MiniRoom
const_var_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::UserVar::VAR
const_var_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Vars
const_vars_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::GlobalVarImpl
const_vars_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::UserVar
constructInPlace	base/common.h	/^inline void constructInPlace(T *ptr)$/;"	f
constructInPlace	base/include/srvEngine.h	/^inline  void constructInPlace(_T1  *_Ptr)$/;"	f
consume	tmp/base3/request_parser.cpp	/^boost::tribool request_parser::consume(request& req, char input)$/;"	f	class:http::server2::request_parser
consume_dur_by	SceneServer/libscenesserver/zObject.cpp	/^void ObjectPack::consume_dur_by(SceneUser* user,const zRTime& current)$/;"	f	class:ObjectPack
container	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Package
container	SessionServer/ServerManager.h	/^    Container container;$/;"	m	class:ServerManager
container	SuperServer/ServerManager.h	/^    Container container;$/;"	m	class:ServerManager
container_type	SuperServer/RoleregCache.cpp	/^	typedef hash_map<const char *,RoleData> container_type;$/;"	t	class:RoleDataContainer	file:
content	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stChatCommonMiniGameCmd
content	tmp/base3/reply.hpp	/^  std::string content;$/;"	m	struct:http::server2::reply
continue1	SceneServer/libscenesserver/SceneServer1.h	/^    bool continue1,continue2;$/;"	m	class:Dice
continue1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
continue2	SceneServer/libscenesserver/SceneServer1.h	/^    bool continue1,continue2;$/;"	m	class:Dice
continue2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
convert_options	base/src/getopt.c	/^convert_options (const struct argp *argp,$/;"	f	file:
cost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::RepairCost
cost	base/include/srvEngine.h	/^		int cost;$/;"	m	struct:zAStar::zPathQueue
cost	base/include/srvEngine.h	/^	uint32_t cost;$/;"	m	struct:zHairColourB
cost	base/include/srvEngine.h	/^	uint32_t cost;$/;"	m	struct:zHairStyleB
cost	base/include/srvEngine.h	/^	uint32_t cost;$/;"	m	struct:zHeadListB
costAttackDur	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::costAttackDur(SceneUser *pThis)$/;"	f	class:EquipPack
costAttackDurByPet	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::costAttackDurByPet(SceneUser *pThis)$/;"	f	class:EquipPack
costDefenceDur	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::costDefenceDur(SceneUser *pThis)$/;"	f	class:EquipPack
costDefenceDurByPet	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::costDefenceDurByPet(SceneUser *pThis)$/;"	f	class:EquipPack
count	SceneServer/libscenesserver/CountryDare.cpp	/^  int count;  \/\/\/ ¥ÊªÓµƒNPC∏ˆ ˝$/;"	m	struct:TotalAllNpc	file:
count	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::count() const$/;"	f	class:QuestList
count	SceneServer/libscenesserver/SceneServer1.h	/^      int count;$/;"	m	struct:MessageSystem::t_Message
count	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills
count	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stxml_SuitAttribute
count	SessionServer/libsessionserver/EmperorForbid.cpp	/^DWORD EmperorForbid::count()$/;"	f	class:EmperorForbid
count	SessionServer/libsessionserver/SessionChat.cpp	/^DWORD SessionChannel::count()$/;"	f	class:SessionChannel
count	SessionServer/libsessionserver/SessionServer.h	/^    DWORD count;    \/\/ º« ˝µ•ŒªŒ™√Î$/;"	m	class:CDare
count	SessionServer/libsessionserver/SessionServer.h	/^    DWORD count;$/;"	m	class:CQuiz
count	SessionServer/libsessionserver/SessionServer.h	/^  DWORD count;$/;"	m	struct:worldMsg
count	base/include/csBox.h	/^	uint32_t		count; \/\/ŒÔ∆∑∏ˆ ˝$/;"	m	struct:Cmd::stNpcDirItemDataUserCmd
count	base/include/csCommon.h	/^/;"	m	struct:ZlibObject
count	base/include/csCommon.h	/^/;"	m	struct:ZlibSkill
count	base/include/csCommon.h	/^/;"	m	struct:oskill
countByCity	SessionServer/libsessionserver/Army.cpp	/^int    CArmyM::countByCity(DWORD dwCountryID,DWORD dwCityID)$/;"	f	class:CArmyM
countFriendDegree	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::countFriendDegree()$/;"	f	class:TeamManager
countUser	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
countUserByTask	SceneServer/libscenesserver/SceneUserManager.cpp	/^DWORD SceneUserManager::countUserByTask(SceneTask *task)$/;"	f	class:SceneUserManager
countUserInOneScene	SceneServer/libscenesserver/SceneUserManager.cpp	/^DWORD SceneUserManager::countUserInOneScene(Scene *scene)$/;"	f	class:SceneUserManager
countdown	tmp/MiniServer/MiniServer.h	/^    DWORD countdown;\/\/º∆ ±$/;"	m	class:DDZCardGame
counter	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAddSeptNormalExp	file:
countries	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CCountry*> countries;$/;"	m	class:CCountryM
country	SessionServer/libsessionserver/SessionServer.h	/^    DWORD country;$/;"	m	class:UserSession
country	SessionServer/libsessionserver/SessionServer.h	/^  DWORD country;$/;"	m	struct:OneCountryScene
country	SessionServer/libsessionserver/SessionServer.h	/^  DWORD country;$/;"	m	struct:worldMsg
country	SessionServer/libsessionserver/SessionTask.cpp	/^  DWORD country;$/;"	m	struct:EveryUserSessionAction	file:
country	SessionServer/libsessionserver/SessionTask.cpp	/^  DWORD country;$/;"	m	struct:OneCountryUserSessionAction	file:
country	base/include/csCommon.h	/^/;"	m	struct:CharBase
country	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
country	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
country	tmp/MiniServer/MiniServer.h	/^    WORD country;$/;"	m	class:MiniUser
countryCallback	SessionServer/libsessionserver/SessionServer.h	/^    struct countryCallback$/;"	s	class:CCountryM
countryDareBackToMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
countryDefBackToMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
countryID	GatewayServer/old_back/GatewayServer.h	/^	DWORD countryID;$/;"	m	class:GateUser
countryID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
countryID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
countryID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_UserLogin_Gateway
countryID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserData
countryID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_cityRushCust_SceneSession
countryID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_cityRush_SceneSession
countryLevel	SessionServer/libsessionserver/SessionServer.h	/^    DWORD countryLevel[13];$/;"	m	class:SessionService
countryName	SessionServer/libsessionserver/SessionServer.h	/^    BYTE countryName[MAX_NAMESIZE+1];$/;"	m	class:UserSession
countryPower	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
countryTax	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
countryTechIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryTechM
countryTrans	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::countryTrans(DWORD dwCountryID,DWORD dwLevel)$/;"	f	class:SceneUserManager
country_dic	GatewayServer/old_back/GatewayServer.h	/^	CountryMap country_dic;$/;"	m	class:CountryInfo
country_info	GatewayServer/old_back/GatewayServer.h	/^	CountryInfo country_info;$/;"	m	class:GatewayService
country_info	GatewayServer/old_back/GatewayServer.h	/^	StrVec country_info;$/;"	m	class:CountryInfo
country_info	GatewayServer/old_back/SessionClient.cpp	160;"	d	file:
country_info	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
country_map	SessionServer/libsessionserver/SessionManager.cpp	/^std::map<DWORD,DWORD> UserSession::country_map;$/;"	m	class:UserSession	file:
country_map	SessionServer/libsessionserver/SessionServer.h	/^    static std::map<DWORD,DWORD> country_map;$/;"	m	class:UserSession
country_order	GatewayServer/old_back/GatewayServer.h	/^	DWORD country_order[100];$/;"	m	class:CountryInfo
countrydarebackto	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
countrydefbackto	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
countryid	GatewayServer/old_back/GatewayServer.h	/^		DWORD countryid;$/;"	m	struct:CountryInfo::Info
countryindex	GatewayServer/old_back/GatewayServer.h	/^	CountryUserMap countryindex;$/;"	m	class:GateUserManager
countryinfo	base/include/csCommon.h	/^/;"	m	struct:Cmd::stCountryInfoUserCmd
countrymaterialbm	base/src/zDatabaseManager.cpp	/^zDataBM<zCountryMaterialB,CountryMaterial> &countrymaterialbm = zDataBM<zCountryMaterialB,CountryMaterial>::getMe();$/;"	v
countryname	GatewayServer/old_back/GatewayServer.h	/^		std::string countryname;$/;"	m	struct:CountryInfo::Info
cov	base/include/srvEngine.h	/^	std::vector<CarryObject> cov;$/;"	m	struct:NpcCarryObject
create	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
create	SceneServer/libscenesserver/Skill.cpp	/^zSkill *zSkill::create(SceneEntryPk *pEntry,DWORD id,DWORD level)$/;"	f	class:zSkill
create	SceneServer/libscenesserver/zObject.cpp	/^zObject *zObject::create(zObject *objsrc)$/;"	f	class:zObject
create	SceneServer/libscenesserver/zObject.cpp	/^zObject *zObject::create(zObjectB *objbase,DWORD num,BYTE level)$/;"	f	class:zObject
create	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::create(NpcDareDef::NpcDareRecord &record)$/;"	f	class:CNpcDareObj
createBoxCircle	SceneServer/libscenesserver/boxCircle.cpp	/^void boxCircle::createBoxCircle()$/;"	f	class:boxCircle
createCharCmd	GatewayServer/old_back/GatewayServer.h	/^	Cmd::Record::t_CreateChar_GateRecord createCharCmd;$/;"	m	class:GateUser
createClientConn	client/NetworkManager.cpp	/^ClientConn* NetworkManager::createClientConn()$/;"	f	class:NetworkManager
createDBRecord	SessionServer/libsessionserver/Sort.cpp	/^bool CSortM::createDBRecord()$/;"	f	class:CSortM
createDare_sceneSession	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
createGame	tmp/MiniServer/MiniRoom.cpp	/^MiniGame *MiniRoom::createGame(Cmd::MiniGameID id,DWORD oneGameUserNum,DWORD money)$/;"	f	class:MiniRoom
createNewSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::createNewSchool(const char *userName,const char *schoolName)$/;"	f	class:CSchoolM
createNewSept	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::createNewSept(Cmd::Session::t_addSept_SceneSession *data)$/;"	f	class:CSeptM
createNewVote	SessionServer/libsessionserver/Vote.cpp	/^bool CVoteM::createNewVote(DWORD dwCountry,DWORD dwType,std::vector<CTech*>& items)$/;"	f	class:CVoteM
createRush	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::createRush()$/;"	f	class:SceneNpc
createSchoolFromDB	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::createSchoolFromDB(const stSchoolInfo &info)$/;"	f	class:CSchoolM
createScriptFromFile	SceneServer/libscenesserver/script.cpp	/^LuaScript* ScriptingSystemLua::createScriptFromFile( const std::string & rFile )$/;"	f	class:ScriptingSystemLua
createSeptAndAddMaster	SessionServer/libsessionserver/Sept.cpp	/^CSept* CSeptM::createSeptAndAddMaster(const stSeptInfo & info)$/;"	f	class:CSeptM
createSeptByDBRecord	SessionServer/libsessionserver/Sept.cpp	/^CSept* CSeptM::createSeptByDBRecord(const stSeptInfo & info)$/;"	f	class:CSeptM
createSeptDBRecord	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::createSeptDBRecord(stSeptInfo& info)$/;"	f	class:CSeptM
createState	GatewayServer/old_back/GatewayServer.h	/^	void createState()$/;"	f	class:GateUser
createTempSkill	SceneServer/libscenesserver/Skill.cpp	/^zSkill *zSkill::createTempSkill(SceneEntryPk *pEntry,DWORD id,DWORD level)$/;"	f	class:zSkill
createTime	SessionServer/libsessionserver/SessionServer.h	/^  DWORD createTime;$/;"	m	struct:mailTurnBackInfo
createTime	base/flcmd.h	/^		DWORD createTime;	\/\/ user register time$/;"	m	struct:Cmd::t_NewLoginSession
createUnionAndAddMaster	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
createUnionByDBRecord	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
createUnionCityDare_sceneSession	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
createVM	SceneServer/libscenesserver/script.cpp	/^LuaVM* ScriptingSystemLua::createVM()$/;"	f	class:ScriptingSystemLua
created	tmp/base3/reply.cpp	/^const char created[] =$/;"	m	namespace:http::server2::stock_replies	file:
created	tmp/base3/reply.cpp	/^const std::string created =$/;"	m	namespace:http::server2::status_strings	file:
created	tmp/base3/reply.hpp	/^    created = 201,$/;"	e	enum:http::server2::reply::status_type
createid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	union:O::zObject::__anon51
createid	base/include/csCommon.h	/^/;"	m	union:SaveObject::__anon184
creater	SceneServer/libscenesserver/SceneServer1.h	/^                zEntry creater;$/;"	m	class:Channel
creater	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Channel
createtime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zObject::__anon51::__anon52
createtime	SessionServer/libsessionserver/SessionServer.h	/^    time_t createtime;$/;"	m	class:Session
createtime	SessionServer/libsessionserver/SessionServer.h	/^  zRTime createtime;$/;"	m	struct:TempArchive
createtime	base/include/csCommon.h	/^/;"	m	struct:CharBase
createtime	base/include/csCommon.h	/^/;"	m	struct:SaveObject::__anon184::__anon185
cri	base/include/srvEngine.h	/^	uint32_t   cri;        \/\/ Êö¥Âáª$/;"	m	struct:zNpcB
cri	base/include/srvEngine.h	/^	uint32_t cri;        \/\/ ÈáçÂáª$/;"	m	struct:zPetB
crlf	tmp/base3/reply.cpp	/^const char crlf[] = { '\\r', '\\n' };$/;"	m	namespace:http::server2::misc_strings	file:
cs	SessionServer/libsessionserver/CartoonPetService.cpp	/^CartoonPetService*CartoonPetService::cs = 0;$/;"	m	class:CartoonPetService	file:
cs	SessionServer/libsessionserver/SessionServer.h	/^    static CartoonPetService *cs;$/;"	m	class:CartoonPetService
csm	SessionServer/libsessionserver/SessionServer.h	/^    static CSortM *csm;$/;"	m	class:CSortM
ct	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSceneObject
ctv	SceneServer/libscenesserver/Scene.cpp	/^  const zRTime &ctv;$/;"	m	struct:AICallback	file:
curAI	SceneServer/libscenesserver/SceneServer1.h	/^  t_NpcAIDefine curAI,oldAI;$/;"	m	class:NpcAIController
curMagicManID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
curMagicManType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
curMaxID	base/include/srvEngine.h	/^	T curMaxID;$/;"	m	class:zUniqueID
curPhase	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD curPhase;$/;"	m	class:NpcAIController
curPhase	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
curPointSeat	tmp/MiniServer/MiniServer.h	/^    BYTE curPointSeat;\/\/µ±«∞Ω–≈∆µƒ»À$/;"	m	class:DDZCardGame
curPutSeat	tmp/MiniServer/MiniServer.h	/^    BYTE curPutSeat;\/\/µ±«∞≥ˆ≈∆µƒ»À$/;"	m	class:DDZCardGame
curRevCmd	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
curRevCmdLen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
curTargetID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
curTargetType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
curUserNum	tmp/MiniServer/MiniServer.h	/^    BYTE curUserNum;\/\/µ±«∞»À ˝$/;"	m	class:MiniGame
cur_subject	SessionServer/libsessionserver/SessionServer.h	/^    DWORD cur_subject;$/;"	m	class:CQuiz
currentScene	SceneServer/libscenesserver/duplicateManager.h	/^	  Scene *currentScene;\/\/”√ªßµ±«∞À˘”–‘⁄scene$/;"	m	struct:userDupMap
currentTime	BillServer/old_back/BillServer.h	/^    static zRTime currentTime;$/;"	m	class:BillTimeTick
currentTime	BillServer/old_back/TimeTick.cpp	/^zRTime BillTimeTick::currentTime;$/;"	m	class:BillTimeTick	file:
currentTime	GatewayServer/GatewayServer.h	/^		ptime currentTime;$/;"	m	class:GatewayService
currentTime	GatewayServer/old_back/GatewayServer.h	/^	static zRTime currentTime;$/;"	m	class:GatewayTimeTick
currentTime	GatewayServer/old_back/TimeTick.cpp	/^zRTime GatewayTimeTick::currentTime;$/;"	m	class:GatewayTimeTick	file:
currentTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneTimeTick
currentTime	SceneServer/libscenesserver/TimeTick.cpp	/^zRTime SceneTimeTick::currentTime;$/;"	m	class:SceneTimeTick	file:
currentTime	SessionServer/libsessionserver/TimeTick.cpp	/^zRTime SessionTimeTick::currentTime;$/;"	m	class:SessionTimeTick	file:
currentTime	tmp/MiniServer/MiniServer.h	/^    static zRTime currentTime;$/;"	m	class:MiniTimeTick
currentTime	tmp/MiniServer/TimeTick.cpp	/^zRTime MiniTimeTick::currentTime;$/;"	m	class:MiniTimeTick	file:
current_obj_owner	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Team
current_user	SceneServer/libscenesserver/script_func.cpp	/^SceneUser* current_user = NULL;$/;"	v
cursor	deps/tinyxml/tinyxmlparser.cpp	/^	TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	file:
damage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
damage	base/include/csCommon.h	/^/;"	m	struct:_Object
damage	base/include/srvEngine.h	/^	luckRangeValue  damage;    \/\/ Â¢ûÂä†‰º§ÂÆ≥ÂÄºxÔºÖ$/;"	m	struct:zHolyObjectB
damage	base/include/srvEngine.h	/^	uint32_t  damage;        \/\/ ÊúÄÂ∞èÊîªÂáªÂäõ$/;"	m	struct:zNpcB
damagebonus	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
damagebonus	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
damagebonus	base/include/csCommon.h	/^/;"	m	struct:_Object
damagebonus	base/include/srvEngine.h	/^	uint16_t damagebonus;      \/\/‰º§ÂÆ≥Âä†Êàê$/;"	m	struct:zObjectB
damcooling	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Leechdom
damnum	base/include/srvEngine.h	/^	uint32_t  damnum;              \/\/‰º§ÂÆ≥Âä†Êàê$/;"	m	struct:zSkillB
damtohpper	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
damtohpvalper	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
darePk_sceneSession	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
dareRequest	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::dareRequest(DWORD userId)$/;"	f	class:CNpcDareObj
dareSize	SessionServer/libsessionserver/SessionServer.h	/^    size_t dareSize()$/;"	f	class:CCity
dares	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryDareM
data	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Horse
data	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zObject
data	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
data	SessionServer/libsessionserver/SessionServer.h	/^  Cmd::t_CartoonData data;$/;"	m	struct:cartoon_load_struct
data	SessionServer/libsessionserver/SessionServer.h	/^  char data[0];$/;"	m	struct:TempArchive
data	base/billcmd.h	/^			BYTE data[0];$/;"	m	struct:Cmd::Bill::t_Bill_ForwardBillToScene
data	base/billcmd.h	/^			BYTE data[0];$/;"	m	struct:Cmd::Bill::t_Bill_ForwardUser
data	base/include/csBox.h	/^	t_MapNpcData data;$/;"	m	struct:Cmd::stNpcChangeUserCmd
data	base/include/csCommon.h	/^/;"	m	struct:BinaryArchiveMember
data	base/include/csCommon.h	/^/;"	m	struct:CharSave
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_ForwardMiniToScene
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_ForwardUser
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_UserForwardMini
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_ForwardMini
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stAddOneRoomUserCommonMiniGameCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stAddRoomUserCommonMiniGameCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stGameListCommonMiniGameCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stOneSeatStateCommonMiniGameCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stRetTopCommonMiniGameCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stSeatStateCommonMiniGameCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stUserDataCommonMiniGameCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::stAddMapObjectMapScreenUserCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::stAddUserMapScreenUserCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::stJpegPassportUserCmd
data	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMainUserDataUserCmd
data	base/include/csCommon.h	/^/;"	m	struct:TempArchiveMember
data	base/include/csCommon.h	/^/;"	m	struct:ZlibObject
data	base/include/csCommon.h	/^/;"	m	struct:ZlibSkill
data	base/include/srvEngine.h	/^	rangeValue data;  \/\/‰∫ßÁîüÂ±ûÊÄßÂÄºÁöÑÈöèÊú∫ËåÉÂõ¥$/;"	m	struct:luckRangeValue
data	base/recordcmd.h	/^			char data[0];$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
dataSize	base/include/csCommon.h	/^/;"	m	struct:CharSave
dataSize	base/recordcmd.h	/^			DWORD dataSize;$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
data_define	SessionServer/libsessionserver/EmperorForbid.cpp	/^const dbCol data_define[] = {$/;"	v
datas	FLServer/ServerACL.h	/^	Container datas;$/;"	m	class:ServerACL
datas	SuperServer/RoleregCache.h	/^    DataCache datas;$/;"	m	class:RoleregCache
dattackspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
days	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::StorePack
dbConnPool	BillServer/old_back/BillServer.cpp	/^zDBConnPool *BillService::dbConnPool = NULL;$/;"	m	class:BillService	file:
dbConnPool	BillServer/old_back/BillServer.h	/^    static zDBConnPool *dbConnPool;$/;"	m	class:BillService
dbConnPool	SessionServer/libsessionserver/SessionServer.h	/^    static zDBConnPool *dbConnPool;$/;"	m	class:SessionService
dbConnPool	tmp/MiniServer/MiniServer.cpp	/^zDBConnPool *MiniService::dbConnPool = NULL;$/;"	m	class:MiniService	file:
dbConnPool	tmp/MiniServer/MiniServer.h	/^    static zDBConnPool *dbConnPool;$/;"	m	class:MiniService
dbName	base/include/srvEngine.h	/^	char dbName[MAX_DBSIZE];$/;"	m	struct:UrlInfo
dbmap	base/x_simple_db_table.h	/^		typedef boost::unordered_map<uint32_t,std::pair<uint8_t, uint32_t> > dbmap;$/;"	t	class:x_simple_db_table
ddz_state	tmp/MiniServer/MiniServer.h	/^    }ddz_state;$/;"	m	class:DDZCardGame	typeref:enum:DDZCardGame::DDZ_State
deal	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::deal()$/;"	f	class:DDZCardGame
deallocate	base/include/srvEngine.h	/^	void deallocate(unsigned char* ptr,size_t len)$/;"	f	class:__mt_alloc
deathBackToMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
deathSummonList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
deathUserProtect	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePkState::deathUserProtect(SceneUser *pThis,DWORD defid)$/;"	f	class:ScenePkState
deathWaitTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
death_times	base/include/csCommon.h	/^/;"	m	struct:CharTest
debuffEnemy	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::debuffEnemy(SceneEntryPk * enemy)$/;"	f	class:SceneNpc
debug	base/x_logger.cpp	/^void x_logger::debug(const char * pattern,...)$/;"	f	class:x_logger
debug_mode	SceneServer/libscenesserver/SceneServer1.h	/^      debug_mode =   0x10,$/;"	e	enum:Gm::__anon100
debug_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Gm::__anon90
decode_header	base/src/tcp_socket.h	/^	virtual bool decode_header() {$/;"	f	class:tcp_socket
decode_header	base/tcp_client.h	/^	bool decode_header() {$/;"	f	class:tcp_client
decode_header	base/tcp_task.cpp	/^bool tcp_task::decode_header() {$/;"	f	class:tcp_task
decompose	SceneServer/libscenesserver/RebuildObject.cpp	/^bool RebuildObject::decompose(SceneUser& user,const Cmd::stPropertyUserCmd* cmd)$/;"	f	class:RebuildObject
decreaseAverageExp	SceneServer/libscenesserver/Team.cpp	/^void Team::decreaseAverageExp(SceneUser *pUser)$/;"	f	class:Team
decreaseAverageExp	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::decreaseAverageExp(SceneUser *pUser)$/;"	f	class:TeamManager
decreaseGoldListNum	BillServer/BillUser.cpp	/^void BillUser::decreaseGoldListNum()$/;"	f	class:BillUser
decreaseMoneyListNum	BillServer/BillUser.cpp	/^void BillUser::decreaseMoneyListNum()$/;"	f	class:BillUser
def	base/include/srvEngine.h	/^	uint32_t def;        \/\/ Áâ©Èò≤$/;"	m	struct:zPetB
defB	SceneServer/libscenesserver/SceneServer1.h	/^  WORD defB;$/;"	m	struct:petBonus
defB	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::petBonus
defGood	SceneServer/libscenesserver/ScenePk.cpp	1067;"	d	file:
defKingName	SessionServer/libsessionserver/SessionServer.h	/^    char    defKingName[MAX_NAMESIZE+1];$/;"	m	class:CDareRecord
defSub	SceneServer/libscenesserver/ScenePk.cpp	1069;"	d	file:
defTargetID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
defTargetType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
defaultO	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser::box_target
defaultvictory	SceneServer/libscenesserver/SceneBattlefiel.h	/^	eVictoryType defaultvictory;$/;"	m	class:GangScene
defcooling	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Leechdom
defencefive	base/include/csCommon.h	/^/;"	m	struct:CharState
define	SceneServer/libscenesserver/SceneServer1.h	/^  const t_NpcDefine *define;$/;"	m	class:SceneNpc
degree	base/include/csCommon.h	/^/;"	m	struct:Cmd::stLevelDegreeDataUserCmd
del	SceneServer/libscenesserver/scriptTickTask.h	/^	bool del(taskType _type)$/;"	f	class:userScriptTaskContainer
delAuctionRecordByName	SessionServer/libsessionserver/AuctionService.cpp	/^void AuctionService::delAuctionRecordByName(char * name)$/;"	f	class:AuctionService
delCount	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD delCount;$/;"	m	class:ScenePet
delCount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ScenePet
delInstance	BillServer/BillServer.h	/^		static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:BillService
delInstance	BillServer/BillTaskManager.h	/^    static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:BillTaskManager
delInstance	BillServer/BillUserManager.cpp	/^void BillUserManager::delInstance()$/;"	f	class:BillUserManager
delInstance	BillServer/old_back/BillServer.h	/^    static void delInstance()$/;"	f	class:BillManager
delInstance	BillServer/old_back/BillServer.h	/^    static void delInstance()$/;"	f	class:BillService
delInstance	BillServer/old_back/BillServer.h	/^    static void delInstance()$/;"	f	class:BillSessionManager
delInstance	BillServer/old_back/BillServer.h	/^    static void delInstance()$/;"	f	class:BillTaskManager
delInstance	BillServer/old_back/BillServer.h	/^    static void delInstance()$/;"	f	class:BillTimeTick
delInstance	BillServer/old_back/StockConsign.cpp	/^void ConsignGoldManager::delInstance()$/;"	f	class:ConsignGoldManager
delInstance	BillServer/old_back/StockConsign.cpp	/^void ConsignHistoryManager::delInstance()$/;"	f	class:ConsignHistoryManager
delInstance	BillServer/old_back/StockConsign.cpp	/^void ConsignMoneyManager::delInstance()$/;"	f	class:ConsignMoneyManager
delInstance	FLServer/FLServer.h	/^	static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:FLService
delInstance	FLServer/GYListManager.h	/^	static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:GYListManager
delInstance	FLServer/LoginManager.h	/^	static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:LoginManager
delInstance	FLServer/ServerManager.h	/^	static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:ServerManager
delInstance	GatewayServer/GatewayServer.h	/^		static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:GatewayService
delInstance	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::delInstance()$/;"	f	class:GateUserManager
delInstance	GatewayServer/old_back/GatewayServer.h	/^	static void delInstance()$/;"	f	class:GatewayService
delInstance	GatewayServer/old_back/GatewayServer.h	/^	static void delInstance()$/;"	f	class:GatewayTaskManager
delInstance	GatewayServer/old_back/GatewayServer.h	/^	static void delInstance()$/;"	f	class:GatewayTimeTick
delInstance	GatewayServer/old_back/GatewayServer.h	/^	static void delInstance()$/;"	f	class:LoginSessionManager
delInstance	GatewayServer/old_back/GatewayServer.h	/^	static void delInstance()$/;"	f	class:SceneClientManager
delInstance	RecordServer/RecordServer.h	/^		static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:RecordService
delInstance	SceneServer/SceneServer.h	/^		static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:SceneService
delInstance	SceneServer/libscenesserver/ObjectManager.cpp	/^void GlobalObjectIndex::delInstance()$/;"	f	class:GlobalObjectIndex
delInstance	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::delInstance()$/;"	f	class:SceneManager
delInstance	SceneServer/libscenesserver/SceneServer1.h	/^    static void delInstance()$/;"	f	class:CharInitInfo
delInstance	SceneServer/libscenesserver/SceneServer1.h	/^    static void delInstance()$/;"	f	class:MessageSystem
delInstance	SceneServer/libscenesserver/SceneServer1.h	/^    static void delInstance()$/;"	f	class:NpcTrade
delInstance	SceneServer/libscenesserver/SceneServer1.h	/^    static void delInstance()$/;"	f	class:SceneTaskManager
delInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::CharInitInfo
delInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::MagicRangeInit
delInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneTimeTick
delInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::ScenesService
delInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::NpcTrade
delInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneTaskManager
delInstance	SessionServer/ServerManager.h	/^    static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:ServerManager
delInstance	SessionServer/SessionServer.h	/^		static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:SessionService
delInstance	SessionServer/libsessionserver/SessionManager.cpp	/^void SceneSessionManager::delInstance()$/;"	f	class:SceneSessionManager
delInstance	SessionServer/libsessionserver/SessionManager.cpp	/^void UserSessionManager::delInstance()$/;"	f	class:UserSessionManager
delInstance	SessionServer/libsessionserver/SessionServer.h	/^	static void delInstance()$/;"	f	class:CArenaManager
delInstance	SessionServer/libsessionserver/SessionServer.h	/^    static void delInstance()$/;"	f	class:SessionService
delInstance	SessionServer/libsessionserver/SessionServer.h	/^    static void delInstance()$/;"	f	class:SessionTaskManager
delInstance	SessionServer/libsessionserver/Team.cpp	/^void GlobalTeamIndex::delInstance()$/;"	f	class:GlobalTeamIndex
delInstance	SessionServer/libsessionserver/TempArchive.cpp	/^void GlobalTempArchiveIndex::delInstance()$/;"	f	class:GlobalTempArchiveIndex
delInstance	SuperServer/FLClientManager.h	/^    static void delInstance()$/;"	f	class:FLClientManager
delInstance	SuperServer/InfoClientManager.h	/^    static void delInstance()$/;"	f	class:InfoClientManager
delInstance	SuperServer/RoleregCache.h	/^    static void delInstance()$/;"	f	class:RoleregCache
delInstance	SuperServer/ServerManager.h	/^    static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:ServerManager
delInstance	SuperServer/SuperServer.h	/^	static void delInstance() { SAFE_DELETE(instance); }$/;"	f	class:SuperService
delInstance	base/include/srvEngine.h	/^	static void delInstance()$/;"	f	class:SingletonBase
delInstance	tmp/MiniServer/MiniServer.h	/^    static void delInstance()$/;"	f	class:MiniService
delInstance	tmp/MiniServer/MiniServer.h	/^    static void delInstance()$/;"	f	class:MiniTaskManager
delInstance	tmp/MiniServer/MiniServer.h	/^    static void delInstance()$/;"	f	class:MiniTimeTick
delInstance	tmp/MiniServer/MiniUserManager.cpp	/^void MiniUserManager::delInstance()$/;"	f	class:MiniUserManager
delMailByNameAndID	SessionServer/libsessionserver/MailService.cpp	/^void MailService::delMailByNameAndID(char * userName,DWORD id)$/;"	f	class:MailService
delMe	SessionServer/libsessionserver/AuctionService.cpp	/^void AuctionService::delMe()$/;"	f	class:AuctionService
delMe	SessionServer/libsessionserver/CartoonPetService.cpp	/^void CartoonPetService::delMe()$/;"	f	class:CartoonPetService
delMe	SessionServer/libsessionserver/ForbidTalkManager.cpp	/^void ForbidTalkManager::delMe()$/;"	f	class:ForbidTalkManager
delMe	base/include/csCommon.h	/^/;"	f	class:Singleton
delMe	base/include/srvEngine.h	/^	static void delMe()$/;"	f	class:zDataBM
delMember	SessionServer/libsessionserver/Team.cpp	/^bool GlobalTeamIndex::delMember(const DWORD tempid,const char * userName)$/;"	f	class:GlobalTeamIndex
delMember	SessionServer/libsessionserver/Team.cpp	/^bool Team::delMember(const DWORD userid)$/;"	f	class:Team
delMemberToSession	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::delMemberToSession(char * memberName)$/;"	f	class:TeamManager
delMyself	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::delMyself()$/;"	f	class:CartoonPet
delMyself	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::delMyself()$/;"	f	class:ScenePet
delNpc	SceneServer/libscenesserver/Scene.cpp	/^  MonkeyNpcs delNpc;$/;"	m	struct:AICallback	file:
delObject	SceneServer/libscenesserver/Scene.cpp	/^  set delObject;$/;"	m	struct:RemoveSceneObjectCallBack	file:
delObject	SceneServer/libscenesserver/Scene.cpp	/^  set delObject;$/;"	m	struct:UpdateSceneObjectCallBack	file:
delPetRecordByID	SessionServer/libsessionserver/CartoonPetService.cpp	/^void CartoonPetService::delPetRecordByID(DWORD masterID)$/;"	f	class:CartoonPetService
delScriptTask	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
delSelectUserInfo	GatewayServer/old_back/GatewayServer.h	/^	bool delSelectUserInfo(DWORD charid)$/;"	f	class:GateSelectUserSession
delSept	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::delSept(const DWORD dwSeptID)$/;"	f	class:CSeptM
delSeptAllMember	SessionServer/libsessionserver/Sept.cpp	/^void CSept::delSeptAllMember()$/;"	f	class:CSept
delSeptAllMember	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::delSeptAllMember()$/;"	f	class:CSeptM
delSkill	base/include/srvEngine.h	/^	bool delSkill(uint32_t id)$/;"	f	struct:zNpcB
delTeam	SessionServer/libsessionserver/Team.cpp	/^bool Team::delTeam()$/;"	f	class:Team
delTime	SessionServer/libsessionserver/SessionServer.h	/^  DWORD delTime;$/;"	m	struct:mailForwardInfo
delTime	SessionServer/libsessionserver/SessionServer.h	/^  DWORD delTime;$/;"	m	struct:mailHeadInfo
delTime	SessionServer/libsessionserver/SessionServer.h	/^  DWORD delTime;$/;"	m	struct:mailTurnBackInfo
del_ai	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::del_ai()$/;"	f	class:SceneNpc
del_epoll	base/include/x_socket.cpp	/^void x_socket::del_epoll(int efd,uint32_t events)$/;"	f	class:x_socket
del_epoll	base/src/x_tcptask.h	/^	void del_epoll(int efd, uint32_t events){$/;"	f	class:x_tcptask
del_ob	SceneServer/libscenesserver/script_func.cpp	/^bool del_ob(SceneUser* user,DWORD id)$/;"	f
del_role	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::del_role(const Cmd::t_NullCmd* cmd,const DWORD cmdLen)$/;"	f	class:SessionTask
del_vec	SceneServer/libscenesserver/TeamManager.cpp	/^	Remove_vec del_vec;$/;"	m	struct:CheckOfflineExec	file:
delay	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::FixedRush
delay	SessionServer/libsessionserver/SessionServer.h	/^  int delay;$/;"	m	struct:forbidInfo
delay	SessionServer/libsessionserver/TimeTick.cpp	/^	DWORD delay;$/;"	m	struct:rushCallback	file:
delay	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_cityRush_SceneSession
delay	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forbidTalk_SceneSession
delayForbidTalk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
delayPhaseTime	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::delayPhaseTime(const int delay)$/;"	f	class:NpcAIController
delaySecondFlag	SceneServer/libscenesserver/CountryDare.cpp	/^void CountryDareM::delaySecondFlag(Scene* scene)$/;"	f	class:CountryDareM
deleteBoss	SceneServer/libscenesserver/Rush.cpp	/^void Rush::deleteBoss()$/;"	f	class:Rush
deleteChar	SceneServer/libscenesserver/script_func.cpp	/^void deleteChar(const char *p)$/;"	f
deleteDBRecord	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::deleteDBRecord(const DWORD dwID)$/;"	f	class:CRelationManager
deleteEvery	base/include/srvEngine.h	/^	class deleteEvery:public zDatabaseCallBack<data>$/;"	c	class:zDataBM
deleteMe	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::deleteMe()$/;"	f	class:CSchoolMember
deleteMeFromDB	SessionServer/libsessionserver/Ally.cpp	/^bool CAlly::deleteMeFromDB()$/;"	f	class:CAlly
deleteMeFromDB	SessionServer/libsessionserver/Army.cpp	/^bool CArmy::deleteMeFromDB()$/;"	f	class:CArmy
deleteMeFromDB	SessionServer/libsessionserver/Army.cpp	/^bool CCaptain::deleteMeFromDB()$/;"	f	class:CCaptain
deleteMeFromDB	SessionServer/libsessionserver/RecommendManager.cpp	/^bool Recommend::deleteMeFromDB()$/;"	f	class:Recommend
deleteMeFromDB	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendSub::deleteMeFromDB()$/;"	f	class:RecommendSub
deleteMeFromDB	SessionServer/libsessionserver/Sept.cpp	/^bool CSept::deleteMeFromDB()$/;"	f	class:CSept
deleteMeFromDB	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptMember::deleteMeFromDB()$/;"	f	class:CSeptMember
deleteMeFromDB	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
deleteMeFromDB	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
deleteMeFromDB	SessionServer/libsessionserver/Vote.cpp	/^bool CVote::deleteMeFromDB()$/;"	f	class:CVote
deleteMeFromDB	SessionServer/libsessionserver/Vote.cpp	/^bool CVoteItem::deleteMeFromDB()$/;"	f	class:CVoteItem
deleteRecord	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::deleteRecord()$/;"	f	class:CSchoolMember
deleteSchoolFromDB	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::deleteSchoolFromDB()$/;"	f	class:CSchool
deleteTask	SceneServer/libscenesserver/scriptTickTask.h	/^	bool deleteTask(QWORD taskID)$/;"	f	class:scriptTaskManagement
deleteTeam	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::deleteTeam()$/;"	f	class:TeamManager
deps	base/Makefile	/^deps = $(objects:%.o=.%.d)$/;"	m
deps	tmp/base2/makefile	/^deps = $(objects:%.o=.%.d)$/;"	m
depth	base/src/getopt.c	/^  int depth;$/;"	m	struct:hol_cluster	file:
depth	deps/tinyxml/tinyxml.h	/^	int depth;$/;"	m	class:TiXmlPrinter
desc	FLServer/ServerACL.h	/^	std::string desc;$/;"	m	struct:ACLZone
desc	SceneServer/libscenesserver/SceneServer1.h	/^        const char *desc;$/;"	m	struct:Gm
desc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Gm
description	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Quest
dest	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::dest(const zPos& pos)$/;"	f	class:GuardNpc
dest	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::WayPoint
destC	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::WayPoint
destoryMe	SessionServer/libsessionserver/SessionServer.h	/^    void destoryMe()$/;"	f	class:CDareRecordM
destroy	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
destroy	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
destroy	SceneServer/libscenesserver/zObject.cpp	/^void  zObject::destroy(zObject* ob)$/;"	f	class:zObject
destroy	SessionServer/libsessionserver/SessionServer.h	/^    bool          destroy;$/;"	m	class:CSept
destroy	SessionServer/libsessionserver/SessionServer.h	/^    bool          destroy;$/;"	m	class:CUnion
destroy	SessionServer/libsessionserver/SessionServer.h	/^    bool  destroy;$/;"	m	struct:CSeptMember
destroy	SessionServer/libsessionserver/SessionServer.h	/^    bool  destroy;$/;"	m	struct:CUnionMember
destroy	SessionServer/libsessionserver/SessionServer.h	/^    bool destroy;$/;"	m	class:CSchool
destroy	SessionServer/libsessionserver/SessionServer.h	/^    bool destroy;$/;"	m	class:CSchoolMember
destroyInstance	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneRecycleUserManager::destroyInstance()$/;"	f	class:SceneRecycleUserManager
destroyMe	SceneServer/libscenesserver/SceneNpcManager.cpp	/^void SceneNpcManager::destroyMe()$/;"	f	class:SceneNpcManager
destroyMe	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::destroyMe()$/;"	f	class:SceneUserManager
destroyMe	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::destroyMe()$/;"	f	class:CArmyM
destroyMe	SessionServer/libsessionserver/CityManager.cpp	/^void CCityM::destroyMe()$/;"	f	class:CCityM
destroyMe	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::destroyMe()$/;"	f	class:CCountryM
destroyMe	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
destroyMe	SessionServer/libsessionserver/Gem.cpp	/^void CGemM::destroyMe()$/;"	f	class:CGemM
destroyMe	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::destroyMe()$/;"	f	class:CNpcDareM
destroyMe	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizM::destroyMe()$/;"	f	class:CQuizM
destroyMe	SessionServer/libsessionserver/Quiz.cpp	/^void CSubjectM::destroyMe()$/;"	f	class:CSubjectM
destroyMe	SessionServer/libsessionserver/RecommendManager.cpp	/^void RecommendM::destroyMe()$/;"	f	class:RecommendM
destroyMe	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::destroyMe()$/;"	f	class:CSchoolM
destroyMe	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::destroyMe()$/;"	f	class:CSeptM
destroyMe	SessionServer/libsessionserver/SessionChat.cpp	/^void SessionChannelManager::destroyMe()$/;"	f	class:SessionChannelManager
destroyMe	SessionServer/libsessionserver/Sort.cpp	/^void CSortM::destroyMe()$/;"	f	class:CSortM
destroyMe	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
destroyMe	SessionServer/libsessionserver/Vote.cpp	/^void CVoteM::destroyMe()$/;"	f	class:CVoteM
destroySchool	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::destroySchool(const char *pName)$/;"	f	class:CSchoolM
detail	SceneServer/libscenesserver/SceneServer1.h	/^  namespace detail {$/;"	n	namespace:luabind
detail	SceneServer/libscenesserver/ScenesServer.h	/^/;"	n	namespace:luabind
dex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
dex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
dex	base/include/csCommon.h	/^/;"	m	struct:_Object
dex	base/include/srvEngine.h	/^			luckRangeValue dex;      \/\/ ÊïèÊç∑$/;"	m	struct:zColorObjectB::__anon128::__anon129
dex	base/include/srvEngine.h	/^	rangeValue dex;      \/\/ ÊïèÊç∑$/;"	m	struct:zSoulStoneB
dex	base/include/srvEngine.h	/^	uint16_t dex;				 \/\/ÊïèÊç∑$/;"	m	struct:zObjectB
dex	base/include/srvEngine.h	/^	uint32_t   dex;        \/\/ ÊïèÊç∑$/;"	m	struct:zNpcB
dex_Attribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::Freedom_Attribute
dex_Attribute	base/include/csCommon.h	/^/;"	m	struct:_Object::Freedom_Attribute
dfpoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
dftype	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
dhpp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
dhpp	base/include/csCommon.h	/^/;"	m	struct:_Object
dialogs	SceneServer/libscenesserver/SceneServer1.h	/^    NpcDialogMultiMap dialogs;$/;"	m	class:NpcTrade
dialogs	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::NpcTrade
dieList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
dietodam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
diewithme	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
diff_time	SceneServer/libscenesserver/script_func.cpp	/^double diff_time(int t1,int t2)$/;"	f
diplomatName	SessionServer/libsessionserver/SessionServer.h	/^    char  diplomatName[MAX_NAMESIZE+1]; \/\/ Õ‚ΩªπŸ√˚≥∆$/;"	m	class:CCountry
dir	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventTrigger
dir	base/include/srvEngine.h	/^	BYTE dir;$/;"	m	struct:zSceneEntry
directAdddMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::directAdddMember(CSchoolMember *member)$/;"	f	class:CSchool
directDamage	SceneServer/libscenesserver/SceneEntryPk.cpp	/^SWORD SceneEntryPk::directDamage(SceneEntryPk *pAtt,const SDWORD &dam,bool notify)$/;"	f	class:SceneEntryPk
directRemoveMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::directRemoveMember(CSchoolMember *member)$/;"	f	class:CSchool
directRemovePrentice	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::directRemovePrentice(const CSchoolMember *member)$/;"	f	class:CSchoolMember
direct_screen	GatewayServer/old_back/GatewayServer.h	/^	NineScreen_map direct_screen[8];$/;"	m	class:ScreenIndex
direct_screen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
dirty	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
disableAll	FLServer/GYListManager.cpp	/^void GYListManager::disableAll(const GameZone_t &gameZone) {$/;"	f	class:GYListManager
disbandSept	SessionServer/libsessionserver/Sept.cpp	/^void CSept::disbandSept()$/;"	f	class:CSept
disbandUnion	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
disributeExp	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::disributeExp(Cmd::Session::t_distributeSeptExp_SceneSession *cmd)$/;"	f	class:CSeptM
distance	base/include/srvEngine.h	/^	uint32_t  distance;      \/\/ ÁßªÂä®Èó¥Èöî$/;"	m	struct:zNpcB
dk	SceneServer/libscenesserver/ScenesServer.h	/^Nˇdk:NïbêÑvÄb˝ÄI/;"	m	struct:O::SkillState::__anon59::__anon60
dmdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::__anon53::__anon54
dmdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dmdam	base/include/csCommon.h	/^/;"	m	struct:_Object::__anon182::__anon183
dmdam	base/include/srvEngine.h	/^	rangeValue dmdam; \/\/Ê≥ïÊúØ‰º§ÂÆ≥ÂáèÂ∞ë%x$/;"	m	struct:zFiveSetB
dmdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dmdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dmdefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dmpbyhp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
dmpp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
dmpp	base/include/csCommon.h	/^/;"	m	struct:_Object
dnallattrib	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
doAddItemAttCmd	SceneServer/libscenesserver/box.cpp	/^bool SceneUser::doAddItemAttCmd(const Cmd::stAttruByteUserCmd *ptCmd,DWORD cmdLen)$/;"	f	class:SceneUser
doArenaCmd	SceneServer/libscenesserver/box.cpp	/^bool SceneUser::doArenaCmd(const Cmd::stArenaUserCmd *ptCmd, DWORD cmdLen)$/;"	f	class:SceneUser
doArmyCmd	SceneServer/libscenesserver/SceneArmy.cpp	/^bool SceneUser::doArmyCmd(const Cmd::stArmyUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doAttackAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doAttackAI()$/;"	f	class:SceneNpc
doAuctionCmd	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::doAuctionCmd(const Cmd::Session::t_AuctionCmd * cmd,const DWORD cmdLen)$/;"	f	class:SessionClient
doAuctionCmd	SessionServer/libsessionserver/AuctionService.cpp	/^bool AuctionService::doAuctionCmd(const Cmd::Session::t_AuctionCmd *cmd,const DWORD cmdLen)$/;"	f	class:AuctionService
doBoxCmd	SceneServer/libscenesserver/box.cpp	/^bool SceneUser::doBoxCmd(const Cmd::stCowBoxUserCmd *ptCmd,DWORD cmdLen)$/;"	f	class:SceneUser
doCartoonCmd	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::doCartoonCmd(const Cmd::Session::t_CartoonCmd *cmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
doCartoonCmd	SessionServer/libsessionserver/CartoonPetService.cpp	/^bool CartoonPetService::doCartoonCmd(const Cmd::Session::t_CartoonCmd *cmd,const DWORD cmdLen)$/;"	f	class:CartoonPetService
doChangeMapAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doChangeMapAI()$/;"	f	class:SceneNpc
doClear	SceneServer/libscenesserver/duplicateManager.cpp	/^void duplicateManager::doClear()$/;"	f	class:duplicateManager
doClearAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doClearAI()$/;"	f	class:SceneNpc
doCmd	base/include/srvEngine.h	/^	bool doCmd()$/;"	f	class:MessageQueue
doCmd	base/x_msgqueue.h	/^	bool doCmd()$/;"	f	class:MessageQueue
doCountryCmd	SceneServer/libscenesserver/SceneCountry.cpp	/^bool SceneUser::doCountryCmd(const Cmd::stCountryUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doDare	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareObj::doDare()$/;"	f	class:CNpcDareObj
doDare	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::doDare()$/;"	f	class:CNpcDareM
doDareCmd	SceneServer/libscenesserver/SceneDare.cpp	/^bool SceneUser::doDareCmd(const Cmd::stDareUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doDropItemAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doDropItemAI()$/;"	f	class:SceneNpc
doFleeAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doFleeAI()$/;"	f	class:SceneNpc
doGiftCmd	SessionServer/libsessionserver/Gift.cpp	/^bool Gift::doGiftCmd(UserSession *pUser,const Cmd::stNullUserCmd *cmd,const DWORD cmdLen)$/;"	f	class:Gift
doGmCmd	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::doGmCmd(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
doGoOnPathAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doGoOnPathAI()$/;"	f	class:SceneNpc
doHorseTrainingCmd	SceneServer/libscenesserver/box.cpp	/^bool SceneUser::doHorseTrainingCmd(const Cmd::stReMakUserCmd *ptCmd,DWORD cmdLen)$/;"	f	class:SceneUser
doMailCmd	SessionServer/libsessionserver/MailService.cpp	/^bool MailService::doMailCmd(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:MailService
doMiniGameCmd	SceneServer/libscenesserver/MiniGame.cpp	/^bool SceneUser::doMiniGameCmd(const Cmd::stMiniGameUserCmd *cmd,DWORD cmdLen)$/;"	f	class:SceneUser
doMosaicGenCmd	SceneServer/libscenesserver/box.cpp	/^bool SceneUser::doMosaicGenCmd(const Cmd::stMakeObjectUserCmd *ptCmd,DWORD cmdLen)$/;"	f	class:SceneUser
doMovetoAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doMovetoAI()$/;"	f	class:SceneNpc
doNormalAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doNormalAI()$/;"	f	class:SceneNpc
doNpcDareCmd	SceneServer/libscenesserver/SceneNpcDare.cpp	/^bool SceneUser::doNpcDareCmd(const Cmd::stDareUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doOperation	SceneServer/libscenesserver/Skill.cpp	/^void zSkill::doOperation(const SkillStatus *pSkillStatus)$/;"	f	class:zSkill
doPassivenessSkill	SceneServer/libscenesserver/Skill.cpp	/^void zSkill::doPassivenessSkill()$/;"	f	class:zSkill
doPatrolAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doPatrolAI()$/;"	f	class:SceneNpc
doPropertyCmd	SceneServer/libscenesserver/Property.cpp	/^bool SceneUser::doPropertyCmd(const Cmd::stPropertyUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doQuizCmd	SceneServer/libscenesserver/SceneQuiz.cpp	/^bool SceneUser::doQuizCmd(const Cmd::stQuizUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doRandomChatAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doRandomChatAI()$/;"	f	class:SceneNpc
doReMakeObjCmd	SceneServer/libscenesserver/box.cpp	/^bool SceneUser::doReMakeObjCmd(const Cmd::stReMakUserCmd *ptCmd,DWORD cmdLen)$/;"	f	class:SceneUser
doRelationCmd	SceneServer/libscenesserver/SceneRelation.cpp	/^bool SceneUser::doRelationCmd(const Cmd::stRelationUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doResult	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::doResult()$/;"	f	class:CNpcDareM
doResult	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::doResult()$/;"	f	class:CNpcDareObj
doReturnToRegionAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doReturnToRegionAI()$/;"	f	class:SceneNpc
doSafetyCmd	SceneServer/libscenesserver/SceneSafety.cpp	/^bool SceneUser::doSafetyCmd(const Cmd::stSafetyUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doSayAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doSayAI()$/;"	f	class:SceneNpc
doSchoolCmd	SceneServer/libscenesserver/SceneSchool.cpp	/^bool SceneUser::doSchoolCmd(const Cmd::stSchoolUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doSeptCmd	SceneServer/libscenesserver/SceneSept.cpp	/^bool SceneUser::doSeptCmd(const Cmd::stSeptUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doStockCmd	SceneServer/libscenesserver/Stock.cpp	/^bool SceneUser::doStockCmd(const Cmd::stStockSceneUserCmd *ptCmd,DWORD cmdLen)$/;"	f	class:SceneUser
doTask	SceneServer/libscenesserver/scriptTickTask.cpp	/^bool scriptTask::doTask(time_t t)$/;"	f	class:scriptTask
doTradeCmd	SceneServer/libscenesserver/Trade.cpp	/^bool SceneUser::doTradeCmd(const Cmd::stTradeUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doTurnCmd	SceneServer/libscenesserver/turn.cpp	/^bool SceneUser::doTurnCmd(const Cmd::stTurnUserCmd *ptCmd,DWORD cmdLen)$/;"	f	class:SceneUser
doUnionCmd	SceneServer/libscenesserver/SceneUnion.cpp	/^bool SceneUser::doUnionCmd(const Cmd::stUnionUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
doWarpAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::doWarpAI()$/;"	f	class:SceneNpc
do_check	GatewayServer/old_back/GatewayServer.h	/^	bool do_check(const zRTime& current)$/;"	f	class:CmdChecker
do_compose	SceneServer/libscenesserver/RebuildObject.cpp	/^bool SoulStone::do_compose(zObject* first,zObject* second,zObject* dest)$/;"	f	class:SoulStone
do_downgrade	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Upgrade::do_downgrade(zObject* ob,zUpgradeObjectB* base)$/;"	f	class:Upgrade
do_enchance	SceneServer/libscenesserver/RebuildObject.cpp	/^bool SoulStone::do_enchance(zObject* dest,zObject* src)$/;"	f	class:SoulStone
do_it	SceneServer/libscenesserver/QuestAction.cpp	/^int Action::do_it (SceneUser* user,Vars* vars)$/;"	f	class:Action
do_it	SceneServer/libscenesserver/QuestAction.cpp	/^int TeamAction::do_it(SceneUser* user,Vars* vars)$/;"	f	class:TeamAction
do_it	SceneServer/libscenesserver/QuestEvent.cpp	/^int Event::Embranchment::do_it(SceneUser* user,Vars* vars)$/;"	f	class:Event::Embranchment
do_trade_rs_cmd	SceneServer/libscenesserver/Trade.cpp	/^bool SceneUser::do_trade_rs_cmd(const Cmd::stTradeUserCmd *rev,DWORD cmdLen)$/;"	f	class:SceneUser
do_upgrade	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Upgrade::do_upgrade(zObject* ob,zUpgradeObjectB* base)$/;"	f	class:Upgrade
doc	base/include/argp.h	/^  const  char *doc;$/;"	m	struct:argp
doc	base/include/argp.h	/^  const  char *doc;$/;"	m	struct:argp_option
doc	base/include/srvEngine.h	/^	xmlDocPtr doc;$/;"	m	class:zXMLParser
doc_opt_col	base/src/getopt.c	/^  int doc_opt_col;$/;"	m	struct:uparams	file:
doc_root_	tmp/base3/request_handler.hpp	/^  std::string doc_root_;$/;"	m	class:http::server2::request_handler
document	deps/tinyxml/tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute
dodge	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dodge	base/include/srvEngine.h	/^	uint32_t  dodge;        \/\/ Ë∫≤ÈÅøÁéá$/;"	m	struct:zNpcB
done	SceneServer/libscenesserver/QuestAction.cpp	/^int AddBindItemAction::done (SceneUser* user,Vars* vars)$/;"	f	class:AddBindItemAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int AddGreenBindItemAction::done (SceneUser* user,Vars* vars)$/;"	f	class:AddGreenBindItemAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int AddGuardAction::done(SceneUser* user,Vars* vars)$/;"	f	class:AddGuardAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int AddItemAction::done (SceneUser* user,Vars* vars)$/;"	f	class:AddItemAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int AddNpcAction::done (SceneUser* user,Vars* vars)$/;"	f	class:AddNpcAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int BulletinAction::done (SceneUser* user,Vars* vars)$/;"	f	class:BulletinAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int ClearStateAction::done (SceneUser* user,Vars* vars)$/;"	f	class:ClearStateAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int DisableAction::done (SceneUser* user,Vars* vars)$/;"	f	class:DisableAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int DropAction::done (SceneUser* user,Vars* vars)$/;"	f	class:DropAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int DropItemAction::done (SceneUser* user,Vars* vars)$/;"	f	class:DropItemAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int EnterSeptGuardAction::done(SceneUser* user,Vars* vars)$/;"	f	class:EnterSeptGuardAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int Exp1Action::done (SceneUser* user,Vars* vars)$/;"	f	class:Exp1Action
done	SceneServer/libscenesserver/QuestAction.cpp	/^int ExpAction::done (SceneUser* user,Vars* vars)$/;"	f	class:ExpAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int FinishSeptGuardAction::done(SceneUser* user,Vars* vars)$/;"	f	class:FinishSeptGuardAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int FiveTypeAction::done (SceneUser* user,Vars* vars)$/;"	f	class:FiveTypeAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int GotoAction::done (SceneUser* user,Vars* vars)$/;"	f	class:GotoAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int HorseAction::done (SceneUser* user,Vars* vars)$/;"	f	class:HorseAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int LogAction::done (SceneUser* user,Vars* vars)$/;"	f	class:LogAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int MainMenuAction::done (SceneUser* user,Vars* vars)$/;"	f	class:MainMenuAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int MenuAction::done (SceneUser* user,Vars* vars)$/;"	f	class:MenuAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int Notify1Action::done (SceneUser* user,Vars* vars)$/;"	f	class:Notify1Action
done	SceneServer/libscenesserver/QuestAction.cpp	/^int NotifyAction::done (SceneUser* user,Vars* vars)$/;"	f	class:NotifyAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int RefreshAction::done (SceneUser* user,Vars* vars)$/;"	f	class:RefreshAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int RemoveItemAction::done (SceneUser* user,Vars* vars)$/;"	f	class:RemoveItemAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int RemoveNpcAction::done (SceneUser* user,Vars* vars)$/;"	f	class:RemoveNpcAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int RideDownAction::done (SceneUser* user,Vars* vars)$/;"	f	class:RideDownAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int SetStateAction::done (SceneUser* user,Vars* vars)$/;"	f	class:SetStateAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int SkillAction::done (SceneUser* user,Vars* vars)$/;"	f	class:SkillAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int SubMenuAction::done (SceneUser* user,Vars* vars)$/;"	f	class:SubMenuAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int TimeoutsAction::done (SceneUser* user,Vars* vars)$/;"	f	class:TimeoutsAction
done	SceneServer/libscenesserver/QuestAction.cpp	/^int UseSkillAction::done (SceneUser* user,Vars* vars)$/;"	f	class:UseSkillAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:ActionPointAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:FamilyLevelAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:FamilyVarAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:FiveLevelAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:GlobalAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:GoldAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:HonorAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:MaxHonorAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:ScoreAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:TongVarAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:UserVarAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:UsersVarAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:VarAction
done	SceneServer/libscenesserver/SceneServer1.h	/^  int done (SceneUser* user,Vars* vars)$/;"	f	class:VarsAction
done	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GoldAction
done	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UserVarAction
done	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarAction
done	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarsAction
doubleexp_obj	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
doubleexp_obj_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
doubletime	base/include/csCommon.h	/^/;"	m	struct:CharBase
doublexp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
doublexp	base/include/csCommon.h	/^/;"	m	struct:_Object
doublexp	base/include/srvEngine.h	/^	luckRangeValue doublexp;    \/\/%xÂèåÂÄçÁªèÈ™å$/;"	m	struct:zHolyObjectB
doublexp	base/include/srvEngine.h	/^	rangeValue doublexp; \/\/x%ÂèåÂÄçÁªèÈ™å    $/;"	m	struct:zSoulStoneB
downNum	base/include/zTime.h	/^	uint32_t downNum;$/;"	m	struct:odds_t
dpallattrib	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dpdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::__anon53::__anon54
dpdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dpdam	base/include/csCommon.h	/^/;"	m	struct:_Object::__anon182::__anon183
dpdam	base/include/srvEngine.h	/^	rangeValue dpdam; \/\/Áâ©ÁêÜ‰º§ÂÆ≥ÂáèÂ∞ë%x$/;"	m	struct:zFiveSetB
dpdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dpdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dpdefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dpintmen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dpstrdex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dragon	SessionServer/libsessionserver/SessionServer.h	/^    CArhat dragon; \/\/ ¡˙æ´$/;"	m	class:CGem
draw	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniGameScore
drawExp	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::drawExp()$/;"	f	class:CartoonPet
dread	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
dread	base/include/csCommon.h	/^/;"	m	struct:_Object
dreadProcess	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
dread_def	base/include/csCommon.h	/^/;"	m	struct:_Object
dropTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
drop_num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DropFromPack::Param
drop_odds	SceneServer/libscenesserver/Mask.cpp	/^int Mask::drop_odds() const$/;"	f	class:Mask
dropgoldobjectbm	base/src/zDatabaseManager.cpp	/^zDataBM<zDropGoldObjectB,DropGoldObjectBase> &dropgoldobjectbm=zDataBM<zDropGoldObjectB,DropGoldObjectBase>::getMe();$/;"	v
dropweapon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
dst	SceneServer/libscenesserver/ObjectManager.cpp	/^    stObjectLocation dst;$/;"	m	class:UserObjectComparePos	file:
dstID	base/supercmd.h	/^			WORD dstID;$/;"	m	struct:Cmd::Super::t_Restart_ServerEntry_NotifyOther
dstMap	SceneServer/libscenesserver/SceneServer1.h	/^  char dstMap[32];$/;"	m	class:NpcAIController
dstPos	SceneServer/libscenesserver/SceneServer1.h	/^  zPos dstPos;$/;"	m	class:NpcAIController
dstReached	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool NpcAIController::dstReached()$/;"	f	class:NpcAIController
dst_name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
dst_name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_privateChat_SceneSession
dtime	base/include/srvEngine.h	/^	uint32_t  dtime;              \/\/Èó¥ÈöîÊó∂Èó¥$/;"	m	struct:zSkillB
dump	base/x_properties.h	/^	void dump(std::ostream &out)$/;"	f	class:x_properties
dupIndex	GatewayServer/old_back/GatewayServer.h	/^	unsigned short dupIndex;$/;"	m	class:GateUser
dupIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::NpcAIFlag
dupIndex	SceneServer/libscenesserver/duplicateManager.h	/^	unsigned int dupIndex;$/;"	m	struct:dupScenePair
dupIndex	SceneServer/libscenesserver/duplicateManager.h	/^	unsigned short dupIndex;$/;"	m	struct:clearDupStruct
dupIndex	base/include/srvEngine.h	/^	unsigned short dupIndex;$/;"	m	struct:zSceneEntry
dupIndexList	SceneServer/libscenesserver/duplicateManager.h	/^	typedef std::list<unsigned short> dupIndexList;$/;"	t	class:duplicateManager
dupMapCopy	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<unsigned short,zTiles*> dupMapCopy;$/;"	t	class:duplicateManager
dupMapCopy_it	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<unsigned short,zTiles*>::iterator dupMapCopy_it;$/;"	t	class:duplicateManager
dupMapList	SceneServer/libscenesserver/ScenesServer.cpp	/^std::set<DWORD> dupMapList;$/;"	v
dupMapNpc	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<unsigned short,hash_map<DWORD,SceneNpc*>* > dupMapNpc;$/;"	t	class:duplicateManager
dupMapNpc_it	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<unsigned short,hash_map<DWORD,SceneNpc*>* >::iterator dupMapNpc_it;$/;"	t	class:duplicateManager
dupMapObj	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<unsigned short,hash_map<DWORD,zSceneObject*>*> dupMapObj;$/;"	t	class:duplicateManager
dupMapObj_it	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<unsigned short,hash_map<DWORD,zSceneObject*>* >::iterator dupMapObj_it;$/;"	t	class:duplicateManager
dupScenePair	SceneServer/libscenesserver/duplicateManager.h	/^struct dupScenePair$/;"	s
dupScenes	SceneServer/libscenesserver/duplicateManager.h	/^	typedef std::vector<hash_map<DWORD,Scene*>* > dupScenes;$/;"	t	class:duplicateManager
dupScenes_it	SceneServer/libscenesserver/duplicateManager.h	/^	typedef std::vector<hash_map<DWORD,Scene*>* >::iterator dupScenes_it;$/;"	t	class:duplicateManager
dupToUserMap	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<unsigned short,std::list<SceneUser*>* > dupToUserMap;$/;"	t	class:duplicateManager
dupToUserMap_it	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<unsigned short,std::list<SceneUser*>* >::iterator dupToUserMap_it;$/;"	t	class:duplicateManager
dup_args	base/src/getopt.c	/^  int dup_args;$/;"	m	struct:uparams	file:
dup_args_note	base/src/getopt.c	/^  int dup_args_note;$/;"	m	struct:uparams	file:
duplicateManager	SceneServer/libscenesserver/duplicateManager.h	/^	duplicateManager()$/;"	f	class:duplicateManager
duplicateManager	SceneServer/libscenesserver/duplicateManager.h	/^class duplicateManager : public SingletonBase<duplicateManager> $/;"	c
dur	base/include/csCommon.h	/^/;"	m	struct:_Object
durability	base/include/srvEngine.h	/^	uint16_t durability;      \/\/ ËÄê‰πÖÂ∫¶$/;"	m	struct:zObjectB
durpoint	base/include/csCommon.h	/^/;"	m	struct:_Object
dursecond	base/include/csCommon.h	/^/;"	m	struct:_Object
dvalue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
dvalue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dvaluep	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
dvaluep	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
dwAccid	base/billcmd.h	/^			DWORD dwAccid;$/;"	m	struct:Cmd::Bill::t_Bill_ForwardUser
dwActionPoint	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwActionPoint;$/;"	m	class:CUnion
dwActionPoint	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
dwActionPoint	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
dwAllyCountryID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CAlly
dwAllyCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwAllyCountryID; \/\/ ID2$/;"	m	class:CAlly
dwAnnoyFail	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwAnnoyFail;$/;"	m	class:CCountry
dwAnnoyWin	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwAnnoyWin;$/;"	m	class:CCountry
dwAnswerStatus	SessionServer/libsessionserver/SessionServer.h	/^    int dwAnswerStatus; \/\/ ±æ¥Œ¥Ã‚◊¥Ã¨$/;"	m	class:CPothunter
dwArmyID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwArmyID; \/\/ æ¸∂”ID$/;"	m	class:CCaptain
dwArmyState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwArmyState	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwAttCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  dwAttCountryID;$/;"	m	class:CDareRecord
dwAttackerID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
dwBalance	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwBalance;  \/\/ Õ∆ºˆ»Àø…“‘Ã·»°µƒΩ±¿¯$/;"	m	class:Recommend
dwBallot	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwBallot;$/;"	m	class:CVoteItem
dwBodyColorCustom	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwBodyColorCustom	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwBodyColorSystem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwBodyColorSystem	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwBodyID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwBodyID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapUserSculpt
dwBuildingDataID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapBuildingData
dwChangeFaceID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwChangeFaceID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwCharID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCharID; \/\/ ∂”≥§ID$/;"	m	class:CCaptain
dwCharID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCharID;$/;"	m	class:CSchoolMember
dwCharID	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
dwCharID	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwCharID	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptMemberInfo
dwCharID	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
dwCharID	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionMemberInfo
dwCityID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCityID;  \/\/ À˘ Ù≥« –ID$/;"	m	class:CArmy
dwCityID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCityID;$/;"	m	class:CCity
dwClientVersion	FLServer/LoginTask.h	/^		DWORD dwClientVersion;$/;"	m	class:LoginTask
dwConsort	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_updateConsort
dwContract	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapBuildingData
dwCountry	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCountry;$/;"	m	class:CCity
dwCountry	base/include/srvEngine.h	/^		uint32_t dwCountry;      \/\/\/ ÂõΩÂÆ∂$/;"	m	struct:NpcDareDef::NpcDareRecord
dwCountryID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CAlly
dwCountryID	SessionServer/libsessionserver/Sept.cpp	/^    DWORD dwCountryID;      \/\/ À˘ Ùπ˙º“$/;"	m	class:CSeptSort	file:
dwCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  dwCountryID;  \/\/ ª§±¶»ŒŒÒÀ˘ Ùπ˙º“$/;"	m	class:CGem
dwCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCountryID; \/\/ ID1$/;"	m	class:CAlly
dwCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCountryID; \/\/ À˘ Ùπ˙º“ID$/;"	m	class:CArmy
dwCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCountryID;$/;"	m	class:CSept
dwCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCountryID;$/;"	m	class:CTech
dwCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCountryID;$/;"	m	class:CUnion
dwCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCountryID;$/;"	m	class:CVote
dwCountryID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD dwCountryID;$/;"	m	class:CArhat
dwCountryID	SessionServer/libsessionserver/Union.cpp	/^/;"	m	class:CUnionSort	file:
dwCountryID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regScene_SceneSession
dwCountryID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
dwCountryID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_reqAddScene_SceneSession
dwCountryID	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwCountryID	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
dwCrTime	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwCrTime	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
dwCreateThisID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zObject::__anon51::__anon52
dwCreateThisID	base/include/csCommon.h	/^/;"	m	struct:SaveObject::__anon184::__anon185
dwCreateTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD          dwCreateTime;$/;"	m	class:CSept
dwCreateTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD          dwCreateTime;$/;"	m	class:CUnion
dwCreateTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCreateTime;$/;"	m	class:CAlly
dwCreateTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwCreateTime;$/;"	m	class:CArmy
dwDareCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwDareCountryID;$/;"	m	class:CCountry
dwDareRepute	SessionServer/libsessionserver/SessionServer.h	/^    int dwDareRepute;$/;"	m	class:CDareSept
dwDareSeptID	base/include/srvEngine.h	/^		uint32_t dwDareSeptID;      \/\/\/ ÁõÆÂâçËØ•npcÁöÑÊåëÊàòÂÆ∂Êóè$/;"	m	struct:NpcDareDef::NpcDareRecord
dwDareTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwDareTime;  \/\/ …œ¥Œ∑¢∆ÃÙ’Ωµƒ ±º‰$/;"	m	class:CCountry
dwDefCountryID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  dwDefCountryID;$/;"	m	class:CDareRecord
dwEmperorDareDef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
dwExploit	SessionServer/libsessionserver/SessionManager.cpp	/^    DWORD dwExploit;$/;"	m	class:CGraceUser	file:
dwExploit	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwExploit;$/;"	m	class:UserSession
dwExploit	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;      \/\/ ÊäÄËÉΩID$/;"	m	struct:SkillBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ id$/;"	m	struct:PetBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ Â±ûÊÄßÊ†áËØÜ$/;"	m	struct:FiveSetBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÊäÄËÉΩID$/;"	m	struct:LiveSkillBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ Á≠âÁ∫ß$/;"	m	struct:ExperienceBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ Á≠âÁ∫ß$/;"	m	struct:HonorBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:ColorObjectBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:CountryMaterial
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:HairColour
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:HairStyle
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:HeadList
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:HolyObjectBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:NpcBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:ObjectBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:SetObjectBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:SoulStoneBase
dwField0	base/include/srvEngine.h	/^	uint32_t  dwField0;    \/\/ ÁºñÂè∑$/;"	m	struct:UpgradeObjectBase
dwField1	base/include/srvEngine.h	/^	uint32_t  dwField1;    \/\/ Áâ©ÂìÅID$/;"	m	struct:CountryMaterial
dwField1	base/include/srvEngine.h	/^	uint32_t  dwField1;    \/\/ Áâ©ÂìÅID$/;"	m	struct:UpgradeObjectBase
dwField1	base/include/srvEngine.h	/^	uint32_t  dwField1;    \/\/ Á≠âÁ∫ß$/;"	m	struct:PetBase
dwField1	base/include/srvEngine.h	/^	uint32_t  dwField1;    \/\/ ÈúÄË¶ÅÁªèÈ™å$/;"	m	struct:ExperienceBase
dwField1	base/include/srvEngine.h	/^	uint32_t  dwField1;    \/\/ ÈúÄË¶ÅÁªèÈ™å$/;"	m	struct:HonorBase
dwField10	base/include/srvEngine.h	/^	uint32_t  dwField10;      \/\/ ÂâçÊèêÊäÄËÉΩ‰∏â$/;"	m	struct:SkillBase
dwField10	base/include/srvEngine.h	/^	uint32_t  dwField10;    \/\/ ‰ΩìË¥®$/;"	m	struct:NpcBase
dwField10	base/include/srvEngine.h	/^	uint32_t  dwField10;    \/\/ ÊâÄÈúÄÂâçÊèêÊäÄËÉΩÁ≠âÁ∫ß$/;"	m	struct:LiveSkillBase
dwField10	base/include/srvEngine.h	/^	uint32_t  dwField10;    \/\/ ÊúÄÂ§ßÁîüÂëΩÂÄº$/;"	m	struct:ObjectBase
dwField10	base/include/srvEngine.h	/^	uint32_t  dwField10;    \/\/ ÊúÄÂ§ßÈ≠îÊîªÂ¢ûÂä†$/;"	m	struct:UpgradeObjectBase
dwField10	base/include/srvEngine.h	/^	uint32_t  dwField10;    \/\/ È≠îÈò≤$/;"	m	struct:PetBase
dwField11	base/include/srvEngine.h	/^	uint32_t  dwField11;      \/\/ ÂâçÊèêÊäÄËÉΩ‰∏âÁ≠âÁ∫ß$/;"	m	struct:SkillBase
dwField11	base/include/srvEngine.h	/^	uint32_t  dwField11;    \/\/ ‰ΩìË¥®$/;"	m	struct:NpcBase
dwField11	base/include/srvEngine.h	/^	uint32_t  dwField11;    \/\/ ÊäÄËÉΩÁ≠âÁ∫ß$/;"	m	struct:LiveSkillBase
dwField11	base/include/srvEngine.h	/^	uint32_t  dwField11;    \/\/ ÊúÄÂ§ßÊ≥ïÊúØÂÄº$/;"	m	struct:ObjectBase
dwField11	base/include/srvEngine.h	/^	uint32_t  dwField11;    \/\/ Áâ©Èò≤Â¢ûÂä†$/;"	m	struct:UpgradeObjectBase
dwField11	base/include/srvEngine.h	/^	uint32_t  dwField11;    \/\/ ÈáçÂáª$/;"	m	struct:PetBase
dwField12	base/include/srvEngine.h	/^	uint32_t  dwField12;      \/\/ Èó¥ÈöîÊó∂Èó¥$/;"	m	struct:SkillBase
dwField12	base/include/srvEngine.h	/^	uint32_t  dwField12;    \/\/ ÂäõÈáè$/;"	m	struct:PetBase
dwField12	base/include/srvEngine.h	/^	uint32_t  dwField12;    \/\/ ÊúÄÂ§ß‰ΩìÂäõÂÄº$/;"	m	struct:ObjectBase
dwField12	base/include/srvEngine.h	/^	uint32_t  dwField12;    \/\/ È¢úËâ≤$/;"	m	struct:NpcBase
dwField12	base/include/srvEngine.h	/^	uint32_t  dwField12;    \/\/ È≠îÈò≤Â¢ûÂä†$/;"	m	struct:UpgradeObjectBase
dwField13	base/include/srvEngine.h	/^	uint32_t  dwField13;      \/\/ ÊîªÂáªÊñπÂºè$/;"	m	struct:SkillBase
dwField13	base/include/srvEngine.h	/^	uint32_t  dwField13;    \/\/ ai$/;"	m	struct:NpcBase
dwField13	base/include/srvEngine.h	/^	uint32_t  dwField13;    \/\/ Êô∫Âäõ$/;"	m	struct:PetBase
dwField13	base/include/srvEngine.h	/^	uint32_t  dwField13;    \/\/ ÊúÄÂ∞èÁâ©Êîª$/;"	m	struct:ObjectBase
dwField13	base/include/srvEngine.h	/^	uint32_t  dwField13;    \/\/ ÁîüÂëΩÂÄºÂ¢ûÂä†$/;"	m	struct:UpgradeObjectBase
dwField14	base/include/srvEngine.h	/^	uint32_t  dwField14;      \/\/ ËÉΩÂê¶È™ëÈ©¨‰ΩøÁî®$/;"	m	struct:SkillBase
dwField14	base/include/srvEngine.h	/^	uint32_t  dwField14;    \/\/ ÊïèÊç∑$/;"	m	struct:PetBase
dwField14	base/include/srvEngine.h	/^	uint32_t  dwField14;    \/\/ ÊúÄÂ§ßÁâ©Êîª$/;"	m	struct:ObjectBase
dwField14	base/include/srvEngine.h	/^	uint32_t  dwField14;    \/\/ ÁßªÂä®Èó¥Èöî$/;"	m	struct:NpcBase
dwField15	base/include/srvEngine.h	/^	uint32_t  dwField15;      \/\/ ÈúÄË¶ÅÁâ©ÂìÅ$/;"	m	struct:SkillBase
dwField15	base/include/srvEngine.h	/^	uint32_t  dwField15;    \/\/ ÊîªÂáªÈó¥Èöî$/;"	m	struct:NpcBase
dwField15	base/include/srvEngine.h	/^	uint32_t  dwField15;    \/\/ ÊúÄÂ∞èÈ≠îÊîª$/;"	m	struct:ObjectBase
dwField15	base/include/srvEngine.h	/^	uint32_t  dwField15;    \/\/ Á≤æÁ•û$/;"	m	struct:PetBase
dwField16	base/include/srvEngine.h	/^	uint32_t  dwField16;    \/\/ ‰ΩìË¥®    $/;"	m	struct:PetBase
dwField16	base/include/srvEngine.h	/^	uint32_t  dwField16;    \/\/ ÊúÄÂ§ßÈ≠îÊîª$/;"	m	struct:ObjectBase
dwField16	base/include/srvEngine.h	/^	uint32_t  dwField16;    \/\/ ÊúÄÂ∞èÁâ©ÁêÜÈò≤Âæ°Âäõ$/;"	m	struct:NpcBase
dwField17	base/include/srvEngine.h	/^	uint32_t  dwField17;      \/\/ Ê∂àËÄó‰ΩìÂäõÂÄº$/;"	m	struct:SkillBase
dwField17	base/include/srvEngine.h	/^	uint32_t  dwField17;    \/\/ ÊúÄÂ§ßÁâ©ÁêÜÈò≤Âæ°Âäõ$/;"	m	struct:NpcBase
dwField17	base/include/srvEngine.h	/^	uint32_t  dwField17;    \/\/ Áâ©Èò≤$/;"	m	struct:ObjectBase
dwField18	base/include/srvEngine.h	/^	uint32_t  dwField18;      \/\/ Ê∂àËÄóÊ≥ïÊúØÂÄº$/;"	m	struct:SkillBase
dwField18	base/include/srvEngine.h	/^	uint32_t  dwField18;    \/\/ ÊúÄÂ∞èÊ≥ïÊúØÈò≤Âæ°Âäõ$/;"	m	struct:NpcBase
dwField18	base/include/srvEngine.h	/^	uint32_t  dwField18;    \/\/ È≠îÈò≤$/;"	m	struct:ObjectBase
dwField19	base/include/srvEngine.h	/^	uint32_t  dwField19;      \/\/ Ê∂àËÄóÁîüÂëΩÂÄº$/;"	m	struct:SkillBase
dwField19	base/include/srvEngine.h	/^	uint32_t  dwField19;    \/\/ ‰º§ÂÆ≥Âä†Êàê$/;"	m	struct:ObjectBase
dwField19	base/include/srvEngine.h	/^	uint32_t  dwField19;    \/\/ ÊúÄÂ§ßÊ≥ïÊúØÈò≤Âæ°Âäõ$/;"	m	struct:NpcBase
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;      \/\/ ÊäÄËÉΩÁ≠âÁ∫ß$/;"	m	struct:SkillBase
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ ÂìÅË¥®$/;"	m	struct:SoulStoneBase
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ ÊÄßÂà´$/;"	m	struct:HairStyle
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ ÊÄßÂà´$/;"	m	struct:HeadList
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ ÊúÄÂ§ßÊï∞Èáè$/;"	m	struct:ObjectBase
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ ÊùêÊñôÁ±ªÂûã$/;"	m	struct:CountryMaterial
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ Á±ªÂûã$/;"	m	struct:NpcBase
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ Á±ªÂûã$/;"	m	struct:PetBase
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ ÈúÄË¶ÅÂ∑•ÂÖ∑$/;"	m	struct:LiveSkillBase
dwField2	base/include/srvEngine.h	/^	uint32_t  dwField2;    \/\/ È¢úËâ≤$/;"	m	struct:HairColour
dwField20	base/include/srvEngine.h	/^	uint32_t  dwField20;      \/\/ ‰º§ÂÆ≥Âä†Êàê$/;"	m	struct:SkillBase
dwField20	base/include/srvEngine.h	/^	uint32_t  dwField20;    \/\/ ‰∫îË°åÂ±ûÊÄß$/;"	m	struct:NpcBase
dwField20	base/include/srvEngine.h	/^	uint32_t  dwField20;    \/\/ ÊîªÂáªÈÄüÂ∫¶$/;"	m	struct:ObjectBase
dwField21	base/include/srvEngine.h	/^	uint32_t  dwField21;    \/\/ ‰∫îË°åÁÇπÊï∞$/;"	m	struct:NpcBase
dwField21	base/include/srvEngine.h	/^	uint32_t  dwField21;    \/\/ ÁßªÂä®ÈÄüÂ∫¶$/;"	m	struct:ObjectBase
dwField22	base/include/srvEngine.h	/^	uint32_t  dwField22;      \/\/ Ê∂àËÄóÁâ©ÂìÅÁ±ªÂûã$/;"	m	struct:SkillBase
dwField22	base/include/srvEngine.h	/^	uint32_t  dwField22;    \/\/ ÂëΩ‰∏≠Áéá$/;"	m	struct:ObjectBase
dwField23	base/include/srvEngine.h	/^	uint32_t  dwField23;      \/\/ Áâ©ÂìÅÊ∂àËÄóÊï∞Èáè$/;"	m	struct:SkillBase
dwField23	base/include/srvEngine.h	/^	uint32_t  dwField23;    \/\/ ÊúÄÂ∞èÊ≥ïÊúØÊîªÂáª$/;"	m	struct:NpcBase
dwField23	base/include/srvEngine.h	/^	uint32_t  dwField23;    \/\/ Ë∫≤ÈÅøÁéá$/;"	m	struct:ObjectBase
dwField24	base/include/srvEngine.h	/^	uint32_t  dwField24;    \/\/ ÊîπÈÄ†$/;"	m	struct:ObjectBase
dwField24	base/include/srvEngine.h	/^	uint32_t  dwField24;    \/\/ ÊúÄÂ§ßÊ≥ïÊúØÊîªÂáª$/;"	m	struct:NpcBase
dwField25	base/include/srvEngine.h	/^	uint32_t  dwField25;    \/\/ ÂêàÊàêÁ≠âÁ∫ß$/;"	m	struct:ObjectBase
dwField25	base/include/srvEngine.h	/^	uint32_t  dwField25;    \/\/ ÊúÄÂ∞èÊîªÂáªÂäõ$/;"	m	struct:NpcBase
dwField26	base/include/srvEngine.h	/^	uint32_t  dwField26;    \/\/ ÊâìÈÄ†$/;"	m	struct:ObjectBase
dwField26	base/include/srvEngine.h	/^	uint32_t  dwField26;    \/\/ ÊúÄÂ§ßÊîªÂáªÂäõ$/;"	m	struct:NpcBase
dwField27	base/include/srvEngine.h	/^	uint32_t  dwField27;    \/\/ ÊäÄËÉΩ$/;"	m	struct:NpcBase
dwField29	base/include/srvEngine.h	/^	uint32_t  dwField29;    \/\/ Ë£ÖÂ§á‰ΩçÁΩÆ$/;"	m	struct:ObjectBase
dwField29	base/include/srvEngine.h	/^	uint32_t  dwField29;    \/\/ È≠ÇÈ≠Ñ‰πãÁü≥Âá†Áéá$/;"	m	struct:NpcBase
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;      \/\/ ÊäÄËÉΩÁ≥ªÂà´$/;"	m	struct:SkillBase
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ ÂàùÂßãÊäÄËÉΩ$/;"	m	struct:LiveSkillBase
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ Âä®‰ΩúÂèëÂûãÂõæÁâá$/;"	m	struct:HairStyle
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ Â§¥ÂÉèÁºñÂè∑$/;"	m	struct:HeadList
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ Áâ©ÂìÅÁ±ªÂà´$/;"	m	struct:CountryMaterial
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ Á≠âÁ∫ß$/;"	m	struct:NpcBase
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ Á±ªÂûã$/;"	m	struct:ObjectBase
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ Á±ªÂûã$/;"	m	struct:UpgradeObjectBase
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ ÁªèÈ™åÂÄº$/;"	m	struct:PetBase
dwField3	base/include/srvEngine.h	/^	uint32_t  dwField3;    \/\/ Ë¥πÁî®$/;"	m	struct:HairColour
dwField30	base/include/srvEngine.h	/^	uint32_t  dwField30;    \/\/ ËÄê‰πÖÂ∫¶$/;"	m	struct:ObjectBase
dwField31	base/include/srvEngine.h	/^	uint32_t  dwField31;    \/\/ ‰ª∑Ê†º$/;"	m	struct:ObjectBase
dwField32	base/include/srvEngine.h	/^	uint32_t  dwField32;    \/\/ Ë∫≤ÈÅøÁéá$/;"	m	struct:NpcBase
dwField32	base/include/srvEngine.h	/^	uint32_t  dwField32;    \/\/ È¢úËâ≤$/;"	m	struct:ObjectBase
dwField33	base/include/srvEngine.h	/^	uint32_t  dwField33;    \/\/ ÂëΩ‰∏≠Áéá$/;"	m	struct:NpcBase
dwField33	base/include/srvEngine.h	/^	uint32_t  dwField33;    \/\/ Ê†ºÂ≠êÂÆΩ$/;"	m	struct:ObjectBase
dwField33	base/include/srvEngine.h	/^	uint32_t  dwField33;    \/\/ ÈúÄÊ±ÇÁ≠âÁ∫ß$/;"	m	struct:SoulStoneBase
dwField34	base/include/srvEngine.h	/^	uint32_t  dwField34;    \/\/ ÂõæÁâá$/;"	m	struct:NpcBase
dwField34	base/include/srvEngine.h	/^	uint32_t  dwField34;    \/\/ Ê†ºÂ≠êÈ´ò$/;"	m	struct:ObjectBase
dwField35	base/include/srvEngine.h	/^	uint32_t  dwField35;    \/\/ ÂìÅË¥®$/;"	m	struct:NpcBase
dwField35	base/include/srvEngine.h	/^	uint32_t  dwField35;    \/\/ ÈáëÂ≠ê$/;"	m	struct:ObjectBase
dwField36	base/include/srvEngine.h	/^	uint32_t  dwField36;    \/\/ ÂêàÊàêÂçï‰ª∑$/;"	m	struct:ObjectBase
dwField36	base/include/srvEngine.h	/^	uint32_t  dwField36;    \/\/ ÊÄ™Áâ©Á±ªÂà´$/;"	m	struct:NpcBase
dwField37	base/include/srvEngine.h	/^	uint32_t  dwField37;    \/\/ Á∫∏Â®ÉÂ®ÉÂõæÁâá$/;"	m	struct:NpcBase
dwField37	base/include/srvEngine.h	/^	uint32_t  dwField37;    \/\/ ÈáçÂáª$/;"	m	struct:ObjectBase
dwField38	base/include/srvEngine.h	/^	uint32_t  dwField38;    \/\/ Á•ûÂú£Ê¶ÇÁéá$/;"	m	struct:ObjectBase
dwField39	base/include/srvEngine.h	/^	uint32_t  dwField39;    \/\/ ‰∫åËøõÂà∂Ê†áÂøó$/;"	m	struct:NpcBase
dwField4	base/include/srvEngine.h	/^	uint32_t  dwField4;      \/\/ ÊäÄËÉΩÊ†ëÂà´$/;"	m	struct:SkillBase
dwField4	base/include/srvEngine.h	/^	uint32_t  dwField4;    \/\/ ÂçáÁ∫ßÂéüÊñô$/;"	m	struct:UpgradeObjectBase
dwField4	base/include/srvEngine.h	/^	uint32_t  dwField4;    \/\/ ÂØπÂ∫îÂõæÁ¥†$/;"	m	struct:LiveSkillBase
dwField4	base/include/srvEngine.h	/^	uint32_t  dwField4;    \/\/ ÁîüÂëΩÂÄº$/;"	m	struct:NpcBase
dwField4	base/include/srvEngine.h	/^	uint32_t  dwField4;    \/\/ ÁîüÂëΩÂÄº$/;"	m	struct:PetBase
dwField4	base/include/srvEngine.h	/^	uint32_t  dwField4;    \/\/ Á∫∏Â®ÉÂ®ÉÂèëÂûãÂõæÁâá$/;"	m	struct:HairStyle
dwField4	base/include/srvEngine.h	/^	uint32_t  dwField4;    \/\/ ËÅå‰∏öÈôêÂÆö$/;"	m	struct:ObjectBase
dwField4	base/include/srvEngine.h	/^	uint32_t  dwField4;    \/\/ Ë¥πÁî®$/;"	m	struct:HeadList
dwField40	base/include/srvEngine.h	/^	uint32_t  dwField40;    \/\/ ‰∫åËøõÂà∂Ê†áÂøó$/;"	m	struct:NpcBase
dwField40	base/include/srvEngine.h	/^	uint32_t  dwField40;    \/\/ ÂäõÈáè$/;"	m	struct:ObjectBase
dwField41	base/include/srvEngine.h	/^	uint32_t  dwField41;    \/\/ sky ÊûÅÂìÅÂÄçÁéá$/;"	m	struct:NpcBase
dwField41	base/include/srvEngine.h	/^	uint32_t  dwField41;    \/\/ Êô∫Âäõ$/;"	m	struct:ObjectBase
dwField42	base/include/srvEngine.h	/^	uint32_t  dwField42;    \/\/ ÊïèÊç∑$/;"	m	struct:ObjectBase
dwField43	base/include/srvEngine.h	/^	uint32_t  dwField43;    \/\/ Á≤æÁ•û$/;"	m	struct:ObjectBase
dwField44	base/include/srvEngine.h	/^	uint32_t  dwField44;    \/\/ Á•ûÂú£Ë£ÖÂ§áÂá†Áéá$/;"	m	struct:ColorObjectBase
dwField44	base/include/srvEngine.h	/^	uint32_t  dwField44;    \/\/ ËÄêÂäõ$/;"	m	struct:ObjectBase
dwField45	base/include/srvEngine.h	/^	uint32_t  dwField45;    \/\/ Áâ©ÁêÜÂÖç‰º§$/;"	m	struct:ObjectBase
dwField46	base/include/srvEngine.h	/^	uint32_t  dwField46;    \/\/ È≠îÊ≥ïÂÖç‰º§$/;"	m	struct:ObjectBase
dwField5	base/include/srvEngine.h	/^	uint32_t  dwField5;      \/\/ ÈúÄË¶ÅÊú¨Á∫øÊäÄËÉΩÁÇπÊï∞$/;"	m	struct:SkillBase
dwField5	base/include/srvEngine.h	/^	uint32_t  dwField5;    \/\/ Áâ©Êîª‰∏ãÈôê$/;"	m	struct:PetBase
dwField5	base/include/srvEngine.h	/^	uint32_t  dwField5;    \/\/ Á±ªÂà´$/;"	m	struct:LiveSkillBase
dwField5	base/include/srvEngine.h	/^	uint32_t  dwField5;    \/\/ ÁªèÈ™åÂÄº$/;"	m	struct:NpcBase
dwField5	base/include/srvEngine.h	/^	uint32_t  dwField5;    \/\/ Ë¥πÁî®$/;"	m	struct:HairStyle
dwField5	base/include/srvEngine.h	/^	uint32_t  dwField5;    \/\/ ÈúÄË¶ÅÁ≠âÁ∫ß$/;"	m	struct:ObjectBase
dwField5	base/include/srvEngine.h	/^	uint32_t  dwField5;    \/\/ ÈúÄË¶ÅÈì∂Â≠ê$/;"	m	struct:UpgradeObjectBase
dwField6	base/include/srvEngine.h	/^	uint32_t  dwField6;      \/\/ ÂâçÊèêÊäÄËÉΩ‰∏Ä$/;"	m	struct:SkillBase
dwField6	base/include/srvEngine.h	/^	uint32_t  dwField6;    \/\/ Âäõ$/;"	m	struct:NpcBase
dwField6	base/include/srvEngine.h	/^	uint32_t  dwField6;    \/\/ ÂØπÂ∫îÊàêÂäüÁéá$/;"	m	struct:UpgradeObjectBase
dwField6	base/include/srvEngine.h	/^	uint32_t  dwField6;    \/\/ ÊäÄËÉΩÂçáÁ∫ßÁªèÈ™å$/;"	m	struct:LiveSkillBase
dwField6	base/include/srvEngine.h	/^	uint32_t  dwField6;    \/\/ Áâ©Êîª‰∏äÈôê$/;"	m	struct:PetBase
dwField6	base/include/srvEngine.h	/^	uint32_t  dwField6;    \/\/ ÈÅìÂÖ∑Á≠âÁ∫ß$/;"	m	struct:ObjectBase
dwField7	base/include/srvEngine.h	/^	uint32_t  dwField7;      \/\/ ÂâçÊèêÊäÄËÉΩ‰∏ÄÁ≠âÁ∫ß$/;"	m	struct:SkillBase
dwField7	base/include/srvEngine.h	/^	uint32_t  dwField7;    \/\/ ÂèØÂê¶ÂçáÁ∫ß$/;"	m	struct:LiveSkillBase
dwField7	base/include/srvEngine.h	/^	uint32_t  dwField7;    \/\/ Â±ûÊÄßÊ†áËØÜ$/;"	m	struct:SetObjectBase
dwField7	base/include/srvEngine.h	/^	uint32_t  dwField7;    \/\/ Êô∫$/;"	m	struct:NpcBase
dwField7	base/include/srvEngine.h	/^	uint32_t  dwField7;    \/\/ ÊúÄÂ∞èÁâ©ÊîªÂ¢ûÂä†$/;"	m	struct:UpgradeObjectBase
dwField7	base/include/srvEngine.h	/^	uint32_t  dwField7;    \/\/ È≠îÊîª‰∏ãÈôê$/;"	m	struct:PetBase
dwField8	base/include/srvEngine.h	/^	uint32_t  dwField8;      \/\/ ÂâçÊèêÊäÄËÉΩ‰∫å$/;"	m	struct:SkillBase
dwField8	base/include/srvEngine.h	/^	uint32_t  dwField8;    \/\/ ÊïèÊç∑$/;"	m	struct:NpcBase
dwField8	base/include/srvEngine.h	/^	uint32_t  dwField8;    \/\/ ÊúÄÂ§ßÁâ©ÊîªÂ¢ûÂä†$/;"	m	struct:UpgradeObjectBase
dwField8	base/include/srvEngine.h	/^	uint32_t  dwField8;    \/\/ ËøõÈò∂ÊäÄËÉΩ$/;"	m	struct:LiveSkillBase
dwField8	base/include/srvEngine.h	/^	uint32_t  dwField8;    \/\/ ÈÖçÂêàÁâ©ÂìÅ$/;"	m	struct:ObjectBase
dwField8	base/include/srvEngine.h	/^	uint32_t  dwField8;    \/\/ È≠îÊîª‰∏äÈôê$/;"	m	struct:PetBase
dwField9	base/include/srvEngine.h	/^	uint32_t  dwField9;      \/\/ ÂâçÊèêÊäÄËÉΩ‰∫åÁ≠âÁ∫ß$/;"	m	struct:SkillBase
dwField9	base/include/srvEngine.h	/^	uint32_t  dwField9;    \/\/ ÂâçÊèêÊäÄËÉΩID$/;"	m	struct:LiveSkillBase
dwField9	base/include/srvEngine.h	/^	uint32_t  dwField9;    \/\/ ÊúÄÂ∞èÈ≠îÊîªÂ¢ûÂä†$/;"	m	struct:UpgradeObjectBase
dwField9	base/include/srvEngine.h	/^	uint32_t  dwField9;    \/\/ Áâ©Èò≤$/;"	m	struct:PetBase
dwField9	base/include/srvEngine.h	/^	uint32_t  dwField9;    \/\/ Á≤æÁ•û$/;"	m	struct:NpcBase
dwFlag	base/include/csBox.h	/^	uint32_t dwFlag[10];  \/\/sky œﬂ–‘±Í÷æ¥Ê∑≈NPCµƒŒ®“ªID$/;"	m	struct:Cmd::stTeamAllNPCFlagUserCmd
dwFormalFail	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwFormalFail;$/;"	m	class:CCountry
dwFormalWin	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwFormalWin;$/;"	m	class:CCountry
dwFriendDegree	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CAlly
dwFriendDegree	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwFriendDegree;$/;"	m	class:CAlly
dwGatewayServerID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUser_SceneSession
dwGenID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  dwGenID; \/\/ æ¸∂”Ω´æ¸Ω«…´ID$/;"	m	class:CArmy
dwGold	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwGold;$/;"	m	class:CCity
dwGold	base/include/srvEngine.h	/^		uint32_t dwGold;        \/\/\/ Áªì‰ΩôÁ®éÈáë$/;"	m	struct:NpcDareDef::NpcDareRecord
dwGrace	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwGrace;    \/\/ ±æ¥ŒŒƒ≤…µ√∑÷$/;"	m	class:CPothunter
dwHP	base/include/csCommon.h	/^/;"	m	struct:Cmd::stSetHPAndMPDataUserCmd
dwHairID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapUserSculpt
dwHairRGB	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwHoldCountryID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
dwHoldSeptID	base/include/srvEngine.h	/^		uint32_t dwHoldSeptID;      \/\/\/ ÁõÆÂâçËØ•npcÁöÑÊâÄÊúâÂÆ∂Êóè$/;"	m	struct:NpcDareDef::NpcDareRecord
dwHoldUnionID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
dwHoldUserID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD dwHoldUserID; \/\/ µ¿æﬂƒø«∞À˘ ÙÕÊº“ID$/;"	m	class:CArhat
dwHorseID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapUserSculpt
dwID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Horse
dwID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwID; \/\/ æ¸∂”ID$/;"	m	class:CArmy
dwID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwID;$/;"	m	class:CCountry
dwID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwID;$/;"	m	class:CVote
dwID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD dwID;  \/\/ ¬ﬁ∫∫µƒID$/;"	m	class:CArhat
dwID	base/include/csBox.h	/^	uint32_t dwID;		\/\/sky “™¥Ú‘ÏµƒŒÔ∆∑ID$/;"	m	struct:Cmd::stNewMakeObjectUserCmd
dwID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regScene_SceneSession
dwID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUser_SceneSession
dwID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
dwIsExp	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwIsExp;$/;"	m	class:CSept
dwIsExp	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwJoinTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwJoinTime;$/;"	m	class:CSchoolMember
dwJoinTime	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
dwKind	base/include/srvEngine.h	/^	uint32_t dwKind;$/;"	m	struct:zCountryMaterialB
dwKingUnionID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwKingUnionID;$/;"	m	class:CCountry
dwLastDailyMoney	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwLastDailyMoney; \/\/ ª µ€…œ¥Œ¡Ï»°5DΩ±¿¯µƒ ±º‰$/;"	m	class:CCountry
dwLastDareTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwLastDareTime;   \/\/ …œ¥ŒΩ” ‹ÃÙ’Ωµƒ ±º‰$/;"	m	class:CCountry
dwLastTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwLastTime;$/;"	m	class:CSchoolMember
dwLastTime	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
dwLastUpTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwLastUpTime; \/\/ √ø»’◊‘∂Øø€ºı”—∫√∂»µƒ◊Ó∫Û“ª¥Œ∏¸–¬ ±º‰$/;"	m	class:CAlly
dwLastUpTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwLastUpTime;$/;"	m	class:CTech
dwLeftHandID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwLeftHandID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapUserSculpt
dwLeftWeaponColor	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CTech
dwLevel	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwLevel;$/;"	m	class:CSept
dwLevel	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwLevel;$/;"	m	class:CTech
dwLevel	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwLocation	base/include/csCommon.h	/^/;"	m	struct:stObjectLocation
dwLuck	SessionServer/libsessionserver/SessionServer.h	/^    int dwLuck;  \/\/ –“‘À–« π”√¥Œ ˝$/;"	m	class:CPothunter
dwMP	base/include/csCommon.h	/^/;"	m	struct:Cmd::stSetHPAndMPDataUserCmd
dwMana	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwMana;$/;"	m	class:CUnion
dwMana	SessionServer/libsessionserver/Union.cpp	/^/;"	m	class:CUnionSort	file:
dwMana	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
dwMapBuildingTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapBuildingData
dwMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser::__anon87
dwMapID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD dwMapID;$/;"	m	struct:ArhatMapPoint
dwMapID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUser_SceneSession
dwMapID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_reqAddScene_SceneSession
dwMapID	base/include/srvEngine.h	/^		uint32_t dwMapID;        \/\/\/ Âú∞ÂõæID$/;"	m	struct:NpcDareDef::NpcDareRecord
dwMapNpcDataPosition	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_NpcData
dwMapObjectTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stRemoveMapObjectMapScreenUserCmd
dwMapObjectTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
dwMapRealID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD dwMapRealID;$/;"	m	class:CArhat
dwMapTempID	base/recordcmd.h	/^			DWORD dwMapTempID;	\/\/temp map id$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
dwMapTempID	base/recordcmd.h	/^			DWORD dwMapTempID;$/;"	m	struct:Cmd::Record::t_ReadUser_SceneRecord
dwMasterID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwMasterID;$/;"	m	class:CSchoolMember
dwMasterID	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
dwMasterSerialID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwMasterSerialID;$/;"	m	class:CSchool
dwMasterSerialID	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolInfo
dwMaterialKind	base/include/srvEngine.h	/^	uint32_t dwMaterialKind;$/;"	m	struct:zCountryMaterialB
dwMergeVersion	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMergeVersionCheckUserCmd
dwMoney	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwMoney;$/;"	m	class:CUnion
dwMoney	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
dwNPCID	base/include/csBox.h	/^	uint32_t dwNPCID; \/\/sky ±ª…Ë÷√NPCµƒŒ®“ªID$/;"	m	struct:Cmd::stTeamSetNPCFlagUserCmd
dwNpcDataID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_NpcData
dwNpcID	SceneServer/libscenesserver/CountryDare.cpp	/^  DWORD dwNpcID; \/\/ “™Õ≥º∆µƒNPCID$/;"	m	struct:TotalAllNpc	file:
dwNpcID	base/include/srvEngine.h	/^		uint32_t dwNpcID;        \/\/\/ NPC id$/;"	m	struct:NpcDareDef::NpcDareRecord
dwNpcLockedUser	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD dwNpcLockedUser;$/;"	m	class:SceneNpc
dwNpcNum	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwNpcNum; \/\/ ∂”≥§¥¯¡ÏµƒNPC ˝£¨‘› ±Œ¥”√$/;"	m	class:CCaptain
dwNpcTempID	base/include/csBox.h	/^  uint32_t dwNpcTempID;      \/**<  ¨ÃÂ¡Ÿ ±±‡∫≈ *\/$/;"	m	struct:Cmd::stNpcDirItemUserCmd
dwNum	base/include/csCommon.h	/^/;"	m	struct:_Object
dwObjectID	SceneServer/libscenesserver/SceneNpcDare.cpp	/^    DWORD  dwObjectID;$/;"	m	class:NpcDareObjectCompare	file:
dwObjectID	SceneServer/libscenesserver/SceneRelation.cpp	/^    DWORD  dwObjectID;$/;"	m	class:ItemObjectCompare	file:
dwObjectID	SceneServer/libscenesserver/SceneSchool.cpp	/^    DWORD  dwObjectID;$/;"	m	class:SchoolObjectCompare	file:
dwObjectID	SceneServer/libscenesserver/SceneSept.cpp	/^    DWORD  dwObjectID;$/;"	m	class:SeptObjectCompare	file:
dwObjectID	SceneServer/libscenesserver/SceneUnion.cpp	/^    DWORD  dwObjectID;$/;"	m	class:UnionObjectCompare	file:
dwObjectID	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:ObjectCompare	file:
dwObjectID	SceneServer/libscenesserver/SessionClient.cpp	/^	DWORD  dwObjectID;$/;"	m	class:SessionItemObjectCompare	file:
dwObjectID	SceneServer/libscenesserver/Skill.cpp	/^    DWORD  dwObjectID;$/;"	m	class:ItemObjectCompare	file:
dwObjectID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
dwObjectID	base/include/csCommon.h	/^/;"	m	struct:_Object
dwObjectID	base/include/srvEngine.h	/^	uint32_t dwObjectID;    \/\/ Áâ©ÂìÅID$/;"	m	struct:zUpgradeObjectB
dwObjectID	base/include/srvEngine.h	/^	uint32_t dwObjectID;$/;"	m	struct:zCountryMaterialB
dwOption	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwOption;$/;"	m	class:CVoteItem
dwOrder	SessionServer/libsessionserver/Sept.cpp	/^    DWORD dwOrder;                          \/\/ º“◊Â≈≈√˚$/;"	m	class:CSeptSort	file:
dwOrder	SessionServer/libsessionserver/Union.cpp	/^/;"	m	class:CUnionSort	file:
dwOwner	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
dwPosX	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser::__anon87
dwPosX	base/include/srvEngine.h	/^		uint32_t dwPosX;        \/\/\/ npcÁöÑ x ÂùêÊ†á$/;"	m	struct:NpcDareDef::NpcDareRecord
dwPosY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser::__anon87
dwPosY	base/include/srvEngine.h	/^		uint32_t dwPosY;        \/\/\/ npcÁöÑ y ÂùêÊ†á$/;"	m	struct:NpcDareDef::NpcDareRecord
dwPreSerialID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwPreSerialID;$/;"	m	class:CSchoolMember
dwPreSerialID	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
dwProgress	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwProgress;$/;"	m	class:CTech
dwReduceDam	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD dwReduceDam;  \/\/\/ ’ŸªΩ ﬁ…À∫¶ø€ºı$/;"	m	class:SceneNpc
dwRepute	SessionServer/libsessionserver/Sept.cpp	/^    DWORD dwRepute;                         \/\/ º“◊Â…˘Õ˚$/;"	m	class:CSeptSort	file:
dwRepute	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwRepute;$/;"	m	class:CSept
dwRepute	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
dwRepute	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwResearchID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwResearchID;$/;"	m	class:CTech
dwResult	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  dwResult;$/;"	m	class:CDareRecord
dwRight	SessionServer/libsessionserver/SessionServer.h	/^		DWORD dwRight;$/;"	m	struct:CSept::stStepRight
dwRightHandID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwRightHandID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapUserSculpt
dwRightWeaponColor	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwRollTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
dwSceneTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_unregUser_SceneSession
dwSchoolID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwSchoolID;$/;"	m	class:CSchoolMember
dwSchoolID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
dwSchoolID	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolInfo
dwSchoolID	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
dwScore	SessionServer/libsessionserver/SessionServer.h	/^    int dwScore;    \/\/ µ√∑÷$/;"	m	class:CPothunter
dwSeptID	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAddSeptExp	file:
dwSeptID	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAddSeptNormalExp	file:
dwSeptID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
dwSeptID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwSeptID	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwSeptID	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionMemberInfo
dwSeptLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwSeptLevel	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
dwSeptRepute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwSerialID	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
dwServerID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_reqAddScene_SceneSession
dwSize	SessionServer/libsessionserver/SessionServer.h	/^  DWORD dwSize;$/;"	m	struct:TempArchive
dwSkillID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
dwSpendGold	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwSpendGold;$/;"	m	class:CSept
dwSpendGold	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwStandTime	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD dwStandTime;$/;"	m	class:SceneNpc
dwStandTimeCount	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD dwStandTimeCount;$/;"	m	class:SceneNpc
dwStar	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwStar;$/;"	m	class:CCountry
dwStatus	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwStatus;$/;"	m	class:CTech
dwStatus	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwStatus;$/;"	m	class:CVote
dwSubjects	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createQuiz_SceneSession
dwTableID	base/include/csCommon.h	/^/;"	m	struct:stObjectLocation
dwTax	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwTax;  \/\/\/À∞¬ $/;"	m	class:CCountry
dwTeamState	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwTeam_tempid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Team
dwTeam_tempid	SessionServer/libsessionserver/SessionServer.h	/^  DWORD dwTeam_tempid; \/\/sky ∂”ŒÈŒ®“ªID$/;"	m	struct:Team
dwTempID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
dwTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regScene_SceneSession
dwTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regScene_ret_SceneSession
dwTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUser_SceneSession
dwTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_unregScene_SceneSession
dwThisID	base/include/csBox.h	/^	uint32_t dwThisID;		\/\/±ª π”√ŒÔ∆∑µƒŒ®“ªID$/;"	m	struct:Cmd::stMakeTurretUserCmd
dwTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
dwTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  dwTime;$/;"	m	class:CDareRecord
dwTimestamp	base/command.h	/^		DWORD dwTimestamp;$/;"	m	struct:Cmd::stNullUserCmd
dwTimestamp	base/include/csCommon.h	/^/;"	m	struct:Cmd::stNullUserCmd
dwTimestampServer	GatewayServer/old_back/GatewayServer.h	/^	QWORD dwTimestampServer;$/;"	m	class:GatewayTask
dwTotal	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwTotal;    \/\/ ¿€ª˝¡Ï»°µƒΩ±¿¯$/;"	m	class:Recommend
dwTotal	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwTotal; \/\/ ¿€º∆“—¡Ï»°µƒΩ∂Ó$/;"	m	class:RecommendSub
dwType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CTech
dwType	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwType;$/;"	m	class:CTech
dwType	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwType;$/;"	m	class:CVote
dwUID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwUID;$/;"	m	class:CTech
dwUnionActionPoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
dwUnionID	SceneServer/libscenesserver/SessionClient.cpp	/^	DWORD dwUnionID;$/;"	m	struct:ClearAllNotUnion	file:
dwUnionID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwUnionID;$/;"	m	class:CCity
dwUnionID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwUnionID;$/;"	m	class:CSept
dwUnionID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
dwUnionID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwUnionID	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
dwUnionID	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
dwUseJob	SessionServer/libsessionserver/SessionManager.cpp	/^    DWORD dwUseJob; \/\/sky ÷∞“µ$/;"	m	class:CGraceUser	file:
dwUseJob	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwUseJob;$/;"	m	class:UserSession
dwUseJob	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
dwUserID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stDegreeMember
dwUserID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stTempDegreeMember
dwUserID	SessionServer/libsessionserver/SessionManager.cpp	/^    DWORD dwUserID;$/;"	m	class:CGraceUser	file:
dwUserID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwUserID;   \/\/ ≤Œ»¸’ﬂID$/;"	m	class:CPothunter
dwUserID	base/command.h	/^		DWORD dwUserID;$/;"	m	struct:Cmd::stPasswdLogonUserCmd
dwUserID	base/command.h	/^		DWORD dwUserID;$/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd
dwUserID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createQuiz_SceneSession
dwUserID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_levelupNotify_SceneSession
dwUserID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
dwUserID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
dwUserID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_unregUser_SceneSession
dwUserID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_updateConsort
dwUserID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stPasswdLogonUserCmd
dwUserID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd
dwUserID	base/include/csTurn.h	/^		uint32_t dwUserID;\/\/”√ªßID$/;"	m	struct:Cmd::t_CheckRelationEmptyResult
dwUserTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stRefreshStateMapScreenUserCmd
dwUserTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stRemoveUserMapScreenUserCmd
dwUserTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stRequestUserDataMapScreenUserCmd
dwUserTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stRideMapScreenUserCmd
dwUserTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stUserGameTimeTimerUserCmd
dwUserTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
dwUserTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
dwValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	union:O::PkValue::__anon63
dwVoteID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwVoteID;$/;"	m	class:CVoteItem
dwWinnerID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD dwWinnerID;  \/\/ ◊Ó÷’µƒ”Æº“ID,”√”⁄∂‡∏ˆπ•∑Ω ± π”√$/;"	m	class:CDare
dwpstrIP	FLServer/GYListManager.h	/^	DWORD dwpstrIP;  \/**< ∑˛ŒÒ∆˜µÿ÷∑ *\/$/;"	m	struct:GYList
dwpstrIP	base/command.h	/^		DWORD dwpstrIP;$/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd
dwpstrIP	base/flcmd.h	/^			DWORD dwpstrIP;$/;"	m	struct:Cmd::FL::t_GYList_FL
dwpstrIP	base/flcmd.h	/^		DWORD dwpstrIP;$/;"	m	struct:Cmd::t_NewLoginSession
dwpstrIP	base/supercmd.h	/^			DWORD dwpstrIP;$/;"	m	struct:Cmd::Super::t_GYList_Gateway
dwstrIP	base/flcmd.h	/^			DWORD dwstrIP;$/;"	m	struct:Cmd::FL::t_LoginFL
e	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zRegion
e	SceneServer/libscenesserver/ScenesServer.h	/^NLe∫NÙV;eê—ç4/;"	e	enum:O::LiveSkills::NpcAIFlag
eCount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stxml_SuitAttribute
eKey	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:st_SuitEffect
eKey	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute::__Attr
eRequire	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:st_SuitEffect
eRequire	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute::__Attr
eRewardType	SceneServer/libscenesserver/SceneBattlefiel.h	/^enum eRewardType$/;"	g
eValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:st_SuitEffect
eValue	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute::__Attr
eVictoryType	SceneServer/libscenesserver/SceneBattlefiel.h	/^enum eVictoryType$/;"	g
efd	base/src/x_tcpserver.h	/^	int efd;					\/\/epoll$/;"	m	class:x_tcpserver
efd	base/src/x_tcptaskpool.cpp	/^	int efd;$/;"	m	class:x_okay_thread_functor	file:
efd	base/src/x_tcptaskpool.cpp	/^	int efd;$/;"	m	class:x_verify_thread_functor	file:
effect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::leech
effect	base/include/csCommon.h	/^/;"	m	struct:_Object::leech
effect	base/include/srvEngine.h	/^		rangeValue effect; $/;"	m	struct:zSoulStoneB::Value
effect	base/include/srvEngine.h	/^		uint16_t effect; \/\/ÊïàÊûú$/;"	m	struct:zObjectB::leechdom_t
effectCount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
egroup	base/src/getopt.c	/^  struct group *egroup;$/;"	m	struct:parser	typeref:struct:parser::group	file:
elapse	SceneServer/libscenesserver/scriptTickTask.h	/^	time_t elapse;$/;"	m	struct:scriptTask
elapse	base/include/zTime.h	/^	Quint16_t elapse(const zRTime &rt) const$/;"	f	class:zRTime
elapse	base/include/zTime.h	/^	time_t elapse() const$/;"	f	class:zTime
elapse	base/include/zTime.h	/^	time_t elapse(const zTime &rt) const$/;"	f	class:zTime
element	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Leechdom
element	base/include/srvEngine.h	/^		uint32_t element[5];$/;"	m	union:SkillElement::__anon136
embranchment_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Event
emperor	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
emperor	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
emperorForbid	SessionServer/libsessionserver/SessionServer.h	/^    static DWORD emperorForbid[10];\/\/ª µ€Ω˚—‘π˝µƒÕÊº“$/;"	m	class:SessionService
empty	RecordServer/RecordUserManager.cpp	/^bool RecordUserM::empty(){$/;"	f	class:RecordUserM
empty	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ObjectPack
empty	base/include/srvEngine.h	/^	inline bool empty() const$/;"	f	class:LimitHash
empty	base/include/srvEngine.h	/^	inline bool empty() const$/;"	f	class:MultiHash
empty	base/include/srvEngine.h	/^	inline bool empty() const$/;"	f	class:zEntryManager
empty	tmp/MiniServer/MiniGame.cpp	/^bool MiniGame::empty()$/;"	f	class:MiniGame
enReliveType	SceneServer/libscenesserver/SceneBattlefiel.h	/^enum enReliveType$/;"	g
enableAllSeats	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::enableAllSeats()$/;"	f	class:MiniGame
enableLogin	base/include/csCommon.h	/^/;"	m	struct:Cmd::Country_Info
enableRegister	base/include/csCommon.h	/^/;"	m	struct:Cmd::Country_Info
encMethod	base/include/csCommon.h	/^/;"	g	class:CEncrypt
encdec	base/src/zEncDec.cpp	/^int CEncrypt::encdec(void *data,uint32_t nLen,bool enc)$/;"	f	class:CEncrypt
encdec_des	base/src/zEncDec.cpp	/^int CEncrypt::encdec_des(BYTE *data,uint32_t nLen,bool enc)$/;"	f	class:CEncrypt
encdec_rc5	base/src/zEncDec.cpp	/^int CEncrypt::encdec_rc5(BYTE *data,uint32_t nLen,bool enc)$/;"	f	class:CEncrypt
enchance	SceneServer/libscenesserver/RebuildObject.cpp	/^bool RebuildObject::enchance(SceneUser& user,const Cmd::stPropertyUserCmd* cmd)$/;"	f	class:RebuildObject
enchance	SceneServer/libscenesserver/RebuildObject.cpp	/^bool SoulStone::enchance(SceneUser& user,zObject* dest,zObject* src)$/;"	f	class:SoulStone
encoding	deps/tinyxml/tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration
end	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::taskType
end	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
end	base/src/getopt.c	/^  char *end;			\/* Absolute end of BUF.  *\/$/;"	m	struct:argp_fmtstream	file:
end	tmp/MiniServer/MiniGame.cpp	/^bool MiniGame::end()$/;"	f	class:MiniGame
endBattleTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
endDare	SessionServer/libsessionserver/CityManager.cpp	/^void CCity::endDare()$/;"	f	class:CCity
endDare	SessionServer/libsessionserver/CityManager.cpp	/^void CCityM::endDare()$/;"	f	class:CCityM
endDare	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::endDare()$/;"	f	class:CCountry
endDare	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::endDare()$/;"	f	class:CCountryM
endGame	SceneServer/libscenesserver/Dice.cpp	/^void Dice::endGame(SceneUser * u)$/;"	f	class:Dice
endText	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
endTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
endTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::FixedRush
endTime	SessionServer/libsessionserver/SessionServer.h	/^  DWORD endTime;$/;"	m	struct:auctionBidInfo
end_tid	BillServer/BillUser.cpp	/^void BillUser::end_tid()$/;"	f	class:BillUser
endtime	SceneServer/libscenesserver/SceneServer1.h	/^      time_t endtime;$/;"	m	struct:MessageSystem::t_Message
enervation	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
enterNextPhase	SceneServer/libscenesserver/Rush.cpp	/^void Rush::enterNextPhase()$/;"	f	class:Rush
enterWar	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::enterWar(Cmd::Session::t_enterWar_SceneSession* cmd)$/;"	f	class:SceneUserManager
enter_queue	base/include/srvEngine.h	/^	void enter_queue(zPathQueueHead &queueHead,zPathPoint *pPoint,int currentCost)$/;"	f	class:zAStar
entity	deps/tinyxml/tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase
entity	deps/tinyxml/tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = $/;"	m	class:TiXmlBase	file:
entries	SceneServer/libscenesserver/SceneNpcAI.cpp	/^  SceneEntryPk_vec& entries;$/;"	m	struct:getEntriesCallBack	file:
entries	base/src/getopt.c	/^  struct hol_entry *entries;$/;"	m	struct:hol	typeref:struct:hol::hol_entry	file:
entry	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SkillStatusManager
entry	base/src/getopt.c	/^  const struct hol_entry *entry;$/;"	m	struct:pentry_state	typeref:struct:pentry_state::hol_entry	file:
entry	base/supercmd.h	/^			ServerEntry entry;$/;"	m	struct:Cmd::Super::t_Startup_ServerEntry_NotifyOther
entry	base/supercmd.h	/^			ServerEntry entry[0];$/;"	m	struct:Cmd::Super::t_Startup_Response
enumItemType	base/include/csCommon.h	/^/;"	g
enumMapDataType	base/include/csCommon.h	/^/;"	g	namespace:Cmd
enumSceneRunningState	base/include/srvEngine.h	/^enum enumSceneRunningState{$/;"	g
enum_IOOperationType	base/include/srvEngine.h	/^typedef   enum   enum_IOOperationType   $/;"	g
env	base/x_service.h	/^	x_properties env;        \/**< Â≠òÂÇ®ÂΩìÂâçËøêË°åÁ≥ªÁªüÁöÑÁéØÂ¢ÉÂèòÈáè *\/$/;"	m	class:x_service
epfds	base/src/x_tcptaskpool.cpp	/^	std::vector<struct epoll_event> epfds;$/;"	m	class:x_okay_thread_functor	file:
epfds	base/src/x_tcptaskpool.cpp	/^	std::vector<struct epoll_event> epfds;$/;"	m	class:x_verify_thread_functor	file:
eqstr	BillServer/old_back/BillServer.h	/^    struct eqstr$/;"	s	class:BillCache
eqstr	SuperServer/RoleregCache.cpp	/^	struct eqstr$/;"	s	class:RoleDataContainer	file:
equip	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Packages
equip	SceneServer/libscenesserver/zObject.cpp	/^zObject* EquipPack::equip(EQUIPNO no) const$/;"	f	class:EquipPack
equip_make	SceneServer/libscenesserver/script_func.cpp	/^void equip_make(SceneUser* user,DWORD thisID,bool drop,int flag)$/;"	f
equips	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
erase	base/include/srvEngine.h	/^	void erase()$/;"	f	class:MsgQueue
erase	base/x_msgqueue.h	/^	void erase() {$/;"	f	class:MsgQueue
err_code	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
err_code	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_privateChat_SceneSession
err_stream	base/include/argp.h	/^  FILE *err_stream;    \/* For errors; initialized to stderr. *\/$/;"	m	struct:argp_state
errcode	base/include/srvEngine.h	/^	int errcode;$/;"	m	class:zRegex
error	SessionServer/libsessionserver/AuctionService.cpp	/^bool AuctionService::error(const char * msg,...)$/;"	f	class:AuctionService
error	base/x_logger.cpp	/^void x_logger::error(const char * pattern,...)$/;"	f	class:x_logger
error	deps/tinyxml/tinyxml.h	/^	bool error;$/;"	m	class:TiXmlDocument
errorDesc	deps/tinyxml/tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument
errorId	deps/tinyxml/tinyxml.h	/^	int  errorId;$/;"	m	class:TiXmlDocument
errorLocation	deps/tinyxml/tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument
errorString	deps/tinyxml/tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase
errorString	deps/tinyxml/tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	file:
error_t	base/include/argp.h	/^typedef int error_t;$/;"	t
errstr	base/include/srvEngine.h	/^	std::string errstr;$/;"	m	class:zRegex
erupt	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
ets	base/include/srvEngine.h	/^	hashmap ets;$/;"	m	class:LimitHash
ets	base/include/srvEngine.h	/^	hashmap ets;$/;"	m	class:MultiHash
events	base/include/srvEngine.h	/^		short events;$/;"	m	struct:pollfd
evil	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
evil	base/include/csCommon.h	/^/;"	m	struct:_Object
evil	base/include/srvEngine.h	/^	rangeValue evil; \/\/Âô¨È≠îÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
evildef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
evildef	base/include/csCommon.h	/^/;"	m	struct:_Object
evildef	base/include/srvEngine.h	/^			luckRangeValue evildef;    \/\/ ÊäóÂô¨È≠îÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
evildef	base/include/srvEngine.h	/^	rangeValue evildef; \/\/ÊäóÂô¨È≠îÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
exchange	base/src/getopt.c	/^exchange(char **argv,struct _getopt_data *d)$/;"	f	file:
exchangeMeAndSummonPet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
exeScript	SceneServer/libscenesserver/scriptTickTask.h	/^		static bool exeScript(SceneUser *user,Cmd::t_NullCmd *pNullCmd)\/*BYTE cmd,BYTE para*\/$/;"	f	class:scriptMessageFilter
exec	BillServer/BillServer.cpp	/^void BillService::exec() {$/;"	f	class:BillService
exec	FLServer/FLServer.cpp	/^void FLService::exec() {$/;"	f	class:FLService
exec	GatewayServer/GatewayServer.cpp	/^void GatewayService::exec() {$/;"	f	class:GatewayService
exec	GatewayServer/old_back/ScreenIndex.cpp	/^  bool exec(GateUser *pUser)$/;"	f	struct:SendNineExec
exec	GatewayServer/old_back/ScreenIndex.cpp	/^  bool exec(GateUser *pUser)$/;"	f	struct:SendNineExecExceptMe
exec	GatewayServer/old_back/TimeTick.cpp	/^  bool exec(GatewayTask *gt)$/;"	f	struct:GatewayTaskCheckTime
exec	RecordServer/RecordServer.cpp	/^void RecordService::exec() {$/;"	f	class:RecordService
exec	SceneServer/SceneServer.cpp	/^void SceneService::exec() {$/;"	f	class:SceneService
exec	SceneServer/libscenesserver/CountryDare.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:DelaySpecNpc
exec	SceneServer/libscenesserver/CountryDare.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:ReliveSpecNpc
exec	SceneServer/libscenesserver/CountryDare.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:TotalAllNpc
exec	SceneServer/libscenesserver/MiniClient.cpp	/^    bool exec(zObject* o)$/;"	f	struct:Capacity
exec	SceneServer/libscenesserver/MiniClient.cpp	/^    bool exec(zObject* o)$/;"	f	struct:DrawCombin
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:AICallback
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:GetAffectScreen
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:RemoveSceneObjectCallBack
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:SceneSendToEveryOne
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:SceneSendToUnWatchTrap
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:SceneSendToWatchTrap
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:SecGenCallback
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:SendToEveryOneExceptMe
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:UpdateSceneObjectCallBack
exec	SceneServer/libscenesserver/Scene.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:findPosInNine
exec	SceneServer/libscenesserver/SceneManager.cpp	/^    bool exec(Scene *scene)$/;"	f	class:GetSceneByFileName
exec	SceneServer/libscenesserver/SceneManager.cpp	/^  bool exec(SceneManager::MapInfo *info)$/;"	f	struct:EveryMapExec
exec	SceneServer/libscenesserver/SceneNpcAI.cpp	/^  bool exec(zSceneEntry *entry)$/;"	f	struct:getEntriesCallBack
exec	SceneServer/libscenesserver/SceneRelation.cpp	/^  virtual bool exec(TeamMember &member)$/;"	f	struct:FindConsort
exec	SceneServer/libscenesserver/SceneSkill.cpp	/^  bool exec(TeamMember &member)$/;"	f	struct:TeamSkillExec
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SaveObjectExec
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SaveSkillExec
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:sendAllObjectListToUser
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:sendAllObjectToUser
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:sendAllSkillToUser
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosNpc
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosUser
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAddSeptExp
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAddSeptNormalExp
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
exec	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:SendStateWarToNineEveryOne
exec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::LiveSkillsManager::Factory
exec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::DamagCallback
exec	SceneServer/libscenesserver/SessionClient.cpp	/^	bool exec(zSceneEntry *entry)$/;"	f	struct:ClearAllNotUnion
exec	SceneServer/libscenesserver/Skill.cpp	/^  bool exec(TeamMember &member)$/;"	f	struct:SendStatusToTeamExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:AddAwayNewMemberExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:CheckOfflineExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:ComparisonRollnumExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:GetNoRollUserExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:GetTeamMemberNumExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:NoticeRollExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:RemoveMemberExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:SendMemberDataExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:SetMemberRollExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^	bool exec(TeamMember &member)$/;"	f	struct:newChangeLeaderExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^  bool exec(TeamMember &member)$/;"	f	struct:AddNewMemberExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^  bool exec(TeamMember &member)$/;"	f	struct:CheckAllInOneScreenExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^  bool exec(TeamMember &member)$/;"	f	struct:DeleteTeamExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^  bool exec(TeamMember &member)$/;"	f	struct:ExpSizeExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^  bool exec(TeamMember &member)$/;"	f	struct:SendCmdExec
exec	SceneServer/libscenesserver/TeamManager.cpp	/^  bool exec(TeamMember &member)$/;"	f	struct:SendTeamDataExec
exec	SceneServer/libscenesserver/TimeTick.cpp	/^  bool exec(Scene *scene)$/;"	f	struct:EverySceneEntryAction
exec	SceneServer/libscenesserver/Trade.cpp	/^bool RepairCost::exec(zObject* ob)$/;"	f	class:RepairCost
exec	SceneServer/libscenesserver/Trade.cpp	/^bool RepairEquip::exec(zObject* ob)$/;"	f	class:RepairEquip
exec	SceneServer/libscenesserver/Trade.cpp	/^bool RepairEquipUseGold::exec(zObject* ob)$/;"	f	class:RepairEquipUseGold
exec	SceneServer/libscenesserver/zObject.cpp	/^bool ClearPack::exec(zObject* ob)$/;"	f	class:ClearPack
exec	SceneServer/libscenesserver/zObject.cpp	/^bool Combination::exec(zObject* o)$/;"	f	class:Combination
exec	SceneServer/libscenesserver/zObject.cpp	/^bool DropFromPack::exec(zObject* ob)$/;"	f	class:DropFromPack
exec	SessionServer/SessionServer.cpp	/^void SessionService::exec() {$/;"	f	class:SessionService
exec	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMemberListCallback::exec(CSchoolMember *member)$/;"	f	class:CSchoolMemberListCallback
exec	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSendSchoolCallback::exec(CSchoolMember *member,const BYTE tag)$/;"	f	class:CSendSchoolCallback
exec	SessionServer/libsessionserver/SessionServer.h	/^	bool exec(SceneSession * scene)$/;"	f	struct:TeamAddMemberSceneExec
exec	SessionServer/libsessionserver/SessionServer.h	/^	bool exec(SceneSession * scene)$/;"	f	struct:TeamChangeLeaberSceneExec
exec	SessionServer/libsessionserver/SessionServer.h	/^	bool exec(SceneSession * scene)$/;"	f	struct:TeamDelMemberSceneExec
exec	SessionServer/libsessionserver/SessionServer.h	/^	bool exec(SceneSession * scene)$/;"	f	struct:TeamDelTeamSceneExec
exec	SessionServer/libsessionserver/SessionServer.h	/^  bool exec(UserSession *su)$/;"	f	struct:OneCountryScene
exec	SessionServer/libsessionserver/SessionTask.cpp	/^  bool exec(UserSession *su)$/;"	f	struct:EveryUserSessionAction
exec	SessionServer/libsessionserver/SessionTask.cpp	/^  bool exec(UserSession *su)$/;"	f	struct:OneCountryUserSessionAction
exec	SessionServer/libsessionserver/SessionTask.cpp	/^  bool exec(UserSession *su)$/;"	f	struct:broadcastRushToEveryUser
exec	SessionServer/libsessionserver/SessionTask.cpp	/^  bool exec(UserSession *su)$/;"	f	struct:broadcastToEveryUser
exec	SessionServer/libsessionserver/TimeTick.cpp	/^	void exec(CCountry * c)$/;"	f	struct:rushCallback
exec	SuperServer/SuperServer.cpp	/^void SuperService::exec() {$/;"	f	class:SuperService
exec	base/include/srvEngine.h	/^		bool exec(data *entry)$/;"	f	class:zDataBM::deleteEvery
exec	tmp/MiniServer/MiniUserManager.cpp	/^  bool exec(MiniUser *u)$/;"	f	struct:saveCallBack
execAll	FLServer/LoginManager.cpp	/^void LoginManager::execAll(LoginTaskCallback &cb)$/;"	f	class:LoginManager
execAll	GatewayServer/old_back/GatewayTaskManager.cpp	/^void GatewayTaskManager::execAll(GatewayTaskCallback &callback)$/;"	f	class:GatewayTaskManager
execAll	SceneServer/libscenesserver/scriptTickTask.cpp	/^void scriptTaskManagement::execAll()$/;"	f	class:scriptTaskManagement
execAll	base/include/srvEngine.h	/^	void execAll(zDatabaseCallBack<data> &base)$/;"	f	class:zDataBM
execAllOfCountry	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::execAllOfCountry(const DWORD country,execEntry<YourNpcEntry> &callback)$/;"	f	class:GateUserManager
execAllOfEffectNpcScreen	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::execAllOfEffectNpcScreen(const DWORD group,zSceneEntryCallBack &callback)$/;"	f	class:zSceneEntryIndex
execAllOfScene	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::execAllOfScene(const zSceneEntry::SceneEntryType type,zSceneEntryCallBack &callback)$/;"	f	class:zSceneEntryIndex
execAllOfScene	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::execAllOfScene(zSceneEntryCallBack &callback)$/;"	f	class:zSceneEntryIndex
execAllOfScene_functionNpc	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::execAllOfScene_functionNpc(zSceneEntryCallBack &callback)$/;"	f	class:zSceneEntryIndex
execAllOfScene_npc	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::execAllOfScene_npc(const DWORD id,zSceneEntryCallBack &callback)$/;"	f	class:zSceneEntryIndex
execAllOfScreen	GatewayServer/old_back/ScreenIndex.cpp	/^void ScreenIndex::execAllOfScreen(const DWORD screen,execEntry<YourNpcEntry> &callback)$/;"	f	class:ScreenIndex
execAllOfScreen	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::execAllOfScreen(const zPosI screen,zSceneEntryCallBack &callback)$/;"	f	class:zSceneEntryIndex
execAllOfScreen	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::execAllOfScreen(const zSceneEntry::SceneEntryType type,const zPosI screen,zSceneEntryCallBack &callback)$/;"	f	class:zSceneEntryIndex
execAllSpecialNpc	SceneServer/libscenesserver/SceneServer1.h	/^    void execAllSpecialNpc(specialNpcCallBack &callback)$/;"	f	class:SceneNpcManager
execAllSpecialNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneNpcManager
execEntry	base/include/srvEngine.h	/^struct execEntry$/;"	s
execEvery	BillServer/BillTaskManager.cpp	/^void BillTaskManager::execEvery() {$/;"	f	class:BillTaskManager
execEvery	BillServer/old_back/BillClientManager.cpp	/^void BillClientManager::execEvery()$/;"	f	class:BillClientManager
execEvery	BillServer/old_back/BillTaskManager.cpp	/^void BillTaskManager::execEvery()$/;"	f	class:BillTaskManager
execEvery	SceneServer/libscenesserver/MagicRange.cpp	/^void MagicPos::execEvery(MagicPosExec &pos)$/;"	f	class:MagicPos
execEvery	SceneServer/libscenesserver/ObjectManager.cpp	/^void UserObjectM::execEvery(UserObjectExec &exec)$/;"	f	class:UserObjectM
execEvery	SceneServer/libscenesserver/SceneTaskManager.cpp	/^void SceneTaskManager::execEvery()$/;"	f	class:SceneTaskManager
execEvery	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Packages
execEvery	SceneServer/libscenesserver/SkillManager.cpp	/^void UserSkillM::execEvery(UserSkillExec &exec)$/;"	f	class:UserSkillM
execEvery	SceneServer/libscenesserver/Team.cpp	/^void Team::execEvery(TeamMemExec &callback)$/;"	f	class:Team
execEvery	SceneServer/libscenesserver/zObject.cpp	/^void Package::execEvery(PackageCallback &callback)$/;"	f	class:Package
execEvery	SessionServer/ServerManager.cpp	/^void ServerManager::execEvery() {$/;"	f	class:ServerManager
execEvery	SessionServer/libsessionserver/SessionTaskManager.cpp	/^void SessionTaskManager::execEvery()$/;"	f	class:SessionTaskManager
execEvery	SessionServer/libsessionserver/Team.cpp	/^bool Team::execEvery(TeamSceneExec &callback)$/;"	f	class:Team
execEvery	tmp/MiniServer/MiniTaskManager.cpp	/^void MiniTaskManager::execEvery()$/;"	f	class:MiniTaskManager
execEveryCity	SessionServer/libsessionserver/CityManager.cpp	/^void CCityM::execEveryCity(cityCallback& cb)$/;"	f	class:CCityM
execEveryCountry	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::execEveryCountry(countryCallback & cb)$/;"	f	class:CCountryM
execEveryEntry	base/include/srvEngine.h	/^	inline bool execEveryEntry(execEntry<YourEntry> &eee)$/;"	f	class:zEntryManager
execEveryExceptMe	SceneServer/libscenesserver/Team.cpp	/^void Team::execEveryExceptMe(TeamMemExec &callback,DWORD tempid)$/;"	f	class:Team
execEveryMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneManager
execEveryNpc	SceneServer/libscenesserver/SceneServer1.h	/^    bool execEveryNpc(execEntry<YourNpcEntry> &exec)$/;"	f	class:SceneNpcManager
execEveryNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneNpcManager
execEveryOne	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::execEveryOne(TeamMemExec &callback)$/;"	f	class:TeamManager
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^                bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CSchool
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^      bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CDareM
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^      bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CQuizM
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^    bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CGemM
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^    bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CNpcDareM
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^    bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CSchoolM
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^    bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CSept
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^    bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CSeptM
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^    bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CUnion
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^    bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CUnionM
execEveryOne	SessionServer/libsessionserver/SessionServer.h	/^  bool execEveryOne(execEntry<YourEntry> &exec)$/;"	f	class:CRelationManager
execEveryOneExceptMe	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::execEveryOneExceptMe(TeamMemExec &callback,DWORD tempid)$/;"	f	class:TeamManager
execEveryScene	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::execEveryScene(SceneCallBack &callback)$/;"	f	class:SceneManager
execEveryScene	base/include/srvEngine.h	/^	bool execEveryScene(execEntry<YourSceneEntry> &exec)$/;"	f	class:zSceneManager
execEverySceneTask	SceneServer/libscenesserver/SceneServer1.h	/^    void execEverySceneTask(execEntry<YourEntry> &exec)$/;"	f	class:SceneTaskManager
execEverySceneTask	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneTaskManager
execEveryUser	BillServer/BillUserManager.h	/^      bool execEveryUser(execEntry<YourUserEntry> &exec)$/;"	f	class:BillUserManager
execEveryUser	BillServer/old_back/BillServer.h	/^      bool execEveryUser(execEntry<YourUserEntry> &exec)$/;"	f	class:BillUserManager
execEveryUser	SceneServer/libscenesserver/SceneServer1.h	/^      bool execEveryUser(execEntry<YourUserEntry> &exec)$/;"	f	class:SceneRecycleUserManager
execEveryUser	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneRecycleUserManager
execEveryUser	base/include/srvEngine.h	/^	bool execEveryUser(execEntry<YourUserEntry> &exec)$/;"	f	class:zUserManager
execEveryUser	tmp/MiniServer/MiniServer.h	/^      bool execEveryUser(execEntry<YourUserEntry> &exec)$/;"	f	class:MiniUserManager
execGroup	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
execute	SceneServer/libscenesserver/Quest.cpp	/^bool Quest::execute(SceneUser& user,Cmd::stQuestUserCmd* cmd,DWORD len)$/;"	f	class:Quest
execute	SceneServer/libscenesserver/QuestEvent.cpp	/^int Event::execute()$/;"	f	class:Event
execute	SceneServer/libscenesserver/QuestEvent.cpp	/^int Event::execute(SceneUser& user)$/;"	f	class:Event
execute	SceneServer/libscenesserver/QuestEvent.cpp	/^int Event::execute(SceneUser& user,DWORD quest_id,DWORD offset)$/;"	f	class:Event
execute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventManager
execute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventTable
execute	SceneServer/libscenesserver/script.cpp	/^void LuaVM::execute( LuaScript* pScript )$/;"	f	class:LuaVM
execute	SceneServer/libscenesserver/script.cpp	/^void LuaVM::execute( const std::string & rData )$/;"	f	class:LuaVM
execute_script_event	SceneServer/libscenesserver/SceneServer1.h	/^inline int execute_script_event(SceneUser * user,const char* func)$/;"	f
execute_script_event	SceneServer/libscenesserver/SceneServer1.h	/^int execute_script_event(SceneUser * user,const char* func,P& p)$/;"	f
execute_script_event	SceneServer/libscenesserver/SceneServer1.h	/^int execute_script_event(SceneUser * user,const char* func,P1& p1,P2& p2,P3& p3)$/;"	f
exist	SceneServer/libscenesserver/ObjectManager.cpp	/^DWORD UserObjectM::exist(DWORD id,DWORD number,BYTE upgrade,BYTE type) const$/;"	f	class:UserObjectM
existAccid	RecordServer/RecordUserManager.cpp	/^bool RecordUserM::existAccid(const uint32_t accid){$/;"	f	class:RecordUserM
exitQuiz	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizPersonal::exitQuiz(DWORD dwUserID)$/;"	f	class:CQuizPersonal
exitQuiz	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizWorld::exitQuiz(DWORD dwUserID)$/;"	f	class:CQuizWorld
exit_queue	base/include/srvEngine.h	/^	zPathPoint *exit_queue(zPathQueueHead &queueHead)$/;"	f	class:zAStar
exp	SceneServer/libscenesserver/GuardNpc.cpp	/^int GuardNpc::exp() const$/;"	f	class:GuardNpc
exp	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::exp(int experience)$/;"	f	class:GuardNpc
exp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
exp	SessionServer/libsessionserver/SessionServer.h	/^    DWORD                 exp;$/;"	m	class:CUnion
exp	base/include/csCommon.h	/^/;"	m	struct:CharBase
exp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
exp	base/include/csCommon.h	/^/;"	m	struct:_Object
exp	base/include/srvEngine.h	/^	uint32_t  exp;        \/\/ ÁªèÈ™åÂÄº$/;"	m	struct:zNpcB
exp	base/include/srvEngine.h	/^	uint32_t exp;        \/\/ ÁªèÈ™åÂÄº$/;"	m	struct:zPetB
expRate	SceneServer/libscenesserver/SceneServer1.h	/^    BYTE expRate;\/\/ Õ∑≈æ≠—ÈµƒÀŸ¬ $/;"	m	class:CartoonPet
expRate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::CartoonPet
exp_bonus	base/include/srvEngine.h	/^	BYTE exp_bonus; \/\/Â•ñÂä±ÁªèÈ™å$/;"	m	struct:zLiveSkillB
exp_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
expecting_newline_1	tmp/base3/request_parser.hpp	/^    expecting_newline_1,$/;"	e	enum:http::server2::request_parser::state
expecting_newline_2	tmp/base3/request_parser.hpp	/^    expecting_newline_2,$/;"	e	enum:http::server2::request_parser::state
expecting_newline_3	tmp/base3/request_parser.hpp	/^    expecting_newline_3$/;"	e	enum:http::server2::request_parser::state
experiencebm	base/src/zDatabaseManager.cpp	/^zDataBM<zExperienceB,ExperienceBase> &experiencebm = zDataBM<zExperienceB,ExperienceBase>::getMe();$/;"	v
exploit	base/include/csCommon.h	/^/;"	m	struct:CharBase
exploit	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
exploit_arg	base/include/csCommon.h	/^/;"	v
expmap	SceneServer/libscenesserver/SceneServer1.h	/^  NpcHpHashmap expmap;$/;"	m	class:SceneNpc
exprate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
exprate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
extension	tmp/base3/mime_types.cpp	/^  const char* extension;$/;"	m	struct:http::server2::mime_types::mapping	file:
extension_to_type	tmp/base3/mime_types.cpp	/^std::string extension_to_type(const std::string& extension)$/;"	f	namespace:http::server2::mime_types
face	GatewayServer/old_back/GatewayServer.h	/^	WORD face;$/;"	m	class:GateSelectUserSession
face	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  face;$/;"	m	class:UserSession
face	base/include/csCommon.h	/^/;"	m	struct:CharBase
face	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_UserLogin_Gateway
face	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserData
face	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sysSetting_SceneSession
face	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
face	tmp/MiniServer/MiniServer.h	/^    WORD face;$/;"	m	class:MiniUser
factory	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::LiveSkillsManager
failure	SceneServer/libscenesserver/SceneBattlefiel.h	/^	std::vector<stBattleReward> failure;$/;"	m	class:GangScene
faintRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
family_obj_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
family_obj_times	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
farAttack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
fatal	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::LiveSkills::__anon88
fatal	base/x_logger.cpp	/^void x_logger::fatal(const char * pattern,...)$/;"	f	class:x_logger
father	base/include/srvEngine.h	/^		zPathPoint *father;$/;"	m	struct:zAStar::zPathPoint
fd	base/include/srvEngine.h	/^		int fd;$/;"	m	struct:pollfd
fdsrAdd	base/include/srvEngine.h	/^	bool fdsrAdd(bool set=true)$/;"	f	class:x_tcp_clientTask
fdsrAdd	base/src/x_tcptask.h	/^	bool fdsrAdd()$/;"	f	class:x_tcptask
fdsradd	base/include/srvEngine.h	/^	bool fdsradd;                  \/**< ËØª‰∫ã‰ª∂Ê∑ªÂä†Ê†áÂøó *\/$/;"	m	class:x_tcp_clientTask
fdsradd	base/src/x_tcptask.h	/^	bool fdsradd;                  \/**< ËØª‰∫ã‰ª∂Ê∑ªÂä†Ê†áÂøó *\/$/;"	m	class:x_tcptask
feme	SceneServer/libscenesserver/SceneRelation.cpp	/^  SceneUser *feme;$/;"	m	struct:FindConsort	file:
fen_team	base/include/csBox.h	/^	}fen_team[MAX_TEAM_NUM];$/;"	m	struct:Cmd::stNpcDirItemDataUserCmd	typeref:struct:Cmd::stNpcDirItemDataUserCmd::team
fieldMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
file	SessionServer/libsessionserver/SessionServer.h	/^    std::string file;$/;"	m	class:SceneSession
fileName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
fileName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regScene_SceneSession
file_	base/x_config.h	/^		std::string file_;$/;"	m	class:x_config
filename	GatewayServer/old_back/GatewayServer.h	/^		char filename[MAX_NAMESIZE];$/;"	m	struct:CountryInfo::MapDic
filename	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
fill	SceneServer/libscenesserver/zObject.cpp	/^void zObject::fill(t_Object& d)$/;"	f	class:zObject
fill	base/include/srvEngine.h	/^	void fill(Base &data)$/;"	f	struct:zColorObjectB
fill	base/include/srvEngine.h	/^	void fill(FiveSetBase& data)$/;"	f	struct:zFiveSetB
fill	base/include/srvEngine.h	/^	void fill(HolyObjectBase &data)$/;"	f	struct:zHolyObjectB
fill	base/include/srvEngine.h	/^	void fill(ObjectBase &data)$/;"	f	struct:zObjectB
fill	base/include/srvEngine.h	/^	void fill(PetBase &base)$/;"	f	struct:zPetB
fill	base/include/srvEngine.h	/^	void fill(SetObjectBase& data)$/;"	f	struct:zSetObjectB
fill	base/include/srvEngine.h	/^	void fill(UpgradeObjectBase  &data)$/;"	f	struct:zUpgradeObjectB
fill	base/include/srvEngine.h	/^	void fill(const CountryMaterial& base)$/;"	f	struct:zCountryMaterialB
fill	base/include/srvEngine.h	/^	void fill(const ExperienceBase &data)$/;"	f	struct:zExperienceB
fill	base/include/srvEngine.h	/^	void fill(const HairColour& base)$/;"	f	struct:zHairColourB
fill	base/include/srvEngine.h	/^	void fill(const HairStyle& base)$/;"	f	struct:zHairStyleB
fill	base/include/srvEngine.h	/^	void fill(const HeadList& base)$/;"	f	struct:zHeadListB
fill	base/include/srvEngine.h	/^	void fill(const HonorBase &data)$/;"	f	struct:zHonorB
fill	base/include/srvEngine.h	/^	void fill(const LiveSkillBase& base)$/;"	f	struct:zLiveSkillB
fill	base/include/srvEngine.h	/^	void fill(const NpcBase &npc)$/;"	f	struct:zNpcB
fill	base/include/srvEngine.h	/^	void fill(const SkillBase &data)$/;"	f	struct:zSkillB
fill	base/include/srvEngine.h	/^	void fill(const SoulStoneBase& base)$/;"	f	struct:zSoulStoneB
fillLuckRangeValue	base/include/srvEngine.h	/^static void fillLuckRangeValue(char *str,luckRangeValue &data)$/;"	f
fillNpcMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::t_NpcDefine
fillPollFD	base/include/srvEngine.h	/^	void fillPollFD(struct pollfd &pfd,short events)$/;"	f	class:x_tcp_clientTask
fillPollFD	base/include/x_socket.h	/^	void fillPollFD(struct pollfd &pfd,short events)$/;"	f	class:x_socket
fillPollFD	base/src/x_tcptask.h	/^	void fillPollFD(struct pollfd &pfd,short events)$/;"	f	class:x_tcptask
fillRangeValue	base/include/srvEngine.h	/^static void fillRangeValue(const char *str,rangeValue &data)$/;"	f
fill_in_uparams	base/src/getopt.c	/^fill_in_uparams (const struct argp_state *state)$/;"	f	file:
filter_command	base/include/srvEngine.h	/^		PFN_filter_command filter_command;$/;"	m	struct:__anon142
filter_doc	base/src/getopt.c	/^filter_doc (const char *doc, int key, const struct argp *argp,$/;"	f	file:
filter_init	base/include/srvEngine.h	/^		PFN_filter_init    filter_init;$/;"	m	struct:__anon142
filter_term	base/include/srvEngine.h	/^		PFN_filter_term    filter_term;$/;"	m	struct:__anon142
final	BillServer/BillServer.cpp	/^void BillService::final() {$/;"	f	class:BillService
final	BillServer/old_back/BillServer.cpp	/^void BillService::final()$/;"	f	class:BillService
final	FLServer/FLServer.cpp	/^void FLService::final() {$/;"	f	class:FLService
final	FLServer/ServerACL.cpp	/^void ServerACL::final()$/;"	f	class:ServerACL
final	GatewayServer/GatewayServer.cpp	/^void GatewayService::final() {$/;"	f	class:GatewayService
final	GatewayServer/old_back/GateUser.cpp	/^void GateUser::final()$/;"	f	class:GateUser
final	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::final()$/;"	f	class:GateUserManager
final	GatewayServer/old_back/GatewayServer.cpp	/^void GatewayService::final()$/;"	f	class:GatewayService
final	RecordServer/RecordServer.cpp	/^void RecordService::final() {$/;"	f	class:RecordService
final	SceneServer/SceneServer.cpp	/^void SceneService::final() {$/;"	f	class:SceneService
final	SceneServer/libscenesserver/CharInitInfo.cpp	/^void CharInitInfo::final()$/;"	f	class:CharInitInfo
final	SceneServer/libscenesserver/MagicRange.cpp	/^void MagicRangeInit::final()$/;"	f	class:MagicRangeInit
final	SceneServer/libscenesserver/MessageSystem.cpp	/^void MessageSystem::final()$/;"	f	class:MessageSystem
final	SceneServer/libscenesserver/NpcTrade.cpp	/^void NpcTrade::final()$/;"	f	class:NpcTrade
final	SceneServer/libscenesserver/Scene.cpp	/^void Scene::final()$/;"	f	class:Scene
final	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::final()$/;"	f	class:SceneManager
final	SceneServer/libscenesserver/ScenesServer.cpp	/^void ScenesService::final()$/;"	f	class:ScenesService
final	SessionServer/SessionServer.cpp	/^void SessionService::final() {$/;"	f	class:SessionService
final	SessionServer/libsessionserver/SessionManager.cpp	/^void SceneSessionManager::final()$/;"	f	class:SceneSessionManager
final	SessionServer/libsessionserver/SessionManager.cpp	/^void UserSessionManager::final()$/;"	f	class:UserSessionManager
final	SessionServer/libsessionserver/SessionServer.cpp	/^void SessionService::final()$/;"	f	class:SessionService
final	SuperServer/SuperServer.cpp	/^void SuperService::final() {$/;"	f	class:SuperService
final	base/include/srvEngine.h	/^	void final()$/;"	f	class:x_tcp_clientTask
final	base/src/x_tcptaskpool.cpp	/^void x_tcptaskpool::final()$/;"	f	class:x_tcptaskpool
final	base/src/zMNetService.cpp	/^void zMNetService::final()$/;"	f	class:zMNetService
final	base/x_subnetservice.cpp	/^void x_subnetservice::final()$/;"	f	class:x_subnetservice
final	base/x_thread_functor.h	/^		void final(){ final_ = true;}$/;"	f	class:x_thread_functor
final	tmp/MiniServer/MiniServer.cpp	/^void MiniService::final()$/;"	f	class:MiniService
final_	base/x_thread_functor.h	/^		bool final_;$/;"	m	class:x_thread_functor
find	SessionServer/libsessionserver/CityManager.cpp	/^CCity* CCityM::find(DWORD country,DWORD cityid)$/;"	f	class:CCityM
find	SessionServer/libsessionserver/CityManager.cpp	/^CCity* CCityM::find(DWORD country,DWORD cityid,DWORD unionid)$/;"	f	class:CCityM
find	SessionServer/libsessionserver/CountryManager.cpp	/^CCountry* CCountryM::find(DWORD country)$/;"	f	class:CCountryM
find	SessionServer/libsessionserver/CountryManager.cpp	/^CCountry* CCountryM::find(DWORD country,DWORD unionid)$/;"	f	class:CCountryM
find	SessionServer/libsessionserver/EmperorForbid.cpp	/^bool EmperorForbid::find(DWORD id)$/;"	f	class:EmperorForbid
find	SessionServer/libsessionserver/Vote.cpp	/^CVote* CVoteM::find(DWORD dwCountryID,DWORD dwType)$/;"	f	class:CVoteM
find	base/include/srvEngine.h	/^	inline bool find(const char * &name,zEntry * &e,const bool r=false) const$/;"	f	class:zMultiEntryName
find	base/include/srvEngine.h	/^	inline bool find(const keyT &key,valueT &value) const$/;"	f	class:LimitHash
find	tmp/MiniServer/MiniGame.cpp	/^BYTE MiniGame::find(MiniUser *u)$/;"	f	class:MiniGame
findAbove	SceneServer/libscenesserver/boxCircle.cpp	/^int   findAbove(T   &_array,int   begin,int   end, int   target)$/;"	f
findAlly	SessionServer/libsessionserver/Ally.cpp	/^CAlly*  CAllyM::findAlly(DWORD dwCountryID1)$/;"	f	class:CAllyM
findAlly	SessionServer/libsessionserver/Ally.cpp	/^CAlly*  CAllyM::findAlly(DWORD dwCountryID1,DWORD dwCountryID2)$/;"	f	class:CAllyM
findAttackTarget	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::findAttackTarget(const SkillStatus *pSkillStatus,zPos &pd,DWORD &count,SWORD rangDamageBonus)$/;"	f	class:zSkill
findBelow	SceneServer/libscenesserver/boxCircle.cpp	/^int   findBelow(T   &_array,int   begin,int   end, int   target)$/;"	f
findByDare	SessionServer/libsessionserver/CountryManager.cpp	/^CCountry* CCountryM::findByDare(DWORD country,bool findDare)$/;"	f	class:CCountryM
findByGenID	SessionServer/libsessionserver/Army.cpp	/^CArmy* CArmyM::findByGenID(DWORD dwGenID)$/;"	f	class:CArmyM
findByID	SessionServer/libsessionserver/Army.cpp	/^CArmy* CArmyM::findByID(DWORD dwArmyID)$/;"	f	class:CArmyM
findByID	SessionServer/libsessionserver/RecommendManager.cpp	/^Recommend* RecommendM::findByID(DWORD dwUserID)$/;"	f	class:RecommendM
findByID	SessionServer/libsessionserver/Vote.cpp	/^CVote* CVoteM::findByID(DWORD dwVoteID)$/;"	f	class:CVoteM
findByName	SessionServer/libsessionserver/Army.cpp	/^CArmy* CArmyM::findByName(const char* value)$/;"	f	class:CArmyM
findByUnionID	SessionServer/libsessionserver/CityManager.cpp	/^CCity* CCityM::findByUnionID(DWORD unionid)$/;"	f	class:CCityM
findDareUnionByID	SessionServer/libsessionserver/CityManager.cpp	/^CCity* CCityM::findDareUnionByID(DWORD unionid)$/;"	f	class:CCityM
findEntryPosInNine	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::findEntryPosInNine(const zPos &vpos,zPosI vposi,zPosVector &range)$/;"	f	class:Scene
findEntryPosInOne	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::findEntryPosInOne(const zPos &vpos,zPosI vposi,zPosVector &range)$/;"	f	class:Scene
findGem	SessionServer/libsessionserver/Gem.cpp	/^CGem * CGemM::findGem(DWORD dwCountryID)$/;"	f	class:CGemM
findGemByID	SessionServer/libsessionserver/Gem.cpp	/^CGem*   CGemM::findGemByID(DWORD dwID)$/;"	f	class:CGemM
findID	tmp/MiniServer/Top100.cpp	/^  findID(DWORD id):val(id){}$/;"	f	struct:findID
findID	tmp/MiniServer/Top100.cpp	/^struct findID$/;"	s	file:
findLastRecord	SessionServer/libsessionserver/DareRecordManager.cpp	/^CDareRecord* CDareRecordM::findLastRecord(DWORD dwAttCountry,DWORD dwDefCountry)$/;"	f	class:CDareRecordM
findMemberIndex	SessionServer/libsessionserver/SchoolManager.cpp	/^std::map<std::string,CSchoolMember *>::iterator  CSchoolM::findMemberIndex(const char *pName)$/;"	f	class:CSchoolM
findMemberIndex	SessionServer/libsessionserver/Sept.cpp	/^std::map<std::string,CSeptMember *>::iterator  CSeptM::findMemberIndex(const char *pName)$/;"	f	class:CSeptM
findMemberIndex	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
findObject	SessionServer/libsessionserver/NpcDare.cpp	/^CNpcDareObj* CNpcDareM::findObject(DWORD country,DWORD mapid,DWORD npcid)$/;"	f	class:CNpcDareM
findOne	base/include/srvEngine.h	/^	inline bool findOne(valueT &value) const$/;"	f	class:LimitHash
findPersonalQuiz	SessionServer/libsessionserver/Quiz.cpp	/^CQuiz* CQuizM::findPersonalQuiz(DWORD dwUserID)$/;"	f	class:CQuizM
findPosForObject	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::findPosForObject(const zPos &pos,zPos &findedPos)$/;"	f	class:Scene
findPosForUser	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::findPosForUser(const zPos &pos,zPos &findedPos)$/;"	f	class:Scene
findPosInNine	SceneServer/libscenesserver/Scene.cpp	/^  findPosInNine(const zPos &pos,zPosVector &range) : _pos(pos),_range(range)$/;"	f	struct:findPosInNine
findPosInNine	SceneServer/libscenesserver/Scene.cpp	/^struct findPosInNine : public zSceneEntryCallBack$/;"	s	file:
findScore	tmp/MiniServer/Top100.cpp	/^  findScore(Cmd::MiniGameScore score):val(score){}$/;"	f	struct:findScore
findScore	tmp/MiniServer/Top100.cpp	/^struct findScore$/;"	s	file:
findSkill	SceneServer/libscenesserver/SkillManager.cpp	/^zSkill *UserSkillM::findSkill(DWORD skillid)$/;"	f	class:UserSkillM
findSubByID	SessionServer/libsessionserver/RecommendManager.cpp	/^RecommendSub* RecommendM::findSubByID(DWORD dwUserID)$/;"	f	class:RecommendM
findUserSept	SessionServer/libsessionserver/Sept.cpp	/^DWORD CSeptM::findUserSept(DWORD dwUserID)$/;"	f	class:CSeptM
findWorldQuiz	SessionServer/libsessionserver/Quiz.cpp	/^CQuiz* CQuizM::findWorldQuiz()$/;"	f	class:CQuizM
find_char	base/src/getopt.c	/^find_char (char ch, char *beg, char *end)$/;"	f	file:
find_long_option	base/src/getopt.c	/^find_long_option (struct option *long_options, const char *name)$/;"	f	file:
find_space	SceneServer/libscenesserver/zObject.cpp	/^bool Package::find_space(WORD &x,WORD &y) const$/;"	f	class:Package
finish	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::finish()$/;"	f	class:TradeOrder
fireAllPrentice	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::fireAllPrentice()$/;"	f	class:CSchoolMember
fireAlly	SessionServer/libsessionserver/Ally.cpp	/^bool    CAllyM::fireAlly(DWORD dwCountryID1,DWORD dwCountryID2)$/;"	f	class:CAllyM
fireCaptain	SessionServer/libsessionserver/Army.cpp	/^bool CArmy::fireCaptain(DWORD dwUserID)$/;"	f	class:CArmy
fireMe	SessionServer/libsessionserver/Army.cpp	/^void CCaptain::fireMe()$/;"	f	class:CCaptain
fireMe	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendSub::fireMe()$/;"	f	class:RecommendSub
fireMe	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::fireMe(const bool notify,const bool checkunion)$/;"	f	class:CSeptMember
fireMe	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
firePrentice	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::firePrentice(const char *prenticeName)$/;"	f	class:CSchoolMember
fireRecommendSub	SessionServer/libsessionserver/RecommendManager.cpp	/^void RecommendM::fireRecommendSub(DWORD dwUserID)$/;"	f	class:RecommendM
fireSchoolMember	SessionServer/libsessionserver/SchoolManager.cpp	/^int CSchoolM::fireSchoolMember(const char* roleName,bool find)$/;"	f	class:CSchoolM
fireSeptFromUnion	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
fireSeptMember	SessionServer/libsessionserver/Sept.cpp	/^int CSeptM::fireSeptMember(DWORD dwUserID,bool find)$/;"	f	class:CSeptM
fireSeptMember	SessionServer/libsessionserver/Sept.cpp	/^void  CSept::fireSeptMember(const char * master,const char *member)$/;"	f	class:CSept
fireSeptMember	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::fireSeptMember(UserSession * master,const char * member)$/;"	f	class:CSeptM
fireSeptMemberDirect	SessionServer/libsessionserver/Sept.cpp	/^int CSept::fireSeptMemberDirect(const DWORD dwCharID,const bool checkunion)$/;"	f	class:CSept
fireUnionMember	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
fireUnionMember	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
fireUnionMemberDirect	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
fireUnionMemberLeave	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
first	base/include/srvEngine.h	/^	unsigned int first;$/;"	m	class:zRegex
first	base/src/getopt.c	/^  int first;$/;"	m	struct:pentry_state	file:
firstChild	deps/tinyxml/tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:TiXmlNode
first_time	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime first_time;$/;"	m	class:SceneNpc
firstfive	BillServer/old_back/BillServer.h	/^    Cmd::stFirstFiveListStockUserCmd *firstfive;$/;"	m	class:Consign
five	base/include/srvEngine.h	/^	luckRangeValue five;    \/\/ ‰∫îË°åÂ±ûÊÄß$/;"	m	struct:zColorObjectB
five	base/include/srvEngine.h	/^	uint32_t  five;        \/\/ ‰∫îË°åÂ±ûÊÄß$/;"	m	struct:zNpcB
fivedam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
fivedef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
fiveexpress	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue
fivelevel	base/include/csCommon.h	/^/;"	m	struct:CharBase
fivemaxdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
fivemaxmdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
fivemdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
fivemdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
fivepoint	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
fivepoint	base/include/csCommon.h	/^/;"	m	struct:_Object
fivepoint	base/include/srvEngine.h	/^	luckRangeValue  fivepoint;    \/\/ ‰∫îË°åÂ±ûÊÄßÂ¢ûÂä†$/;"	m	struct:zHolyObjectB
fivepoint	base/include/srvEngine.h	/^	uint32_t   fivepoint;      \/\/ ‰∫îË°åÁÇπÊï∞$/;"	m	struct:zNpcB
fiveset	base/include/csCommon.h	/^/;"	m	struct:_Object
fivesetbm	base/src/zDatabaseManager.cpp	/^zDataBM<zFiveSetB,FiveSetBase> &fivesetbm=zDataBM<zFiveSetB,FiveSetBase>::getMe();$/;"	v
fivetype	base/include/csCommon.h	/^/;"	m	struct:CharBase
fivetype	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
fivetype	base/include/csCommon.h	/^/;"	m	struct:_Object
fix	SceneServer/libscenesserver/RebuildObject.cpp	/^void EquipMaker::fix(zObject* ob)$/;"	f	class:EquipMaker
fix_kind	SceneServer/libscenesserver/SceneServer1.h	/^      void fix_kind(T* bob,zObject* ob)$/;"	f	class:EquipMaker
fix_kind	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:EquipMaker
fixedRush	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene	typeref:struct:O::LiveSkills::Scene::FixedRush
flClient	SuperServer/SuperServer.h	/^	boost::shared_ptr<FLClient> flClient;$/;"	m	class:SuperService
flClientPool	SuperServer/FLClientManager.h	/^    x_tcp_clientTaskPool *flClientPool;$/;"	m	class:FLClientManager
flag	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_SetService_SceneSession
flag	base/include/csCommon.h	/^/;"	m	struct:Cmd::stStampCheckUserCmd
flags	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::stSrvMapTile
flags	base/include/argp.h	/^  int flags;$/;"	m	struct:argp_child
flags	base/include/argp.h	/^  int flags;$/;"	m	struct:argp_option
flags	base/include/argp.h	/^  unsigned flags;$/;"	m	struct:argp_state
flags	base/include/srvEngine.h	/^	uint32_t  flags;      \/\/‰∫åËøõÂà∂Ê†áÂøóÔºåÁõÆÂâçÊúâ‰∏Ä‰∏™ÔºåÂèØ‰∏çÂèØË¢´Â§ñÂõΩ‰∫∫ÊùÄ$/;"	m	struct:zNpcB
flee	SceneServer/libscenesserver/SceneServer1.h	/^  bool flee;$/;"	m	struct:t_NpcAIDefine
fleeCount	SceneServer/libscenesserver/SceneServer1.h	/^  int fleeCount;$/;"	m	struct:t_NpcAIDefine
fleeDir	SceneServer/libscenesserver/SceneServer1.h	/^  int fleeDir;$/;"	m	struct:t_NpcAIDefine
forbidInfo	SessionServer/libsessionserver/SessionServer.h	/^struct forbidInfo$/;"	s
forbidTalk	SessionServer/libsessionserver/SessionServer.h	/^    DWORD forbidTalk; \/\/π˙ÕıΩ˚—‘$/;"	m	class:CCountry
forbidden	tmp/base3/reply.cpp	/^const char forbidden[] =$/;"	m	namespace:http::server2::stock_replies	file:
forbidden	tmp/base3/reply.cpp	/^const std::string forbidden =$/;"	m	namespace:http::server2::status_strings	file:
forbidden	tmp/base3/reply.hpp	/^    forbidden = 403,$/;"	e	enum:http::server2::reply::status_type
forbidtalk	base/include/csCommon.h	/^/;"	m	struct:CharBase
forceEnd	SessionServer/libsessionserver/Gem.cpp	/^void CGemM::forceEnd()$/;"	f	class:CGemM
forceProcessResult	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::forceProcessResult()$/;"	f	class:CNpcDareM
forceProcessResult	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::forceProcessResult()$/;"	f	class:CNpcDareObj
force_close_vote	SessionServer/libsessionserver/Vote.cpp	/^void CVoteM::force_close_vote(DWORD dwCountryID,DWORD dwType)$/;"	f	class:CVoteM
force_sync	base/include/x_socket.cpp	/^void x_socket::force_sync()$/;"	f	class:x_socket
foreignbackto	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
foreignerBacktoMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
forwardBill	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::forwardBill(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GateUser
forwardBill	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::forwardBill(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayTask
forwardBillScene	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::forwardBillScene(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GateUser
forwardBillScene	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::forwardBillScene(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayTask
forwardMini	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::forwardMini(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayTask
forwardScene	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::forwardScene(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GateUser
forwardScene	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::forwardScene(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayTask
forwardScene	SessionServer/libsessionserver/Session.cpp	/^bool UserSession::forwardScene(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:UserSession
forwardSceneBill	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::forwardSceneBill(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GateUser
forwardSceneBill	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::forwardSceneBill(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayTask
forwardSession	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::forwardSession(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayTask
foundSocket	SceneServer/libscenesserver/zObject.cpp	/^int zObject::foundSocket()$/;"	f	class:zObject
free	SceneServer/libscenesserver/zObject.cpp	/^bool zObject::free() const$/;"	f	class:zObject
free	SceneServer/libscenesserver/zObject.cpp	/^void zObject::free(bool flag)$/;"	f	class:zObject
freeList	SceneServer/libscenesserver/duplicateManager.h	/^	dupIndexList freeList;\/\/ø…”√µƒ∏±±æ∫≈±Ì$/;"	m	class:duplicateManager
freezeRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
frenzy	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
fresh	SceneServer/libscenesserver/Leechdom.cpp	/^DWORD Leechdom::fresh(SceneUser *pUser,DWORD &update)$/;"	f	class:Leechdom
freshDurability	SceneServer/libscenesserver/zObject.cpp	/^void EquipPack::freshDurability(SceneUser *pThis,zObject *o)$/;"	f	class:EquipPack
freshEffectPosi	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::freshEffectPosi(const zPosI oldposi,const zPosI newposi)$/;"	f	class:zSceneEntryIndex
freshEverySceneField	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::freshEverySceneField()$/;"	f	class:SceneManager
freshGateScreenIndex	SceneServer/libscenesserver/Scene.cpp	/^void Scene::freshGateScreenIndex(SceneUser *pUser,const DWORD screen)$/;"	f	class:Scene
freshIndex	GatewayServer/old_back/GatewayServer.h	/^	void freshIndex(GateUser *pUser,const DWORD map,const DWORD screen)$/;"	f	class:SceneClient
freshUserData	SceneServer/libscenesserver/zObject.cpp	/^void EquipPack::freshUserData(SceneUser *pThis)$/;"	f	class:EquipPack
frieMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::frieMember(UserSession *master,const char *prentice)$/;"	f	class:CSchoolM
friendDegree	SessionServer/libsessionserver/SessionServer.h	/^    DWORD friendDegree()$/;"	f	class:CAlly
friendID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
friendList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
fromID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD fromID;$/;"	m	struct:mailTurnBackInfo
fromName	SessionServer/libsessionserver/SessionServer.h	/^  char fromName[MAX_NAMESIZE+1];$/;"	m	struct:mailForwardInfo
fromName	SessionServer/libsessionserver/SessionServer.h	/^  char fromName[MAX_NAMESIZE+1];$/;"	m	struct:mailHeadInfo
fromName	SessionServer/libsessionserver/SessionServer.h	/^  char fromName[MAX_NAMESIZE+1];$/;"	m	struct:mailTurnBackInfo
frozen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ftm	SessionServer/libsessionserver/ForbidTalkManager.cpp	/^ForbidTalkManager *ForbidTalkManager::ftm = 0;$/;"	m	class:ForbidTalkManager	file:
ftm	SessionServer/libsessionserver/SessionServer.h	/^    static ForbidTalkManager *ftm;$/;"	m	class:ForbidTalkManager
full	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:SaveObjectExec	file:
full	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:SaveSkillExec	file:
full	tmp/MiniServer/MiniGame.cpp	/^bool MiniGame::full()$/;"	f	class:MiniGame
full	tmp/MiniServer/MiniRoom.cpp	/^bool MiniRoom::full() const$/;"	f	class:MiniRoom
fullAllEquiped	SceneServer/libscenesserver/zObject.cpp	/^DWORD EquipPack::fullAllEquiped(char *buf)$/;"	f	class:EquipPack
full_HorseDataStruct	SceneServer/libscenesserver/Horse.cpp	/^bool Horse::full_HorseDataStruct(Cmd::t_HorseData *d)$/;"	f	class:Horse
full_MiniSeatData	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::full_MiniSeatData(Cmd::stSeatStateCommonMiniGameCmd *cmd)$/;"	f	class:MiniGame
full_MiniUserData	tmp/MiniServer/MiniUser.cpp	/^void MiniUser::full_MiniUserData(const BYTE &t,Cmd::MiniUserData &data)$/;"	f	class:MiniUser
full_PetDataStruct	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::full_PetDataStruct(Cmd::t_PetData & data)$/;"	f	class:ScenePet
full_SeptMember_Data	SessionServer/libsessionserver/Sept.cpp	/^void CSept::full_SeptMember_Data(Cmd::stUnionRember*& tempPoint,DWORD& count)$/;"	f	class:CSept
full_UState	base/include/srvEngine.h	/^	inline BYTE full_UState(uint16_t *state)$/;"	f	struct:zSceneEntry
full_all_UState	base/include/srvEngine.h	/^	inline void full_all_UState(void *state,uint32_t maxSize )$/;"	f	struct:zSceneEntry
full_ping_list	FLServer/GYListManager.cpp	/^void GYListManager::full_ping_list(Cmd::stPingList* cmd,const GameZone_t& gameZone)$/;"	f	class:GYListManager
full_stRTMagicPosUserCmd	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
full_t_MapPetData	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::full_t_MapPetData(Cmd::t_MapPetData &data)$/;"	f	class:ScenePet
full_t_MapUserData	SceneServer/libscenesserver/SceneGhost.cpp	/^void SceneGhost::full_t_MapUserData(Cmd::t_MapUserData &data, SceneUser * master )$/;"	f	class:SceneGhost
full_t_MapUserDataPosState	SceneServer/libscenesserver/SceneGhost.cpp	/^void SceneGhost::full_t_MapUserDataPosState( Cmd::t_MapUserDataPosState &data, SceneUser * master )$/;"	f	class:SceneGhost
full_t_UserData	SceneServer/libscenesserver/SceneGhost.cpp	/^void SceneGhost::full_t_UserData( Cmd::t_UserData &data, SceneUser * master )$/;"	f	class:SceneGhost
full_zNpcB	SceneServer/libscenesserver/SceneGhost.cpp	/^void SceneGhost::full_zNpcB( SceneUser * master )$/;"	f	class:SceneGhost
func	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusManager::__anon69
funcName	SceneServer/libscenesserver/scriptTickTask.h	/^	const char* funcName;$/;"	m	struct:scriptTask
function	GatewayServer/old_back/GatewayServer.h	/^		DWORD function;$/;"	m	struct:CountryInfo::CountryDic
function	GatewayServer/old_back/GatewayServer.h	/^		DWORD function;$/;"	m	struct:CountryInfo::Info
function	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
function	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::CountryInfo
function	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
functionNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
funlist	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SkillStatusManager	typeref:struct:O::SkillStatusManager::__anon69
gClient	client/Game.cpp	/^ClientConn* gClient = NULL;$/;"	v
g_MoveSceneMemberMapLock	SessionServer/libsessionserver/SessionServer.cpp	/^zMutex g_MoveSceneMemberMapLock;$/;"	v
g_blue_changce	SceneServer/libscenesserver/ScenesServer.cpp	/^WORD g_blue_changce = 0;$/;"	v
g_green_changce	SceneServer/libscenesserver/ScenesServer.cpp	/^WORD g_green_changce = 0;$/;"	v
g_nFMA	SceneServer/libscenesserver/ScenesServer.cpp	/^NFilterModuleArray g_nFMA;$/;"	v
g_nFMA	SessionServer/libsessionserver/SessionServer.cpp	/^NFilterModuleArray g_nFMA;$/;"	v
g_orange_changce	SceneServer/libscenesserver/ScenesServer.cpp	/^WORD g_orange_changce = 0;$/;"	v
g_purple_changce	SceneServer/libscenesserver/ScenesServer.cpp	/^WORD g_purple_changce = 0;$/;"	v
g_wUniCode	base/src/codeLib.c	/^static WORD g_wUniCode[]={$/;"	v	file:
game	SuperServer/RoleregCache.cpp	/^	WORD game; \/\/”Œœ∑±‡∫≈$/;"	m	struct:RoleData	file:
game	base/command.h	/^		WORD game;$/;"	m	struct:Cmd::stUserRequestLoginCmd
game	base/common.h	/^			WORD game;$/;"	m	struct:GameZone_t::__anon117::__anon118
game	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserPosition
game	base/include/csCommon.h	/^/;"	m	struct:Cmd::stUserRequestLoginCmd
gameID	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniUserPosition
gameID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stCardMiniGameCmd
gameID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stGameEndCommonMiniGameCmd
gameID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stGameResultCommonMiniGameCmd
gameID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stGameStartCommonMiniGameCmd
gameID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stKickUserCommonMiniGameCmd
gameID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stLeaveGameCommonMiniGameCmd
gameID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stToggleReadyCommonMiniGameCmd
gameList	tmp/MiniServer/MiniServer.h	/^    hash_map<DWORD,MiniGame *> gameList;\/\/id-game$/;"	m	class:MiniRoom
gameList	tmp/MiniServer/MiniServer.h	/^    std::map<BYTE,oneGameState> gameList;$/;"	m	class:MiniUser
gameNum	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniRoomData
gameState	SceneServer/libscenesserver/SceneServer1.h	/^    DiceState gameState;$/;"	m	class:Dice
gameState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
gameType	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniGameScore
gameType	tmp/MiniServer/MiniRoom.cpp	/^BYTE MiniRoom::gameType() const$/;"	f	class:MiniRoom
gameZone	BillServer/old_back/BillServer.h	/^    GameZone_t gameZone;$/;"	m	class:BillClient
gameZone	FLServer/ServerACL.h	/^	GameZone_t gameZone;$/;"	m	struct:ACLZone
gameZone	FLServer/ServerTask.h	/^	GameZone_t gameZone;$/;"	m	class:ServerTask
gameZone	SuperServer/SuperServer.h	/^	GameZone_t gameZone;$/;"	m	class:SuperService
gameZone	base/flcmd.h	/^			GameZone_t gameZone;$/;"	m	struct:Cmd::FL::t_LoginFL_OK
gameZone	base/flcmd.h	/^		GameZone_t gameZone;$/;"	m	struct:Cmd::t_NewLoginSession
gameZone_str	BillServer/old_back/BillServer.h	/^    char gameZone_str[6];$/;"	m	class:BillClient
game_iter	tmp/MiniServer/MiniServer.h	/^    typedef hash_map<DWORD,MiniGame *>::iterator game_iter;$/;"	t	class:MiniRoom
game_iter	tmp/MiniServer/MiniServer.h	/^    typedef std::map<BYTE,oneGameState>::iterator game_iter;$/;"	t	class:MiniUser
gateServerID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_UserLogin_Gateway
gatetask	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
gatewayTaskList	SessionServer/libsessionserver/SessionServer.h	/^    TaskContainer gatewayTaskList;$/;"	m	class:SessionTaskManager
gatewayTaskSet	GatewayServer/old_back/GatewayServer.h	/^	GatewayTaskHashmap gatewayTaskSet;$/;"	m	class:GatewayTaskManager
gateway_ip	base/command.h	/^		DWORD gateway_ip;$/;"	m	struct:Cmd::ping_element
gatewaytask	BillServer/BillUser.h	/^    shared_ptr<BillTask> gatewaytask;$/;"	m	class:BillUser
gatewaytask	BillServer/old_back/BillServer.h	/^    BillTask *gatewaytask;$/;"	m	class:BillUser
gatewaytask	GatewayServer/old_back/GatewayServer.h	/^	GatewayTask *gatewaytask;$/;"	m	class:GateUser
gem_atk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
gem_atk	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_con	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_def	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_dex	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_dhpp	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_dmpp	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_inte	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_mdef	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_mkt	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
gem_mkt	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_spi	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gem_str	base/include/csCommon.h	/^/;"	m	struct:Gem_Pop
gempop	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
genName	SessionServer/libsessionserver/SessionServer.h	/^    char  genName[MAX_NAMESIZE]; \/\/ æ¸∂”Ω´æ¸√˚◊÷$/;"	m	class:CArmy
genTempID	FLServer/LoginTask.h	/^		void genTempID() { tempid = ++uniqueID; }$/;"	f	class:LoginTask
gen_exp	SessionServer/libsessionserver/SessionServer.h	/^    DWORD gen_exp; \/\/¥ÛΩ´æ¸µƒæ≠—È$/;"	m	class:CCountry
gen_level	SessionServer/libsessionserver/SessionServer.h	/^    DWORD gen_level; \/\/¥ÛΩ´æ¸µƒµ»º∂$/;"	m	class:CCountry
gen_maxexp	SessionServer/libsessionserver/SessionServer.h	/^    DWORD gen_maxexp; \/\/¥ÛΩ´æ¸µƒ◊Ó¥Ûæ≠—È$/;"	m	class:CCountry
gen_refreshTime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD gen_refreshTime;\/\/¥ÛΩ´æ¸∏¥ªÓµƒ ±º‰$/;"	m	class:CCountry
generalLevelDown	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::generalLevelDown()$/;"	f	class:CCountry
generateID	SceneServer/libscenesserver/scriptTickTask.h	/^	QWORD generateID()$/;"	f	class:scriptTaskManagement
generateOneBox	SceneServer/libscenesserver/boxCircle.cpp	/^box *boxCircle::generateOneBox(bool isGloden,int sex,int level)$/;"	f	class:boxCircle
generateThisID	SceneServer/libscenesserver/zObject.cpp	/^void zObject::generateThisID()$/;"	f	class:zObject
get	BillServer/old_back/BillCache.cpp	/^BillData *BillCache::get(const char *tid)$/;"	f	class:BillCache
get	BillServer/old_back/BillSessionManager.cpp	/^BillSession BillSessionManager::get(const std::string& tid)$/;"	f	class:BillSessionManager
get	SceneServer/libscenesserver/CharInitInfo.cpp	/^void CharInitInfo::get(const WORD profession,InitObjectVector &objs)$/;"	f	class:CharInitInfo
get	SceneServer/libscenesserver/MagicRange.cpp	/^void MagicRangeInit::get(const DWORD type,const DWORD dir,SMagicRange &range)$/;"	f	class:MagicRangeInit
get	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
get	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestUserAndSend
get	SceneServer/libscenesserver/meterialsManager.h	/^	char *get(DWORD id)$/;"	f	class:meterialsManager
get	SessionServer/libsessionserver/SessionChat.cpp	/^SessionChannel * SessionChannelManager::get(DWORD id)$/;"	f	class:SessionChannelManager
get	base/include/srvEngine.h	/^	CmdPair *get()$/;"	f	class:MsgQueue
get	base/include/srvEngine.h	/^	T get()$/;"	f	class:zUniqueID
get	base/include/srvEngine.h	/^	T get(int size,int & count)$/;"	f	class:zUniqueID
get	base/include/srvEngine.h	/^	data *get(const char *name)$/;"	f	class:zDataBM
get	base/include/srvEngine.h	/^	data *get(uint32_t dataid)$/;"	f	class:zDataBM
get	base/x_msgqueue.h	/^	CmdPair *get() {$/;"	f	class:MsgQueue
get	base/x_simple_db_table.cpp	/^uint32_t x_simple_db_table::get(const uint32_t id)$/;"	f	class:x_simple_db_table
getACCID	GatewayServer/old_back/GatewayServer.h	/^	DWORD getACCID() const$/;"	f	class:GatewayTask
getATypeAndAction	base/include/srvEngine.h	/^	void getATypeAndAction(BYTE &type,BYTE &action)$/;"	f	struct:zNpcB
getAbilityByLevel	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::getAbilityByLevel(DWORD level)$/;"	f	class:ScenePet
getAbsolutePos	SceneServer/libscenesserver/MagicRange.cpp	/^zPos RelativePos::getAbsolutePos(const zPos &center,DWORD dir)$/;"	f	class:RelativePos
getAccount	GatewayServer/old_back/GateUser.cpp	/^const char* GateUser::getAccount()$/;"	f	class:GateUser
getActRegion	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::getActRegion(zPos &pos,int &x,int &y)$/;"	f	class:NpcAIController
getActionPoint	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
getAddr	base/include/x_socket.h	/^	const uint32_t getAddr() const { return addr.sin_addr.s_addr; }$/;"	f	class:x_socket
getAddr	base/src/x_tcptask.h	/^	const uint32_t getAddr() const$/;"	f	class:x_tcptask
getAll	GatewayServer/old_back/CountryInfo.cpp	/^int CountryInfo::getAll(char *buf)$/;"	f	class:CountryInfo
getAllNum	base/include/zTime.h	/^uint16_t getAllNum(const char *s,std::vector<T> & data)$/;"	f
getAllSkills	base/include/srvEngine.h	/^	bool getAllSkills(std::vector<uint32_t> & list,uint16_t level)$/;"	f	struct:zNpcB
getAllset	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::MultiPack
getAlly	SceneServer/libscenesserver/CountryAlly.cpp	/^CAlly* CountryAllyM::getAlly(DWORD dwCountryID1,DWORD dwCountryID2)$/;"	f	class:CountryAllyM
getAttFive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
getAttFivePoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
getAverageExp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
getAvl	FLServer/GYListManager.cpp	/^GYList *GYListManager::getAvl(const GameZone_t &gameZone) {$/;"	f	class:GYListManager
getBaseMaxHP	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getBaseMaxHP()$/;"	f	class:ScenePet
getBaseMaxHP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getBaseMaxMP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getBite	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getBitedef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getBlind	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getBlinddef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getBufferSize	base/include/x_socket.h	/^	uint32_t getBufferSize() const {return _rcv_queue.maxSize() + _snd_queue.maxSize();}$/;"	f	class:x_socket
getBulletin	SessionServer/libsessionserver/SchoolManager.cpp	/^const char * CSchool::getBulletin()$/;"	f	class:CSchool
getCartoonData	SceneServer/libscenesserver/CartoonPet.cpp	/^Cmd::t_CartoonData& CartoonPet::getCartoonData()$/;"	f	class:CartoonPet
getCartoonID	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD getCartoonID(){return cartoonID;}$/;"	f	class:CartoonPet
getCartoonID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::CartoonPet
getChaos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getChaosdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getCharID	SessionServer/libsessionserver/SchoolManager.cpp	/^DWORD CSchoolMember::getCharID()$/;"	f	class:CSchoolMember
getCharType	SceneServer/libscenesserver/SceneSkill.cpp	/^int getCharType(DWORD type)$/;"	f
getCold	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getColddef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getCommonCountryBacktoMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getCommonUserBacktoMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getCompDir	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getCountryDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getCountryDareBackToMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getCountryDefBackToMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getCountryID	GatewayServer/old_back/CountryInfo.cpp	/^DWORD CountryInfo::getCountryID(DWORD country_id)$/;"	f	class:CountryInfo
getCountryID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getCountryIDByCountryName	SceneServer/libscenesserver/SceneManager.cpp	/^DWORD SceneManager::getCountryIDByCountryName(const char *name)$/;"	f	class:SceneManager
getCountryName	GatewayServer/old_back/CountryInfo.cpp	/^std::string CountryInfo::getCountryName(DWORD country_id)$/;"	f	class:CountryInfo
getCountryName	SceneServer/libscenesserver/Scene.cpp	/^const char * Scene::getCountryName() const$/;"	f	class:Scene
getCountryNameByCountryID	SceneServer/libscenesserver/SceneManager.cpp	/^const char * SceneManager::getCountryNameByCountryID(DWORD id)$/;"	f	class:SceneManager
getCountrySize	GatewayServer/old_back/CountryInfo.cpp	/^int CountryInfo::getCountrySize()$/;"	f	class:CountryInfo
getCountryState	GatewayServer/old_back/CountryInfo.cpp	/^int CountryInfo::getCountryState( CountryInfo::Info cInfo )$/;"	f	class:CountryInfo
getCountryTech	SceneServer/libscenesserver/CountryTech.cpp	/^CountryTech* CountryTechM::getCountryTech(DWORD dwCountryID)$/;"	f	class:CountryTechM
getCountryUser	SessionServer/libsessionserver/SessionServer.h	/^    static void getCountryUser(std::vector<std::pair<DWORD,DWORD> > &v)$/;"	f	class:UserSession
getCurTarget	SceneServer/libscenesserver/SceneEntryPk.cpp	/^SceneEntryPk * SceneEntryPk::getCurTarget()$/;"	f	class:SceneEntryPk
getCurrentTimeString	base/src/zMisc.cpp	/^void getCurrentTimeString(char *buffer,const int bufferlen,const char *format)$/;"	f
getDamageBonus	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getData	SceneServer/libscenesserver/script.cpp	/^const std::string& LuaScript::getData() const $/;"	f	class:LuaScript
getDefFive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
getDefFivePoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
getDefTarget	SceneServer/libscenesserver/SceneEntryPk.cpp	/^SceneEntryPk * SceneEntryPk::getDefTarget()$/;"	f	class:SceneEntryPk
getDegree	SessionServer/libsessionserver/SchoolManager.cpp	/^WORD CSchoolMember::getDegree()$/;"	f	class:CSchoolMember
getDir	base/include/srvEngine.h	/^	inline const BYTE getDir() const$/;"	f	struct:zSceneEntry
getDirect	base/include/srvEngine.h	/^	const int getDirect(const zPos &pos) const$/;"	f	struct:zPos
getDirectScreen	GatewayServer/old_back/ScreenIndex.cpp	/^const zPosIVector &ScreenIndex::getDirectScreen(const zPosI &posi,const int dir)$/;"	f	class:ScreenIndex
getDirectScreen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getDistance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getEmperorDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getEmperorDareDef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getEncMethod	base/src/zEncDec.cpp	/^CEncrypt::encMethod CEncrypt::getEncMethod() const$/;"	f	class:CEncrypt
getEntries	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::getEntries(int radius,SceneEntryPk_vec & entries,int state)$/;"	f	class:SceneNpc
getEntriesCallBack	SceneServer/libscenesserver/SceneNpcAI.cpp	/^  getEntriesCallBack(SceneNpc * npc,int radius,SceneEntryPk_vec& entries,const int state) : npc(npc),radius(radius),entries(entries),state(state)$/;"	f	struct:getEntriesCallBack
getEntriesCallBack	SceneServer/libscenesserver/SceneNpcAI.cpp	/^struct getEntriesCallBack : public zSceneEntryCallBack$/;"	s	file:
getEntryByID	base/include/srvEngine.h	/^	inline zEntry * getEntryByID(const uint32_t id) const$/;"	f	class:zEntryID
getEntryByID	base/include/srvEngine.h	/^	zEntry * getEntryByID( uint32_t id)$/;"	f	class:zDataBM
getEntryByName	base/include/srvEngine.h	/^	inline zEntry * getEntryByName( const char * name) const$/;"	f	class:zEntryName
getEntryByName	base/include/srvEngine.h	/^	inline zEntry * getEntryByName(const std::string  &name) const$/;"	f	class:zEntryName
getEntryByName	base/include/srvEngine.h	/^	zEntry * getEntryByName( const char * name)$/;"	f	class:zDataBM
getEntryByTempID	base/include/srvEngine.h	/^	inline zEntry * getEntryByTempID(const uint32_t tempid) const$/;"	f	class:zEntryTempID
getEquips	SceneServer/libscenesserver/zObject.cpp	/^const Equips& EquipPack::getEquips() const$/;"	f	class:EquipPack
getEvil	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getEvildef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getExp	SessionServer/libsessionserver/SessionServer.h	/^    DWORD getExp()$/;"	f	class:CSept
getExpMode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
getExpSize	SceneServer/libscenesserver/TeamManager.cpp	/^int TeamManager::getExpSize(zPosI pos,DWORD sceneid)$/;"	f	class:TeamManager
getField	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getFileName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getFirstInValideNode	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember* CSchoolMember::getFirstInValideNode()$/;"	f	class:CSchoolMember
getFirstName	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
getFirstName	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
getFirstName	SessionServer/libsessionserver/DareSept.cpp	/^char* CDareSept::getFirstName()$/;"	f	class:CDareSept
getFirstName	SessionServer/libsessionserver/SessionServer.h	/^    virtual char* getFirstName(){return NULL;}      \/\/ ÃÙ’Ω’ﬂ…Áª·πÿœµµƒ√˚◊÷$/;"	f	class:CDare
getFiveType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getForeignerBacktoMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getFriendLevel	SceneServer/libscenesserver/CountryAlly.cpp	/^DWORD  CountryAllyM::getFriendLevel(DWORD dwCountryID1,DWORD dwCountryID2)$/;"	f	class:CountryAllyM
getGame	tmp/MiniServer/MiniHall.cpp	/^MiniGame * MiniHall::getGame(const Cmd::MiniGameID &id)$/;"	f	class:MiniHall
getGame	tmp/MiniServer/MiniRoom.cpp	/^MiniGame *MiniRoom::getGame(const Cmd::MiniGameID &id)$/;"	f	class:MiniRoom
getGamePos	tmp/MiniServer/MiniUser.cpp	/^Cmd::MiniUserPosition MiniUser::getGamePos(const BYTE &t)$/;"	f	class:MiniUser
getGameScore	tmp/MiniServer/MiniUser.cpp	/^Cmd::MiniGameScore MiniUser::getGameScore()$/;"	f	class:MiniUser
getGameState	tmp/MiniServer/MiniUser.cpp	/^Cmd::MiniUserState MiniUser::getGameState(const BYTE &t)$/;"	f	class:MiniUser
getGlodenBox	SceneServer/libscenesserver/giftBox.h	/^	const giftBox& getGlodenBox()$/;"	f	class:globalBox
getGold	BillServer/old_back/BillManager.cpp	/^double BillManager::getGold(DWORD acc)$/;"	f	class:BillManager
getGold	SceneServer/libscenesserver/zObject.cpp	/^zObject * MainPack::getGold()$/;"	f	class:MainPack
getGold	SceneServer/libscenesserver/zObject.cpp	/^zObject *Packages::getGold()$/;"	f	class:Packages
getGoldNum	SceneServer/libscenesserver/zObject.cpp	/^DWORD MainPack::getGoldNum()$/;"	f	class:MainPack
getGoldNum	SceneServer/libscenesserver/zObject.cpp	/^DWORD Packages::getGoldNum()$/;"	f	class:Packages
getHairColor	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
getHairType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
getHoldCountry	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getHoldUnion	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getHour	base/include/zTime.h	/^	int getHour()$/;"	f	class:zTime
getHp	SceneServer/libscenesserver/SceneEntryPk.cpp	/^DWORD SceneEntryPk::getHp()$/;"	f	class:SceneEntryPk
getID	BillServer/BillTask.h	/^    const WORD getID() const { return wdServerID; }$/;"	f	class:BillTask
getID	BillServer/old_back/BillServer.h	/^    const DWORD getID() const$/;"	f	class:BillClient
getID	BillServer/old_back/BillServer.h	/^    const WORD getID() const$/;"	f	class:BillTask
getID	RecordServer/RecordTask.h	/^    const WORD getID() const { return wdServerID; }$/;"	f	class:RecordTask
getID	SceneServer/SceneTask.h	/^    const WORD getID() const { return wdServerID; }$/;"	f	class:SceneTask
getID	SceneServer/libscenesserver/SceneServer1.h	/^    const WORD getID() const$/;"	f	class:SceneTask
getID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneTask
getID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
getID	SessionServer/SessionTask.h	/^    const WORD getID() const { return wdServerID; }$/;"	f	class:SessionTask
getID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD      getID() {return id;}$/;"	f	class:CSept
getID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD      getID() {return id;}$/;"	f	class:CUnion
getID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD getID(){return id;}$/;"	f	class:CSchool
getID	SessionServer/libsessionserver/SessionServer.h	/^    const WORD getID() const$/;"	f	class:SessionTask
getID	SuperServer/ServerTask.h	/^		const WORD getID() const {$/;"	f	class:ServerTask
getID	SuperServer/SuperServer.h	/^	const WORD getID() const { return se_.wdServerID; }$/;"	f	class:SuperService
getID	tmp/MiniServer/MiniServer.h	/^    const WORD getID() const$/;"	f	class:MiniTask
getIP	SuperServer/SuperServer.h	/^	const char *getIP() const { return se_.pstrIP; }$/;"	f	class:SuperService
getIP	base/include/x_socket.h	/^	const char *getIP() const { return inet_ntoa(addr.sin_addr); }$/;"	f	class:x_socket
getIP	base/src/x_tcp_client.h	/^	const char *getIP() const$/;"	f	class:x_tcp_client
getIP	base/src/x_tcptask.h	/^	const char *getIP() const$/;"	f	class:x_tcptask
getIPByIfName	base/include/x_socket.cpp	/^const char* x_socket::getIPByIfName(const char* ifName)$/;"	f	class:x_socket
getIPByIfName	base/x_util.h	/^inline const char* getIPByIfName(const char* ifName)$/;"	f
getIdByThisId	SceneServer/libscenesserver/script_func.cpp	/^DWORD getIdByThisId(DWORD thisid)$/;"	f
getIncCity	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getIndexKey	GatewayServer/old_back/GatewayServer.h	/^	const DWORD getIndexKey() const$/;"	f	class:GateUser
getInfo	GatewayServer/old_back/CountryInfo.cpp	/^CountryInfo::Info *CountryInfo::getInfo(DWORD country_id)$/;"	f	class:CountryInfo
getInstance	BillServer/BillServer.h	/^		static BillService &getInstance() {$/;"	f	class:BillService
getInstance	BillServer/BillTaskManager.h	/^    static BillTaskManager &getInstance() {$/;"	f	class:BillTaskManager
getInstance	BillServer/BillUserManager.cpp	/^BillUserManager *BillUserManager::getInstance()$/;"	f	class:BillUserManager
getInstance	BillServer/old_back/BillServer.h	/^    static BillManager &getInstance()$/;"	f	class:BillManager
getInstance	BillServer/old_back/BillServer.h	/^    static BillService &getInstance()$/;"	f	class:BillService
getInstance	BillServer/old_back/BillServer.h	/^    static BillSessionManager &getInstance()$/;"	f	class:BillSessionManager
getInstance	BillServer/old_back/BillServer.h	/^    static BillTaskManager &getInstance()$/;"	f	class:BillTaskManager
getInstance	BillServer/old_back/BillServer.h	/^    static BillTimeTick &getInstance()$/;"	f	class:BillTimeTick
getInstance	BillServer/old_back/StockConsign.cpp	/^ConsignGoldManager *ConsignGoldManager::getInstance()$/;"	f	class:ConsignGoldManager
getInstance	BillServer/old_back/StockConsign.cpp	/^ConsignHistoryManager *ConsignHistoryManager::getInstance()$/;"	f	class:ConsignHistoryManager
getInstance	BillServer/old_back/StockConsign.cpp	/^ConsignMoneyManager *ConsignMoneyManager::getInstance()$/;"	f	class:ConsignMoneyManager
getInstance	FLServer/FLServer.h	/^	static FLService &getInstance() {$/;"	f	class:FLService
getInstance	FLServer/GYListManager.h	/^	static GYListManager &getInstance() {$/;"	f	class:GYListManager
getInstance	FLServer/LoginManager.h	/^	static LoginManager &getInstance() {$/;"	f	class:LoginManager
getInstance	FLServer/ServerManager.h	/^	static ServerManager &getInstance() {$/;"	f	class:ServerManager
getInstance	GatewayServer/GatewayServer.h	/^		static GatewayService &getInstance() {$/;"	f	class:GatewayService
getInstance	GatewayServer/old_back/GateUserManager.cpp	/^GateUserManager * GateUserManager::getInstance()$/;"	f	class:GateUserManager
getInstance	GatewayServer/old_back/GatewayServer.h	/^	static GatewayService &getInstance()$/;"	f	class:GatewayService
getInstance	GatewayServer/old_back/GatewayServer.h	/^	static GatewayTaskManager &getInstance()$/;"	f	class:GatewayTaskManager
getInstance	GatewayServer/old_back/GatewayServer.h	/^	static GatewayTimeTick &getInstance()$/;"	f	class:GatewayTimeTick
getInstance	GatewayServer/old_back/GatewayServer.h	/^	static LoginSessionManager &getInstance()$/;"	f	class:LoginSessionManager
getInstance	GatewayServer/old_back/GatewayServer.h	/^	static SceneClientManager &getInstance()$/;"	f	class:SceneClientManager
getInstance	RecordServer/RecordServer.h	/^		static RecordService &getInstance() {$/;"	f	class:RecordService
getInstance	SceneServer/SceneServer.h	/^		static SceneService &getInstance() {$/;"	f	class:SceneService
getInstance	SceneServer/libscenesserver/ObjectManager.cpp	/^GlobalObjectIndex *GlobalObjectIndex::getInstance()$/;"	f	class:GlobalObjectIndex
getInstance	SceneServer/libscenesserver/SceneManager.cpp	/^SceneManager & SceneManager::getInstance()$/;"	f	class:SceneManager
getInstance	SceneServer/libscenesserver/SceneServer1.h	/^    static CharInitInfo &getInstance()$/;"	f	class:CharInitInfo
getInstance	SceneServer/libscenesserver/SceneServer1.h	/^    static MessageSystem &getInstance()$/;"	f	class:MessageSystem
getInstance	SceneServer/libscenesserver/SceneServer1.h	/^    static NpcTrade &getInstance()$/;"	f	class:NpcTrade
getInstance	SceneServer/libscenesserver/SceneServer1.h	/^    static SceneTaskManager &getInstance()$/;"	f	class:SceneTaskManager
getInstance	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneRecycleUserManager &SceneRecycleUserManager::getInstance()$/;"	f	class:SceneRecycleUserManager
getInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::CharInitInfo
getInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::MagicRangeInit
getInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneTimeTick
getInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::ScenesService
getInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::NpcTrade
getInstance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneTaskManager
getInstance	SessionServer/ServerManager.h	/^    static ServerManager &getInstance() {$/;"	f	class:ServerManager
getInstance	SessionServer/SessionServer.h	/^		static SessionService &getInstance() {$/;"	f	class:SessionService
getInstance	SessionServer/libsessionserver/SessionManager.cpp	/^SceneSessionManager *SceneSessionManager::getInstance()$/;"	f	class:SceneSessionManager
getInstance	SessionServer/libsessionserver/SessionManager.cpp	/^UserSessionManager *UserSessionManager::getInstance()$/;"	f	class:UserSessionManager
getInstance	SessionServer/libsessionserver/SessionServer.h	/^	static CArenaManager &getInstance()$/;"	f	class:CArenaManager
getInstance	SessionServer/libsessionserver/SessionServer.h	/^    static SessionService &getInstance()$/;"	f	class:SessionService
getInstance	SessionServer/libsessionserver/SessionServer.h	/^    static SessionTaskManager &getInstance()$/;"	f	class:SessionTaskManager
getInstance	SessionServer/libsessionserver/Team.cpp	/^GlobalTeamIndex *GlobalTeamIndex::getInstance()$/;"	f	class:GlobalTeamIndex
getInstance	SessionServer/libsessionserver/TempArchive.cpp	/^GlobalTempArchiveIndex *GlobalTempArchiveIndex::getInstance()$/;"	f	class:GlobalTempArchiveIndex
getInstance	SuperServer/FLClientManager.h	/^    static FLClientManager &getInstance()$/;"	f	class:FLClientManager
getInstance	SuperServer/InfoClientManager.h	/^    static InfoClientManager &getInstance()$/;"	f	class:InfoClientManager
getInstance	SuperServer/RoleregCache.h	/^    static RoleregCache &getInstance()$/;"	f	class:RoleregCache
getInstance	SuperServer/ServerManager.h	/^    static ServerManager &getInstance() {$/;"	f	class:ServerManager
getInstance	SuperServer/SuperServer.h	/^	static SuperService &getInstance() {$/;"	f	class:SuperService
getInstance	base/include/srvEngine.h	/^	static T& getInstance()$/;"	f	class:SingletonBase
getInstance	tmp/MiniServer/MiniServer.h	/^    static MiniService &getInstance()$/;"	f	class:MiniService
getInstance	tmp/MiniServer/MiniServer.h	/^    static MiniTaskManager &getInstance()$/;"	f	class:MiniTaskManager
getInstance	tmp/MiniServer/MiniServer.h	/^    static MiniTimeTick &getInstance()$/;"	f	class:MiniTimeTick
getInstance	tmp/MiniServer/MiniUserManager.cpp	/^MiniUserManager *MiniUserManager::getInstance()$/;"	f	class:MiniUserManager
getIp	BillServer/BillUser.cpp	/^const char *BillUser::getIp()$/;"	f	class:BillUser
getJoinTime	SessionServer/libsessionserver/SchoolManager.cpp	/^DWORD CSchoolMember::getJoinTime()$/;"	f	class:CSchoolMember
getLastTime	SessionServer/libsessionserver/SchoolManager.cpp	/^DWORD CSchoolMember::getLastTime()$/;"	f	class:CSchoolMember
getLeader	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
getLevel	SceneServer/libscenesserver/CartoonPet.cpp	/^DWORD CartoonPet::getLevel() const$/;"	f	class:CartoonPet
getLevel	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getLevel() const$/;"	f	class:ScenePet
getLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getLevel	SessionServer/libsessionserver/SchoolManager.cpp	/^WORD CSchoolMember::getLevel()$/;"	f	class:CSchoolMember
getLevelDegree	SessionServer/libsessionserver/Sort.cpp	/^WORD CSortM::getLevelDegree(UserSession *pUser)$/;"	f	class:CSortM
getLocalIP	base/include/x_socket.h	/^	const char *getLocalIP() const { return inet_ntoa(local_addr.sin_addr); }$/;"	f	class:x_socket
getLocalPort	base/include/x_socket.h	/^	const uint16_t getLocalPort() const { return ntohs(local_addr.sin_port); }$/;"	f	class:x_socket
getLocalTZ	base/src/zTime.cpp	/^std::string & zRTime::getLocalTZ(std::string & s)$/;"	f	class:zRTime
getLocalTime	base/include/zTime.h	/^	static void getLocalTime(struct tm & tv1,time_t timValue)$/;"	f	class:zRTime
getLoginTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
getLuaState	SceneServer/libscenesserver/SceneServer1.h	/^  lua_State* getLuaState() const { return mLuaState; }$/;"	f	class:LuaVM
getLull	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getLulldef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getLure	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getLuredef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMDay	base/include/zTime.h	/^	int getMDay()$/;"	f	class:zTime
getMDefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMainCity	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getMana	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
getMapIDByMapName	SceneServer/libscenesserver/SceneManager.cpp	/^DWORD SceneManager::getMapIDByMapName(const char *name)$/;"	f	class:SceneManager
getMapId	SceneServer/libscenesserver/SceneManager.cpp	/^DWORD SceneManager::getMapId(DWORD countryid,DWORD mapid)$/;"	f	class:SceneManager
getMapName	GatewayServer/old_back/CountryInfo.cpp	/^std::string CountryInfo::getMapName(DWORD country_id)$/;"	f	class:CountryInfo
getMarryRelation	SessionServer/libsessionserver/RelationManager.cpp	/^CRelation* CRelationManager::getMarryRelation()$/;"	f	class:CRelationManager
getMaster	SceneServer/libscenesserver/ScenePet.cpp	/^SceneEntryPk * ScenePet::getMaster()$/;"	f	class:ScenePet
getMaster	SceneServer/libscenesserver/SceneServer1.h	/^  virtual SceneEntryPk *getMaster() {return 0;}$/;"	f	class:SceneNpc
getMasterID	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD getMasterID() const{return masterID;}$/;"	f	class:ScenePet
getMasterID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ScenePet
getMasterMana	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMasterMana()$/;"	f	class:ScenePet
getMasterMana	SceneServer/libscenesserver/SceneServer1.h	/^  virtual DWORD getMasterMana(){return 0;}$/;"	f	class:SceneNpc
getMasterMana	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMasterNode	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember * CSchool::getMasterNode()$/;"	f	class:CSchool
getMaterial	SessionServer/libsessionserver/CountryManager.cpp	/^QWORD CCountry::getMaterial(int type)$/;"	f	class:CCountry
getMaterialKind	SceneServer/libscenesserver/zObject.cpp	/^DWORD zObject::getMaterialKind()$/;"	f	class:zObject
getMaxConns	base/src/x_tcptaskpool.h	/^	inline const int getMaxConns() const { return maxConns; }$/;"	f	class:x_tcptaskpool
getMaxHP	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMaxHP()$/;"	f	class:ScenePet
getMaxHP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMaxHp	SceneServer/libscenesserver/SceneEntryPk.cpp	/^DWORD SceneEntryPk::getMaxHp()$/;"	f	class:SceneEntryPk
getMaxMDamage	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMaxMDamage()$/;"	f	class:ScenePet
getMaxMDamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMaxMDefence	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMaxMDefence()$/;"	f	class:ScenePet
getMaxMP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMaxPDamage	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMaxPDamage()$/;"	f	class:ScenePet
getMaxPDamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMaxPDefence	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMaxPDefence()$/;"	f	class:ScenePet
getMaxSP	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getMaxSkill	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
getMaxSkills	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
getMe	SceneServer/libscenesserver/SceneNpcManager.cpp	/^SceneNpcManager &SceneNpcManager::getMe()$/;"	f	class:SceneNpcManager
getMe	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUserManager &SceneUserManager::getMe()$/;"	f	class:SceneUserManager
getMe	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryDareM
getMe	SessionServer/libsessionserver/AuctionService.cpp	/^AuctionService& AuctionService::getMe()$/;"	f	class:AuctionService
getMe	SessionServer/libsessionserver/CartoonPetService.cpp	/^CartoonPetService& CartoonPetService::getMe()$/;"	f	class:CartoonPetService
getMe	SessionServer/libsessionserver/ForbidTalkManager.cpp	/^ForbidTalkManager& ForbidTalkManager::getMe()$/;"	f	class:ForbidTalkManager
getMe	SessionServer/libsessionserver/NpcDare.cpp	/^CNpcDareM &CNpcDareM::getMe()$/;"	f	class:CNpcDareM
getMe	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolM &CSchoolM::getMe()$/;"	f	class:CSchoolM
getMe	SessionServer/libsessionserver/Sept.cpp	/^CSeptM &CSeptM::getMe()$/;"	f	class:CSeptM
getMe	SessionServer/libsessionserver/SessionChat.cpp	/^SessionChannelManager & SessionChannelManager::getMe()$/;"	f	class:SessionChannelManager
getMe	SessionServer/libsessionserver/Sort.cpp	/^CSortM& CSortM::getMe()$/;"	f	class:CSortM
getMe	base/include/csCommon.h	/^/;"	f	class:Singleton
getMe	base/include/srvEngine.h	/^	static zDataBM & getMe()$/;"	f	class:zDataBM
getMe	tmp/MiniServer/MiniUserManager.cpp	/^MiniUserManager &MiniUserManager::getMe()$/;"	f	class:MiniUserManager
getMember	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember *CSchool::getMember(const char *pName)$/;"	f	class:CSchool
getMember	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember *CSchoolM::getMember(const char *pName)$/;"	f	class:CSchoolM
getMemberBaseInfo	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::getMemberBaseInfo(struct Cmd::stSeptRember& info)$/;"	f	class:CSeptMember
getMemberBaseInfo	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
getMemberByName	SessionServer/libsessionserver/Sept.cpp	/^CSeptMember * CSeptM::getMemberByName(const char * pName)$/;"	f	class:CSeptM
getMemberByName	SessionServer/libsessionserver/Sept.cpp	/^CSeptMember* CSept::getMemberByName(const char* pName)$/;"	f	class:CSept
getMessage	SceneServer/libscenesserver/Chat.cpp	464;"	d	file:
getMessage	SceneServer/libscenesserver/Dice.cpp	259;"	d	file:
getMessage	SessionServer/libsessionserver/AuctionService.cpp	870;"	d	file:
getMessage	SessionServer/libsessionserver/SchoolManager.cpp	1318;"	d	file:
getMessage	SessionServer/libsessionserver/SchoolManager.cpp	3070;"	d	file:
getMessage	SessionServer/libsessionserver/Sept.cpp	616;"	d	file:
getMessage	SessionServer/libsessionserver/Session.cpp	164;"	d	file:
getMessage	SessionServer/libsessionserver/SessionChat.cpp	129;"	d	file:
getMessage	SessionServer/libsessionserver/SessionServer.cpp	667;"	d	file:
getMessage	SessionServer/libsessionserver/Union.cpp	865;"	d	file:
getMessage	tmp/MiniServer/MiniGame.cpp	460;"	d	file:
getMessage	tmp/MiniServer/MiniUser.cpp	36;"	d	file:
getMeterials	SceneServer/libscenesserver/script_func.cpp	/^char * getMeterials(DWORD id)$/;"	f
getMin	base/include/zTime.h	/^	int getMin()$/;"	f	class:zTime
getMinMDamage	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMinMDamage()$/;"	f	class:ScenePet
getMinMDefence	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMinMDefence()$/;"	f	class:ScenePet
getMinPDamage	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMinPDamage()$/;"	f	class:ScenePet
getMinPDefence	SceneServer/libscenesserver/ScenePet.cpp	/^DWORD ScenePet::getMinPDefence()$/;"	f	class:ScenePet
getMoney	SceneServer/libscenesserver/Dice.cpp	/^DWORD Dice::getMoney()$/;"	f	class:Dice
getMoney	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
getMoney	tmp/MiniServer/MiniUser.cpp	/^int MiniUser::getMoney()$/;"	f	class:MiniUser
getMonth	base/include/zTime.h	/^	int getMonth()$/;"	f	class:zTime
getMyBigBrother	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::getMyBigBrother(CSchoolMember *member,char *pName)$/;"	f	class:CSchoolMember
getMyLayer	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::getMyLayer(DWORD &layer)$/;"	f	class:CSchoolMember
getName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getName	SessionServer/libsessionserver/CityManager.cpp	/^char* CCity::getName()$/;"	f	class:CCity
getNetType	BillServer/old_back/BillServer.h	/^    const NetType getNetType() const$/;"	f	class:BillClient
getNetType	SuperServer/FLClient.h	/^    const NetType getNetType() const$/;"	f	class:FLClient
getNetType	SuperServer/InfoClient.h	/^    const NetType getNetType() const$/;"	f	class:InfoClient
getNewBase	SceneServer/libscenesserver/Skill.cpp	/^const zSkillB *zSkill::getNewBase()$/;"	f	class:zSkill
getNextLevelNodeCount	SessionServer/libsessionserver/SchoolManager.cpp	/^BYTE CSchoolMember::getNextLevelNodeCount()$/;"	f	class:CSchoolMember
getNextObjOwnerID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
getNextObjOwnerID	SceneServer/libscenesserver/Team.cpp	/^DWORD Team::getNextObjOwnerID()$/;"	f	class:Team
getNextPos	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::getNextPos($/;"	f	class:Scene
getNextPos	SceneServer/libscenesserver/Scene.cpp	/^void Scene::getNextPos(const zPos &orgPos,const int dir,zPos &newPos) const$/;"	f	class:Scene
getNextServerEntryByType	base/x_subnetservice.cpp	/^const Cmd::Super::ServerEntry *x_subnetservice::getNextServerEntryByType(const uint16_t wdServerType,const Cmd::Super::ServerEntry **prev)$/;"	f	class:x_subnetservice
getNextState	base/src/x_tcptask.cpp	/^void x_tcptask::getNextState()$/;"	f	class:x_tcptask
getNextState	base/src/zTCPClientTask.cpp	/^void x_tcp_clientTask::getNextState()$/;"	f	class:x_tcp_clientTask
getNineScreen	GatewayServer/old_back/ScreenIndex.cpp	/^const zPosIVector &ScreenIndex::getNineScreen(const zPosI &posi)$/;"	f	class:ScreenIndex
getNineScreen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getNpcByTempID	SceneServer/libscenesserver/Scene.cpp	/^SceneNpc *Scene::getNpcByTempID(DWORD npctempid)$/;"	f	class:Scene
getNpcByTempID	SceneServer/libscenesserver/SceneNpcManager.cpp	/^SceneNpc *SceneNpcManager::getNpcByTempID(DWORD tempid)$/;"	f	class:SceneNpcManager
getNpcCommonChat	SceneServer/libscenesserver/SceneNpcManager.cpp	/^bool SceneNpcManager::getNpcCommonChat(DWORD type,char * content)$/;"	f	class:SceneNpcManager
getNpcDareObjBySept	SessionServer/libsessionserver/NpcDare.cpp	/^CNpcDareObj* CNpcDareM::getNpcDareObjBySept(DWORD septid)$/;"	f	class:CNpcDareM
getNpcMenu	SceneServer/libscenesserver/NpcTrade.cpp	/^bool NpcTrade::getNpcMenu(const DWORD npcid,char *menuTxt)$/;"	f	class:NpcTrade
getObjByIdFromPackage	SceneServer/libscenesserver/script_func.cpp	/^zObject *getObjByIdFromPackage(SceneUser* user,DWORD id)$/;"	f
getObjByTempidFromPackage	SceneServer/libscenesserver/script_func.cpp	/^zObject *getObjByTempidFromPackage(SceneUser* user,DWORD thisid)$/;"	f
getObjMode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
getObject	SceneServer/libscenesserver/ObjectManager.cpp	/^zObject *UserObjectM::getObject(UserObjectCompare &comp)$/;"	f	class:UserObjectM
getObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
getObjectByEquipNo	SceneServer/libscenesserver/zObject.cpp	/^zObject *EquipPack::getObjectByEquipNo(EQUIPNO no)$/;"	f	class:EquipPack
getObjectByEquipPos	SceneServer/libscenesserver/zObject.cpp	/^zObject *EquipPack::getObjectByEquipPos(DWORD no)$/;"	f	class:EquipPack
getObjectByID	SceneServer/libscenesserver/ObjectManager.cpp	/^zObject* UserObjectM::getObjectByID(DWORD id,BYTE upgrade,bool not_need_space) const$/;"	f	class:UserObjectM
getObjectByID	SceneServer/libscenesserver/zObject.cpp	/^bool Package::getObjectByID(zObject **ret,DWORD id)$/;"	f	class:Package
getObjectByPos	SceneServer/libscenesserver/ObjectManager.cpp	/^zObject *UserObjectM::getObjectByPos(const stObjectLocation &dst)$/;"	f	class:UserObjectM
getObjectByThisID	SceneServer/libscenesserver/ObjectManager.cpp	/^zObject * UserObjectM::getObjectByThisID( DWORD thisid)$/;"	f	class:UserObjectM
getObjectByThisid	SceneServer/libscenesserver/ObjectManager.cpp	/^zObject *GlobalObjectIndex::getObjectByThisid(DWORD thisid)$/;"	f	class:GlobalObjectIndex
getObjectByZone	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::getObjectByZone(zObject **ret,WORD x,WORD y)$/;"	f	class:EquipPack
getObjectByZone	SceneServer/libscenesserver/zObject.cpp	/^bool MainPack::getObjectByZone(zObject **ret,WORD x,WORD y)$/;"	f	class:MainPack
getObjectByZone	SceneServer/libscenesserver/zObject.cpp	/^bool Package::getObjectByZone(zObject **ret,WORD x,WORD y)$/;"	f	class:Package
getOccupation	SessionServer/libsessionserver/SchoolManager.cpp	/^WORD CSchoolMember::getOccupation()$/;"	f	class:CSchoolMember
getOfflineMessage	SessionServer/libsessionserver/OfflineMessage.cpp	/^void COfflineMessage::getOfflineMessage(const UserSession *pUser)$/;"	f	class:COfflineMessage
getOfflineMessageSetAndSend	SessionServer/libsessionserver/OfflineMessage.cpp	/^void COfflineMessage::getOfflineMessageSetAndSend(const UserSession *pUser,std::string path)$/;"	f	class:COfflineMessage
getOldPos1	base/include/srvEngine.h	/^	inline const zPos &getOldPos1() const$/;"	f	struct:zSceneEntry
getOldPos2	base/include/srvEngine.h	/^	inline const zPos &getOldPos2() const$/;"	f	struct:zSceneEntry
getOnline	FLServer/GYListManager.cpp	/^DWORD GYListManager::getOnline(void) {$/;"	f	class:GYListManager
getOnlineNum	SuperServer/ServerTask.h	/^		const DWORD getOnlineNum() const {$/;"	f	class:ServerTask
getOverMan	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
getOwner	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Packages
getOwner	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
getPDefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getPackage	SceneServer/libscenesserver/zObject.cpp	/^Package * Packages::getPackage(DWORD type,DWORD id)$/;"	f	class:Packages
getPackage	SceneServer/libscenesserver/zObject.cpp	/^Package** Packages::getPackage(int packs)$/;"	f	class:Packages
getPetAI	SceneServer/libscenesserver/ScenePet.cpp	/^WORD ScenePet::getPetAI()$/;"	f	class:ScenePet
getPetType	SceneServer/libscenesserver/ScenePet.cpp	/^Cmd::petType ScenePet::getPetType()$/;"	f	class:ScenePet
getPetrify	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getPetrifydef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getPkData	SceneServer/libscenesserver/Horse.cpp	/^void Horse::getPkData()$/;"	f	class:Horse
getPkLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getPointInTree	SceneServer/libscenesserver/SkillManager.cpp	/^DWORD UserSkillM::getPointInTree(DWORD mySubkind)$/;"	f	class:UserSkillM
getPoison	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getPoisondef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getPoolSize	BillServer/old_back/BillServer.h	/^    const int getPoolSize() const$/;"	f	class:BillService
getPoolSize	GatewayServer/old_back/GatewayServer.h	/^	const int getPoolSize() const$/;"	f	class:GatewayService
getPoolSize	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::ScenesService
getPoolSize	SessionServer/libsessionserver/SessionServer.h	/^    const int getPoolSize() const$/;"	f	class:SessionService
getPoolSize	tmp/MiniServer/MiniServer.h	/^    const int getPoolSize() const$/;"	f	class:MiniService
getPoolState	GatewayServer/old_back/GatewayServer.h	/^	const int getPoolState() const$/;"	f	class:GatewayService
getPort	SuperServer/SuperServer.h	/^	const WORD getPort() const { return se_.wdPort; }$/;"	f	class:SuperService
getPort	base/include/x_socket.h	/^	const uint16_t getPort() const { return ntohs(addr.sin_port); }$/;"	f	class:x_socket
getPort	base/src/x_tcp_client.h	/^	const uint16_t getPort() const$/;"	f	class:x_tcp_client
getPort	base/src/x_tcptask.h	/^	const uint16_t getPort()$/;"	f	class:x_tcptask
getPos	base/include/srvEngine.h	/^	inline const zPos &getPos() const$/;"	f	struct:zSceneEntry
getPosI	base/include/srvEngine.h	/^	inline const zPosI &getPosI() const$/;"	f	struct:zSceneEntry
getPreLevelNode	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember * CSchoolMember::getPreLevelNode()$/;"	f	class:CSchoolMember
getPrenticeCount	SessionServer/libsessionserver/SchoolManager.cpp	/^BYTE CSchoolMember::getPrenticeCount()$/;"	f	class:CSchoolMember
getPriv	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
getPriv	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getProperty	base/x_properties.h	/^	const std::string &getProperty(const std::string &key)$/;"	f	class:x_properties
getRandDest	SceneServer/libscenesserver/WayPoint.cpp	/^const Point WayPoint::getRandDest()$/;"	f	class:WayPoint
getRandPoint	SceneServer/libscenesserver/WayPoint.cpp	/^const zPos WayPoint::getRandPoint()$/;"	f	class:WayPoint
getRandWayPoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getRandWayPoint	SceneServer/libscenesserver/WayPoint.cpp	/^WayPoint *WayPointM::getRandWayPoint()$/;"	f	class:WayPointM
getRandomIndex	SceneServer/libscenesserver/boxCircle.cpp	/^unsigned int boxCircle::getRandomIndex(unsigned int mod,unsigned int seed)$/;"	f	class:boxCircle
getRandomSkillByType	base/include/srvEngine.h	/^	bool getRandomSkillByType(int type,npcSkill &skill)$/;"	f	struct:zNpcB
getRealFileName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getRealMapID	GatewayServer/old_back/CountryInfo.cpp	/^DWORD CountryInfo::getRealMapID(DWORD map_id)$/;"	f	class:CountryInfo
getRealMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getRealMapName	GatewayServer/old_back/CountryInfo.cpp	/^const char *CountryInfo::getRealMapName(const char *name)$/;"	f	class:CountryInfo
getRealMinTime	BillServer/BillUser.cpp	/^DWORD BillUser::getRealMinTime()$/;"	f	class:BillUser
getRealName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getReel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getReeldef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getRelationByID	SessionServer/libsessionserver/RelationManager.cpp	/^CRelation* CRelationManager::getRelationByID(DWORD dwRelationID)$/;"	f	class:CRelationManager
getRelationByName	SessionServer/libsessionserver/RelationManager.cpp	/^CRelation * CRelationManager::getRelationByName(const char *name)$/;"	f	class:CRelationManager
getRelationByType	SessionServer/libsessionserver/RelationManager.cpp	/^CRelation*  CRelationManager::getRelationByType(int relationType)$/;"	f	class:CRelationManager
getRepeat	SceneServer/libscenesserver/SceneNpcAI.cpp	/^int NpcAIController::getRepeat()$/;"	f	class:NpcAIController
getRepute	SessionServer/libsessionserver/Sept.cpp	/^DWORD CSept::getRepute()$/;"	f	class:CSept
getRepute	SessionServer/libsessionserver/Sept.cpp	/^DWORD CSeptM::getRepute(DWORD dwSeptID)$/;"	f	class:CSeptM
getReverseDirect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getReverseDirectScreen	GatewayServer/old_back/ScreenIndex.cpp	/^const zPosIVector &ScreenIndex::getReverseDirectScreen(const zPosI &posi,const int dir)$/;"	f	class:ScreenIndex
getReverseDirectScreen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getRobGold	SceneServer/libscenesserver/GuardNpc.cpp	/^DWORD GuardNpc::getRobGold()$/;"	f	class:GuardNpc
getRole	RecordServer/RecordUser.h	/^	const uint8_t* getRole()const { return role; }$/;"	f	class:RecordUser
getRoleSize	RecordServer/RecordUser.h	/^	const uint32_t getRoleSize() const { return role_size; }$/;"	f	class:RecordUser
getRoom	tmp/MiniServer/MiniGame.cpp	/^MiniRoom *MiniGame::getRoom()$/;"	f	class:MiniGame
getRoom	tmp/MiniServer/MiniHall.cpp	/^MiniRoom * MiniHall::getRoom(const Cmd::MiniRoomID &id)$/;"	f	class:MiniHall
getRunningState	base/include/srvEngine.h	/^	uint32_t getRunningState() const$/;"	f	struct:zScene
getSaveData	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::getSaveData(SaveSkill *save)$/;"	f	class:zSkill
getSaveData	SceneServer/libscenesserver/zObject.cpp	/^bool zObject::getSaveData(SaveObject *save)$/;"	f	class:zObject
getSaveStatusSize	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
getSceneByFile	SessionServer/libsessionserver/SessionManager.cpp	/^SceneSession * SceneSessionManager::getSceneByFile(const char *name)$/;"	f	class:SceneSessionManager
getSceneByFileName	SceneServer/libscenesserver/SceneManager.cpp	/^Scene * SceneManager::getSceneByFileName( const char * name)$/;"	f	class:SceneManager
getSceneByID	SceneServer/libscenesserver/SceneManager.cpp	/^Scene * SceneManager::getSceneByID( DWORD id)$/;"	f	class:SceneManager
getSceneByID	SessionServer/libsessionserver/SessionManager.cpp	/^SceneSession * SceneSessionManager::getSceneByID(DWORD id)$/;"	f	class:SceneSessionManager
getSceneByID	base/include/srvEngine.h	/^	zScene * getSceneByID(uint32_t id)$/;"	f	class:zSceneManager
getSceneByName	SceneServer/libscenesserver/SceneManager.cpp	/^Scene * SceneManager::getSceneByName( const char * name)$/;"	f	class:SceneManager
getSceneByName	SessionServer/libsessionserver/SessionManager.cpp	/^SceneSession * SceneSessionManager::getSceneByName(const char *name)$/;"	f	class:SceneSessionManager
getSceneByName	base/include/srvEngine.h	/^	zScene * getSceneByName( const char * name)$/;"	f	class:zSceneManager
getSceneByTempID	SceneServer/libscenesserver/SceneManager.cpp	/^Scene * SceneManager::getSceneByTempID( DWORD tempid)$/;"	f	class:SceneManager
getSceneByTempID	SessionServer/libsessionserver/SessionManager.cpp	/^SceneSession * SceneSessionManager::getSceneByTempID(DWORD tempid)$/;"	f	class:SceneSessionManager
getSceneByTempID	base/include/srvEngine.h	/^	zScene * getSceneByTempID( uint32_t tempid)$/;"	f	class:zSceneManager
getSceneEntryByPos	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^zSceneEntry *zSceneEntryIndex::getSceneEntryByPos(zSceneEntry::SceneEntryType type,const zPos &pos,const bool bState,const zSceneEntry::SceneEntryState byState)$/;"	f	class:zSceneEntryIndex
getSceneNpcByPos	SceneServer/libscenesserver/Scene.cpp	/^SceneNpc *Scene::getSceneNpcByPos(const zPos &pos,const bool bState,const zSceneEntry::SceneEntryState byState)$/;"	f	class:Scene
getSceneObjectByPos	SceneServer/libscenesserver/Scene.cpp	/^zSceneObject *Scene::getSceneObjectByPos(const zPos &pos)$/;"	f	class:Scene
getSceneSize	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
getSceneSize	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::Team
getSceneUserByPos	SceneServer/libscenesserver/Scene.cpp	/^SceneUser *Scene::getSceneUserByPos(const zPos &pos,const bool bState,const zSceneEntry::SceneEntryState byState)$/;"	f	class:Scene
getSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchool * CSchoolM::getSchool(DWORD id)$/;"	f	class:CSchoolM
getSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchool * CSchoolMember::getSchool()$/;"	f	class:CSchoolMember
getSchoolByName	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchool * CSchoolM::getSchoolByName( const char * name)$/;"	f	class:CSchoolM
getSchoolID	SessionServer/libsessionserver/SchoolManager.cpp	/^DWORD CSchoolMember::getSchoolID()$/;"	f	class:CSchoolMember
getSchoolName	SessionServer/libsessionserver/SchoolManager.cpp	/^char *CSchool::getSchoolName()$/;"	f	class:CSchool
getSchoolName	SessionServer/libsessionserver/SchoolManager.cpp	/^char *CSchoolMember::getSchoolName()$/;"	f	class:CSchoolMember
getSchoolTree	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::getSchoolTree(CSendSchoolCallback &callback)$/;"	f	class:CSchoolMember
getScreenByRange	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^const zPosIVector &zSceneEntryIndex::getScreenByRange(const zPos &pos,const int range)$/;"	f	class:zSceneEntryIndex
getScreenDirect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getScreenX	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getScreenY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
getSec	base/include/zTime.h	/^	int getSec()$/;"	f	class:zTime
getSecondUserID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
getSecondUserID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
getSecondUserID	SessionServer/libsessionserver/DareSept.cpp	/^DWORD CDareSept::getSecondUserID()$/;"	f	class:CDareSept
getSecondUserID	SessionServer/libsessionserver/SessionServer.h	/^    virtual DWORD getSecondUserID(){return 0;}    \/\/ ”¶’Ω’ﬂÕÊº“µƒID$/;"	f	class:CDare
getSelectInfo	RecordServer/RecordTask.cpp	/^bool RecordTask::getSelectInfo(DWORD accid, DWORD countryid)$/;"	f	class:RecordTask
getSelectStates	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
getSelectUserInfo	GatewayServer/old_back/GatewayServer.h	/^	Cmd::SelectUserInfo *getSelectUserInfo(WORD num)$/;"	f	class:GateSelectUserSession
getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosNpc
getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosUser
getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestUserAndSend
getSepcialNpc	SceneServer/libscenesserver/SceneServer1.h	/^    MonkeyNpcs &getSepcialNpc()$/;"	f	class:SceneNpcManager
getSepcialNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneNpcManager
getSeptByID	SessionServer/libsessionserver/Sept.cpp	/^CSept* CSeptM::getSeptByID(DWORD dwSeptID)$/;"	f	class:CSeptM
getSeptByName	SessionServer/libsessionserver/Sept.cpp	/^CSept * CSeptM::getSeptByName( const char * name)$/;"	f	class:CSeptM
getSeptIDByUserName	SessionServer/libsessionserver/Sept.cpp	/^DWORD CSeptM::getSeptIDByUserName(char *Name)$/;"	f	class:CSeptM
getSeptNameByUserName	SessionServer/libsessionserver/Sept.cpp	/^char * CSeptM::getSeptNameByUserName(char *Name)$/;"	f	class:CSeptM
getSerialID	SessionServer/libsessionserver/SchoolManager.cpp	/^DWORD CSchoolMember::getSerialID()$/;"	f	class:CSchoolMember
getServer	SessionServer/ServerManager.cpp	/^shared_ptr<SessionTask> ServerManager::getServer(WORD wdServerID) {$/;"	f	class:ServerManager
getServer	SuperServer/ServerManager.cpp	/^shared_ptr<ServerTask> ServerManager::getServer(WORD wdServerID) {$/;"	f	class:ServerManager
getServerEntryById	base/x_subnetservice.cpp	/^const Cmd::Super::ServerEntry *x_subnetservice::getServerEntryById(const uint16_t wdServerID)$/;"	f	class:x_subnetservice
getServerEntryByType	base/x_subnetservice.cpp	/^const Cmd::Super::ServerEntry *x_subnetservice::getServerEntryByType(const uint16_t wdServerType)$/;"	f	class:x_subnetservice
getServerID	GatewayServer/old_back/GatewayServer.h	/^	const WORD getServerID() const$/;"	f	class:BillClient
getServerID	GatewayServer/old_back/GatewayServer.h	/^	const WORD getServerID() const$/;"	f	class:MiniClient
getServerID	GatewayServer/old_back/GatewayServer.h	/^	const WORD getServerID() const$/;"	f	class:SceneClient
getServerID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::MiniClient
getServerID	base/x_subnetservice.h	/^	const uint16_t getServerID() const { return wdServerID; }$/;"	f	class:x_subnetservice
getServerInfo	SuperServer/SuperServer.cpp	/^bool SuperService::getServerInfo()$/;"	f	class:SuperService
getServerType	base/x_subnetservice.h	/^	const uint16_t getServerType() const { return wdServerType; }$/;"	f	class:x_subnetservice
getSilverBox	SceneServer/libscenesserver/giftBox.h	/^	const giftBox& getSilverBox()$/;"	f	class:globalBox
getSingleton	base/singleton.h	/^	static T& getSingleton(){$/;"	f	class:Singleton
getSingletonPtr	base/singleton.h	/^	static T* getSingletonPtr(){$/;"	f	class:Singleton
getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosNpc
getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetAllRemovePosUser
getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestUserAndSend
getSize	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::Team
getSize	SceneServer/libscenesserver/TeamManager.cpp	/^int TeamManager::getSize()$/;"	f	class:TeamManager
getSize	base/src/x_tcptaskpool.cpp	/^const int x_tcptaskpool::getSize() const$/;"	f	class:x_tcptaskpool
getSkillByTempID	SceneServer/libscenesserver/SkillManager.cpp	/^zSkill *UserSkillM::getSkillByTempID(DWORD id)$/;"	f	class:UserSkillM
getSlow	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getSlowdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getStable	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getStabledef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getStar	SessionServer/libsessionserver/CountryManager.cpp	/^DWORD CCountry::getStar()$/;"	f	class:CCountry
getState	SceneServer/libscenesserver/Dice.cpp	/^Dice::DiceState Dice::getState()$/;"	f	class:Dice
getState	SessionServer/libsessionserver/SessionServer.h	/^    DWORD   getState()$/;"	f	class:CVote
getState	SessionServer/libsessionserver/SessionServer.h	/^    virtual BYTE getState()$/;"	f	class:CQuiz
getState	base/include/srvEngine.h	/^	const ConnState getState() const$/;"	f	class:x_tcp_clientTask
getState	base/include/srvEngine.h	/^	inline const SceneEntryState & getState() const$/;"	f	struct:zSceneEntry
getState	base/src/x_tcptask.h	/^	const zTCPTask_State getState() const$/;"	f	class:x_tcptask
getState	base/src/x_tcptaskpool.h	/^	const int getState() const$/;"	f	class:x_tcptaskpool
getState	tmp/MiniServer/MiniGame.cpp	/^Cmd::MiniGameState MiniGame::getState()$/;"	f	class:MiniGame
getStateString	base/include/srvEngine.h	/^	const char *getStateString(const ConnState state)$/;"	f	class:x_tcp_clientTask
getStateString	base/src/x_tcptask.h	/^	const char *getStateString(const zTCPTask_State state) const$/;"	f	class:x_tcptask
getSummonAppendDamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
getTask	SessionServer/libsessionserver/SessionServer.h	/^    SessionTask *  getTask() const$/;"	f	class:Session
getTaskByID	BillServer/BillTaskManager.cpp	/^shared_ptr<BillTask> BillTaskManager::getTaskByID(const uint32_t dwServerID) {$/;"	f	class:BillTaskManager
getTaskByID	BillServer/old_back/BillTaskManager.cpp	/^BillTask *BillTaskManager::getTaskByID(const WORD wdServerID)$/;"	f	class:BillTaskManager
getTaskByID	tmp/MiniServer/MiniTaskManager.cpp	/^MiniTask *MiniTaskManager::getTaskByID(const WORD wdServerID)$/;"	f	class:MiniTaskManager
getTax	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getTeacher	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember * CSchoolMember::getTeacher()$/;"	f	class:CSchoolMember
getTeam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
getTeamID	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::getTeamID(DWORD &tempid)$/;"	f	class:SceneManager
getTeamLeader	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
getTeamMember	SceneServer/libscenesserver/Team.cpp	/^const TeamMember *Team::getTeamMember(DWORD index) const $/;"	f	class:Team
getTeamMember	SceneServer/libscenesserver/Team.cpp	/^const TeamMember *Team::getTeamMember(const char * name) const$/;"	f	class:Team
getTeamSize	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
getTeamtempId	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
getTech	SceneServer/libscenesserver/CountryTech.cpp	/^CTech* CountryTech::getTech(DWORD dwType)$/;"	f	class:CountryTech
getTech	SessionServer/libsessionserver/CountryManager.cpp	/^CTech* CCountry::getTech(DWORD dwType)$/;"	f	class:CCountry
getTempID	FLServer/LoginTask.h	/^		DWORD getTempID() const { return tempid; }$/;"	f	class:LoginTask
getTempID	SuperServer/FLClient.h	/^    const WORD getTempID() const$/;"	f	class:FLClient
getTempID	SuperServer/InfoClient.h	/^    const DWORD getTempID() const$/;"	f	class:InfoClient
getTheOtherTempID	SceneServer/libscenesserver/Dice.cpp	/^DWORD Dice::getTheOtherTempID(DWORD id)$/;"	f	class:Dice
getTile	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getTimeString	base/src/zMisc.cpp	/^char *getTimeString(time_t t,char *buffer,const int bufferlen)$/;"	f
getTimeString	base/src/zMisc.cpp	/^char *getTimeString(time_t t,char *buffer,const int bufferlen,const char *format)$/;"	f
getTopMaster	SceneServer/libscenesserver/ScenePet.cpp	/^SceneEntryPk * ScenePet::getTopMaster()$/;"	f	class:ScenePet
getTopMaster	SceneServer/libscenesserver/SceneServer1.h	/^  virtual SceneEntryPk *getTopMaster(){return this;}$/;"	f	class:SceneNpc
getType	BillServer/BillTask.h	/^    const WORD getType() const { return wdServerType; }$/;"	f	class:BillTask
getType	BillServer/old_back/BillServer.h	/^    const WORD getType() const$/;"	f	class:BillTask
getType	FLServer/FLServer.h	/^	const WORD getType() const { return wdServerType; }$/;"	f	class:FLService
getType	RecordServer/RecordTask.h	/^    const WORD getType() const { return wdServerType; }$/;"	f	class:RecordTask
getType	SceneServer/SceneTask.h	/^    const WORD getType() const { return wdServerType; }$/;"	f	class:SceneTask
getType	SceneServer/libscenesserver/SceneServer1.h	/^    const WORD getType() const$/;"	f	class:SceneTask
getType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneTask
getType	SessionServer/SessionTask.h	/^    const WORD getType() const { return wdServerType; }$/;"	f	class:SessionTask
getType	SessionServer/libsessionserver/SessionServer.h	/^    DWORD   getType()$/;"	f	class:CVote
getType	SessionServer/libsessionserver/SessionServer.h	/^    const WORD getType() const$/;"	f	class:SessionTask
getType	SessionServer/libsessionserver/SessionServer.h	/^    virtual BYTE getType()$/;"	f	class:CQuiz
getType	SuperServer/ServerTask.h	/^		const WORD getType() const {$/;"	f	class:ServerTask
getType	SuperServer/SuperServer.h	/^	const WORD getType() const { return se_.wdServerType; }$/;"	f	class:SuperService
getType	base/include/srvEngine.h	/^	inline const SceneEntryType & getType() const$/;"	f	struct:zSceneEntry
getType	tmp/MiniServer/MiniServer.h	/^    const WORD getType() const$/;"	f	class:MiniTask
getUnionByID	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
getUnionByName	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
getUnionDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getUniqeID	BillServer/BillUserManager.cpp	/^bool BillUserManager::getUniqeID(DWORD &tempid)$/;"	f	class:BillUserManager
getUniqeID	GatewayServer/old_back/GateUserManager.cpp	/^bool GateUserManager::getUniqeID(DWORD &tempid)$/;"	f	class:GateUserManager
getUniqeID	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::getUniqeID(DWORD &tempid)$/;"	f	class:SceneManager
getUniqeID	SceneServer/libscenesserver/SceneServer1.h	/^    bool getUniqeID(DWORD &tempid) { return true; }       $/;"	f	class:SceneNpcManager
getUniqeID	SceneServer/libscenesserver/SceneUserManager.cpp	/^bool SceneUserManager::getUniqeID(DWORD& tempid)$/;"	f	class:SceneUserManager
getUniqeID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneNpcManager
getUniqeID	SceneServer/libscenesserver/SkillManager.cpp	/^bool SkillManager::getUniqeID(DWORD &tempid)$/;"	f	class:SkillManager
getUniqeID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
getUniqeID	SessionServer/libsessionserver/Gem.cpp	/^bool CGemM::getUniqeID(DWORD &tempid)$/;"	f	class:CGemM
getUniqeID	SessionServer/libsessionserver/Quiz.cpp	/^bool CQuizM::getUniqeID(DWORD &tempid)$/;"	f	class:CQuizM
getUniqeID	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannelManager::getUniqeID(DWORD &tempid)$/;"	f	class:SessionChannelManager
getUniqeID	SessionServer/libsessionserver/SessionManager.cpp	/^bool SceneSessionManager::getUniqeID(DWORD &tempid)$/;"	f	class:SceneSessionManager
getUniqeID	SessionServer/libsessionserver/SessionManager.cpp	/^bool UserSessionManager::getUniqeID(DWORD &tempid)$/;"	f	class:UserSessionManager
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:ColorObjectBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:CountryMaterial
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:ExperienceBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:FiveSetBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:HairColour
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:HairStyle
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:HeadList
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:HolyObjectBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:HonorBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:LiveSkillBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:NpcBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:ObjectBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:PetBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:SetObjectBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:SkillBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:SoulStoneBase
getUniqueID	base/include/srvEngine.h	/^	const uint32_t getUniqueID() const$/;"	f	struct:UpgradeObjectBase
getUser	SessionServer/libsessionserver/SchoolManager.cpp	/^UserSession *CSchoolMember::getUser()$/;"	f	class:CSchoolMember
getUserByAccID	GatewayServer/old_back/GateUserManager.cpp	/^GateUser * GateUserManager::getUserByAccID(DWORD accid)$/;"	f	class:GateUserManager
getUserByAccid	RecordServer/RecordUserManager.cpp	/^RecordUserPtr RecordUserM::getUserByAccid(const uint32_t accid, const uint32_t charid, const uint32_t dwServerID){$/;"	f	class:RecordUserM
getUserByID	BillServer/BillUserManager.h	/^    BillUser * getUserByID( DWORD id)$/;"	f	class:BillUserManager
getUserByID	BillServer/old_back/BillServer.h	/^    BillUser * getUserByID( DWORD id)$/;"	f	class:BillUserManager
getUserByID	SceneServer/libscenesserver/Scene.cpp	/^SceneUser *Scene::getUserByID(DWORD userid)$/;"	f	class:Scene
getUserByID	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUser * SceneUserManager::getUserByID( DWORD id)$/;"	f	class:SceneUserManager
getUserByID	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUser* SceneRecycleUserManager::getUserByID(DWORD id)$/;"	f	class:SceneRecycleUserManager
getUserByID	SessionServer/libsessionserver/SessionManager.cpp	/^UserSession *UserSessionManager::getUserByID(DWORD id)$/;"	f	class:UserSessionManager
getUserByID	base/include/srvEngine.h	/^	zUser * getUserByID( uint32_t id)$/;"	f	class:zUserManager
getUserByID	tmp/MiniServer/MiniServer.h	/^    MiniUser * getUserByID( DWORD id)$/;"	f	class:MiniUserManager
getUserByIDOut	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUser * SceneUserManager::getUserByIDOut( DWORD id)$/;"	f	class:SceneUserManager
getUserByName	SceneServer/libscenesserver/Scene.cpp	/^SceneUser *Scene::getUserByName(const char *username)$/;"	f	class:Scene
getUserByName	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUser * SceneUserManager::getUserByName( const char * name)$/;"	f	class:SceneUserManager
getUserByName	base/include/srvEngine.h	/^	zUser * getUserByName( const char * name)$/;"	f	class:zUserManager
getUserByNameOut	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUser * SceneUserManager::getUserByNameOut( const char * name)$/;"	f	class:SceneUserManager
getUserByTempID	SceneServer/libscenesserver/Scene.cpp	/^SceneUser *Scene::getUserByTempID(DWORD usertempid)$/;"	f	class:Scene
getUserByTempID	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUser * SceneUserManager::getUserByTempID( DWORD tempid)$/;"	f	class:SceneUserManager
getUserByTempID	SessionServer/libsessionserver/SessionManager.cpp	/^UserSession *UserSessionManager::getUserByTempID(DWORD tempid)$/;"	f	class:UserSessionManager
getUserByTempID	base/include/srvEngine.h	/^	zUser * getUserByTempID( uint32_t tempid)$/;"	f	class:zUserManager
getUserByTempIDOut	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUser * SceneUserManager::getUserByTempIDOut( DWORD tempid)$/;"	f	class:SceneUserManager
getUserForWrite	RecordServer/RecordUserManager.cpp	/^RecordUserPtr RecordUserM::getUserForWrite(const uint32_t accid, const uint32_t dwServerID){$/;"	f	class:RecordUserM
getUserPrenticeInfo	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::getUserPrenticeInfo(const char *master,char *schoolName)$/;"	f	class:CSchoolM
getUserSessionByName	SessionServer/libsessionserver/SessionManager.cpp	/^UserSession * UserSessionManager::getUserSessionByName( const char * name)$/;"	f	class:UserSessionManager
getVM	SceneServer/libscenesserver/script.cpp	/^LuaVM* ScriptingSystemLua::getVM(int index)$/;"	f	class:ScriptingSystemLua
getVipTime	BillServer/old_back/BillManager.cpp	/^DWORD BillManager::getVipTime(DWORD acc)$/;"	f	class:BillManager
getWDay	base/include/zTime.h	/^	int getWDay()$/;"	f	class:zTime
getWayPoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
getWayPoint	SceneServer/libscenesserver/WayPoint.cpp	/^WayPoint *WayPointM::getWayPoint(const char *filename)$/;"	f	class:WayPointM
getWayPoint	SceneServer/libscenesserver/WayPoint.cpp	/^WayPoint *WayPointM::getWayPoint(const zPos &pos)$/;"	f	class:WayPointM
getWgLog	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
getYear	base/include/zTime.h	/^	int getYear()$/;"	f	class:zTime
getZoneID	FLServer/ServerTask.h	/^	const GameZone_t &getZoneID() const { return gameZone; }$/;"	f	class:ServerTask
getZoneID	SuperServer/SuperServer.h	/^	const GameZone_t &getZoneID() const { return gameZone; }$/;"	f	class:SuperService
getZoneName	SuperServer/SuperServer.h	/^	const std::string &getZoneName() const { return zoneName; }$/;"	f	class:SuperService
getZoneType	SceneServer/libscenesserver/Scene.cpp	/^int Scene::getZoneType(const zPos &pos) const$/;"	f	class:Scene
get_Freedom_con	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_Freedom_dex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_Freedom_inte	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_Freedom_spi	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_Freedom_str	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_country	SessionServer/libsessionserver/NpcDare.cpp	/^DWORD CNpcDareObj::get_country()$/;"	f	class:CNpcDareObj
get_creator	SceneServer/libscenesserver/SceneServer1.h	/^  C* get_creator(const I& id) const$/;"	f	class:ProductFactory
get_dareseptid	SessionServer/libsessionserver/NpcDare.cpp	/^DWORD CNpcDareObj::get_dareseptid()$/;"	f	class:CNpcDareObj
get_empty_hole	SceneServer/libscenesserver/RebuildObject.cpp	/^int Hole::get_empty_hole(zObject* ob)$/;"	f	class:Hole
get_familyvar	SceneServer/libscenesserver/script_func.cpp	/^Vars * get_familyvar(SceneUser* user,int dummy)$/;"	f
get_gem_atk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_con	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_def	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_dex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_dhpp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_dmpp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_inte	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_mdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_mtk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_spi	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gem_str	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_gold	SessionServer/libsessionserver/NpcDare.cpp	/^DWORD CNpcDareObj::get_gold()$/;"	f	class:CNpcDareObj
get_heigh	base/include/csCommon.h	/^/;"	m	struct:CharTest
get_height	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::MultiPack
get_holdseptid	SessionServer/libsessionserver/NpcDare.cpp	/^DWORD CNpcDareObj::get_holdseptid()$/;"	f	class:CNpcDareObj
get_hole_num	SceneServer/libscenesserver/RebuildObject.cpp	/^int Hole::get_hole_num(zObject* ob)$/;"	f	class:Hole
get_hpleech_effect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_hpleech_odds	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_instance	SceneServer/libscenesserver/script.cpp	/^ScriptQuest& ScriptQuest::get_instance()$/;"	f	class:ScriptQuest
get_io_service	base/include/tcp_task_new.h	/^	io_service & get_io_service(){ return ios_; }$/;"	f	class:tcp_task
get_io_service	base/io_service_pool.cpp	/^boost::asio::io_service& io_service_pool::get_io_service()$/;"	f	class:io_service_pool
get_io_service	base/tcp_task.h	/^	io_service & get_io_service(){ return ios_; }$/;"	f	class:tcp_task
get_io_service	client/NetworkManager.h	/^	asio::io_service& get_io_service()$/;"	f	class:NetworkManager
get_io_service	tmp/base3/io_service_pool.cpp	/^boost::asio::io_service& io_service_pool::get_io_service()$/;"	f	class:http::server2::io_service_pool
get_kind_bonus	SceneServer/libscenesserver/Trade.cpp	/^float get_kind_bonus(BYTE kind)$/;"	f
get_mapid	SessionServer/libsessionserver/NpcDare.cpp	/^DWORD CNpcDareObj::get_mapid()$/;"	f	class:CNpcDareObj
get_material	base/include/csCommon.h	/^/;"	m	struct:CharTest
get_menu	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::get_menu(char* menu,int& status)$/;"	f	class:QuestList
get_money	base/include/csCommon.h	/^/;"	m	struct:CharTest
get_mpleech_effect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_mpleech_odds	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
get_name	base/task_state.h	/^	const char* get_name() const { return "closed";}$/;"	f	class:state_closed
get_name	base/task_state.h	/^	const char* get_name() const { return "no_wait_sync";}$/;"	f	class:state_no_wait_sync
get_name	base/task_state.h	/^	const char* get_name() const { return "okay";}$/;"	f	class:state_okay
get_name	base/task_state.h	/^	const char* get_name() const { return "verify";}$/;"	f	class:state_verify
get_name	base/task_state.h	/^	const char* get_name() const { return "wait";}$/;"	f	class:state_wait
get_name	base/task_state.h	/^	const char* get_name() const { return "wait_sync";}$/;"	f	class:state_wait_sync
get_next_state	base/include/tcp_state.h	/^	virtual void get_next_state(){$/;"	f	class:state_verify
get_next_state	base/include/tcp_state.h	/^	virtual void get_next_state(){$/;"	f	class:state_wait_sync
get_npcid	SessionServer/libsessionserver/NpcDare.cpp	/^DWORD CNpcDareObj::get_npcid()$/;"	f	class:CNpcDareObj
get_ob	SceneServer/libscenesserver/script_func.cpp	/^DWORD get_ob(SceneUser* user,int id,int level )$/;"	f
get_posx	SessionServer/libsessionserver/NpcDare.cpp	/^DWORD CNpcDareObj::get_posx()$/;"	f	class:CNpcDareObj
get_posy	SessionServer/libsessionserver/NpcDare.cpp	/^DWORD CNpcDareObj::get_posy()$/;"	f	class:CNpcDareObj
get_prop_num	SceneServer/libscenesserver/Trade.cpp	/^WORD get_prop_num(zObject* ob)$/;"	f
get_recordset	SuperServer/SuperServer.cpp	/^void SuperService::get_recordset(const uint32_t type, const std::string& ip,std::vector<const Cmd::Super::ServerEntry*>& ses) const$/;"	f	class:SuperService
get_recordset_by_type	SuperServer/SuperServer.cpp	/^void SuperService::get_recordset_by_type(const uint32_t type, std::vector<const Cmd::Super::ServerEntry*>& ses) const$/;"	f	class:SuperService
get_remote_ip	base/tcp_task.cpp	/^const std::string tcp_task::get_remote_ip() const $/;"	f	class:tcp_task
get_repair_dur_rate	SceneServer/libscenesserver/Trade.cpp	/^float get_repair_dur_rate(zObject* ob)$/;"	f
get_repair_price	SceneServer/libscenesserver/Trade.cpp	/^DWORD get_repair_price(zObject* ob)$/;"	f
get_scroll	base/include/csCommon.h	/^/;"	m	struct:CharTest
get_sell_dur_rate	SceneServer/libscenesserver/Trade.cpp	/^float get_sell_dur_rate(zObject* ob)$/;"	f
get_sell_price	SceneServer/libscenesserver/Trade.cpp	/^float get_sell_price(zObject* ob)$/;"	f
get_sell_price_by_dur	SceneServer/libscenesserver/Trade.cpp	/^DWORD get_sell_price_by_dur(zObject* ob)$/;"	f
get_socket	base/include/csCommon.h	/^/;"	m	struct:CharTest
get_socket	base/include/tcp_task_new.h	/^	ip::tcp::socket & get_socket(){ return socket_; }$/;"	f	class:tcp_task
get_socket	base/tcp_task.h	/^	ip::tcp::socket & get_socket(){ return sock_; }$/;"	f	class:tcp_task
get_state_name	base/tcp_task.cpp	/^const std::string tcp_task::get_state_name() const { $/;"	f	class:tcp_task
get_stone	base/include/csCommon.h	/^/;"	m	struct:CharTest
get_time	SceneServer/libscenesserver/script_func.cpp	/^int get_time()$/;"	f
get_tongvar	SceneServer/libscenesserver/script_func.cpp	/^Vars * get_tongvar(SceneUser* user,int dummy)$/;"	f
get_uservar	SceneServer/libscenesserver/script_func.cpp	/^Vars * get_uservar(SceneUser* user,int dummy)$/;"	f
get_valid_quest	SceneServer/libscenesserver/QuestEvent.cpp	/^void EventManager<OnVisit>::get_valid_quest(SceneUser& user,bool showID)$/;"	f	class:EventManager
get_valid_quest_str	SceneServer/libscenesserver/QuestEvent.cpp	/^void EventManager<OnVisit>::get_valid_quest_str(SceneUser &user)$/;"	f	class:EventManager
get_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars
get_var	SceneServer/libscenesserver/script_func.cpp	/^int get_var(Vars* vars,const char* name)$/;"	f
get_varS	SceneServer/libscenesserver/script_func.cpp	/^const char *  get_varS(Vars* vars,const char* name)$/;"	f
get_width	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::MultiPack
getopt	base/src/getopt.c	/^int getopt(int argc,char *const *argv,const char *optstring)$/;"	f
getopt_data	base/src/getopt.c	/^static struct _getopt_data getopt_data;$/;"	v	typeref:struct:_getopt_data	file:
getopt_long	base/src/getopt.c	/^getopt_long (int argc, char *const *argv, const char *options,$/;"	f
getopt_long_only	base/src/getopt.c	/^getopt_long_only (int argc, char *const *argv, const char *options,$/;"	f
ghost_getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
ghost_getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
ghost_getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
ghost_getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
ghost_outofbound	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
ghost_outofbound	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
giddy	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD giddy;   \/\/\/π•ª˜µƒ ±∫Ú π∂‘∑Ω—£‘Œµƒº∏¬ $/;"	m	class:SceneNpc
giddy	base/include/csCommon.h	/^/;"	m	struct:_Object
giddy_def	base/include/csCommon.h	/^/;"	m	struct:_Object
giftBox	SceneServer/libscenesserver/giftBox.h	/^struct giftBox$/;"	s
giftInfo	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
giftList	SessionServer/libsessionserver/Gift.cpp	/^std::multimap<DWORD,Cmd::Session::giftInfo> Gift::giftList;$/;"	m	class:Gift	file:
giftList	SessionServer/libsessionserver/SessionServer.h	/^    static std::multimap<DWORD,Cmd::Session::giftInfo> giftList;$/;"	m	class:Gift
gift_define	SessionServer/libsessionserver/Gift.cpp	/^const dbCol gift_define[] = {$/;"	v
givePetPoint	SceneServer/libscenesserver/ScenePk.cpp	/^void SceneUser::givePetPoint()$/;"	f	class:SceneUser
givepenalty	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::givepenalty()$/;"	f	class:GangScene
giveupstatus	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
giveuptime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
global	base/common.cpp	/^	x_properties global;$/;"	m	namespace:Seal	file:
globalBox	SceneServer/libscenesserver/giftBox.h	/^	globalBox(){};$/;"	f	class:globalBox
globalBox	SceneServer/libscenesserver/giftBox.h	/^class globalBox : public SingletonBase<globalBox>$/;"	c
globalSys	SceneServer/libscenesserver/script_func.cpp	/^void globalSys(SceneUser* sender,const char* msg)$/;"	f
glodenBox	SceneServer/libscenesserver/giftBox.h	/^	struct giftBox glodenBox;$/;"	m	class:globalBox	typeref:struct:globalBox::giftBox
glodenBoxCircle	SceneServer/libscenesserver/boxCircle.h	/^	unsigned short glodenBoxCircle[100];\/\/Ω±¶∫–◊™≈Ã$/;"	m	class:boxCircle
gm	SessionServer/libsessionserver/SessionServer.h	/^  char gm[MAX_NAMESIZE+1];$/;"	m	struct:forbidInfo
gm	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forbidTalk_SceneSession
gm_cmd	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
gm_mode	SceneServer/libscenesserver/SceneServer1.h	/^      gm_mode =    0x02,$/;"	e	enum:Gm::__anon100
gm_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Gm::__anon90
gmlogger	SceneServer/libscenesserver/ScenesServer.cpp	/^zLogger * ScenesService::gmlogger = NULL;$/;"	m	class:ScenesService	file:
gmlogger	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
goTo	SceneServer/libscenesserver/script_func.cpp	/^bool goTo(SceneUser *pUser,const char *para)$/;"	f
goTo	base/include/srvEngine.h	/^inline bool zAStar<step,radius>::goTo(const zPos &srcPos,const zPos &destPos)$/;"	f	class:zAStar
goToRandomScreen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
goi	SceneServer/libscenesserver/ObjectManager.cpp	/^GlobalObjectIndex *const goi=GlobalObjectIndex::getInstance();$/;"	v
gold	BillServer/BillUser.h	/^    DWORD gold;    \/**< Ω±“ ˝¡ø *\/$/;"	m	class:BillUser
gold	BillServer/old_back/BillServer.h	/^    DWORD gold;    \/**< Ω±“ ˝¡ø *\/$/;"	m	class:BillUser
gold	BillServer/old_back/BillServer.h	/^  double gold;    \/**< Ω±“ ˝¡ø *\/$/;"	m	struct:BillInfo
gold	SceneServer/libscenesserver/GuardNpc.cpp	/^int GuardNpc::gold() const$/;"	f	class:GuardNpc
gold	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::gold(int money)$/;"	f	class:GuardNpc
gold	SceneServer/libscenesserver/RebuildObject.cpp	/^int Decompose::gold() const$/;"	f	class:Decompose
gold	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::MainPack
gold	base/include/csCommon.h	/^/;"	m	struct:CharBase
gold	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_SpendGold_SceneSession
gold	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
gold	base/include/srvEngine.h	/^		uint16_t gold;$/;"	m	struct:zObjectB::material
gold	base/include/srvEngine.h	/^	uint16_t gold;    \/\/ ÈúÄË¶ÅÈì∂Â≠ê$/;"	m	struct:zUpgradeObjectB
golden	SceneServer/libscenesserver/giftBox.h	/^	golden = 0, \/\/Ωœ‰$/;"	e	enum:boxType
goldgive	base/include/csCommon.h	/^/;"	m	struct:CharBase
goldlistNum	BillServer/BillUser.h	/^    DWORD goldlistNum;  \/\/\/ ∏ˆ»Àπ…∆±¬Ùµ• ˝¡ø$/;"	m	class:BillUser
goldlistNum	BillServer/old_back/BillServer.h	/^    DWORD goldlistNum;  \/\/\/ ∏ˆ»Àπ…∆±¬Ùµ• ˝¡ø$/;"	m	class:BillUser
goldobjectbm	base/src/zDatabaseManager.cpp	/^zDataBM<zGoldObjectB,GoldObjectBase> &goldobjectbm=zDataBM<zGoldObjectB,GoldObjectBase>::getMe();$/;"	v
golds	base/include/srvEngine.h	/^	std::vector<uint16_t> golds;  \/\/ ÈáëËâ≤ÂìÅË¥®$/;"	m	struct:zColorObjectB
goldstore	SceneServer/libscenesserver/zObject.cpp	/^void StorePack::goldstore(SceneUser *pThis,bool notify)$/;"	f	class:StorePack
gomap	SceneServer/libscenesserver/script_func.cpp	/^bool gomap(SceneUser *pUser,const char *para)$/;"	f
gomaptype	base/include/csCommon.h	/^/;"	m	struct:CharBase
goodness	base/include/csCommon.h	/^/;"	m	struct:CharBase
goodness	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
goodnessPeriod	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
gotoFindPath	base/include/srvEngine.h	/^bool zAStar<step,radius>::gotoFindPath(const zPos &srcPos,const zPos &destPos)$/;"	f	class:zAStar
grade1	SessionServer/libsessionserver/SessionServer.h	/^    DWORD grade1;           \/\/ ∂‘’ΩÕ≈ÃÂ1µƒÀ˘µ√∑÷ ˝$/;"	m	class:CDare
grade2	SessionServer/libsessionserver/SessionServer.h	/^    DWORD grade2;    \/\/ ∂‘’ΩÕ≈ÃÂ2µƒÀ˘µ√∑÷ ˝$/;"	m	class:CDare
grid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::MultiPack
group	SceneServer/libscenesserver/Scene.cpp	/^  DWORD group;$/;"	m	struct:GetAffectScreen	file:
group	SceneServer/libscenesserver/TimeTick.cpp	/^  const DWORD group;$/;"	m	struct:EverySceneEntryAction	file:
group	SessionServer/libsessionserver/SessionServer.h	/^    DWORD group;$/;"	m	class:CartoonPetService
group	base/include/argp.h	/^  int group;$/;"	m	struct:argp_child
group	base/include/argp.h	/^  int group;$/;"	m	struct:argp_option
group	base/src/getopt.c	/^  int group;$/;"	m	struct:hol_cluster	file:
group	base/src/getopt.c	/^  int group;$/;"	m	struct:hol_entry	file:
group	base/src/getopt.c	/^struct group$/;"	s	file:
group_cmp	base/src/getopt.c	/^group_cmp (int group1, int group2, int eq)$/;"	f	file:
group_parse	base/src/getopt.c	/^group_parse (struct group *group, struct argp_state *state, int key, char *arg)$/;"	f	file:
groups	base/src/getopt.c	/^  struct group *groups;$/;"	m	struct:parser	typeref:struct:parser::group	file:
gsubjects	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CSubject> gsubjects;$/;"	m	class:CSubjectM
guard	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
gum	GatewayServer/old_back/GatewayServer.h	/^	static GateUserManager *gum;$/;"	m	class:GateUserManager
gumutime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD gumutime;$/;"	m	class:SessionService
gyData	FLServer/GYListManager.h	/^	GYListContainer gyData;$/;"	m	class:GYListManager
hInstance	base/include/srvEngine.h	/^		HINSTANCE          hInstance;$/;"	m	struct:__anon142
hadfilled	BillServer/old_back/BillServer.h	/^  int             hadfilled;                                  \/\/‘¯æ≠≥‰÷µµƒ±Í÷æ,1=‘¯æ≠≥‰÷µ,0=√ª”–$/;"	m	struct:BillData
hair	base/include/csCommon.h	/^/;"	m	struct:CharBase
haircolourbm	base/src/zDatabaseManager.cpp	/^zDataBM<zHairColourB,HairColour> &haircolourbm = zDataBM<zHairColourB,HairColour>::getMe();$/;"	v
hairstylebm	base/src/zDatabaseManager.cpp	/^zDataBM<zHairStyleB,HairStyle> &hairstylebm = zDataBM<zHairStyleB,HairStyle>::getMe();$/;"	v
halt	base/include/csCommon.h	/^/;"	m	struct:_Object
halt_def	base/include/csCommon.h	/^/;"	m	struct:_Object
handleHup	FLServer/FLServer.cpp	/^void FLService::handleHup()$/;"	f	class:FLService
handleHup	SuperServer/SuperServer.cpp	/^void SuperService::handleHup()$/;"	f	class:SuperService
handleHup	base/x_service.h	/^	virtual void handleHup() {}$/;"	f	class:x_service
handleInterrupt	base/x_service.h	/^	virtual void handleInterrupt() { Terminate();}$/;"	f	class:x_service
handle_accept	base/server.cpp	/^void server::handle_accept(shared_ptr<tcp_task> new_task, const boost::system::error_code& e) {$/;"	f	class:server
handle_accept	tmp/base3/server.cpp	/^void server::handle_accept(const boost::system::error_code& e)$/;"	f	class:server
handle_accept	tmp/base3/x_tcp_server.cpp	/^		void handle_accept(chat_session_ptr session,$/;"	f	class:chat_server
handle_accept	tmp/base3/x_tcp_server.h	/^		void handle_accept(chat_session_ptr session,$/;"	f	class:x_tcp_server
handle_error	base/task_state.cpp	/^void state_okay::handle_error(const boost::system::error_code& error)$/;"	f	class:state_okay
handle_error	base/task_state.cpp	/^void state_verify::handle_error(const boost::system::error_code& error)$/;"	f	class:state_verify
handle_error	base/task_state.cpp	/^void state_wait::handle_error(const boost::system::error_code& error)$/;"	f	class:state_wait
handle_error	base/task_state.cpp	/^void state_wait_sync::handle_error(const boost::system::error_code& error)$/;"	f	class:state_wait_sync
handle_error	base/task_state.h	/^	virtual void handle_error(const boost::system::error_code& error){}$/;"	f	class:task_state
handle_error	base/tcp_task.cpp	/^void tcp_task::handle_error(const boost::system::error_code& error) {$/;"	f	class:tcp_task
handle_msg	BillServer/BillTask.cpp	/^void BillTask::handle_msg(const void* ptr, const uint32_t len){$/;"	f	class:BillTask
handle_msg	FLServer/LoginTask.cpp	/^void LoginTask::handle_msg(const void* ptr, const uint32_t len) {$/;"	f	class:LoginTask
handle_msg	FLServer/ServerTask.cpp	/^void ServerTask::handle_msg(const void* ptr, const uint32_t len) {$/;"	f	class:ServerTask
handle_msg	GatewayServer/GatewayTask.cpp	/^void GatewayTask::handle_msg(const void* ptr, const uint32_t len){$/;"	f	class:GatewayTask
handle_msg	RecordServer/RecordTask.cpp	/^void RecordTask::handle_msg(const void* ptr, const uint32_t len){$/;"	f	class:RecordTask
handle_msg	SceneServer/SceneTask.cpp	/^void SceneTask::handle_msg(const void* ptr, const uint32_t len){$/;"	f	class:SceneTask
handle_msg	SessionServer/SessionTask.cpp	/^void SessionTask::handle_msg(const void* ptr, const uint32_t len){$/;"	f	class:SessionTask
handle_msg	SuperServer/ServerTask.cpp	/^void ServerTask::handle_msg(const void* ptr, const uint32_t len) {$/;"	f	class:ServerTask
handle_msg	base/task_state.cpp	/^void state_okay::handle_msg(const void* ptr, const uint32_t len)$/;"	f	class:state_okay
handle_msg	base/task_state.cpp	/^void state_verify::handle_msg(const void* ptr, const uint32_t len)$/;"	f	class:state_verify
handle_msg	base/task_state.cpp	/^void state_wait_sync::handle_msg(const void* ptr, const uint32_t len)$/;"	f	class:state_wait_sync
handle_msg	base/task_state.h	/^	virtual void handle_msg(const void* ptr, const uint32_t len){}$/;"	f	class:task_state
handle_new_task_t	base/server.h	/^		typedef boost::function<tcp_task_ptr (io_service&)> handle_new_task_t;$/;"	t	class:server
handle_read	tmp/base3/connection.cpp	/^void connection::handle_read(const boost::system::error_code& e,$/;"	f	class:http::server2::connection
handle_read_body	base/src/tcp_socket.h	/^	void handle_read_body(const boost::system::error_code& error) {$/;"	f	class:tcp_socket
handle_read_body	base/tcp_client.h	/^	void handle_read_body(const boost::system::error_code& error,std::size_t bytes_transferred) {$/;"	f	class:tcp_client
handle_read_body	base/tcp_task.cpp	/^void tcp_task::handle_read_body(const boost::system::error_code& error, std::size_t bytes_transferred) {$/;"	f	class:tcp_task
handle_read_header	base/src/tcp_socket.h	/^	void handle_read_header(const boost::system::error_code& error) {$/;"	f	class:tcp_socket
handle_read_header	base/tcp_client.h	/^	void handle_read_header(const boost::system::error_code& error,std::size_t bytes_transferred) {$/;"	f	class:tcp_client
handle_read_header	base/tcp_task.cpp	/^void tcp_task::handle_read_header(const boost::system::error_code& error, std::size_t bytes_transferred) {$/;"	f	class:tcp_task
handle_request	tmp/base3/request_handler.cpp	/^void request_handler::handle_request(const request& req, reply& rep)$/;"	f	class:http::server2::request_handler
handle_stop	tmp/base3/server.cpp	/^void server::handle_stop()$/;"	f	class:server
handle_timeout	base/task_state.cpp	/^void state_okay::handle_timeout(const boost::system::error_code& error)$/;"	f	class:state_okay
handle_timeout	base/task_state.cpp	/^void state_verify::handle_timeout(const boost::system::error_code& error)$/;"	f	class:state_verify
handle_timeout	base/task_state.cpp	/^void state_wait::handle_timeout(const boost::system::error_code& error)$/;"	f	class:state_wait
handle_timeout	base/task_state.cpp	/^void state_wait_sync::handle_timeout(const boost::system::error_code& error)$/;"	f	class:state_wait_sync
handle_timeout	base/task_state.h	/^	virtual void handle_timeout(const boost::system::error_code& error){}$/;"	f	class:task_state
handle_verify	BillServer/BillTask.cpp	/^void BillTask::handle_verify(const void* pstrCmd, const uint32_t len) {$/;"	f	class:BillTask
handle_verify	FLServer/LoginTask.cpp	/^void LoginTask::handle_verify(const void* ptr, const uint32_t len)$/;"	f	class:LoginTask
handle_verify	FLServer/ServerTask.cpp	/^void ServerTask::handle_verify(const void* ptr, const uint32_t len) {$/;"	f	class:ServerTask
handle_verify	GatewayServer/GatewayTask.cpp	/^void GatewayTask::handle_verify(const void* pstrCmd, const uint32_t len) {$/;"	f	class:GatewayTask
handle_verify	RecordServer/RecordTask.cpp	/^void RecordTask::handle_verify(const void* ptr, const uint32_t len) {$/;"	f	class:RecordTask
handle_verify	SceneServer/SceneTask.cpp	/^void SceneTask::handle_verify(const void* pstrCmd, const uint32_t len) {$/;"	f	class:SceneTask
handle_verify	SessionServer/SessionTask.cpp	/^void SessionTask::handle_verify(const void* pstrCmd, const uint32_t len) {$/;"	f	class:SessionTask
handle_verify	SuperServer/ServerTask.cpp	/^void ServerTask::handle_verify(const void* cmd, const uint32_t len) {$/;"	f	class:ServerTask
handle_verify	base/include/tcp_task_new.h	/^	virtual void handle_verify(const void* ptr, const uint32_t len)$/;"	f	class:tcp_task
handle_verify_timeout	base/include/tcp_task_new.h	/^	void handle_verify_timeout(const boost::system::error_code& error)$/;"	f	class:tcp_task
handle_wait_sync	SuperServer/ServerTask.cpp	/^void ServerTask::handle_wait_sync(const void* ptr, const uint32_t len)$/;"	f	class:ServerTask
handle_wait_sync	base/tcp_task.h	/^	virtual void handle_wait_sync(const void* ptr, const uint32_t len){}$/;"	f	class:tcp_task
handle_write	base/src/tcp_socket.h	/^	void handle_write( const boost::system::error_code& error, std::size_t bytes_transferred) {$/;"	f	class:tcp_socket
handle_write	base/tcp_client.h	/^	void handle_write( const boost::system::error_code& error, std::size_t bytes_transferred) {$/;"	f	class:tcp_client
handle_write	base/tcp_task.cpp	/^void tcp_task::handle_write( const boost::system::error_code& error, std::size_t bytes_transferred) {$/;"	f	class:tcp_task
handle_write	tmp/base3/connection.cpp	/^void connection::handle_write(const boost::system::error_code& e)$/;"	f	class:http::server2::connection
has	SceneServer/libscenesserver/script.cpp	/^bool ScriptQuest::has(int type,int id) const$/;"	f	class:ScriptQuest
has	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::has(DWORD id)$/;"	f	class:SessionChannel
hasAssigned	base/include/srvEngine.h	/^	bool hasAssigned(T testid)$/;"	f	class:zUniqueID
hasBegin	SceneServer/libscenesserver/Trade.cpp	/^bool TradeOrder::hasBegin()$/;"	f	class:TradeOrder
hasCommit	SceneServer/libscenesserver/Trade.cpp	/^bool TradeOrder::hasCommit()$/;"	f	class:TradeOrder
hasInScene	base/include/srvEngine.h	/^	inline bool hasInScene() const$/;"	f	struct:zSceneEntry
hasProtected	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePkState::hasProtected()$/;"	f	class:ScenePkState
has_needweapon	base/include/srvEngine.h	/^	bool has_needweapon(const uint16_t weapontype) const$/;"	f	struct:zSkillB
hash	SceneServer/libscenesserver/script.cpp	/^int ScriptQuest::hash(int type,int id) const$/;"	f	class:ScriptQuest
hash_set	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::LiveSkillsManager::Factory
hash_value	base/common.h	/^inline std::size_t hash_value(const GameZone_t& t) {$/;"	f
hashcode	base/include/srvEngine.h	/^	const uint32_t hashcode;$/;"	m	struct:UrlInfo
hashmap	base/include/srvEngine.h	/^	typedef hash_map<keyT,valueT> hashmap;$/;"	t	class:LimitHash
hashmap	base/include/srvEngine.h	/^	typedef hash_multimap<keyT,valueT> hashmap;$/;"	t	class:MultiHash
haveCheckTime	GatewayServer/old_back/GatewayServer.h	/^	volatile bool haveCheckTime;$/;"	m	class:GatewayTask
haveKey_des	base/include/csCommon.h	/^/;"	m	class:CEncrypt
haveKey_rc5	base/include/csCommon.h	/^/;"	m	class:CEncrypt
havePower	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
havePreNode	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::havePreNode()$/;"	f	class:CSchoolMember
haveTeacher	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::haveTeacher()$/;"	f	class:CSchoolMember
have_ob	SceneServer/libscenesserver/script_func.cpp	/^bool have_ob(SceneUser* user,int id,int num,int level,int type)$/;"	f
header	base/include/argp.h	/^  const  char *header;$/;"	m	struct:argp_child
header	base/src/getopt.c	/^  const char *header;$/;"	m	struct:hol_cluster	file:
header	tmp/base3/header.hpp	/^struct header$/;"	s	namespace:http::server2
header_	base/src/tcp_socket.h	/^	char header_[PH_LEN];$/;"	m	class:tcp_socket
header_	base/tcp_client.h	/^	char header_[PH_LEN];$/;"	m	class:tcp_client
header_	base/tcp_task.h	/^	char header_[PH_LEN];$/;"	m	class:tcp_task
header_col	base/src/getopt.c	/^  int header_col;$/;"	m	struct:uparams	file:
header_dir	BillServer/Makefile	/^header_dir = -I..\/base -I.\/ -I..\/deps\/tinyxml -I$(boost_home)$/;"	m
header_dir	FLServer/Makefile	/^header_dir = -I..\/base -I.\/ -I..\/deps\/tinyxml -I$(boost_home)$/;"	m
header_dir	GatewayServer/Makefile	/^header_dir = -I..\/base -I.\/ -I..\/deps\/tinyxml -I$(boost_home)$/;"	m
header_dir	RecordServer/Makefile	/^header_dir = -I..\/base -I.\/ -I..\/deps\/tinyxml -I$(boost_home)$/;"	m
header_dir	SceneServer/Makefile	/^header_dir = -I..\/base -I.\/ -I..\/deps\/tinyxml -I$(boost_home)$/;"	m
header_dir	SessionServer/Makefile	/^header_dir = -I..\/base -I.\/ -I..\/deps\/tinyxml -I$(boost_home)$/;"	m
header_dir	SuperServer/Makefile	/^header_dir = -I..\/base -I.\/ -I..\/deps\/tinyxml -I$(boost_home)$/;"	m
header_dir	client/Makefile	/^header_dir = -I..\/base -I.\/ -I..\/deps\/tinyxml -I$(boost_home)$/;"	m
header_line_start	tmp/base3/request_parser.hpp	/^    header_line_start,$/;"	e	enum:http::server2::request_parser::state
header_lws	tmp/base3/request_parser.hpp	/^    header_lws,$/;"	e	enum:http::server2::request_parser::state
header_name	tmp/base3/request_parser.hpp	/^    header_name,$/;"	e	enum:http::server2::request_parser::state
header_value	tmp/base3/request_parser.hpp	/^    header_value,$/;"	e	enum:http::server2::request_parser::state
headers	tmp/base3/reply.hpp	/^  std::vector<header> headers;$/;"	m	struct:http::server2::reply
headers	tmp/base3/request.hpp	/^  std::vector<header> headers;$/;"	m	struct:http::server2::request
headlistbm	base/src/zDatabaseManager.cpp	/^zDataBM<zHeadListB,HeadList> &headlistbm = zDataBM<zHeadListB,HeadList>::getMe();$/;"	v
healFellow	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::healFellow(SceneEntryPk_vec &fellows)$/;"	f	class:SceneNpc
healSelf	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::healSelf()$/;"	f	class:SceneNpc
height	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
height	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::MultiPack
height	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::ZoneTypeDef
height	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
height	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::stMapFileHeader
height	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zZone
height	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
height	base/include/csCommon.h	/^/;"	m	struct:_Object
height	base/include/srvEngine.h	/^	BYTE height;        \/\/ Ê†ºÂ≠êÈ´ò$/;"	m	struct:zObjectB
helpFellow	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::helpFellow(SceneEntryPk_vec &fellows)$/;"	f	class:SceneNpc
help_filter	base/include/argp.h	/^  char *(*help_filter)(int __key,const  char *__text,void *__input);$/;"	m	struct:argp
hhstate	base/src/getopt.c	/^  struct hol_help_state *hhstate;$/;"	m	struct:pentry_state	typeref:struct:pentry_state::hol_help_state	file:
hide	GatewayServer/old_back/GatewayServer.h	/^	bool hide;$/;"	m	class:GateUser
hideme	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
hireCaptain	SessionServer/libsessionserver/Army.cpp	/^bool CArmy::hireCaptain(DWORD dwUserID)$/;"	f	class:CArmy
historyGold	BillServer/old_back/BillServer.h	/^    HistoryIndex historyGold;$/;"	m	class:ConsignHistoryManager
historyMoney	BillServer/old_back/BillServer.h	/^    HistoryIndex historyMoney;$/;"	m	class:ConsignHistoryManager
hol	base/src/getopt.c	/^struct hol$/;"	s	file:
hol_add_cluster	base/src/getopt.c	/^hol_add_cluster (struct hol *hol, int group, const char *header, int index,$/;"	f	file:
hol_append	base/src/getopt.c	/^hol_append (struct hol *hol, struct hol *more)$/;"	f	file:
hol_cluster	base/src/getopt.c	/^struct hol_cluster$/;"	s	file:
hol_cluster_base	base/src/getopt.c	/^hol_cluster_base (struct hol_cluster *cl)$/;"	f	file:
hol_cluster_cmp	base/src/getopt.c	/^hol_cluster_cmp (const struct hol_cluster *cl1, const struct hol_cluster *cl2)$/;"	f	file:
hol_cluster_is_child	base/src/getopt.c	/^hol_cluster_is_child (const struct hol_cluster *cl1,$/;"	f	file:
hol_entry	base/src/getopt.c	/^struct hol_entry$/;"	s	file:
hol_entry_cmp	base/src/getopt.c	/^hol_entry_cmp (const struct hol_entry *entry1,$/;"	f	file:
hol_entry_first_long	base/src/getopt.c	/^hol_entry_first_long (const struct hol_entry *entry)$/;"	f	file:
hol_entry_first_short	base/src/getopt.c	/^hol_entry_first_short (const struct hol_entry *entry)$/;"	f	file:
hol_entry_help	base/src/getopt.c	/^hol_entry_help (struct hol_entry *entry, const struct argp_state *state,$/;"	f	file:
hol_entry_long_iterate	base/src/getopt.c	/^static int hol_entry_long_iterate (const struct hol_entry *entry,$/;"	f	file:
hol_entry_qcmp	base/src/getopt.c	/^hol_entry_qcmp (const void *entry1_v, const void *entry2_v)$/;"	f	file:
hol_entry_short_iterate	base/src/getopt.c	/^hol_entry_short_iterate (const struct hol_entry *entry,$/;"	f	file:
hol_find_entry	base/src/getopt.c	/^hol_find_entry (struct hol *hol, const char *name)$/;"	f	file:
hol_free	base/src/getopt.c	/^hol_free (struct hol *hol)$/;"	f	file:
hol_help	base/src/getopt.c	/^static void hol_help (struct hol *hol, const struct argp_state *state,$/;"	f	file:
hol_help_state	base/src/getopt.c	/^struct hol_help_state$/;"	s	file:
hol_set_group	base/src/getopt.c	/^hol_set_group (struct hol *hol, const char *name, int group)$/;"	f	file:
hol_sort	base/src/getopt.c	/^hol_sort (struct hol *hol)$/;"	f	file:
hol_usage	base/src/getopt.c	/^static void hol_usage (struct hol *hol, argp_fmtstream_t stream)$/;"	f	file:
holdDragon	SessionServer/libsessionserver/Gem.cpp	/^void    CGem::holdDragon(UserSession* pUser)$/;"	f	class:CGem
holdTiger	SessionServer/libsessionserver/Gem.cpp	/^void    CGem::holdTiger(UserSession* pUser)$/;"	f	class:CGem
hole	SceneServer/libscenesserver/RebuildObject.cpp	/^bool RebuildObject::hole(SceneUser& user,const Cmd::stPropertyUserCmd* cmd)$/;"	f	class:RebuildObject
hole	base/include/srvEngine.h	/^	std::vector<uint32_t> hole;  \/\/Â≠î$/;"	m	struct:zObjectB
holy	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
holy	base/include/csCommon.h	/^/;"	m	struct:_Object
holy	base/include/srvEngine.h	/^	uint16_t  holy;        \/\/ Á•ûÂú£‰∏ÄÂáª$/;"	m	struct:zHolyObjectB
holyobjectbm	base/src/zDatabaseManager.cpp	/^zDataBM<zHolyObjectB,HolyObjectBase> &holyobjectbm=zDataBM<zHolyObjectB,HolyObjectBase>::getMe();$/;"	v
holyrating	base/include/srvEngine.h	/^	uint16_t holyrating;  \/\/Á•ûÂú£Ë£ÖÂ§áÂá†Áéá$/;"	m	struct:zColorObjectB
holyrating	base/include/srvEngine.h	/^	uint32_t holyrating;      \/\/Á•ûÂú£Ê¶ÇÁéá$/;"	m	struct:zObjectB
holys	base/include/srvEngine.h	/^	std::vector<uint32_t> holys;     \/\/Á•ûÂú£Ê†áËØÜ$/;"	m	struct:zObjectB
honor	base/include/csCommon.h	/^/;"	m	struct:CharBase
honor	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
honorbm	base/src/zDatabaseManager.cpp	/^zDataBM<zHonorB,HonorBase> &honorbm = zDataBM<zHonorB,HonorBase>::getMe();$/;"	v
hook	base/include/argp.h	/^  void *hook;$/;"	m	struct:argp_state
hook	base/src/getopt.c	/^  void *hook;$/;"	m	struct:group	file:
horse	SceneServer/libscenesserver/Horse.cpp	/^DWORD Horse::horse() const$/;"	f	class:Horse
horse	SceneServer/libscenesserver/Horse.cpp	/^bool Horse::horse(t_Object & obj)$/;"	f	class:Horse
horse	SceneServer/libscenesserver/Horse.cpp	/^void Horse::horse(DWORD horse_id)$/;"	f	class:Horse
horse	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
horseType	SceneServer/libscenesserver/Horse.cpp	/^DWORD Horse::horseType()$/;"	f	class:Horse
horseType	SceneServer/libscenesserver/Horse.cpp	/^DWORD Horse::horseType(DWORD type)$/;"	f	class:Horse
horseid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
host	base/include/srvEngine.h	/^	char host[MAX_HOSTSIZE];$/;"	m	struct:UrlInfo
host_	tmp/x_cmd_parser.h	/^		shared_ptr<tcp_client> host_;$/;"	m	class:x_cmd_parser
hp	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD hp;$/;"	m	class:SceneNpc
hp	base/include/csCommon.h	/^/;"	m	struct:CharBase
hp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
hp	base/include/srvEngine.h	/^	uint32_t  hp;          \/\/ ÁîüÂëΩÂÄº$/;"	m	struct:zNpcB
hp	base/include/srvEngine.h	/^	uint32_t hp;         \/\/ ÁîüÂëΩÂÄº$/;"	m	struct:zPetB
hp2mp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
hpB	SceneServer/libscenesserver/SceneServer1.h	/^  WORD hpB;$/;"	m	struct:petBonus
hpB	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::petBonus
hp_leechdom	base/include/csCommon.h	/^/;"	m	struct:CharTest
hpcooling	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Leechdom
hpcost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
hpcost	base/include/srvEngine.h	/^	uint32_t  hpcost;              \/\/Ê∂àËÄóÁîüÂëΩÂÄº$/;"	m	struct:zSkillB
hpleech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
hpleech	base/include/csCommon.h	/^/;"	m	struct:_Object
hpleech	base/include/srvEngine.h	/^	} hpleech,mpleech; \/\/\/\/x%Âê∏Êî∂ÁîüÂëΩÂÄºy,x%Âê∏Êî∂Ê≥ïÊúØÂÄºy$/;"	m	struct:zSoulStoneB	typeref:struct:zSoulStoneB::Value
hplock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
hpr	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
hpr	base/include/csCommon.h	/^/;"	m	struct:_Object
hpr	base/include/srvEngine.h	/^	luckRangeValue hpr;      \/\/ ÁîüÂëΩÂÄºÊÅ¢Â§ç$/;"	m	struct:zColorObjectB
hpr	base/include/srvEngine.h	/^	luckRangeValue hpr;      \/\/ ÁîüÂëΩÂÄºÊÅ¢Â§ç$/;"	m	struct:zHolyObjectB
hpspeedup	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
hptomp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
hptomp	base/include/csCommon.h	/^/;"	m	struct:_Object
hptomp	base/include/srvEngine.h	/^	rangeValue hptomp; \/\/ËΩ¨Êç¢ÁîüÂëΩÂÄº‰∏∫Ê≥ïÊúØÂÄºxÔºÖ$/;"	m	struct:zSoulStoneB
hpupbylevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
http	tmp/base3/connection.cpp	/^namespace http {$/;"	n	file:
http	tmp/base3/connection.hpp	/^namespace http {$/;"	n
http	tmp/base3/header.hpp	/^namespace http {$/;"	n
http	tmp/base3/io_service_pool.cpp	/^namespace http {$/;"	n	file:
http	tmp/base3/mime_types.cpp	/^namespace http {$/;"	n	file:
http	tmp/base3/mime_types.hpp	/^namespace http {$/;"	n
http	tmp/base3/reply.cpp	/^namespace http {$/;"	n	file:
http	tmp/base3/reply.hpp	/^namespace http {$/;"	n
http	tmp/base3/request.hpp	/^namespace http {$/;"	n
http	tmp/base3/request_handler.cpp	/^namespace http {$/;"	n	file:
http	tmp/base3/request_handler.hpp	/^namespace http {$/;"	n
http	tmp/base3/request_parser.cpp	/^namespace http {$/;"	n	file:
http	tmp/base3/request_parser.hpp	/^namespace http {$/;"	n
http_version_h	tmp/base3/request_parser.hpp	/^    http_version_h,$/;"	e	enum:http::server2::request_parser::state
http_version_major	tmp/base3/request.hpp	/^  int http_version_major;$/;"	m	struct:http::server2::request
http_version_major	tmp/base3/request_parser.hpp	/^    http_version_major,$/;"	e	enum:http::server2::request_parser::state
http_version_major_start	tmp/base3/request_parser.hpp	/^    http_version_major_start,$/;"	e	enum:http::server2::request_parser::state
http_version_minor	tmp/base3/request.hpp	/^  int http_version_minor;$/;"	m	struct:http::server2::request
http_version_minor	tmp/base3/request_parser.hpp	/^    http_version_minor,$/;"	e	enum:http::server2::request_parser::state
http_version_minor_start	tmp/base3/request_parser.hpp	/^    http_version_minor_start,$/;"	e	enum:http::server2::request_parser::state
http_version_p	tmp/base3/request_parser.hpp	/^    http_version_p,$/;"	e	enum:http::server2::request_parser::state
http_version_slash	tmp/base3/request_parser.hpp	/^    http_version_slash,$/;"	e	enum:http::server2::request_parser::state
http_version_t_1	tmp/base3/request_parser.hpp	/^    http_version_t_1,$/;"	e	enum:http::server2::request_parser::state
http_version_t_2	tmp/base3/request_parser.hpp	/^    http_version_t_2,$/;"	e	enum:http::server2::request_parser::state
huntermark	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ice_umdefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
iceappend	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
icebox	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
icedam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
iceflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
icon	base/include/srvEngine.h	/^	uint32_t icon;$/;"	m	struct:zHeadListB
id	BillServer/old_back/BillServer.h	/^  DWORD id;$/;"	m	struct:ConsignTrait
id	GatewayServer/old_back/GatewayServer.h	/^		DWORD id;$/;"	m	struct:CountryInfo::CountryDic
id	GatewayServer/old_back/GatewayServer.h	/^		DWORD id;$/;"	m	struct:CountryInfo::MapDic
id	SceneServer/libscenesserver/RebuildObject.cpp	/^int SoulStone::id(DWORD trait)$/;"	f	class:SoulStone
id	SceneServer/libscenesserver/SceneServer1.h	/^      DWORD id;          \/\/\/ŒÔ∆∑±‡∫≈$/;"	m	struct:NpcTrade::NpcItem
id	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD id;$/;"	m	struct:InitObject
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Event
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventTrigger
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryDare
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryTech
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::InitObject
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::bossDefine
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::servantDefine
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::FixedRush
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::CountryInfo
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::TeamMember
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcItem
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState::attProtect
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SeptGuard
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stxml_SuitAttribute
id	SceneServer/libscenesserver/scriptTickTask.h	/^	QWORD id;$/;"	m	class:scriptTaskManagement
id	SceneServer/libscenesserver/zObject.cpp	/^DWORD Package::id() const$/;"	f	class:Package
id	SessionServer/libsessionserver/SessionServer.h	/^    DWORD id; \/\/ ±ªÕ∆ºˆ»À”√ªßID$/;"	m	class:RecommendSub
id	SessionServer/libsessionserver/SessionServer.h	/^    DWORD id; \/\/ Õ∆ºˆ»ÀID$/;"	m	class:Recommend
id	SessionServer/libsessionserver/SessionServer.h	/^  DWORD id;$/;"	m	struct:TempArchive
id	SessionServer/libsessionserver/SessionServer.h	/^  DWORD id;$/;"	m	struct:actInfo
id	SessionServer/libsessionserver/SessionServer.h	/^  DWORD id;$/;"	m	struct:mailCheckInfo
id	SessionServer/libsessionserver/SessionServer.h	/^  DWORD id;$/;"	m	struct:mailContentInfo
id	SessionServer/libsessionserver/SessionServer.h	/^  DWORD id;$/;"	m	struct:mailHeadInfo
id	SessionServer/libsessionserver/SessionServer.h	/^  DWORD id;$/;"	m	struct:mailNewInfo
id	base/billcmd.h	/^			DWORD id;$/;"	m	struct:Cmd::Bill::t_Bill_ForwardBillToScene
id	base/command.h	/^		DWORD id;	\/\/game zone num$/;"	m	struct:Cmd::stRequestPingList
id	base/common.h	/^		DWORD id;$/;"	m	union:GameZone_t::__anon117
id	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniUserPosition
id	base/include/csCommon.h	/^/;"	m	struct:CharBase
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_ForwardMiniToScene
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_ForwardUser
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_UserForwardMini
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_ForwardMini
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserData
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_changeScene_SceneSession
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forwardUser_SceneSession
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Country_Info
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd::__anon207
id	base/include/csCommon.h	/^/;"	m	struct:Cmd::stSelectCountryUserCmd
id	base/include/csCommon.h	/^/;"	m	struct:LiveSkill
id	base/include/csCommon.h	/^/;"	m	struct:_Object::skillbonus
id	base/include/csCommon.h	/^/;"	m	struct:_Object::skillsbonus
id	base/include/csCommon.h	/^/;"	m	struct:oskill
id	base/include/srvEngine.h	/^			uint16_t id;$/;"	m	struct:zObjectB::material::stuff
id	base/include/srvEngine.h	/^			uint16_t id;\/\/ÊäÄËÉΩid$/;"	m	struct:SkillStatus::__anon138::__anon139
id	base/include/srvEngine.h	/^			uint32_t id;$/;"	m	struct:SkillElement::__anon136::__anon137
id	base/include/srvEngine.h	/^		uint16_t id; \/\/ÂäüËÉΩÊ†áËØÜ$/;"	m	struct:zObjectB::leechdom_t
id	base/include/srvEngine.h	/^		uint16_t id;$/;"	m	struct:zObjectB::skills
id	base/include/srvEngine.h	/^	uint16_t id; \/\/ÊäÄËÉΩ id$/;"	m	struct:skillbonus
id	base/include/srvEngine.h	/^	uint32_t id;$/;"	m	struct:CarryObject
id	base/include/srvEngine.h	/^	uint32_t id;$/;"	m	struct:zEntryC
id	base/include/srvEngine.h	/^	uint32_t id;\/\/\/ÊäÄËÉΩid$/;"	m	struct:npcSkill
id	base/recordcmd.h	/^			DWORD id;$/;"	m	struct:Cmd::Record::t_ReadUser_SceneRecord
id	base/recordcmd.h	/^			DWORD id;$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
id	tmp/MiniServer/MiniServer.h	/^    Cmd::MiniGameID id;$/;"	m	class:MiniGame
id	tmp/MiniServer/MiniServer.h	/^    Cmd::MiniRoomID id;$/;"	m	class:MiniRoom
id2value_	base/x_simple_db_table.h	/^		boost::unordered_map<uint32_t,std::pair<uint8_t, uint32_t> > id2value_; \/\/value.first: is_new$/;"	m	class:x_simple_db_table
identifies	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::LiveSkillsManager::Factory
ids	base/include/srvEngine.h	/^		std::vector<uint16_t> ids;$/;"	m	struct:zSetObjectB::SET
ids	base/include/srvEngine.h	/^	std::list<T> ids;$/;"	m	class:zUniqueID
ifCheckSignal	base/src/x_tcptask.h	/^	const bool ifCheckSignal() const$/;"	f	class:x_tcptask
ignoreDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ignoreMagicDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ignorePhysicDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
ignoredef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::__anon53::__anon54
ignoredef	base/include/csCommon.h	/^/;"	m	struct:_Object::__anon182::__anon183
ignoredef	base/include/srvEngine.h	/^	rangeValue ignoredef; \/\/%xÂøΩËßÜÁõÆÊ†áÈò≤Âæ°$/;"	m	struct:zFiveSetB
ihash	FLServer/ServerACL.h	/^	struct ihash : std::unary_function<GameZone_t, std::size_t>$/;"	s	class:ServerACL
in_trade	SceneServer/libscenesserver/Trade.cpp	/^bool TradeOrder::in_trade(zObject* ob) const$/;"	f	class:TradeOrder
incMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
incgold	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
incgold	base/include/csCommon.h	/^/;"	m	struct:_Object
incgold	base/include/srvEngine.h	/^	rangeValue incgold; \/\/Â¢ûÂä†Èì∂Â≠êÊéâËêΩx%$/;"	m	struct:zSoulStoneB
increaseAverageExp	SceneServer/libscenesserver/Team.cpp	/^void Team::increaseAverageExp(SceneUser *pUser)$/;"	f	class:Team
increaseGoldListNum	BillServer/BillUser.cpp	/^void BillUser::increaseGoldListNum()$/;"	f	class:BillUser
increaseMoneyListNum	BillServer/BillUser.cpp	/^void BillUser::increaseMoneyListNum()$/;"	f	class:BillUser
indent	deps/tinyxml/tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:TiXmlPrinter
indent_to	base/src/getopt.c	/^indent_to (argp_fmtstream_t stream, unsigned col)$/;"	f	file:
index	GatewayServer/old_back/GatewayServer.h	/^	PosIMapIndex index;$/;"	m	class:ScreenIndex
index	SceneServer/libscenesserver/RebuildObject.cpp	/^int Decompose::index() const$/;"	f	class:Decompose
index	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
index	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zRegion
index	base/include/csBox.h	/^	int					index;	\/\/“™œ‚«∂µƒø◊µƒœ¬±Í	$/;"	m	struct:Cmd::stMosaicGemUserCmd
index	base/src/getopt.c	/^  int index;$/;"	m	struct:hol_cluster	file:
info	SceneServer/libscenesserver/Quest.cpp	/^std::string QuestList::info(int id) const$/;"	f	class:QuestList
info	SceneServer/libscenesserver/Quest.cpp	/^std::string Vars::info() const$/;"	f	class:Vars
info	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_broadcastScene_SceneSession
info	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendGift_SceneSession
info	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_serverNotify_SceneSession
info	base/x_logger.cpp	/^void x_logger::info(const char * pattern,...)$/;"	f	class:x_logger
infoClientPool	SuperServer/InfoClientManager.h	/^    x_tcp_clientTaskPool *infoClientPool;$/;"	m	class:InfoClientManager
infoMap	BillServer/old_back/BillServer.h	/^    BillInfoMap infoMap;$/;"	m	class:BillManager
infoType	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_broadcastScene_SceneSession
infoType	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_serverNotify_SceneSession
infoUserObjUpdate	SceneServer/libscenesserver/script_func.cpp	/^void infoUserObjUpdate(SceneUser *user,DWORD thisid)$/;"	f
init	BillServer/BillServer.cpp	/^bool BillService::init() {$/;"	f	class:BillService
init	BillServer/old_back/BillClientManager.cpp	/^bool BillClientManager::init(const std::string &confile,const std::string &tradelog,BillCallback &bc)$/;"	f	class:BillClientManager
init	BillServer/old_back/BillServer.cpp	/^bool BillService::init()$/;"	f	class:BillService
init	BillServer/old_back/StockConsign.cpp	/^bool ConsignGoldManager::init()$/;"	f	class:ConsignGoldManager
init	BillServer/old_back/StockConsign.cpp	/^bool ConsignHistoryManager::init()$/;"	f	class:ConsignHistoryManager
init	BillServer/old_back/StockConsign.cpp	/^bool ConsignMoneyManager::init()$/;"	f	class:ConsignMoneyManager
init	FLServer/FLServer.cpp	/^bool FLService::init() {$/;"	f	class:FLService
init	FLServer/ServerACL.cpp	/^bool ServerACL::init() {$/;"	f	class:ServerACL
init	GatewayServer/GatewayServer.cpp	/^bool GatewayService::init() {$/;"	f	class:GatewayService
init	GatewayServer/old_back/CmdChecker.cpp	/^bool CheckerTable::init()$/;"	f	class:CheckerTable
init	GatewayServer/old_back/CountryInfo.cpp	/^bool CountryInfo::init()$/;"	f	class:CountryInfo
init	GatewayServer/old_back/GateUserManager.cpp	/^bool GateUserManager::init()$/;"	f	class:GateUserManager
init	GatewayServer/old_back/GatewayServer.cpp	/^bool GatewayService::init()$/;"	f	class:GatewayService
init	GatewayServer/old_back/SceneClientManager.cpp	/^bool SceneClientManager::init()$/;"	f	class:SceneClientManager
init	RecordServer/RecordServer.cpp	/^bool RecordService::init() {$/;"	f	class:RecordService
init	RecordServer/RecordUserManager.h	/^	bool init() { return true; }$/;"	f	class:RecordUserM
init	SceneServer/SceneServer.cpp	/^bool SceneService::init() {$/;"	f	class:SceneService
init	SceneServer/libscenesserver/CharInitInfo.cpp	/^bool CharInitInfo::init()$/;"	f	class:CharInitInfo
init	SceneServer/libscenesserver/CountryAlly.cpp	/^void CountryAllyM::init()$/;"	f	class:CountryAllyM
init	SceneServer/libscenesserver/CountryDare.cpp	/^void CountryDareM::init()$/;"	f	class:CountryDareM
init	SceneServer/libscenesserver/CountryTech.cpp	/^void CTech::init(Cmd::Session::_techItem* rec)$/;"	f	class:CTech
init	SceneServer/libscenesserver/CountryTech.cpp	/^void CountryTech::init(Cmd::Session::t_updateTech_SceneSession* rev)$/;"	f	class:CountryTech
init	SceneServer/libscenesserver/CountryTech.cpp	/^void CountryTechM::init()$/;"	f	class:CountryTechM
init	SceneServer/libscenesserver/Dice.cpp	/^bool Dice::init()$/;"	f	class:Dice
init	SceneServer/libscenesserver/MagicRange.cpp	/^bool MagicRangeInit::init()$/;"	f	class:MagicRangeInit
init	SceneServer/libscenesserver/MessageSystem.cpp	/^bool MessageSystem::init()$/;"	f	class:MessageSystem
init	SceneServer/libscenesserver/NpcTrade.cpp	/^bool NpcTrade::init()$/;"	f	class:NpcTrade
init	SceneServer/libscenesserver/QuestTable.cpp	/^bool EventTable::init(const std::string& type,const std::string& file)$/;"	f	class:EventTable
init	SceneServer/libscenesserver/QuestTable.cpp	/^bool QuestTable::init()$/;"	f	class:QuestTable
init	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::init(Scene * s)$/;"	f	class:Rush
init	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::init(DWORD countryid,DWORD mapid)$/;"	f	class:Scene
init	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::init()$/;"	f	class:SceneManager
init	SceneServer/libscenesserver/SceneNpcManager.cpp	/^bool SceneNpcManager::init()$/;"	f	class:SceneNpcManager
init	SceneServer/libscenesserver/ScenePk.cpp	/^void SkillState::init()$/;"	f	class:SkillState
init	SceneServer/libscenesserver/ScenesServer.cpp	/^bool ScenesService::init()$/;"	f	class:ScenesService
init	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::PkPreValue
init	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::PkValue
init	SceneServer/libscenesserver/WayPoint.cpp	/^bool WayPoint::init(zXMLParser *parser,const xmlNodePtr node,DWORD countryid)$/;"	f	class:WayPoint
init	SceneServer/libscenesserver/globalBox.cpp	/^int globalBox::init()$/;"	f	class:globalBox
init	SessionServer/SessionServer.cpp	/^bool SessionService::init() {$/;"	f	class:SessionService
init	SessionServer/libsessionserver/Ally.cpp	/^bool CAllyM::init()$/;"	f	class:CAllyM
init	SessionServer/libsessionserver/Ally.cpp	/^void CAlly::init(DBRecord* rec)$/;"	f	class:CAlly
init	SessionServer/libsessionserver/Army.cpp	/^bool CArmyM::init()$/;"	f	class:CArmyM
init	SessionServer/libsessionserver/Army.cpp	/^void CArmy::init(DBRecord* rec)$/;"	f	class:CArmy
init	SessionServer/libsessionserver/Army.cpp	/^void CCaptain::init(DBRecord* rec)$/;"	f	class:CCaptain
init	SessionServer/libsessionserver/CityManager.cpp	/^bool CCityM::init()$/;"	f	class:CCityM
init	SessionServer/libsessionserver/CityManager.cpp	/^void CCity::init(DBRecord* rec)$/;"	f	class:CCity
init	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountryM::init()$/;"	f	class:CCountryM
init	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::init(DBRecord* rec)$/;"	f	class:CCountry
init	SessionServer/libsessionserver/CountryManager.cpp	/^void CTech::init(DBRecord* rec)$/;"	f	class:CTech
init	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
init	SessionServer/libsessionserver/DareRecordManager.cpp	/^bool CDareRecordM::init()$/;"	f	class:CDareRecordM
init	SessionServer/libsessionserver/DareRecordManager.cpp	/^void CDareRecord::init(DBRecord* rec)$/;"	f	class:CDareRecord
init	SessionServer/libsessionserver/Gem.cpp	/^bool CGemM::init()$/;"	f	class:CGemM
init	SessionServer/libsessionserver/Gift.cpp	/^bool Gift::init()$/;"	f	class:Gift
init	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareM::init()$/;"	f	class:CNpcDareM
init	SessionServer/libsessionserver/OfflineMessage.cpp	/^bool COfflineMessage::init()$/;"	f	class:COfflineMessage
init	SessionServer/libsessionserver/Quiz.cpp	/^bool CQuizM::init()$/;"	f	class:CQuizM
init	SessionServer/libsessionserver/Quiz.cpp	/^bool CSubjectM::init()$/;"	f	class:CSubjectM
init	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendM::init()$/;"	f	class:RecommendM
init	SessionServer/libsessionserver/RecommendManager.cpp	/^void Recommend::init(DBRecord* rec)$/;"	f	class:Recommend
init	SessionServer/libsessionserver/RecommendManager.cpp	/^void RecommendSub::init(DBRecord* rec)$/;"	f	class:RecommendSub
init	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::init()$/;"	f	class:CRelationManager
init	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::init()$/;"	f	class:CSchoolM
init	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::init()$/;"	f	class:CSeptM
init	SessionServer/libsessionserver/Sept.cpp	/^void CSept::init(const stSeptInfo & info)$/;"	f	class:CSept
init	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::init(const stSeptMemberInfo& info)$/;"	f	class:CSeptMember
init	SessionServer/libsessionserver/SessionManager.cpp	/^bool SceneSessionManager::init()$/;"	f	class:SceneSessionManager
init	SessionServer/libsessionserver/SessionManager.cpp	/^bool UserSessionManager::init()$/;"	f	class:UserSessionManager
init	SessionServer/libsessionserver/SessionServer.cpp	/^bool SessionService::init()$/;"	f	class:SessionService
init	SessionServer/libsessionserver/SessionServer.h	/^  void init(Cmd::t_NullCmd * rev,DWORD len,DWORD countryID)$/;"	f	struct:OneCountryScene
init	SessionServer/libsessionserver/SessionTask.cpp	/^  bool init(Cmd::stChannelChatUserCmd * rev,DWORD len)$/;"	f	struct:EveryUserSessionAction
init	SessionServer/libsessionserver/SessionTask.cpp	/^  bool init(Cmd::stChannelChatUserCmd * rev,DWORD len)$/;"	f	struct:broadcastToEveryUser
init	SessionServer/libsessionserver/SessionTask.cpp	/^  bool init(char * content)$/;"	f	struct:broadcastRushToEveryUser
init	SessionServer/libsessionserver/SessionTask.cpp	/^  void init(Cmd::stNullUserCmd * rev,DWORD len,DWORD countryID)$/;"	f	struct:OneCountryUserSessionAction
init	SessionServer/libsessionserver/Sort.cpp	/^bool CSortM::init()$/;"	f	class:CSortM
init	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
init	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
init	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
init	SessionServer/libsessionserver/Vote.cpp	/^bool CVoteM::init()$/;"	f	class:CVoteM
init	SessionServer/libsessionserver/Vote.cpp	/^void CVote::init(DBRecord* rec)$/;"	f	class:CVote
init	SessionServer/libsessionserver/Vote.cpp	/^void CVoteItem::init(DBRecord* rec)$/;"	f	class:CVoteItem
init	SuperServer/FLClientManager.cpp	/^bool FLClientManager::init()$/;"	f	class:FLClientManager
init	SuperServer/InfoClientManager.cpp	/^bool InfoClientManager::init()$/;"	f	class:InfoClientManager
init	SuperServer/SuperServer.cpp	/^bool SuperService::init() {$/;"	f	class:SuperService
init	base/include/srvEngine.h	/^	void init(T min,T max)$/;"	f	class:zUniqueID
init	base/src/x_tcptaskpool.cpp	/^bool x_tcptaskpool::init()$/;"	f	class:x_tcptaskpool
init	base/src/zMNetService.cpp	/^bool zMNetService::init()$/;"	f	class:zMNetService
init	base/src/zTCPClientTaskPool.cpp	/^bool x_tcp_clientTaskPool::init()$/;"	f	class:x_tcp_clientTaskPool
init	base/x_service.cpp	/^bool x_service::init()$/;"	f	class:x_service
init	base/x_subnetservice.cpp	/^bool x_subnetservice::init()$/;"	f	class:x_subnetservice
init	client/Game.cpp	/^bool Game::init()$/;"	f	class:Game
init	tmp/MiniServer/MiniHall.cpp	/^bool MiniHall::init()$/;"	f	class:MiniHall
init	tmp/MiniServer/MiniRoom.cpp	/^DWORD MiniRoom::init(Cmd::MiniRoomID i,DWORD gameNum,DWORD userNum,DWORD money)$/;"	f	class:MiniRoom
init	tmp/MiniServer/MiniServer.cpp	/^bool MiniService::init()$/;"	f	class:MiniService
init	tmp/MiniServer/Top100.cpp	/^bool Top100::init()$/;"	f	class:Top100
initAnswerCount	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
initByDBRecord	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::initByDBRecord(const stSchoolMemberInfo &info)$/;"	f	class:CSchoolMember
initByNpcDefine	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::initByNpcDefine(const t_NpcDefine *pDefine)$/;"	f	class:Scene
initCards	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::initCards()$/;"	f	class:DDZCardGame
initCharBase	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
initFilter	SceneServer/libscenesserver/scriptTickTask.h	/^		static void initFilter()$/;"	f	class:scriptMessageFilter
initGeneralMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::initGeneralMember(CSchoolMember * master)$/;"	f	class:CSchoolMember
initInValidNode	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::initInValidNode(CSchoolMember * master)$/;"	f	class:CSchoolMember
initMapGhost	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
initMapGhost	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
initMapUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
initMe	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
initNpc	SceneServer/libscenesserver/Scene.cpp	/^void Scene::initNpc(SceneNpc *sceneNpc,zRegion *init_region,zPos myPos)$/;"	f	class:Scene
initPet	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
initPet	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
initRegion	SceneServer/libscenesserver/Scene.cpp	/^void Scene::initRegion(zRegion &reg,const zPos &pos,const WORD width,const WORD height)$/;"	f	class:Scene
initRootMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::initRootMember()$/;"	f	class:CSchoolMember
initSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::initSchool(const stSchoolInfo &info)$/;"	f	class:CSchool
initServerSequence	SuperServer/ServerTask.cpp	/^void initServerSequence() {   $/;"	f
initShopAdv	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
initState	GatewayServer/old_back/GatewayServer.h	/^	void initState()$/;"	f	class:GateUser
initTime	GatewayServer/old_back/GatewayServer.h	/^	zRTime initTime;$/;"	m	class:GatewayTask
initTire	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
initToNoneSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::initToNoneSchool()$/;"	f	class:CSchool
initWayPoint	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::initWayPoint(zXMLParser *parser,const xmlNodePtr node,DWORD countryid)$/;"	f	class:Scene
init_db	BillServer/BillServer.cpp	/^bool BillService::init_db(const std::string& hostname,$/;"	f	class:BillService
init_db	FLServer/FLServer.cpp	/^bool FLService::init_db(const std::string& hostname,$/;"	f	class:FLService
init_db	RecordServer/RecordServer.cpp	/^bool RecordService::init_db(const std::string& hostname,$/;"	f	class:RecordService
init_db	SceneServer/SceneServer.cpp	/^bool SceneService::init_db(const std::string& hostname,$/;"	f	class:SceneService
init_db	SessionServer/SessionServer.cpp	/^bool SessionService::init_db(const std::string& hostname,$/;"	f	class:SessionService
init_db	SuperServer/SuperServer.cpp	/^bool SuperService::init_db(const std::string& hostname,$/;"	f	class:SuperService
init_identifier	base/include/srvEngine.h	/^	void init_identifier(std::vector<uint32_t>& list,const std::string& info)$/;"	f	struct:zObjectB
init_items	base/include/srvEngine.h	/^	void init_items(const std::string& item_list)$/;"	f	struct:zLiveSkillB
init_leechdom	base/include/srvEngine.h	/^	void init_leechdom(const std::string& info)$/;"	f	struct:zObjectB
init_need_material	base/include/srvEngine.h	/^	void init_need_material(const std::string& materials)$/;"	f	struct:zObjectB
init_need_skills	base/include/srvEngine.h	/^	void init_need_skills(const std::string& skills_list)$/;"	f	struct:zObjectB
init_set	base/include/srvEngine.h	/^	void init_set(const std::string& info)$/;"	f	struct:zSetObjectB
init_skill	base/include/srvEngine.h	/^	void init_skill(const std::string& info)$/;"	f	struct:zColorObjectB
init_skill	base/include/srvEngine.h	/^	void init_skill(const std::string& info)$/;"	f	struct:zHolyObjectB
init_skills	base/include/srvEngine.h	/^	void init_skills(const std::string& info)$/;"	f	struct:zColorObjectB
init_skills	base/include/srvEngine.h	/^	void init_skills(const std::string& info)$/;"	f	struct:zHolyObjectB
init_value	base/include/srvEngine.h	/^	void init_value(const std::string& src,Value& value)$/;"	f	struct:zSoulStoneB
inited	GatewayServer/old_back/GatewayServer.h	/^	bool inited;$/;"	m	class:GateUserManager
inited	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
inited	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
inited	SessionServer/libsessionserver/SessionServer.h	/^    bool inited;$/;"	m	class:SceneSessionManager
inited	SessionServer/libsessionserver/SessionServer.h	/^    bool inited;$/;"	m	class:UserSessionManager
initmapNpc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
initmapNpc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
initmapUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestUserAndSend
initstate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::ZoneTypeDef
initstate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
input	base/include/argp.h	/^  void *input;$/;"	m	struct:argp_state
input	base/src/getopt.c	/^  void *input, **child_inputs;$/;"	m	struct:group	file:
insValueType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::TeamManager
insert	base/include/srvEngine.h	/^	inline bool insert(const keyT &key,valueT &value)$/;"	f	class:LimitHash
insert	base/include/srvEngine.h	/^	inline bool insert(const keyT &key,valueT &value)$/;"	f	class:MultiHash
insertDBRecord	SessionServer/libsessionserver/RelationManager.cpp	/^bool CRelationManager::insertDBRecord(const CRelation *relation)$/;"	f	class:CRelationManager
insertDatabase	SessionServer/libsessionserver/Ally.cpp	/^bool CAlly::insertDatabase()$/;"	f	class:CAlly
insertDatabase	SessionServer/libsessionserver/Army.cpp	/^bool CArmy::insertDatabase()$/;"	f	class:CArmy
insertDatabase	SessionServer/libsessionserver/Army.cpp	/^bool CCaptain::insertDatabase()$/;"	f	class:CCaptain
insertDatabase	SessionServer/libsessionserver/CityManager.cpp	/^bool CCity::insertDatabase()$/;"	f	class:CCity
insertDatabase	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::insertDatabase()$/;"	f	class:CCountry
insertDatabase	SessionServer/libsessionserver/DareRecordManager.cpp	/^bool CDareRecord::insertDatabase()$/;"	f	class:CDareRecord
insertDatabase	SessionServer/libsessionserver/RecommendManager.cpp	/^bool Recommend::insertDatabase()$/;"	f	class:Recommend
insertDatabase	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendSub::insertDatabase()$/;"	f	class:RecommendSub
insertDatabase	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::insertDatabase()$/;"	f	class:CSeptMember
insertDatabase	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
insertDatabase	SessionServer/libsessionserver/Vote.cpp	/^bool CVote::insertDatabase()$/;"	f	class:CVote
insertDatabase	SessionServer/libsessionserver/Vote.cpp	/^bool CVoteItem::insertDatabase()$/;"	f	class:CVoteItem
insertRecord	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::insertRecord()$/;"	f	class:CSchoolMember
insertSchoolToDB	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::insertSchoolToDB()$/;"	f	class:CSchool
inserted	GatewayServer/old_back/GatewayServer.h	/^	bool inserted;$/;"	m	class:GateUser
inserted	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zObject
inserted	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
inserted	base/include/srvEngine.h	/^	bool inserted;$/;"	m	struct:zSceneEntry
instance	BillServer/BillServer.cpp	/^BillService* BillService::instance = NULL;$/;"	m	class:BillService	file:
instance	BillServer/BillServer.h	/^		static BillService *instance;$/;"	m	class:BillService
instance	BillServer/BillTaskManager.cpp	/^BillTaskManager *BillTaskManager::instance = NULL;$/;"	m	class:BillTaskManager	file:
instance	BillServer/BillTaskManager.h	/^    static BillTaskManager *instance;$/;"	m	class:BillTaskManager
instance	BillServer/BillUserManager.h	/^    static BillUserManager *instance;$/;"	m	class:BillUserManager
instance	BillServer/old_back/BillManager.cpp	/^BillManager *BillManager::instance = NULL;$/;"	m	class:BillManager	file:
instance	BillServer/old_back/BillServer.cpp	/^BillService *BillService::instance = NULL;$/;"	m	class:BillService	file:
instance	BillServer/old_back/BillServer.h	/^    static BillManager *instance;$/;"	m	class:BillManager
instance	BillServer/old_back/BillServer.h	/^    static BillService *instance;$/;"	m	class:BillService
instance	BillServer/old_back/BillServer.h	/^    static BillSessionManager *instance;$/;"	m	class:BillSessionManager
instance	BillServer/old_back/BillServer.h	/^    static BillTaskManager *instance;$/;"	m	class:BillTaskManager
instance	BillServer/old_back/BillServer.h	/^    static BillTimeTick *instance;$/;"	m	class:BillTimeTick
instance	BillServer/old_back/BillServer.h	/^    static BillUserManager *instance;$/;"	m	class:BillUserManager
instance	BillServer/old_back/BillServer.h	/^    static ConsignGoldManager *instance;$/;"	m	class:ConsignGoldManager
instance	BillServer/old_back/BillServer.h	/^    static ConsignHistoryManager *instance;$/;"	m	class:ConsignHistoryManager
instance	BillServer/old_back/BillServer.h	/^    static ConsignMoneyManager *instance;$/;"	m	class:ConsignMoneyManager
instance	BillServer/old_back/BillSessionManager.cpp	/^BillSessionManager *BillSessionManager::instance = NULL;$/;"	m	class:BillSessionManager	file:
instance	BillServer/old_back/BillTaskManager.cpp	/^BillTaskManager *BillTaskManager::instance = NULL;$/;"	m	class:BillTaskManager	file:
instance	BillServer/old_back/StockConsign.cpp	/^ConsignGoldManager *ConsignGoldManager::instance=NULL;$/;"	m	class:ConsignGoldManager	file:
instance	BillServer/old_back/StockConsign.cpp	/^ConsignHistoryManager *ConsignHistoryManager::instance=NULL;$/;"	m	class:ConsignHistoryManager	file:
instance	BillServer/old_back/StockConsign.cpp	/^ConsignMoneyManager *ConsignMoneyManager::instance=NULL;$/;"	m	class:ConsignMoneyManager	file:
instance	BillServer/old_back/TimeTick.cpp	/^BillTimeTick *BillTimeTick::instance = NULL;$/;"	m	class:BillTimeTick	file:
instance	FLServer/FLServer.cpp	/^FLService *FLService::instance = NULL;$/;"	m	class:FLService	file:
instance	FLServer/FLServer.h	/^	static FLService *instance;$/;"	m	class:FLService
instance	FLServer/GYListManager.cpp	/^GYListManager *GYListManager::instance = NULL;$/;"	m	class:GYListManager	file:
instance	FLServer/GYListManager.h	/^	static GYListManager *instance;$/;"	m	class:GYListManager
instance	FLServer/LoginManager.cpp	/^LoginManager *LoginManager::instance = NULL;$/;"	m	class:LoginManager	file:
instance	FLServer/LoginManager.h	/^	static LoginManager *instance;$/;"	m	class:LoginManager
instance	FLServer/ServerManager.h	/^	static ServerManager *instance;$/;"	m	class:ServerManager
instance	GatewayServer/GatewayServer.cpp	/^GatewayService* GatewayService::instance = NULL;$/;"	m	class:GatewayService	file:
instance	GatewayServer/GatewayServer.h	/^		static GatewayService *instance;$/;"	m	class:GatewayService
instance	GatewayServer/old_back/GatewayServer.cpp	/^GatewayService *GatewayService::instance = NULL;$/;"	m	class:GatewayService	file:
instance	GatewayServer/old_back/GatewayServer.h	/^	static GatewayService *instance;$/;"	m	class:GatewayService
instance	GatewayServer/old_back/GatewayServer.h	/^	static GatewayTaskManager *instance;$/;"	m	class:GatewayTaskManager
instance	GatewayServer/old_back/GatewayServer.h	/^	static GatewayTimeTick *instance;$/;"	m	class:GatewayTimeTick
instance	GatewayServer/old_back/GatewayServer.h	/^	static LoginSessionManager *instance;$/;"	m	class:LoginSessionManager
instance	GatewayServer/old_back/GatewayServer.h	/^	static SceneClientManager *instance;$/;"	m	class:SceneClientManager
instance	GatewayServer/old_back/GatewayTaskManager.cpp	/^GatewayTaskManager *GatewayTaskManager::instance = NULL;$/;"	m	class:GatewayTaskManager	file:
instance	GatewayServer/old_back/SceneClientManager.cpp	/^SceneClientManager *SceneClientManager::instance = NULL;$/;"	m	class:SceneClientManager	file:
instance	GatewayServer/old_back/TimeTick.cpp	/^GatewayTimeTick *GatewayTimeTick::instance = NULL;$/;"	m	class:GatewayTimeTick	file:
instance	RecordServer/RecordServer.cpp	/^RecordService* RecordService::instance = NULL;$/;"	m	class:RecordService	file:
instance	RecordServer/RecordServer.h	/^		static RecordService *instance;$/;"	m	class:RecordService
instance	SceneServer/SceneServer.cpp	/^SceneService* SceneService::instance = NULL;$/;"	m	class:SceneService	file:
instance	SceneServer/SceneServer.h	/^		static SceneService *instance;$/;"	m	class:SceneService
instance	SceneServer/libscenesserver/CharInitInfo.cpp	/^CharInitInfo *CharInitInfo::instance = NULL;$/;"	m	class:CharInitInfo	file:
instance	SceneServer/libscenesserver/MagicRange.cpp	/^MagicRangeInit *MagicRangeInit::instance = NULL;$/;"	m	class:MagicRangeInit	file:
instance	SceneServer/libscenesserver/MessageSystem.cpp	/^MessageSystem *MessageSystem::instance = NULL;$/;"	m	class:MessageSystem	file:
instance	SceneServer/libscenesserver/NpcTrade.cpp	/^NpcTrade *NpcTrade::instance = NULL;$/;"	m	class:NpcTrade	file:
instance	SceneServer/libscenesserver/Quest.cpp	/^UserVar& UserVar::instance()$/;"	f	class:UserVar
instance	SceneServer/libscenesserver/QuestTable.cpp	/^EventTable& EventTable::instance()$/;"	f	class:EventTable
instance	SceneServer/libscenesserver/QuestTable.cpp	/^QuestTable& QuestTable::instance()$/;"	f	class:QuestTable
instance	SceneServer/libscenesserver/RebuildObject.cpp	/^RebuildObject& RebuildObject::instance()$/;"	f	class:RebuildObject
instance	SceneServer/libscenesserver/SceneServer1.h	/^    static CharInitInfo *instance;$/;"	m	class:CharInitInfo
instance	SceneServer/libscenesserver/SceneServer1.h	/^    static MessageSystem *instance;$/;"	m	class:MessageSystem
instance	SceneServer/libscenesserver/SceneServer1.h	/^    static NpcTrade *instance;$/;"	m	class:NpcTrade
instance	SceneServer/libscenesserver/SceneServer1.h	/^    static SceneRecycleUserManager *instance;$/;"	m	class:SceneRecycleUserManager
instance	SceneServer/libscenesserver/SceneServer1.h	/^    static SceneTaskManager *instance;$/;"	m	class:SceneTaskManager
instance	SceneServer/libscenesserver/SceneServer1.h	/^  static self_t& instance()$/;"	f	class:ProductFactory
instance	SceneServer/libscenesserver/SceneTaskManager.cpp	/^SceneTaskManager *SceneTaskManager::instance = NULL;$/;"	m	class:SceneTaskManager	file:
instance	SceneServer/libscenesserver/ScenesServer.cpp	/^ScenesService *ScenesService::instance = NULL;$/;"	m	class:ScenesService	file:
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventManager
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::CharInitInfo
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::MagicRangeInit
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneRecycleUserManager
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneTimeTick
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::NpcTrade
instance	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneTaskManager
instance	SceneServer/libscenesserver/TimeTick.cpp	/^SceneTimeTick *SceneTimeTick::instance = NULL;$/;"	m	class:SceneTimeTick	file:
instance	SceneServer/libscenesserver/script.cpp	/^ScriptingSystemLua& ScriptingSystemLua::instance()$/;"	f	class:ScriptingSystemLua
instance	SessionServer/ServerManager.cpp	/^ServerManager *ServerManager::instance = NULL;$/;"	m	class:ServerManager	file:
instance	SessionServer/ServerManager.h	/^    static ServerManager *instance;$/;"	m	class:ServerManager
instance	SessionServer/SessionServer.cpp	/^SessionService* SessionService::instance = NULL;$/;"	m	class:SessionService	file:
instance	SessionServer/SessionServer.h	/^		static SessionService *instance;$/;"	m	class:SessionService
instance	SessionServer/libsessionserver/SessionServer.cpp	/^CArenaManager * CArenaManager::instance = NULL;$/;"	m	class:CArenaManager	file:
instance	SessionServer/libsessionserver/SessionServer.cpp	/^SessionService *SessionService::instance = NULL;$/;"	m	class:SessionService	file:
instance	SessionServer/libsessionserver/SessionServer.h	/^	static CArenaManager *instance;$/;"	m	class:CArenaManager
instance	SessionServer/libsessionserver/SessionServer.h	/^	static GlobalTeamIndex *instance;$/;"	m	class:GlobalTeamIndex
instance	SessionServer/libsessionserver/SessionServer.h	/^    static SessionService *instance;$/;"	m	class:SessionService
instance	SessionServer/libsessionserver/SessionServer.h	/^    static SessionTaskManager *instance;$/;"	m	class:SessionTaskManager
instance	SessionServer/libsessionserver/SessionTaskManager.cpp	/^SessionTaskManager *SessionTaskManager::instance = NULL;$/;"	m	class:SessionTaskManager	file:
instance	SessionServer/libsessionserver/Team.cpp	/^GlobalTeamIndex *GlobalTeamIndex::instance = NULL;$/;"	m	class:GlobalTeamIndex	file:
instance	SessionServer/libsessionserver/TimeTick.cpp	/^SessionTimeTick *SessionTimeTick::instance = NULL;$/;"	m	class:SessionTimeTick	file:
instance	SuperServer/FLClientManager.cpp	/^FLClientManager *FLClientManager::instance = NULL;$/;"	m	class:FLClientManager	file:
instance	SuperServer/FLClientManager.h	/^    static FLClientManager *instance;$/;"	m	class:FLClientManager
instance	SuperServer/InfoClientManager.cpp	/^InfoClientManager *InfoClientManager::instance = NULL;$/;"	m	class:InfoClientManager	file:
instance	SuperServer/InfoClientManager.h	/^    static InfoClientManager *instance;$/;"	m	class:InfoClientManager
instance	SuperServer/RoleregCache.cpp	/^RoleregCache *RoleregCache::instance = NULL;$/;"	m	class:RoleregCache	file:
instance	SuperServer/RoleregCache.h	/^    static RoleregCache *instance;$/;"	m	class:RoleregCache
instance	SuperServer/ServerManager.cpp	/^ServerManager *ServerManager::instance = NULL;$/;"	m	class:ServerManager	file:
instance	SuperServer/ServerManager.h	/^    static ServerManager *instance;$/;"	m	class:ServerManager
instance	SuperServer/SuperServer.cpp	/^SuperService *SuperService::instance = NULL;$/;"	m	class:SuperService	file:
instance	SuperServer/SuperServer.h	/^	static SuperService *instance;$/;"	m	class:SuperService
instance	base/include/csCommon.h	/^/;"	f	class:Singleton
instance	base/include/csCommon.h	/^/;"	f	class:SingletonFactory
instance	base/include/srvEngine.h	/^	static T* instance;$/;"	m	class:SingletonBase
instance	base/include/srvEngine.h	/^	static object_type & instance()$/;"	f	struct:singleton_default
instance	base/include/srvEngine.h	/^	static zMNetService *instance;    \/**< Á±ªÁöÑÂîØ‰∏ÄÂÆû‰æãÊåáÈíàÔºåÂåÖÊã¨Ê¥æÁîüÁ±ªÔºåÂàùÂßãÂåñ‰∏∫Á©∫ÊåáÈíà *\/$/;"	m	class:zMNetService
instance	base/include/srvEngine.h	/^template <typename T> T* SingletonBase<T>::instance = NULL;$/;"	m	class:SingletonBase
instance	base/src/zMNetService.cpp	/^zMNetService *zMNetService::instance = NULL;$/;"	m	class:zMNetService	file:
instance	tmp/MiniServer/MiniServer.cpp	/^MiniService *MiniService::instance = NULL;$/;"	m	class:MiniService	file:
instance	tmp/MiniServer/MiniServer.h	/^    static MiniService *instance;$/;"	m	class:MiniService
instance	tmp/MiniServer/MiniServer.h	/^    static MiniTaskManager *instance;$/;"	m	class:MiniTaskManager
instance	tmp/MiniServer/MiniServer.h	/^    static MiniTimeTick *instance;$/;"	m	class:MiniTimeTick
instance	tmp/MiniServer/MiniServer.h	/^    static MiniUserManager *instance;$/;"	m	class:MiniUserManager
instance	tmp/MiniServer/MiniTaskManager.cpp	/^MiniTaskManager *MiniTaskManager::instance = NULL;$/;"	m	class:MiniTaskManager	file:
instance	tmp/MiniServer/TimeTick.cpp	/^MiniTimeTick *MiniTimeTick::instance = NULL;$/;"	m	class:MiniTimeTick	file:
instance_	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::LiveSkillsManager
inte	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
inte	base/include/csCommon.h	/^/;"	m	struct:_Object
inte	base/include/srvEngine.h	/^			luckRangeValue inte;    \/\/ Êô∫Âäõ$/;"	m	struct:zColorObjectB::__anon128::__anon129
inte	base/include/srvEngine.h	/^	rangeValue inte;    \/\/ Êô∫Âäõ$/;"	m	struct:zSoulStoneB
inte	base/include/srvEngine.h	/^	uint16_t inte;			 \/\/Êô∫Âäõ$/;"	m	struct:zObjectB
inte	base/include/srvEngine.h	/^	uint32_t   inte;        \/\/ Êô∫Âäõ$/;"	m	struct:zNpcB
inte_Attribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::Freedom_Attribute
inte_Attribute	base/include/csCommon.h	/^/;"	m	struct:_Object::Freedom_Attribute
intel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
intel	base/include/srvEngine.h	/^	uint32_t intel;      \/\/ Êô∫Âäõ$/;"	m	struct:zPetB
internal_server_error	tmp/base3/reply.cpp	/^const char internal_server_error[] =$/;"	m	namespace:http::server2::stock_replies	file:
internal_server_error	tmp/base3/reply.cpp	/^const std::string internal_server_error =$/;"	m	namespace:http::server2::status_strings	file:
internal_server_error	tmp/base3/reply.hpp	/^    internal_server_error = 500,$/;"	e	enum:http::server2::reply::status_type
interval	SceneServer/libscenesserver/SceneServer1.h	/^      WORD interval;$/;"	m	struct:MessageSystem::t_Message
interval	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Horse
interval	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::servantDefine
interval	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
interval	SessionServer/libsessionserver/SessionServer.h	/^  DWORD interval;$/;"	m	struct:worldMsg
intervalAmendment	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
intoScene	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
introject_maxhp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
introject_maxmdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
introject_maxpdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
introject_mdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
introject_mdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
introject_pdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
introject_pdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
invalid	base/include/srvEngine.h	/^	T invalid()$/;"	f	class:zUniqueID
io_mutex	base/x_logger.h	/^	boost::mutex io_mutex;	\/\/for thread safe$/;"	m	class:x_logger
io_service_	tmp/base3/x_tcp_server.cpp	/^		boost::asio::io_service& io_service_;$/;"	m	class:chat_server	file:
io_service_	tmp/base3/x_tcp_server.h	/^		boost::asio::io_service io_service_;$/;"	m	class:x_tcp_server
io_service_pool	base/io_service_pool.cpp	/^io_service_pool::io_service_pool(std::size_t pool_size) : next_io_service_(0)$/;"	f	class:io_service_pool
io_service_pool	base/io_service_pool.h	/^class io_service_pool : private boost::noncopyable$/;"	c
io_service_pool	tmp/base3/io_service_pool.cpp	/^io_service_pool::io_service_pool(std::size_t pool_size)$/;"	f	class:http::server2::io_service_pool
io_service_pool	tmp/base3/io_service_pool.hpp	/^class io_service_pool$/;"	c
io_service_pool_	base/server.h	/^		io_service_pool& io_service_pool_;$/;"	m	class:server
io_service_pool_	base/x_service.h	/^	io_service_pool io_service_pool_;$/;"	m	class:x_service
io_service_pool_	client/NetworkManager.h	/^	io_service_pool io_service_pool_;$/;"	m	class:NetworkManager
io_service_pool_	tmp/base3/server.hpp	/^  io_service_pool io_service_pool_;$/;"	m	class:server
io_service_ptr	base/io_service_pool.h	/^		typedef boost::shared_ptr<boost::asio::io_service> io_service_ptr;$/;"	t	class:io_service_pool
io_service_ptr	tmp/base3/io_service_pool.hpp	/^  typedef boost::shared_ptr<boost::asio::io_service> io_service_ptr;$/;"	t	class:io_service_pool
io_services_	base/io_service_pool.h	/^		std::vector<io_service_ptr> io_services_;$/;"	m	class:io_service_pool
io_services_	tmp/base3/io_service_pool.hpp	/^  std::vector<io_service_ptr> io_services_;$/;"	m	class:io_service_pool
ios_	base/tcp_client.h	/^	io_service& ios_;$/;"	m	class:tcp_client
ios_	base/tcp_task.h	/^	boost::asio::io_service& ios_;$/;"	m	class:tcp_task
ip	BillServer/old_back/BillServer.h	/^  char          ip[MAX_IP_LENGTH];                           \/\/ipµÿ÷∑$/;"	m	struct:BillData
ip	FLServer/ServerACL.h	/^	std::string ip;$/;"	m	struct:ACLZone
ip	base/include/srvEngine.h	/^	const std::string ip;              \/**< ÊúçÂä°Âô®Âú∞ÂùÄ *\/$/;"	m	class:x_tcp_clientTask
ip	base/src/x_tcp_client.h	/^	std::string ip;                  \/**< ÊúçÂä°Âô®Âú∞ÂùÄ *\/$/;"	m	class:x_tcp_client
isActive	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool NpcAIController::isActive()$/;"	f	class:NpcAIController
isActive	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::isActive()$/;"	f	class:ScenePet
isActivePeriod	SessionServer/libsessionserver/Gem.cpp	/^bool CGem::isActivePeriod()$/;"	f	class:CGem
isActivePeriod	SessionServer/libsessionserver/SessionServer.h	/^    bool isActivePeriod()$/;"	f	class:CQuizPersonal
isActivePeriod	SessionServer/libsessionserver/SessionServer.h	/^    bool isActivePeriod()$/;"	f	class:CQuizWorld
isActivePeriod	SessionServer/libsessionserver/SessionServer.h	/^    virtual bool isActivePeriod()$/;"	f	class:CDare
isActiveQuestionPeriod	SessionServer/libsessionserver/SessionServer.h	/^    virtual bool isActiveQuestionPeriod()$/;"	f	class:CQuiz
isActiveState	SessionServer/libsessionserver/Vote.cpp	/^bool CVote::isActiveState()$/;"	f	class:CVote
isAdopted	SceneServer/libscenesserver/CartoonPet.cpp	/^bool CartoonPet::isAdopted()$/;"	f	class:CartoonPet
isAlly	SceneServer/libscenesserver/CountryAlly.cpp	/^bool  CountryAllyM::isAlly(DWORD dwCountryID1,DWORD dwCountryID2)$/;"	f	class:CountryAllyM
isAntiAtt	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::WarRecord
isAntiAtt	SessionServer/libsessionserver/SessionServer.h	/^    bool  isAntiAtt;  \/\/ …Ë÷√∑¥π•±Í÷æ$/;"	m	class:CDare
isAtt	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::WarRecord
isAtt	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
isAttackMainFlag	SceneServer/libscenesserver/CountryDare.cpp	/^bool CountryDareM::isAttackMainFlag(Scene* scene,DWORD dwNpcID)$/;"	f	class:CountryDareM
isAttackMainGen	SceneServer/libscenesserver/CountryDare.cpp	/^bool CountryDareM::isAttackMainGen(Scene* scene)$/;"	f	class:CountryDareM
isAutoRestitute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
isAward	SessionServer/libsessionserver/SessionServer.h	/^    int   isAward;  \/\/ µ±ÃÏµƒ«Æ£¨ «∑Ò“—æ≠À¢–¬$/;"	m	class:CCity
isBeging	SessionServer/libsessionserver/SessionServer.h	/^    bool  isBeging;$/;"	m	class:CCountry
isBeging	SessionServer/libsessionserver/SessionServer.h	/^    bool isBeging;$/;"	m	class:CCityM
isBeging	SessionServer/libsessionserver/SessionServer.h	/^    bool isBeging;$/;"	m	class:CCountryM
isBugbear	SceneServer/libscenesserver/SceneNpc.cpp	/^bool SceneNpc::isBugbear()$/;"	f	class:SceneNpc
isBugbear	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
isCaptain	SessionServer/libsessionserver/Army.cpp	/^bool CArmyM::isCaptain(DWORD dwUserID)$/;"	f	class:CArmyM
isCaptainObj	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
isCastellan	SessionServer/libsessionserver/CityManager.cpp	/^bool   CCityM::isCastellan(UserSession* pUser)$/;"	f	class:CCityM
isCatcher	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
isCatcher	SessionServer/libsessionserver/CityManager.cpp	/^bool   CCityM::isCatcher(UserSession* pUser)$/;"	f	class:CCityM
isClean	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::isClean(const char *name)$/;"	f	class:CSchoolM
isClean	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::isClean()$/;"	f	class:CSchoolMember
isCooling	SceneServer/libscenesserver/Leechdom.cpp	/^bool Leechdom::isCooling(DWORD type)$/;"	f	class:Leechdom
isCountryFormalDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
isCreateState	GatewayServer/old_back/GatewayServer.h	/^	bool isCreateState() const$/;"	f	class:GateUser
isDare	SessionServer/libsessionserver/CityManager.cpp	/^bool CCity::isDare(DWORD dwUnionID)$/;"	f	class:CCity
isDel	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
isDiplomat	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
isEmperor	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountryM::isEmperor(UserSession* pUser)$/;"	f	class:CCountryM
isEmperorDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
isEmpty	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::isEmpty()$/;"	f	class:EquipPack
isEmpty	SceneServer/libscenesserver/zObject.cpp	/^bool PetPack::isEmpty() const$/;"	f	class:PetPack
isEmpty	base/include/csTurn.h	/^		bool isEmpty;$/;"	m	struct:Cmd::t_CheckRelationEmptyResult
isEnableLogin	GatewayServer/old_back/CountryInfo.cpp	/^bool CountryInfo::isEnableLogin(DWORD country_id)$/;"	f	class:CountryInfo
isEnableRegister	GatewayServer/old_back/CountryInfo.cpp	/^bool CountryInfo::isEnableRegister(DWORD country_id)$/;"	f	class:CountryInfo
isEnd	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::isEnd()$/;"	f	class:Rush
isEndQuestionPeriod	SessionServer/libsessionserver/SessionServer.h	/^    virtual bool isEndQuestionPeriod()$/;"	f	class:CQuiz
isEnemy	SceneServer/libscenesserver/SceneNpcAI.cpp	/^int SceneNpc::isEnemy(SceneEntryPk * entry,bool notify,bool good)$/;"	f	class:SceneNpc
isEnemy	SceneServer/libscenesserver/ScenePet.cpp	/^int ScenePet::isEnemy(SceneEntryPk * entry,bool notify,bool good)$/;"	f	class:ScenePet
isFdsrAdd	base/include/srvEngine.h	/^	bool isFdsrAdd()$/;"	f	class:x_tcp_clientTask
isFdsrAdd	base/src/x_tcptask.h	/^	bool isFdsrAdd()$/;"	f	class:x_tcptask
isField	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
isFighting	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::isFighting()$/;"	f	class:SceneEntryPk
isFollowing	SceneServer/libscenesserver/Horse.cpp	/^bool Horse::isFollowing()$/;"	f	class:Horse
isForbidTalk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
isGetingMailItem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
isHMagicBang	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
isHPhysicBang	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
isHide	GatewayServer/old_back/GatewayServer.h	/^	bool isHide() const$/;"	f	class:GateUser
isHost	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniSeatData
isIn	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zRegion
isInitState	GatewayServer/old_back/GatewayServer.h	/^	bool isInitState() const$/;"	f	class:GateUser
isInjure	base/include/srvEngine.h	/^			uint16_t isInjure;\/\/ÊòØÂê¶ÈúÄË¶Å‰º§ÂÆ≥ËÆ°ÁÆó$/;"	m	struct:SkillStatus::__anon138::__anon139
isInvalid	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareCountry
isInvalid	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
isInvalid	SessionServer/libsessionserver/DareEmperor.cpp	/^bool CDareEmperor::isInvalid()$/;"	f	class:CDareEmperor
isInvalid	SessionServer/libsessionserver/DareSept.cpp	/^bool CDareSept::isInvalid()$/;"	f	class:CDareSept
isInvalid	SessionServer/libsessionserver/SessionServer.h	/^    virtual bool isInvalid() {return false; }$/;"	f	class:CDare
isIt	SceneServer/libscenesserver/ObjectManager.cpp	/^    bool isIt(zObject *object)$/;"	f	class:UserObjectComparePos
isIt	SceneServer/libscenesserver/SceneNpcDare.cpp	/^    bool isIt(zObject *object)$/;"	f	class:NpcDareObjectCompare
isIt	SceneServer/libscenesserver/SceneRelation.cpp	/^    bool isIt(zObject *object)$/;"	f	class:ItemObjectCompare
isIt	SceneServer/libscenesserver/SceneSchool.cpp	/^    bool isIt(zObject *object)$/;"	f	class:SchoolObjectCompare
isIt	SceneServer/libscenesserver/SceneSept.cpp	/^    bool isIt(zObject *object)$/;"	f	class:SeptObjectCompare
isIt	SceneServer/libscenesserver/SceneServer1.h	/^    bool isIt(SceneNpc *npc)$/;"	f	class:RemoveNpcAction::RemoveNpc
isIt	SceneServer/libscenesserver/SceneUnion.cpp	/^    bool isIt(zObject *object)$/;"	f	class:UnionObjectCompare
isIt	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:ObjectCompare
isIt	SceneServer/libscenesserver/SessionClient.cpp	/^	bool isIt(zObject *object)$/;"	f	class:SessionItemObjectCompare
isIt	SceneServer/libscenesserver/Skill.cpp	/^    bool isIt(zObject *object)$/;"	f	class:ItemObjectCompare
isKing	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::isKing(UserSession* pUser)$/;"	f	class:CCountry
isKing	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountryM::isKing(UserSession* pUser)$/;"	f	class:CCountryM
isLoaded	SceneServer/libscenesserver/script.cpp	/^bool LuaScript::isLoaded() $/;"	f	class:LuaScript
isMagicBang	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
isMainCity	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
isMe	SessionServer/libsessionserver/CityManager.cpp	/^bool CCity::isMe(DWORD country,DWORD cityid,DWORD unionid)$/;"	f	class:CCity
isMe	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::isMe(DWORD country)$/;"	f	class:CCountry
isMe	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareObj::isMe(DWORD country,DWORD mapid,DWORD npcid)$/;"	f	class:CNpcDareObj
isMe	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::isMe(const char *pName)$/;"	f	class:CSchoolMember
isMember	SessionServer/libsessionserver/SchoolManager.cpp	/^bool  CSchool::isMember(const char* memberName)$/;"	f	class:CSchool
isMember	SessionServer/libsessionserver/Sept.cpp	/^bool  CSept::isMember(DWORD dwUserID)$/;"	f	class:CSept
isMember	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
isNew	tmp/MiniServer/MiniServer.h	/^  bool isNew;$/;"	m	struct:oneGameState
isNewCharBase	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneUser::SceneUser
isNewZoneConfig	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::isNewZoneConfig()$/;"	f	class:SceneManager
isNoRedScene	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
isNormalExp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
isNormalObj	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
isNovice	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
isOfficial	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountry::isOfficial(UserSession* pUser)$/;"	f	class:CCountry
isOfficial	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountryM::isOfficial(UserSession* pUser)$/;"	f	class:CCountryM
isOk	SceneServer/libscenesserver/TeamManager.cpp	/^  bool isOk;$/;"	m	struct:CheckAllInOneScreenExec	file:
isOnline	SessionServer/libsessionserver/RelationManager.cpp	/^bool CRelation::isOnline()$/;"	f	class:CRelation
isOnline	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::isOnline()$/;"	f	class:CSchoolMember
isOnline	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptMember::isOnline()$/;"	f	class:CSeptMember
isOnline	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
isOpen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
isPhysicBang	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
isPhysics	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
isPkMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
isPkZone	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::isPkZone(SceneEntryPk *other)$/;"	f	class:ScenePet
isPlayState	GatewayServer/old_back/GatewayServer.h	/^	bool isPlayState() const$/;"	f	class:GateUser
isQuiz	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
isQuizState	GatewayServer/old_back/GatewayServer.h	/^	bool isQuizState()$/;"	f	class:GateUser
isReadSortPeriod	SessionServer/libsessionserver/SessionServer.h	/^    virtual bool isReadSortPeriod()$/;"	f	class:CQuiz
isReadyPeriod	SessionServer/libsessionserver/SessionServer.h	/^    virtual bool isReadyPeriod()$/;"	f	class:CDare
isReadyPeriod	SessionServer/libsessionserver/SessionServer.h	/^    virtual bool isReadyPeriod()$/;"	f	class:CQuiz
isReadyQuestionPeriod	SessionServer/libsessionserver/SessionServer.h	/^    virtual bool isReadyQuestionPeriod()$/;"	f	class:CQuiz
isRedNamed	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::isRedNamed(bool allRedMode)$/;"	f	class:ScenePet
isRushNpc	SceneServer/libscenesserver/SceneServer1.h	/^  bool isRushNpc;$/;"	m	class:SceneNpc
isSelectServerState	GatewayServer/old_back/GatewayServer.h	/^	bool isSelectServerState() const$/;"	f	class:GateUser
isSelectState	GatewayServer/old_back/GatewayServer.h	/^	bool isSelectState() const$/;"	f	class:GateUser
isSendingMail	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
isSeptGuard	SceneServer/libscenesserver/SceneServer1.h	/^  bool isSeptGuard;$/;"	m	class:GuardNpc
isSeptGuard	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GuardNpc
isSequeueTerminate	GatewayServer/old_back/GatewayServer.h	/^	bool isSequeueTerminate() $/;"	f	class:GatewayService
isSequeueTerminate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::ScenesService
isSequeueTerminate	SessionServer/libsessionserver/SessionServer.h	/^    bool isSequeueTerminate() $/;"	f	class:SessionService
isSpecWar	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
isSpecialExp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
isSpecialObj	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
isSurrounded	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::isSurrounded()$/;"	f	class:SceneNpc
isTerminate	base/include/srvEngine.h	/^	bool isTerminate() const$/;"	f	class:x_tcp_clientTask
isTerminate	base/src/x_tcptask.h	/^	bool isTerminate() const$/;"	f	class:x_tcptask
isTerminate	base/x_service.h	/^	bool isTerminate() const { return terminate; }$/;"	f	class:x_service
isTerminateWait	base/src/x_tcptask.h	/^	bool isTerminateWait()$/;"	f	class:x_tcptask
isTonic	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::isTonic()$/;"	f	class:EquipPack
isTotal	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAddSeptNormalExp	file:
isTrainingMap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
isUnionDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
isUnique	base/src/x_tcptask.h	/^	bool isUnique() const$/;"	f	class:x_tcptask
isUse	SceneServer/libscenesserver/SceneServer1.h	/^  bool isUse;$/;"	m	class:SceneNpc
isUsePveOrPvp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
isUserMasterEnemy	SceneServer/libscenesserver/ScenePet.cpp	/^int ScenePet::isUserMasterEnemy(SceneEntryPk * entry)$/;"	f	class:ScenePet
isValid	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::isValid()$/;"	f	class:CSchoolMember
isValid	SessionServer/libsessionserver/SessionServer.h	/^  WORD isValid;$/;"	m	struct:forbidInfo
isVip	GatewayServer/old_back/GatewayServer.h	/^	bool isVip()$/;"	f	class:GatewayTask
isVote	SessionServer/libsessionserver/Sept.cpp	/^bool CSept::isVote()$/;"	f	class:CSept
isVote	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
isWaitPlayState	GatewayServer/old_back/GatewayServer.h	/^	bool isWaitPlayState() const$/;"	f	class:GateUser
isWaitUnregState	GatewayServer/old_back/GatewayServer.h	/^	bool isWaitUnregState() const$/;"	f	class:GateUser
isWar	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
is_bool	base/src/getopt.c	/^  int is_bool;			\/* Whether it's `boolean'.  *\/$/;"	m	struct:uparam_name	file:
is_cancel_country	SceneServer/libscenesserver/ScenesServer.cpp	/^DWORD is_cancel_country = 0; \/\/  «∑Ò‘ –Ì≈—π˙$/;"	v
is_char	tmp/base3/request_parser.cpp	/^bool request_parser::is_char(int c)$/;"	f	class:http::server2::request_parser
is_ctl	tmp/base3/request_parser.cpp	/^bool request_parser::is_ctl(int c)$/;"	f	class:http::server2::request_parser
is_digit	tmp/base3/request_parser.cpp	/^bool request_parser::is_digit(int c)$/;"	f	class:http::server2::request_parser
is_final	base/x_thread_functor.h	/^		bool is_final() const { return final_; }$/;"	f	class:x_thread_functor
is_finish	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SeptGuard
is_masking	SceneServer/libscenesserver/Mask.cpp	/^bool Mask::is_masking() const$/;"	f	class:Mask
is_odds_gem	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::is_odds_gem(DWORD kind,DWORD id)$/;"	f	class:EquipMaker
is_timeout	SceneServer/libscenesserver/Quest.cpp	/^bool Vars::is_timeout(int timeout) const$/;"	f	class:Vars
is_tmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars::VAR
is_tspecial	tmp/base3/request_parser.cpp	/^bool request_parser::is_tspecial(int c)$/;"	f	class:http::server2::request_parser
is_upgrade	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills
is_use	SceneServer/libscenesserver/Mask.cpp	/^bool Mask::is_use(zObject* ob) const$/;"	f	class:Mask
is_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool Condition::is_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:Condition
is_valid	SceneServer/libscenesserver/QuestCondition.cpp	/^bool TeamCondition::is_valid(const SceneUser* user,const Vars* vars) const$/;"	f	class:TeamCondition
is_valid	SceneServer/libscenesserver/QuestEvent.cpp	/^bool Event::Embranchment::is_valid(SceneUser* user,const Vars* vars)$/;"	f	class:Event::Embranchment
is_valid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars
isblank	base/src/getopt.c	1944;"	d	file:
issetUState	base/include/srvEngine.h	/^	inline bool issetUState(const int state) const$/;"	f	struct:zSceneEntry
isset_flag	base/include/x_socket.h	/^	bool isset_flag(uint32_t _f) const { return bitmask & _f; }$/;"	f	class:x_socket
isset_state	base/include/csCommon.h	/^/;"	f	namespace:Cmd
istemp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
item	SessionServer/libsessionserver/SessionServer.h	/^  Cmd::Session::SessionObject item;$/;"	m	struct:auctionBidInfo
item	SessionServer/libsessionserver/SessionServer.h	/^  Cmd::Session::SessionObject item;$/;"	m	struct:mailContentInfo
item	base/include/srvEngine.h	/^		uint32_t item; \/\/Ëé∑ÂæóÁâ©ÂìÅ$/;"	m	class:zLiveSkillB::ITEM
itemBack	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::itemBack(UserSession *pUser)$/;"	f	class:CNpcDareObj
itemGot	SessionServer/libsessionserver/SessionServer.h	/^  BYTE itemGot;$/;"	m	struct:mailContentInfo
itemGot	SessionServer/libsessionserver/SessionServer.h	/^  BYTE itemGot;$/;"	m	struct:mailHeadInfo
itemGot	SessionServer/libsessionserver/SessionServer.h	/^  BYTE itemGot;$/;"	m	struct:mailTurnBackInfo
itemGot	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
itemID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD itemID;$/;"	m	struct:auctionBidInfo
itemID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
itemNum	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
itemType	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
itemX	base/include/csBox.h	/^	uint32_t itemX;	\/\/“™±ªROLLµƒŒÔ∆∑µƒ◊¯±Íµ„X$/;"	m	struct:Cmd::stTeamRollItemStartUserCmd
itemY	base/include/csBox.h	/^	uint32_t itemY;	\/\/“™±ªROLLµƒŒÔ∆∑µƒ◊¯±Íµ„Y$/;"	m	struct:Cmd::stTeamRollItemStartUserCmd
item_Ti	base/include/csBox.h	/^	int item_Ti;       \/\/‘Ÿ¿¥“ª¥Œ∞¥º¸À˘“‘◊™µΩŒÔ∆∑µƒ∏Ò◊” ˝◊Èœ¬±Í±Í ∂$/;"	m	struct:Cmd::stGetCowBoxInitCmd
item_id	base/include/csBox.h	/^	bool item_id;$/;"	m	struct:Cmd::stSetCowBoxTiquCmd
itemid	SceneServer/libscenesserver/giftBox.h	/^	unsigned int itemid;$/;"	m	struct:boxitem
itemkind	SceneServer/libscenesserver/giftBox.h	/^	unsigned int itemkind;$/;"	m	struct:boxObject
itemlevel	SceneServer/libscenesserver/SceneServer1.h	/^      WORD  itemlevel;      \/\/\/π∫¬ÚŒÔ∆∑µƒµ»º∂$/;"	m	struct:NpcTrade::NpcItem
itemlevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcItem
itemlevel	SceneServer/libscenesserver/giftBox.h	/^	unsigned int itemlevel;$/;"	m	struct:boxObject
items	SceneServer/libscenesserver/SceneServer1.h	/^      NpcItemMultiMap items;  \/\/\/ŒÔ∆∑∂Ø◊˜$/;"	m	struct:NpcTrade::NpcDialog
items	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcDialog
items	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CVoteItem*> items;$/;"	m	class:CVote
items	base/include/srvEngine.h	/^	ITEMS items;$/;"	m	struct:zLiveSkillB
iter	BillServer/old_back/BillServer.h	/^    typedef BillClientContainer::iterator iter;$/;"	t	class:BillClientManager
iter	BillServer/old_back/BillServer.h	/^    typedef CacheContainer::iterator iter;$/;"	t	class:BillCache
iter	GatewayServer/old_back/GatewayServer.h	/^	typedef SceneClient_map::iterator iter;$/;"	t	class:SceneClientManager
iter	SuperServer/FLClientManager.h	/^    typedef FLClientContainer::iterator iter;$/;"	t	class:FLClientManager
iter	SuperServer/InfoClientManager.h	/^    typedef InfoClient_map::iterator iter;$/;"	t	class:InfoClientManager
iter	base/include/srvEngine.h	/^	typedef typename hashmap::iterator iter;$/;"	t	class:LimitHash
iter	base/include/srvEngine.h	/^	typedef typename hashmap::iterator iter;$/;"	t	class:MultiHash
iterator	GatewayServer/old_back/GatewayServer.h	/^	typedef typename set::iterator iterator;$/;"	t	class:CmdChecker
iterator	SceneServer/libscenesserver/SceneServer1.h	/^  typedef KV::iterator iterator;$/;"	t	class:ScenesParser
iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::LiveSkillsManager::Factory
iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:ScenesParser
iterator	SceneServer/libscenesserver/meterialsManager.h	/^	typedef std::map<DWORD,char*>::iterator iterator;$/;"	t	class:meterialsManager
iterator	SceneServer/libscenesserver/scriptTickTask.h	/^	typedef std::map<QWORD,scriptTask*>::iterator iterator;$/;"	t	class:scriptTaskManagement
iterator	base/include/srvEngine.h	/^	typedef SETS::iterator iterator;$/;"	t	struct:zSetObjectB
iterator	base/include/srvEngine.h	/^	typedef typename zPathQueueHead::iterator iterator;$/;"	t	class:zAStar
job	base/include/srvEngine.h	/^	BYTE job;          \/\/ sky ËÅå‰∏öÈôêÂà∂$/;"	m	struct:zObjectB
join	base/io_service_pool.cpp	/^void io_service_pool::join() {$/;"	f	class:io_service_pool
joint	base/include/srvEngine.h	/^	char joint[MAX_NAMESIZE];      \/\/ ËøûÊé•Á¨¶$/;"	m	struct:zColorObjectB
jpegPassport	GatewayServer/old_back/GatewayServer.h	/^	char jpegPassport[5];$/;"	m	class:GateUser
jpegPassport	base/command.h	/^		char jpegPassport[7];$/;"	m	struct:Cmd::stUserRequestLoginCmd
jpegPassport	base/include/csCommon.h	/^/;"	m	struct:Cmd::stUserRequestLoginCmd
judge	SceneServer/libscenesserver/Dice.cpp	/^bool Dice::judge()$/;"	f	class:Dice
judge	base/include/srvEngine.h	/^	int judge(const zPos &midPos,const zPos &endPos)$/;"	f	class:zAStar
judge	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::judge(BYTE seat)$/;"	f	class:DDZCardGame
jumpTo	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
keepDir	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
keepPos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
key	SceneServer/libscenesserver/SceneServer1.h	/^  void key(const std::string& key) $/;"	f	class:ScenesParser
key	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ScenesParser
key	base/command.h	/^			BYTE key[256];	\/\/keep key, the whole array is filled with random num$/;"	m	union:Cmd::stServerReturnLoginSuccessCmd::__anon121
key	base/include/argp.h	/^  int key;$/;"	m	struct:argp_option
key	base/include/csCommon.h	/^/;"	m	union:Cmd::stServerReturnLoginSuccessCmd::__anon197
keyOffset	base/command.h	/^				BYTE keyOffset; \/\/offset of the start index in the key$/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd::__anon121::__anon122
keyOffset	base/include/csCommon.h	/^/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd::__anon197::__anon198
keyValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::multimap<QWORD,DWORD,ltqword>::value_type keyValueType;$/;"	t	class:CSortM
key_des	base/include/csCommon.h	/^/;"	m	class:CEncrypt
key_equal	base/supercmd.h	/^		struct key_equal : public std::binary_function<Cmd::Super::ServerEntry,Cmd::Super::ServerEntry,bool>$/;"	s	namespace:Cmd::Super
key_hash	base/supercmd.h	/^		struct key_hash$/;"	s	namespace:Cmd::Super
key_rc5	base/include/csCommon.h	/^/;"	m	class:CEncrypt
kickUser	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::kickUser(MiniUser *host,MiniUser *u)$/;"	f	class:MiniGame
kickoutMember	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::kickoutMember(SceneUser *pUser,Cmd::stRemoveTeamMemberUserCmd *rev)$/;"	f	class:TeamManager
killPoint	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD killPoint;$/;"	m	class:GangScene
killSummon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
killedNpcNum	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
killnow	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
kind	SceneServer/libscenesserver/SceneServer1.h	/^      WORD  kind;          \/\/\/ŒÔ∆∑¿‡–Õ$/;"	m	struct:NpcTrade::NpcItem
kind	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcItem
kind	SceneServer/libscenesserver/giftBox.h	/^	unsigned int kind;$/;"	m	struct:boxObject
kind	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
kind	base/include/csCommon.h	/^/;"	m	struct:_Object
kind	base/include/srvEngine.h	/^	BYTE kind;          \/\/ Á±ªÂûã$/;"	m	struct:zObjectB
kind	base/include/srvEngine.h	/^	uint32_t  kind;              \/\/ÊäÄËÉΩÁ≥ªÂà´$/;"	m	struct:zSkillB
kind	base/include/srvEngine.h	/^	uint32_t  kind;        \/\/ Á±ªÂûã$/;"	m	struct:zNpcB
kind	base/include/srvEngine.h	/^	uint32_t kind; \/\/ÊäÄËÉΩÁ±ªÂà´$/;"	m	struct:zLiveSkillB
king	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
king	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
kingConsort	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
kingName	SessionServer/libsessionserver/SessionServer.h	/^    char  kingName[MAX_NAMESIZE+1]; \/\/ π˙Õı√˚≥∆$/;"	m	class:CCountry
king_obj_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
king_obj_times	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
kingtime	SessionServer/libsessionserver/SessionServer.h	/^    DWORD kingtime;    \/\/π˙Õı‘⁄Œª ±º‰(–° ±)$/;"	m	class:CCountry
kulou	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
laod_ai	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::laod_ai()$/;"	f	class:SceneNpc
laod_ai	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool SceneArchitecture::laod_ai()$/;"	f	class:SceneArchitecture
largessFailureVictory	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::largessFailureVictory()$/;"	f	class:GangScene
largessWinVictory	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::largessWinVictory()$/;"	f	class:GangScene
last	GatewayServer/old_back/GatewayServer.h	/^	void last(const zRTime& time)$/;"	f	class:CheckInfo
last	GatewayServer/old_back/GatewayServer.h	/^	zRTime& last()$/;"	f	class:CheckInfo
lastBossHp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
lastChangeCountryTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
lastCheckGoodness	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
lastCheckMessage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
lastCheckTime	GatewayServer/old_back/GatewayServer.h	/^	zRTime lastCheckTime;$/;"	m	class:GatewayTask
lastChild	deps/tinyxml/tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:TiXmlNode
lastIncTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
lastKiller	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
lastLevel	SessionServer/libsessionserver/SessionServer.h	/^    DWORD lastLevel; \/\/ ◊Ó∫Û“ª¥ŒÃ·»°Ω±¿¯µƒµ»º∂$/;"	m	class:RecommendSub
lastMTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
lastMoveTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
lastPTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
lastPattern	tmp/MiniServer/MiniServer.h	/^    CardPattern lastPattern;\/\/◊Ó∫Û≥ˆµƒ≈∆$/;"	m	class:DDZCardGame
lastPkTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
lastPointSeat	tmp/MiniServer/MiniServer.h	/^    BYTE lastPointSeat;\/\/…œ“ªæ÷œ»Ω–≈∆µƒ»À$/;"	m	class:DDZCardGame
lastPos1	base/include/srvEngine.h	/^	zPos lastPos1;$/;"	m	struct:zSceneEntry
lastPos2	base/include/srvEngine.h	/^	zPos lastPos2;$/;"	m	struct:zSceneEntry
lastPutSeat	tmp/MiniServer/MiniServer.h	/^    BYTE lastPutSeat;\/\/◊Ó∫Û“ª∏ˆ≥ˆ≈∆µƒ»À$/;"	m	class:DDZCardGame
lastSequenceTime	SuperServer/ServerTask.h	/^		boost::timer lastSequenceTime;        \/**< ◊Ó∫Û“ª¥Œ¥¶¿Ì∆Ù∂ØÀ≥–Úµƒ ±º‰ *\/$/;"	m	class:ServerTask
lastTime	SceneServer/libscenesserver/scriptTickTask.h	/^	time_t lastTime;$/;"	m	struct:scriptTask
lastUpdateTime	GatewayServer/LoginSessionManager.h	/^	ptime lastUpdateTime;$/;"	m	class:LoginSessionManager
lastUpdateTime	GatewayServer/old_back/GatewayServer.h	/^	zRTime lastUpdateTime;$/;"	m	class:LoginSessionManager
lastUseSkill	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
lastUseTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
last_att_gen_attack_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryDare
last_attack_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryDare
last_fulltime	SessionServer/libsessionserver/SessionServer.h	/^    int last_fulltime;$/;"	m	class:CDareUnionCity
last_gen_attack_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryDare
last_king_attack_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryDare
lasthp	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD lasthp;$/;"	m	class:SceneNpc
lastmove	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TradeOrder
lasttime	SceneServer/libscenesserver/SceneServer1.h	/^  int lasttime;$/;"	m	struct:t_NpcAIDefine
lasttime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
lasttime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::phaseDefine
lasttime	SessionServer/libsessionserver/SessionServer.h	/^  DWORD lasttime;$/;"	m	struct:CRelation
leader	SceneServer/libscenesserver/SceneSkill.cpp	/^  SceneUser *leader;$/;"	m	struct:TeamSkillExec	file:
leader	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Team
leader	SceneServer/libscenesserver/TeamManager.cpp	/^	SceneUser *leader;$/;"	m	struct:CheckOfflineExec	file:
leader	SceneServer/libscenesserver/TeamManager.cpp	/^  SceneUser *leader;$/;"	m	struct:CheckAllInOneScreenExec	file:
leader	SceneServer/libscenesserver/TeamManager.cpp	/^  SceneUser *leader;$/;"	m	struct:SendTeamDataExec	file:
leaderid	SessionServer/libsessionserver/SessionServer.h	/^  DWORD leaderid; \/\/sky ∂”≥§ID$/;"	m	struct:Team
leaveBattle	SceneServer/libscenesserver/SceneEntryPk.cpp	/^void SceneEntryPk::leaveBattle()$/;"	f	class:SceneEntryPk
leaveDup	SceneServer/libscenesserver/duplicateManager.cpp	/^bool duplicateManager::leaveDup(SceneUser *user,unsigned short index)$/;"	f	class:duplicateManager
leech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
leech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::Equips
leech	base/include/csCommon.h	/^/;"	s	struct:_Object
leechdom	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
leechdom	base/include/srvEngine.h	/^	} leechdom ;         \/\/ ËçØÂìÅ‰ΩúÁî®$/;"	m	struct:zObjectB	typeref:struct:zObjectB::leechdom_t
leechdom_t	base/include/srvEngine.h	/^		leechdom_t(const std::string& _id="",const std::string& _effect="",const std::string& _time="") $/;"	f	struct:zObjectB::leechdom_t
leechdom_t	base/include/srvEngine.h	/^	struct leechdom_t {$/;"	s	struct:zObjectB
leftProtectTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::ScenePkState
len	SceneServer/libscenesserver/Scene.cpp	/^  const int len;  \/\/\/ ÂæÖÂèëÈÄÅÊåá‰ª§ÁöÑÂ§ßÂ∞è$/;"	m	struct:SceneSendToEveryOne	file:
len	SceneServer/libscenesserver/Scene.cpp	/^  const int len;  \/\/\/ ÂæÖÂèëÈÄÅÊåá‰ª§ÁöÑÂ§ßÂ∞è$/;"	m	struct:SceneSendToUnWatchTrap	file:
len	SceneServer/libscenesserver/Scene.cpp	/^  const int len;  \/\/\/ ÂæÖÂèëÈÄÅÊåá‰ª§ÁöÑÂ§ßÂ∞è$/;"	m	struct:SceneSendToWatchTrap	file:
len	SceneServer/libscenesserver/Scene.cpp	/^  const int len;  \/\/\/ ÂæÖÂèëÈÄÅÊåá‰ª§ÁöÑÂ§ßÂ∞è$/;"	m	struct:SendToEveryOneExceptMe	file:
len	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendCmd_SceneSession
lessBallot	SessionServer/libsessionserver/Vote.cpp	/^bool lessBallot(const CVoteItem* p1,const CVoteItem* p2)$/;"	f
lessExploit	SessionServer/libsessionserver/SessionManager.cpp	/^bool lessExploit(const CGraceUser& p1,const CGraceUser& p2)$/;"	f
lessGraceScore	SessionServer/libsessionserver/SessionManager.cpp	/^bool lessGraceScore(const CGraceUser& p1,const CGraceUser& p2)$/;"	f
lessScore	SessionServer/libsessionserver/Quiz.cpp	/^bool lessScore(const CPothunter& p1,const CPothunter& p2)$/;"	f
lessSeptSort	SessionServer/libsessionserver/Sept.cpp	/^bool lessSeptSort(const CSeptSort& p1,const CSeptSort& p2)$/;"	f
letVoteOver	SessionServer/libsessionserver/Sept.cpp	/^void CSept::letVoteOver()$/;"	f	class:CSept
letVoteOver	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
level	SceneServer/libscenesserver/SceneServer1.h	/^      WORD  level;        \/\/\/◊Ó∏ﬂµ»º∂$/;"	m	struct:NpcTrade::NpcItem
level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcItem
level	SceneServer/libscenesserver/giftBox.h	/^	unsigned int level;$/;"	m	struct:boxObject
level	SessionServer/libsessionserver/SessionServer.h	/^    BYTE level;$/;"	m	class:SceneSession
level	SessionServer/libsessionserver/SessionServer.h	/^    DWORD level()$/;"	f	class:CTech
level	SessionServer/libsessionserver/SessionServer.h	/^    WORD                  level;$/;"	m	class:CUnion
level	SessionServer/libsessionserver/SessionServer.h	/^    WORD  level;$/;"	m	class:UserSession
level	SessionServer/libsessionserver/SessionServer.h	/^  WORD  level;$/;"	m	struct:CRelation
level	base/include/csCommon.h	/^/;"	m	struct:CharBase
level	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_levelupNotify_SceneSession
level	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
level	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_NpcData
level	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
level	base/include/csCommon.h	/^/;"	m	struct:LiveSkill
level	base/include/csCommon.h	/^/;"	m	struct:SaveSkill
level	base/include/csCommon.h	/^/;"	m	struct:_Skill
level	base/include/csCommon.h	/^/;"	m	struct:oskill
level	base/include/srvEngine.h	/^			BYTE level;$/;"	m	struct:zObjectB::material::stuff
level	base/include/srvEngine.h	/^		BYTE level;$/;"	m	struct:zObjectB::skills
level	base/include/srvEngine.h	/^	uint16_t level;          \/\/ ÈÅìÂÖ∑Á≠âÁ∫ß$/;"	m	struct:zObjectB
level	base/include/srvEngine.h	/^	uint16_t level;    \/\/ Á±ªÂûã$/;"	m	struct:zUpgradeObjectB
level	base/include/srvEngine.h	/^	uint16_t level;   $/;"	m	struct:zSoulStoneB
level	base/include/srvEngine.h	/^	uint16_t level; \/\/ ÊäÄËÉΩÁ≠âÁ∫ß$/;"	m	struct:skillbonus
level	base/include/srvEngine.h	/^	uint16_t level; \/\/ÊäÄËÉΩÁ≠âÁ∫ß$/;"	m	struct:zLiveSkillB
level	base/include/srvEngine.h	/^	uint32_t  level;              \/\/ÊäÄËÉΩÁ≠âÁ∫ß$/;"	m	struct:zSkillB
level	base/include/srvEngine.h	/^	uint32_t  level;        \/\/ Á≠âÁ∫ß$/;"	m	struct:zExperienceB
level	base/include/srvEngine.h	/^	uint32_t  level;        \/\/ Á≠âÁ∫ß$/;"	m	struct:zHonorB
level	base/include/srvEngine.h	/^	uint32_t  level;        \/\/ Á≠âÁ∫ß$/;"	m	struct:zNpcB
levelObjectsfamale	SceneServer/libscenesserver/giftBox.h	/^	std::vector<_levelObj> levelObjectsfamale;\/\/”Îµ»º∂œ‡πÿµƒŒÔ∆∑,≈Æ–‘	$/;"	m	struct:boxItem
levelObjectsmale	SceneServer/libscenesserver/giftBox.h	/^	std::vector<_levelObj> levelObjectsmale;\/\/”Îµ»º∂œ‡πÿµƒŒÔ∆∑,ƒ––‘	$/;"	m	struct:boxItem
levelUp	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::levelUp()$/;"	f	class:CartoonPet
levelUp	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::levelUp()$/;"	f	class:ScenePet
level_of_material	SceneServer/libscenesserver/RebuildObject.cpp	/^bool EquipMaker::level_of_material(DWORD id,DWORD num,DWORD level,zObjectB* base)$/;"	f	class:EquipMaker
levels	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CSubject> levels;$/;"	m	class:CSubjectM
levelsept	base/include/csCommon.h	/^/;"	m	struct:CharBase
levinappend	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
levinflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
lib	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::__anon75
lib_dir	BillServer/Makefile	/^lib_dir = -L..\/deps\/tinyxml -L$(boost_home)\/stage\/lib -L..\/base$/;"	m
lib_dir	FLServer/Makefile	/^lib_dir = -L..\/deps\/tinyxml -L$(boost_home)\/stage\/lib -L..\/base$/;"	m
lib_dir	GatewayServer/Makefile	/^lib_dir = -L..\/deps\/tinyxml -L$(boost_home)\/stage\/lib -L..\/base$/;"	m
lib_dir	RecordServer/Makefile	/^lib_dir = -L..\/deps\/tinyxml -L$(boost_home)\/stage\/lib -L..\/base$/;"	m
lib_dir	SceneServer/Makefile	/^lib_dir = -L..\/deps\/tinyxml -L$(boost_home)\/stage\/lib -L..\/base$/;"	m
lib_dir	SessionServer/Makefile	/^lib_dir = -L..\/deps\/tinyxml -L$(boost_home)\/stage\/lib -L..\/base$/;"	m
lib_dir	SuperServer/Makefile	/^lib_dir = -L..\/deps\/tinyxml -L$(boost_home)\/stage\/lib -L..\/base$/;"	m
lib_dir	client/Makefile	/^lib_dir = -L..\/deps\/tinyxml -L$(boost_home)\/stage\/lib -L..\/base$/;"	m
lifeTime	base/include/srvEngine.h	/^	zTime lifeTime;                  \/**< ÁîüÂëΩÊúüÔºåËÆ∞ÂΩïÊØèÊ¨°Áä∂ÊÄÅÊîπÂèòÁöÑÊó∂Èó¥ *\/$/;"	m	class:x_tcp_clientTask
lifeTime	base/src/x_tcptask.h	/^	boost::timer lifeTime;                \/**< ËøûÊé•ÂàõÂª∫Êó∂Èó¥ËÆ∞ÂΩï *\/$/;"	m	class:x_tcptask
lineBreak	deps/tinyxml/tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter
liquidState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
list	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<DWORD> list;$/;"	m	class:EmperorForbid
list	tmp/MiniServer/MiniServer.h	/^    CardList list;$/;"	m	class:CardPattern
listAll	base/include/srvEngine.h	/^	void listAll()$/;"	f	class:zDataBM
list_iterator	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename LIST::iterator list_iterator;$/;"	t	class:ProductFactory
liveskillbm	base/src/zDatabaseManager.cpp	/^zDataBM<zLiveSkillB,LiveSkillBase> &liveskillbm = zDataBM<zLiveSkillB,LiveSkillBase>::getMe();$/;"	v
lm_updamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
lmargin	base/src/getopt.c	/^  size_t lmargin, rmargin;	\/* Left and right margins.  *\/$/;"	m	struct:argp_fmtstream	file:
load	SceneServer/libscenesserver/Horse.cpp	/^int Horse::load(BYTE* d)$/;"	f	class:Horse
load	SceneServer/libscenesserver/Quest.cpp	/^bool UserVar::load()$/;"	f	class:UserVar
load	SceneServer/libscenesserver/Quest.cpp	/^int Quest::load(SceneUser& user,BYTE* dest,unsigned long &dest_size)$/;"	f	class:Quest
load	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::load(BYTE* dest,unsigned long &dest_size)$/;"	f	class:QuestList
load	SceneServer/libscenesserver/Quest.cpp	/^int UserVar::VAR::load(BYTE* dest)$/;"	f	class:UserVar::VAR
load	SceneServer/libscenesserver/Quest.cpp	/^int Vars::load(BYTE* dest)$/;"	f	class:Vars
load	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
load	SceneServer/libscenesserver/Skill.cpp	/^zSkill *zSkill::load(SceneEntryPk *pEntry,const SaveSkill *s)$/;"	f	class:zSkill
load	SceneServer/libscenesserver/zObject.cpp	/^int StorePack::load(BYTE* dest)$/;"	f	class:StorePack
load	SceneServer/libscenesserver/zObject.cpp	/^zObject *zObject::load(const SaveObject *o)$/;"	f	class:zObject
load	SessionServer/libsessionserver/Army.cpp	/^bool CArmyM::load()$/;"	f	class:CArmyM
load	SessionServer/libsessionserver/CityManager.cpp	/^bool CCityM::load()$/;"	f	class:CCityM
load	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountryM::load()$/;"	f	class:CCountryM
load	SessionServer/libsessionserver/DareRecordManager.cpp	/^bool CDareRecordM::load()$/;"	f	class:CDareRecordM
load	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareM::load()$/;"	f	class:CNpcDareM
load	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendM::load()$/;"	f	class:RecommendM
load	SessionServer/libsessionserver/Vote.cpp	/^bool CVoteM::load()$/;"	f	class:CVoteM
load	base/x_config.cpp	/^bool x_config::load()$/;"	f	class:x_config
load	base/x_simple_db_table.cpp	/^bool x_simple_db_table::load()$/;"	f	class:x_simple_db_table
loadActList	SessionServer/libsessionserver/Gift.cpp	/^DWORD Gift::loadActList()$/;"	f	class:Gift
loadAllBM	base/src/zDatabaseManager.cpp	/^bool loadAllBM()$/;"	f
loadAllFromDB	SessionServer/libsessionserver/CartoonPetService.cpp	/^bool CartoonPetService::loadAllFromDB()$/;"	f	class:CartoonPetService
loadAllyFromDB	SessionServer/libsessionserver/Ally.cpp	/^bool CAllyM::loadAllyFromDB()$/;"	f	class:CAllyM
loadBattleScene	SceneServer/libscenesserver/SceneManager.cpp	/^Scene * SceneManager::loadBattleScene(DWORD baseid)$/;"	f	class:SceneManager
loadCaptainFromDB	SessionServer/libsessionserver/Army.cpp	/^bool CArmy::loadCaptainFromDB()$/;"	f	class:CArmy
loadDB	SessionServer/libsessionserver/EmperorForbid.cpp	/^void EmperorForbid::loadDB()$/;"	f	class:EmperorForbid
loadFilter	base/src/zMisc.cpp	/^void loadFilter(NFilterModuleArray & nFMA,PSTR szPattern)$/;"	f
loadFromDB	SessionServer/libsessionserver/CartoonPetService.cpp	/^void CartoonPetService::loadFromDB(DWORD masterID)$/;"	f	class:CartoonPetService
loadFromDatabase	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::loadFromDatabase()$/;"	f	class:CRelationManager
loadGiftList	SessionServer/libsessionserver/Gift.cpp	/^DWORD Gift::loadGiftList()$/;"	f	class:Gift
loadItemFromDB	SessionServer/libsessionserver/Vote.cpp	/^bool CVote::loadItemFromDB()$/;"	f	class:CVote
loadItemFromVec	SessionServer/libsessionserver/Vote.cpp	/^bool CVote::loadItemFromVec(std::vector<CTech*>& itemset)$/;"	f	class:CVote
loadMapFile	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::loadMapFile()$/;"	f	class:Scene
loadNewMail	SessionServer/libsessionserver/MailService.cpp	/^void MailService::loadNewMail()$/;"	f	class:MailService
loadNpcCommonChatTable	SceneServer/libscenesserver/SceneNpcManager.cpp	/^bool SceneNpcManager::loadNpcCommonChatTable()$/;"	f	class:SceneNpcManager
loadRecommendSubFromDB	SessionServer/libsessionserver/RecommendManager.cpp	/^bool Recommend::loadRecommendSubFromDB()$/;"	f	class:Recommend
loadRushData	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::loadRushData(DWORD rushID,DWORD rushDelay,DWORD countryID)$/;"	f	class:Rush
loadScene	SceneServer/libscenesserver/SceneManager.cpp	/^Scene * SceneManager::loadScene(int type\/*Scene::SceneType type*\/,DWORD countryid,DWORD mapid)$/;"	f	class:SceneManager
loadSchoolFromDB	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::loadSchoolFromDB()$/;"	f	class:CSchoolM
loadSchoolMemberFromDB	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::loadSchoolMemberFromDB()$/;"	f	class:CSchool
loadSchoolMemberFromDB	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::loadSchoolMemberFromDB()$/;"	f	class:CSchoolM
loadScript	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool NpcAIController::loadScript(DWORD id)$/;"	f	class:NpcAIController
loadSeptMemberFromDB	SessionServer/libsessionserver/Sept.cpp	/^bool CSept::loadSeptMemberFromDB()$/;"	f	class:CSept
loadServerlist	SuperServer/SuperServer.cpp	/^bool SuperService::loadServerlist()$/;"	f	class:SuperService
loadSkillStatus	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
loadTeam	SceneServer/libscenesserver/TeamManager.cpp	/^bool TeamManager::loadTeam(SceneUser *leader,TempArchiveMember *data)$/;"	f	class:TeamManager
loadTechFromDB	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::loadTechFromDB()$/;"	f	class:CCountry
loadUnionMemberFromDB	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
load_timer	SceneServer/libscenesserver/Quest.cpp	/^int Vars::load_timer(BYTE* dest)$/;"	f	class:Vars
loc	base/include/csCommon.h	/^/;"	f	struct:stObjectLocation
local_addr	base/include/x_socket.h	/^	struct sockaddr_in local_addr;        \/**< Â•óÊé•Âè£Âú∞ÂùÄ *\/$/;"	m	class:x_socket	typeref:struct:x_socket::sockaddr_in
localeID	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD localeID;$/;"	m	struct:InitObject
localeID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::InitObject
location	deps/tinyxml/tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:TiXmlBase
lock	base/include/srvEngine.h	/^	void lock()$/;"	f	struct:zUser
lockTarget	SceneServer/libscenesserver/SceneServer1.h	/^  bool lockTarget;$/;"	m	class:SceneNpc
lockedUserTime	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime lockedUserTime;$/;"	m	class:SceneNpc
logger	BillServer/BillUser.cpp	/^void BillUser::logger(const char *coin_type,DWORD acc,const char *act,DWORD cur,DWORD change,DWORD type,const char *action)$/;"	f	class:BillUser
logger	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	class:O::LiveSkills::__anon88::Zebra
logger	SceneServer/libscenesserver/zObject.cpp	/^void zObject::logger(QWORD createid,DWORD objid,char *objname,DWORD num,DWORD change,DWORD type,DWORD srcid,char *srcname,DWORD dstid,char *dstname,const char *action,zObjectB *base,BYTE kind,BYTE upgrade)$/;"	f	class:zObject
logger	base/common.cpp	/^	x_logger* logger = NULL;$/;"	m	namespace:Seal	file:
logger	base/x_logger.h	/^	log4cxx::LoggerPtr logger;$/;"	m	class:x_logger
login	BillServer/BillUser.cpp	/^bool BillUser::login(const DWORD loginTempID)$/;"	f	class:BillUser
login	BillServer/old_back/BillManager.cpp	/^bool BillManager::login(const DWORD accid,const DWORD loginTempID)$/;"	f	class:BillManager
login	SceneServer/libscenesserver/SceneServer1.h	/^      bool login;$/;"	m	struct:MessageSystem::t_Message
login	client/Game.cpp	/^bool Game::login(const std::string username, const std::string passwd)$/;"	f	class:Game
loginReturn	FLServer/LoginManager.cpp	/^void LoginManager::loginReturn(const DWORD loginTempID,const BYTE retcode,const bool tm)$/;"	f	class:LoginManager
loginServer	FLServer/FLServer.h	/^	boost::shared_ptr<server> loginServer;$/;"	m	class:FLService
loginTaskSet	FLServer/LoginManager.h	/^	LoginTaskHashmap loginTaskSet;$/;"	m	class:LoginManager
loginTempID	BillServer/old_back/BillServer.h	/^  DWORD loginTempID;        \/**< µ«¬Ω¡Ÿ ±±‡∫≈ *\/$/;"	m	struct:BillInfo
loginTempID	GatewayServer/old_back/GatewayServer.h	/^	DWORD loginTempID;$/;"	m	class:GatewayTask
loginTempID	base/command.h	/^		DWORD loginTempID;$/;"	m	struct:Cmd::stPasswdLogonUserCmd
loginTempID	base/command.h	/^		DWORD loginTempID;$/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd
loginTempID	base/flcmd.h	/^			DWORD loginTempID;$/;"	m	struct:Cmd::FL::t_idinuse_Session
loginTempID	base/flcmd.h	/^		DWORD loginTempID;$/;"	m	struct:Cmd::t_NewLoginSession
loginTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stPasswdLogonUserCmd
loginTempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd
loginTempID	base/supercmd.h	/^			DWORD loginTempID;$/;"	m	struct:Cmd::Super::t_idinuse_Bill
loginTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
loginTimeOut	BillServer/BillUser.cpp	/^DWORD BillUser::loginTimeOut(zTime current) $/;"	f	class:BillUser
loginmsgParse	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::loginmsgParse(const Cmd::t_NullCmd *pNullCmd,DWORD cmdLen)$/;"	f	class:SceneTask
logout	BillServer/BillUser.cpp	/^bool BillUser::logout(const DWORD loginTempID)$/;"	f	class:BillUser
logout	BillServer/old_back/BillManager.cpp	/^bool BillManager::logout(const DWORD accid,const DWORD loginTempID)$/;"	f	class:BillManager
logout	GatewayServer/old_back/GatewayServer.h	/^	bool logout;$/;"	m	class:GateUser
long_end	base/src/getopt.c	/^  struct option *long_end;$/;"	m	struct:parser_convert_state	typeref:struct:parser_convert_state::option	file:
long_len	base/src/getopt.c	/^  size_t long_len;		\/* Getopt long options vector.  *\/$/;"	m	struct:parser_sizes	file:
long_opt_col	base/src/getopt.c	/^  int long_opt_col;$/;"	m	struct:uparams	file:
long_opts	base/src/getopt.c	/^  struct option *long_opts;$/;"	m	struct:parser	typeref:struct:parser::option	file:
lordPutTime	tmp/MiniServer/MiniServer.h	/^    BYTE lordPutTime;\/\/µÿ÷˜≥ˆπ˝º∏¥Œ≈∆$/;"	m	class:DDZCardGame
lordSeat	tmp/MiniServer/MiniServer.h	/^    BYTE lordSeat;\/\/µÿ÷˜µƒŒª÷√$/;"	m	class:DDZCardGame
lose	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniGameScore
lost	base/include/srvEngine.h	/^	void lost(NpcLostObject &nlo,int value,int value1,int value2,int vcharm,int vlucky,int player_level,int DropRate,int DropRateLevel)$/;"	f	struct:NpcCarryObject
lostAll	base/include/srvEngine.h	/^	void lostAll(NpcLostObject &nlo)$/;"	f	struct:NpcCarryObject
lostGreen	base/src/zDatabase.cpp	/^void NpcCarryObject::lostGreen(NpcLostObject &nlo,int value,int value1,int value2,int vcharm,int vlucky)$/;"	f	class:NpcCarryObject
lostObject	SceneServer/libscenesserver/SceneServer1.h	/^  bool lostObject;$/;"	m	class:SceneNpc
lowLevel	SceneServer/libscenesserver/SceneServer1.h	/^      WORD  lowLevel;        \/\/\/◊ÓµÕµ»º∂$/;"	m	struct:NpcTrade::NpcItem
lowLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcItem
lt_client	BillServer/old_back/BillServer.h	/^    struct lt_client$/;"	s	class:BillClientManager
lt_client	SuperServer/InfoClientManager.h	/^    struct lt_client$/;"	s	class:InfoClientManager
ltqword	SessionServer/libsessionserver/SessionServer.h	/^    struct ltqword$/;"	s	class:CSortM
ltstring	SessionServer/libsessionserver/OfflineMessage.cpp	/^struct ltstring$/;"	s	file:
ltword	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills::TeamManager
ltword	SessionServer/libsessionserver/SessionServer.h	/^    struct ltword$/;"	s	class:CSchoolMember
lua_timeSkill	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::lua_timeSkill( DWORD id, WORD level, int target, int Rate, DWORD time1, DWORD time2 )$/;"	f	class:SceneNpc
lua_useSkill	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::lua_useSkill( DWORD id, WORD level, int target, int Rate, DWORD cond1, DWORD cond2 )$/;"	f	class:SceneNpc
luabind	SceneServer/libscenesserver/SceneServer1.h	/^namespace luabind$/;"	n
luabind	SceneServer/libscenesserver/ScenesServer.h	/^/;"	n
luck	SceneServer/libscenesserver/SceneServer1.h	/^      int luck;$/;"	m	struct:EquipMaker::Odds
luck	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:EquipMaker::Odds
luckRangeValue	base/include/srvEngine.h	/^struct luckRangeValue$/;"	s
lull	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
lull	base/include/csCommon.h	/^/;"	m	struct:_Object
lull	base/include/srvEngine.h	/^	rangeValue lull; \/\/È∫ªÁóπÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
lullRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
lulldef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
lulldef	base/include/csCommon.h	/^/;"	m	struct:_Object
lulldef	base/include/srvEngine.h	/^			luckRangeValue lulldef;    \/\/ ÊäóÈ∫ªÁóπÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
lulldef	base/include/srvEngine.h	/^	rangeValue lulldef; \/\/ÊäóÈ∫ªÁóπÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
lupdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
lure	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
lure	base/include/csCommon.h	/^/;"	m	struct:_Object
lure	base/include/srvEngine.h	/^	rangeValue lure; \/\/ËØ±ÊÉëÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
luredef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
luredef	base/include/csCommon.h	/^/;"	m	struct:_Object
luredef	base/include/srvEngine.h	/^			luckRangeValue luredef;    \/\/ ÊäóËØ±ÊÉëÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
luredef	base/include/srvEngine.h	/^	rangeValue luredef; \/\/ÊäóËØ±ÊÉëÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
lv	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
lv	base/include/srvEngine.h	/^	uint32_t lv;         \/\/ Á≠âÁ∫ß$/;"	m	struct:zPetB
mFileName	SceneServer/libscenesserver/SceneServer1.h	/^  std::string mFileName;$/;"	m	class:LuaScript
mLuaState	SceneServer/libscenesserver/SceneServer1.h	/^  lua_State  * mLuaState;$/;"	m	class:LuaVM
mSocket	base/src/x_tcptask.h	/^	x_socket mSocket;                \/**< Â∫ïÂ±ÇÂ•óÊé•Âè£ *\/$/;"	m	class:x_tcptask
mVMs	SceneServer/libscenesserver/SceneServer1.h	/^  VMList  mVMs;$/;"	m	class:ScriptingSystemLua
m_ItemCoolTimes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
m_Lock	base/src/zTCPClientTaskPool.cpp	/^	zMutex m_Lock;$/;"	m	class:x_tcp_clientTaskThread	file:
m_bCanJump	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
m_sort	tmp/MiniServer/CardPattern.cpp	/^class m_sort$/;"	c	file:
m_sort	tmp/MiniServer/DDZCardGame.cpp	/^class m_sort$/;"	c	file:
m_tickTime	SuperServer/ServerTask.h	/^		DWORD m_tickTime;$/;"	m	class:ServerTask
m_write_buf	base/src/tcp_socket.h	/^	buffer_type m_write_buf;$/;"	m	class:tcp_socket
m_write_buf	base/tcp_client.h	/^	buffer_type m_write_buf;$/;"	m	class:tcp_client
m_write_buf	base/tcp_task.h	/^	buffer_type m_write_buf;$/;"	m	class:tcp_task
mac_addr	base/command.h	/^		char mac_addr[13];$/;"	m	struct:Cmd::stUserRequestLoginCmd
magic	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::stMapFileHeader
magicattack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
magicrange_hash	SceneServer/libscenesserver/ScenesServer.h	4476;"	d
mailCheckInfo	SessionServer/libsessionserver/SessionServer.h	/^struct mailCheckInfo$/;"	s
mailContentInfo	SessionServer/libsessionserver/SessionServer.h	/^struct mailContentInfo$/;"	s
mailForwardInfo	SessionServer/libsessionserver/SessionServer.h	/^struct mailForwardInfo$/;"	s
mailHeadInfo	SessionServer/libsessionserver/SessionServer.h	/^struct mailHeadInfo$/;"	s
mailNewInfo	SessionServer/libsessionserver/SessionServer.h	/^struct mailNewInfo$/;"	s
mailStateInfo	SessionServer/libsessionserver/SessionServer.h	/^struct mailStateInfo$/;"	s
mailText	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
mailTurnBackInfo	SessionServer/libsessionserver/SessionServer.h	/^struct mailTurnBackInfo$/;"	s
mail_check_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_check_define[] = {$/;"	v
mail_content_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_content_define[] = {$/;"	v
mail_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_define[] = {$/;"	v
mail_forward_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_forward_define[] = {$/;"	v
mail_head_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_head_define[] = {$/;"	v
mail_item_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_item_define[] = {$/;"	v
mail_new_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_new_define[] = {$/;"	v
mail_state_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_state_define[] = {$/;"	v
mail_turnback_define	SessionServer/libsessionserver/MailService.cpp	/^const dbCol mail_turnback_define[] = {$/;"	v
main	BillServer/BillServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	BillServer/old_back/BillServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	FLServer/FLServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	GatewayServer/GatewayServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	GatewayServer/old_back/GatewayServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	RecordServer/RecordServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	SceneServer/SceneServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Packages
main	SceneServer/libscenesserver/ScenesServer1.cpp	/^int main(int argc,char *argv[])$/;"	f
main	SessionServer/SessionServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	SuperServer/SuperServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	base/x_service.cpp	/^void x_service::main() {$/;"	f	class:x_service
main	client/client.cpp	/^int main()$/;"	f
main	tmp/MiniServer/MiniServer.cpp	/^int main(int argc,char **argv)$/;"	f
main	tmp/base2/client.cpp	/^int main()$/;"	f
main	tmp/base2/main.cpp	/^int main(int argc, char* argv[])$/;"	f
main	tmp/base3/main.cpp	/^int main(int argc, char* argv[])$/;"	f
mainMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
mainRoleX	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
mainRoleY	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
mainloop	base/include/srvEngine.h	/^	volatile bool mainloop;              \/**< ÊòØÂê¶Â∑≤ÁªèËøõÂÖ•‰∏ªÂ§ÑÁêÜÂæ™ÁéØ *\/$/;"	m	class:x_tcp_clientTask
make	SceneServer/libscenesserver/RebuildObject.cpp	/^int RebuildObject::make(SceneUser& user, DWORD dwID, int num, BYTE kind)$/;"	f	class:RebuildObject
make	SceneServer/libscenesserver/RebuildObject.cpp	/^zObject* EquipMaker::make(SceneUser* user,zObjectB* base, BYTE kind, int flag)$/;"	f	class:EquipMaker
make	SceneServer/libscenesserver/SceneServer1.h	/^    Base* make (zXMLParser& xml,xmlNodePtr& node)$/;"	f	class:MakeFunction::Compare
make	SceneServer/libscenesserver/SceneServer1.h	/^    Base* make (zXMLParser& xml,xmlNodePtr& node)$/;"	f	class:MakeFunction::Content
make	SceneServer/libscenesserver/SceneServer1.h	/^    Base* make (zXMLParser& xml,xmlNodePtr& node)$/;"	f	class:MakeFunction::Prop
make	SceneServer/libscenesserver/SceneServer1.h	/^    Base* make (zXMLParser& xml,xmlNodePtr& node)$/;"	f	class:MakeFunction::Update
make	SceneServer/libscenesserver/SceneServer1.h	/^    Base* make (zXMLParser& xml,xmlNodePtr& node)$/;"	f	class:MakeFunction::Void
make	base/include/srvEngine.h	/^	uint16_t make;          \/\/ ÊâìÈÄ†$/;"	m	struct:zObjectB
makeSeatID	tmp/MiniServer/MiniServer.h	/^    Cmd::MiniSeatID makeSeatID(BYTE seat){return Cmd::MiniSeatID(id.type,id.room,id.game,seat);}$/;"	f	class:MiniGame
make_hol	base/src/getopt.c	/^make_hol (const struct argp *argp, struct hol_cluster *cluster)$/;"	f	file:
make_material	SceneServer/libscenesserver/RebuildObject.cpp	/^zObject* EquipMaker::make_material(zObjectB* base)$/;"	f	class:EquipMaker
maker	base/include/csCommon.h	/^/;"	m	struct:_Object
makerName	SceneServer/libscenesserver/script_func.cpp	/^void makerName(const char *name,DWORD thisid)$/;"	f
male	SceneServer/libscenesserver/SceneRelation.cpp	/^  SceneUser *male;$/;"	m	struct:FindConsort	file:
map	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::map(const std::string& name)$/;"	f	class:GuardNpc
mapID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD mapID;$/;"	m	struct:worldMsg
mapID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_broadcastScene_SceneSession
mapID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendCmd_SceneSession
mapIndex	GatewayServer/old_back/GatewayServer.h	/^	MapIndex mapIndex;$/;"	m	class:SceneClient
mapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
mapName	base/include/csCommon.h	/^/;"	m	struct:CharBase
mapName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_cityRush_SceneSession
mapScreenIndex	GatewayServer/old_back/GatewayServer.h	/^	DWORD mapScreenIndex;$/;"	m	class:GateUser
mapTempID	RecordServer/RecordUser.h	/^	uint32_t mapTempID;$/;"	m	class:RecordUser
mapValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,QWORD>::value_type mapValueType;$/;"	t	class:CSortM
map_dic	GatewayServer/old_back/GatewayServer.h	/^	MapMap map_dic;$/;"	m	class:CountryInfo
map_file	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_changeScene_SceneSession
map_file	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
map_id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_changeScene_SceneSession
map_id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_removeScene_SceneSession
map_id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_unloadScene_SceneSession
map_info	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
map_kind	base/include/srvEngine.h	/^	uint32_t map_kind;$/;"	m	struct:zLiveSkillB
map_name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_changeScene_SceneSession
map_name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
mapid	GatewayServer/old_back/GatewayServer.h	/^		DWORD mapid;$/;"	m	struct:CountryInfo::CountryDic
mapid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::CountryInfo
mapid	SceneServer/libscenesserver/duplicateManager.h	/^	DWORD mapid;$/;"	m	struct:dupScenePair
mapid	base/include/csCommon.h	/^/;"	m	struct:CharBase
mapname	GatewayServer/old_back/GatewayServer.h	/^		std::string mapname;$/;"	m	struct:CountryInfo::Info
mapper	base/include/srvEngine.h	/^	Sock2Port mapper;$/;"	m	class:zMTCPServer
mapping	tmp/base3/mime_types.cpp	/^struct mapping$/;"	s	namespace:http::server2::mime_types	file:
mappings	tmp/base3/mime_types.cpp	/^} mappings[] =$/;"	m	namespace:http::server2::mime_types	typeref:struct:http::server2::mime_types::mapping	file:
mappoint_num	SessionServer/libsessionserver/SessionServer.h	/^const int mappoint_num = 10;$/;"	v
mark	base/include/srvEngine.h	/^	uint32_t mark;$/;"	m	struct:zSetObjectB
mask	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
master	SessionServer/libsessionserver/SessionServer.h	/^    CSeptMember          *master;$/;"	m	class:CSept
master	SessionServer/libsessionserver/SessionServer.h	/^    CUnionMember          *master;$/;"	m	class:CUnion
masterID	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD masterID;$/;"	m	class:ScenePet
masterID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ScenePet
masterID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapPetData
masterIsAlive	SceneServer/libscenesserver/SceneServer1.h	/^  bool masterIsAlive;$/;"	m	class:ScenePet
masterIsAlive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ScenePet
masterName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createSchool_SceneSession
masterName	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapPetData
masterName	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
masterName	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
masterType	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD masterType;$/;"	m	class:ScenePet
masterType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ScenePet
masterType	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapPetData
master_balance	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  master_balance;$/;"	m	class:CSchoolMember
master_balance	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
master_total	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  master_total;$/;"	m	class:CSchoolMember
master_total	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
match_pattern	tmp/MiniServer/CardPattern.cpp	/^bool CardPattern::match_pattern(const DWORD &packNum,const Cmd::Card *cards,const DWORD &num,CardPattern &pat)$/;"	f	class:CardPattern
material	SceneServer/libscenesserver/giftBox.h	/^	unsigned int material;$/;"	m	struct:boxObject
material	base/include/srvEngine.h	/^	struct material$/;"	s	struct:zObjectB
material_level	SceneServer/libscenesserver/SceneServer1.h	/^      double material_level;$/;"	m	struct:EquipMaker::Odds
material_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:EquipMaker::Odds
matk	base/include/srvEngine.h	/^	uint32_t matk;       \/\/ È≠îÊîª‰∏ãÈôê$/;"	m	struct:zPetB
max	SceneServer/libscenesserver/SceneServer1.h	/^      bool max(T& ret,const luckRangeValue &rv)$/;"	f	class:EquipMaker
max	base/include/srvEngine.h	/^	uint16_t max;$/;"	m	struct:rangeValue
maxConns	base/src/x_tcptaskpool.h	/^	const int maxConns;                    \/**< Á∫øÁ®ãÊ±†Âπ∂Ë°åÂ§ÑÁêÜËøûÊé•ÁöÑÊúÄÂ§ßÊï∞Èáè *\/$/;"	m	class:x_tcptaskpool
maxGatewayUser	FLServer/LoginManager.cpp	/^DWORD LoginManager::maxGatewayUser=MAX_GATEWAYUSER;$/;"	m	class:LoginManager	file:
maxGatewayUser	FLServer/LoginManager.h	/^	static DWORD maxGatewayUser;$/;"	m	class:LoginManager
maxGold	SessionServer/libsessionserver/SessionServer.h	/^  DWORD maxGold;$/;"	m	struct:auctionBidInfo
maxID	BillServer/old_back/BillServer.h	/^    DWORD maxID;$/;"	m	class:BillClientManager
maxID	base/include/srvEngine.h	/^	T maxID;$/;"	m	class:zUniqueID
maxMoney	SessionServer/libsessionserver/SessionServer.h	/^  DWORD maxMoney;$/;"	m	struct:auctionBidInfo
maxRollmember	SceneServer/libscenesserver/TeamManager.cpp	/^	TeamMember * maxRollmember;	\/\/sky ‘⁄ROLL÷– §≥ˆµƒ≥…‘±µÿ÷∑$/;"	m	struct:ComparisonRollnumExec	file:
maxSamplePPS	GatewayServer/old_back/GatewayServer.h	/^	static const DWORD maxSamplePPS = 145;$/;"	m	class:GatewayTask
maxSize	base/src/x_buffer.h	/^	inline uint32_t maxSize() const$/;"	f	class:ByteBuffer
maxThreadCount	base/src/x_tcptaskpool.h	/^	int maxThreadCount;                    \/**< Á∫øÁ®ãÊ±†‰∏≠ÂêåÊó∂Â≠òÂú®‰∏ªÂ§ÑÁêÜÁ∫øÁ®ãÁöÑÊúÄÂ§ß‰∏™Êï∞ *\/$/;"	m	class:x_tcptaskpool
maxUniqueID	SceneServer/libscenesserver/SceneServer1.h	/^  static const DWORD maxUniqueID = 100000;$/;"	m	class:SceneNpc
maxUniqueID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
maxUserNum	tmp/MiniServer/MiniServer.h	/^    BYTE maxUserNum;\/\/◊Ó∂‡»À ˝$/;"	m	class:MiniGame
maxVerifyThreads	base/src/x_tcptaskpool.h	/^	static const int maxVerifyThreads = 4;          \/**< ÊúÄÂ§ßÈ™åËØÅÁ∫øÁ®ãÊï∞Èáè *\/$/;"	m	class:x_tcptaskpool
max_exp	SceneServer/libscenesserver/ScenesServer.cpp	/^QWORD max_exp = 0;$/;"	v
max_level	SceneServer/libscenesserver/ScenesServer.cpp	/^WORD max_level = 0;$/;"	v
max_level	base/include/srvEngine.h	/^	BYTE max_level; \/\/ÊúÄÂ§ßÁ≠âÁ∫ß$/;"	m	struct:zLiveSkillB
max_number	base/include/srvEngine.h	/^		uint32_t max_number; \/\/ÊúÄÂ§ßÊï∞Èáè$/;"	m	class:zLiveSkillB::ITEM
max_point_bonus	base/include/srvEngine.h	/^	BYTE max_point_bonus; \/\/ÊúÄÂ§ßÂ¢ûÂä†ÊäÄËÉΩÁÇπ$/;"	m	struct:zLiveSkillB
max_size	base/src/x_buffer.h	/^	uint32_t max_size;$/;"	m	class:CmdBuffer_wrapper
maxatk	base/include/srvEngine.h	/^	uint32_t maxatk;     \/\/ Áâ©Êîª‰∏äÈôê$/;"	m	struct:zPetB
maxattack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
maxcmds	SceneServer/libscenesserver/scriptTickTask.h	/^	static const unsigned int maxcmds = 100;$/;"	m	class:scriptMessageFilter
maxcount	base/include/csCommon.h	/^/;"	m	struct:oskill
maxdamage	base/include/srvEngine.h	/^	uint32_t  maxdamage;      \/\/ ÊúÄÂ§ßÊîªÂáªÂäõ$/;"	m	struct:zNpcB
maxdur	base/include/csCommon.h	/^/;"	m	struct:_Object
maxhonor	base/include/csCommon.h	/^/;"	m	struct:CharBase
maxhonor	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
maxhp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
maxhp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
maxhp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
maxhp	base/include/csCommon.h	/^/;"	m	struct:CharState
maxhp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
maxhp	base/include/csCommon.h	/^/;"	m	struct:_Object
maxhp	base/include/srvEngine.h	/^	luckRangeValue maxhp;    \/\/ ÊúÄÂ§ßÁîüÂëΩÂÄº$/;"	m	struct:zColorObjectB
maxhp	base/include/srvEngine.h	/^	uint32_t maxhp;          \/\/ ÊúÄÂ§ßÁîüÂëΩÂÄº$/;"	m	struct:zObjectB
maxhp	base/include/srvEngine.h	/^	uint32_t maxhp;          \/\/ ÊúÄÂ§ßÁîüÂëΩÂÄº$/;"	m	struct:zUpgradeObjectB
maxhprate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
maxlevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ScenePet
maxmatk	base/include/srvEngine.h	/^	uint32_t maxmatk;    \/\/ È≠îÊîª‰∏äÈôê$/;"	m	struct:zPetB
maxmdamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
maxmdamage	base/include/csCommon.h	/^/;"	m	struct:CharState
maxmdamage	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
maxmdamage	base/include/csCommon.h	/^/;"	m	struct:_Object
maxmdamage	base/include/srvEngine.h	/^	rangeValue maxmdamage;    \/\/ ÊúÄÂ§ßÈ≠îÊîª$/;"	m	struct:zColorObjectB
maxmdamage	base/include/srvEngine.h	/^	uint32_t  maxmdamage;      \/\/ ÊúÄÂ§ßÊ≥ïÊúØÊîªÂáª$/;"	m	struct:zNpcB
maxmdamage	base/include/srvEngine.h	/^	uint32_t maxmdamage;      \/\/ ÊúÄÂ§ßÊ≥ïÊúØÊîªÂáªÂäõ$/;"	m	struct:zObjectB
maxmdamage	base/include/srvEngine.h	/^	uint32_t maxmdamage;      \/\/ ÊúÄÂ§ßÊ≥ïÊúØÊîªÂáªÂäõ$/;"	m	struct:zUpgradeObjectB
maxmdefence	base/include/srvEngine.h	/^	uint32_t  maxmdefence;    \/\/ ÊúÄÂ§ßÊ≥ïÊúØÈò≤Âæ°Âäõ$/;"	m	struct:zNpcB
maxmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
maxmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
maxmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
maxmp	base/include/csCommon.h	/^/;"	m	struct:CharState
maxmp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
maxmp	base/include/csCommon.h	/^/;"	m	struct:_Object
maxmp	base/include/srvEngine.h	/^	luckRangeValue maxmp;    \/\/ ÊúÄÂ§ßÊ≥ïÊúØÂÄº$/;"	m	struct:zColorObjectB
maxmp	base/include/srvEngine.h	/^	uint32_t maxmp;          \/\/ ÊúÄÂ§ßÊ≥ïÊúØÂÄº$/;"	m	struct:zObjectB
maxmprate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
maxnum	SceneServer/libscenesserver/giftBox.h	/^	unsigned int maxnum;$/;"	m	struct:qualitys
maxnum	base/include/srvEngine.h	/^	int   maxnum;$/;"	m	struct:CarryObject
maxnum	base/include/srvEngine.h	/^	uint32_t maxnum;        \/\/ ÊúÄÂ§ßÊï∞Èáè$/;"	m	struct:zObjectB
maxnumber	SceneServer/libscenesserver/giftBox.h	/^	unsigned int maxnumber;$/;"	m	struct:boxitem
maxparas	SceneServer/libscenesserver/scriptTickTask.h	/^	static const unsigned int maxparas = 200;$/;"	m	class:scriptMessageFilter
maxpdamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
maxpdamage	base/include/csCommon.h	/^/;"	m	struct:CharState
maxpdamage	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
maxpdamage	base/include/csCommon.h	/^/;"	m	struct:_Object
maxpdamage	base/include/srvEngine.h	/^	rangeValue maxpdamage;    \/\/ ÊúÄÂ§ßÁâ©Êîª$/;"	m	struct:zColorObjectB
maxpdamage	base/include/srvEngine.h	/^	uint32_t maxpdamage;      \/\/ ÊúÄÂ§ßÊîªÂáªÂäõ$/;"	m	struct:zObjectB
maxpdamage	base/include/srvEngine.h	/^	uint32_t maxpdamage;      \/\/ ÊúÄÂ§ßÊîªÂáªÂäõ$/;"	m	struct:zUpgradeObjectB
maxpdefence	base/include/srvEngine.h	/^	uint32_t  maxpdefence;    \/\/ ÊúÄÂ§ßÁâ©ÁêÜÈò≤Âæ°Âäõ$/;"	m	struct:zNpcB
maxsp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
maxsp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
maxsp	base/include/csCommon.h	/^/;"	m	struct:CharState
maxsp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
maxsp	base/include/csCommon.h	/^/;"	m	struct:_Object
maxsp	base/include/srvEngine.h	/^	luckRangeValue maxsp;    \/\/ ÊúÄÂ§ß‰ΩìÂäõÂÄº$/;"	m	struct:zColorObjectB
maxsp	base/include/srvEngine.h	/^	uint32_t maxsp;          \/\/ ÊúÄÂ§ß‰ΩìÂäõÂÄº$/;"	m	struct:zObjectB
mayRush	SceneServer/libscenesserver/SceneServer1.h	/^  bool mayRush;$/;"	m	class:SceneNpc
mcost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
mdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
mdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
mdam	base/include/csCommon.h	/^/;"	m	struct:_Object
mdam	base/include/srvEngine.h	/^			luckRangeValue mdam;    \/\/ Â¢ûÂä†È≠îÊ≥ïÊîªÂáªÂäõ$/;"	m	struct:zColorObjectB::__anon130::__anon131
mdamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
mdamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
mdamage	base/include/csCommon.h	/^/;"	m	struct:CharState
mdamage	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
mdamage	base/include/csCommon.h	/^/;"	m	struct:_Object
mdamage	base/include/srvEngine.h	/^	rangeValue mdamage;      \/\/ ÊúÄÂ∞èÈ≠îÊîª$/;"	m	struct:zColorObjectB
mdamage	base/include/srvEngine.h	/^	uint32_t  mdamage;      \/\/ ÊúÄÂ∞èÊ≥ïÊúØÊîªÂáª$/;"	m	struct:zNpcB
mdamage	base/include/srvEngine.h	/^	uint32_t mdamage;        \/\/ ÊúÄÂ∞èÊ≥ïÊúØÊîªÂáªÂäõ$/;"	m	struct:zObjectB
mdamage	base/include/srvEngine.h	/^	uint32_t mdamage;        \/\/ ÊúÄÂ∞èÊ≥ïÊúØÊîªÂáªÂäõ$/;"	m	struct:zUpgradeObjectB
mdamtodef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
mdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
mdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
mdef	base/include/csCommon.h	/^/;"	m	struct:_Object
mdef	base/include/srvEngine.h	/^			luckRangeValue mdef;    \/\/ Â¢ûÂä†È≠îÊ≥ïÈò≤Âæ°Âäõ$/;"	m	struct:zColorObjectB::__anon130::__anon131
mdef	base/include/srvEngine.h	/^	uint32_t mdef;       \/\/ È≠îÈò≤$/;"	m	struct:zPetB
mdefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
mdefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
mdefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
mdefence	base/include/csCommon.h	/^/;"	m	struct:CharState
mdefence	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
mdefence	base/include/csCommon.h	/^/;"	m	struct:_Object
mdefence	base/include/srvEngine.h	/^	rangeValue mdefence;      \/\/ È≠îÈò≤$/;"	m	struct:zColorObjectB
mdefence	base/include/srvEngine.h	/^	uint32_t  mdefence;      \/\/ ÊúÄÂ∞èÊ≥ïÊúØÈò≤Âæ°Âäõ$/;"	m	struct:zNpcB
mdefence	base/include/srvEngine.h	/^	uint32_t mdefence;        \/\/ È≠îÈò≤$/;"	m	struct:zObjectB
mdefence	base/include/srvEngine.h	/^	uint32_t mdefence;        \/\/ È≠îÈò≤$/;"	m	struct:zUpgradeObjectB
mdefencep	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
mdeftodam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
mdeftozero	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
mdmtomp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
mdmtompper	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
me	SceneServer/libscenesserver/Scene.cpp	/^  const zSceneEntry *me;$/;"	m	struct:SendToEveryOneExceptMe	file:
me	SceneServer/libscenesserver/SceneRelation.cpp	/^  SceneUser *me;$/;"	m	struct:FindConsort	file:
me	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DamagCallback
me	SceneServer/libscenesserver/script_func.cpp	/^SceneUser* me()$/;"	f
me	base/include/srvEngine.h	/^	static zDataBM<data,datafile> *me;$/;"	m	class:zDataBM
memPool	base/include/srvEngine.h	/^	T memPool[2046];$/;"	m	class:__mt_alloc
member	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Team
member	SessionServer/libsessionserver/SessionServer.h	/^  MemberSet member;$/;"	m	struct:Team
memberIndex	SessionServer/libsessionserver/SessionServer.h	/^    std::map<std::string,CSchoolMember*> memberIndex;$/;"	m	class:CSchoolM
memberIndex	SessionServer/libsessionserver/SessionServer.h	/^    std::map<std::string,CSeptMember*> memberIndex;$/;"	m	class:CSeptM
memberIndex	SessionServer/libsessionserver/SessionServer.h	/^    std::map<std::string,CUnionMember*> memberIndex;$/;"	m	class:CUnionM
memberIndexValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<std::string,CSchoolMember*>::value_type memberIndexValueType;$/;"	t	class:CSchoolM
memberIndexValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<std::string,CSeptMember*>::value_type memberIndexValueType;$/;"	t	class:CSeptM
memberIndexValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<std::string,CUnionMember*>::value_type memberIndexValueType;$/;"	t	class:CUnionM
memberList	SessionServer/libsessionserver/SessionServer.h	/^  std::list<CSchoolMember * > memberList;$/;"	m	class:CSchoolMemberListCallback
memberList	SessionServer/libsessionserver/SessionServer.h	/^  std::list<struct Cmd::stSchoolMember> memberList;$/;"	m	class:CSendSchoolCallback
memcpy	base/include/csCommon.h	220;"	d
men	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
men	base/include/srvEngine.h	/^	uint32_t   men;        \/\/ Á≤æÁ•û$/;"	m	struct:zNpcB
men	base/include/srvEngine.h	/^	uint32_t men;        \/\/ Á≤æÁ•û$/;"	m	struct:zPetB
menu	SceneServer/libscenesserver/SceneServer1.h	/^      char menu[6144];    \/\/\/≤Àµ•ƒ⁄»›$/;"	m	struct:NpcTrade::NpcDialog
menu	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcDialog
merge_version	GatewayServer/old_back/GatewayServer.cpp	/^DWORD merge_version = 0;$/;"	v
messageOrder	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
messages	SceneServer/libscenesserver/SceneServer1.h	/^    std::vector<t_Message> messages;$/;"	m	class:MessageSystem
metaData	BillServer/old_back/BillServer.cpp	/^DBMetaData* BillService::metaData = NULL;$/;"	m	class:BillService	file:
metaData	BillServer/old_back/BillServer.h	/^                static DBMetaData* metaData;    $/;"	m	class:BillService
metaData	SessionServer/libsessionserver/SessionServer.h	/^    static DBMetaData* metaData;$/;"	m	class:SessionService
metaData	tmp/MiniServer/MiniServer.cpp	/^DBMetaData* MiniService::metaData = NULL;$/;"	m	class:MiniService	file:
metaData	tmp/MiniServer/MiniServer.h	/^                static DBMetaData* metaData;    $/;"	m	class:MiniService
meterialSize	SceneServer/libscenesserver/meterialsManager.h	/^const unsigned short meterialSize = 13;$/;"	v
meterialsManager	SceneServer/libscenesserver/meterialsManager.h	/^	meterialsManager()$/;"	f	class:meterialsManager
meterialsManager	SceneServer/libscenesserver/meterialsManager.h	/^class meterialsManager : public SingletonBase<meterialsManager>$/;"	c
method	base/include/csCommon.h	/^/;"	m	class:CEncrypt
method	tmp/base3/request.hpp	/^  std::string method;$/;"	m	struct:http::server2::request
method	tmp/base3/request_parser.hpp	/^    method,$/;"	e	enum:http::server2::request_parser::state
method_start	tmp/base3/request_parser.hpp	/^    method_start,$/;"	e	enum:http::server2::request_parser::state
mf	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
mf	base/include/csCommon.h	/^/;"	m	struct:_Object
mf	base/include/srvEngine.h	/^	luckRangeValue mf;       \/\/ÊéâÂÆùÁéá$/;"	m	struct:zHolyObjectB
mf	base/include/srvEngine.h	/^	rangeValue mf; \/\/Â¢ûÂä†ÊéâÂÆùÁéáx%$/;"	m	struct:zSoulStoneB
mgspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
mhpd	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
mime_type	tmp/base3/mime_types.cpp	/^  const char* mime_type;$/;"	m	struct:http::server2::mime_types::mapping	file:
mime_types	tmp/base3/mime_types.cpp	/^namespace mime_types {$/;"	n	namespace:http::server2	file:
mime_types	tmp/base3/mime_types.hpp	/^namespace mime_types {$/;"	n	namespace:http::server2
min	base/include/srvEngine.h	/^	uint16_t min;$/;"	m	struct:rangeValue
minGold	SessionServer/libsessionserver/SessionServer.h	/^  DWORD minGold;$/;"	m	struct:auctionBidInfo
minID	base/include/srvEngine.h	/^	T minID;$/;"	m	class:zUniqueID
minMoney	SessionServer/libsessionserver/SessionServer.h	/^  DWORD minMoney;$/;"	m	struct:auctionBidInfo
minThreadCount	base/src/x_tcptaskpool.h	/^	static const int minThreadCount = 1;          \/**< Á∫øÁ®ãÊ±†‰∏≠ÂêåÊó∂Â≠òÂú®‰∏ªÂ§ÑÁêÜÁ∫øÁ®ãÁöÑÊúÄÂ∞ë‰∏™Êï∞ *\/$/;"	m	class:x_tcptaskpool
minUserNum	tmp/MiniServer/MiniServer.h	/^    BYTE minUserNum;\/\/◊Ó…Ÿ»À ˝$/;"	m	class:MiniGame
min_number	base/include/srvEngine.h	/^		uint32_t min_number; \/\/ÊúÄÂ∞èÊï∞Èáè$/;"	m	class:zLiveSkillB::ITEM
min_point_bonus	base/include/srvEngine.h	/^	BYTE min_point_bonus; \/\/ÊúÄÂ∞èÂ¢ûÂä†ÊäÄËÉΩÁÇπ$/;"	m	struct:zLiveSkillB
miniClient	GatewayServer/old_back/MiniClient.cpp	/^MiniClient *miniClient = NULL;$/;"	v
miniClient	SceneServer/libscenesserver/MiniClient.cpp	/^MiniClient *miniClient = NULL;$/;"	v
miniGame	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
minitask	tmp/MiniServer/MiniServer.h	/^    MiniTask *minitask;$/;"	m	class:MiniUser
minnum	base/include/srvEngine.h	/^	int   minnum;$/;"	m	struct:CarryObject
misc_strings	tmp/base3/reply.cpp	/^namespace misc_strings {$/;"	n	namespace:http::server2	file:
missile	tmp/MiniServer/MiniServer.h	/^    BYTE missile;$/;"	m	class:CardPattern
mlock	BillServer/BillTask.h	/^	boost::mutex mlock;$/;"	m	class:BillTask
mlock	BillServer/old_back/BillServer.h	/^    zMutex mlock;$/;"	m	class:BillCache
mlock	BillServer/old_back/BillServer.h	/^    zMutex mlock;$/;"	m	class:BillManager
mlock	BillServer/old_back/BillServer.h	/^    zMutex mlock;$/;"	m	class:BillSessionManager
mlock	BillServer/old_back/BillServer.h	/^    zMutex mlock;$/;"	m	class:BillTask
mlock	FLServer/GYListManager.h	/^	boost::mutex mlock;$/;"	m	class:GYListManager
mlock	FLServer/LoginManager.h	/^	boost::mutex mlock;$/;"	m	class:LoginManager
mlock	FLServer/ServerManager.h	/^	boost::mutex mlock;$/;"	m	class:ServerManager
mlock	GatewayServer/LoginSessionManager.h	/^	boost::mutex mlock;$/;"	m	class:LoginSessionManager
mlock	GatewayServer/old_back/GatewayServer.h	/^	zMutex mlock;$/;"	m	class:LoginSessionManager
mlock	SceneServer/libscenesserver/SceneServer1.h	/^                zMutex mlock;$/;"	m	class:ChannelM
mlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ChannelM
mlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GlobalObjectIndex
mlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Leechdom
mlock	SessionServer/libsessionserver/SessionServer.h	/^	zMutex mlock;$/;"	m	class:GlobalTeamIndex
mlock	SessionServer/libsessionserver/SessionServer.h	/^    zMutex mlock;$/;"	m	class:GlobalTempArchiveIndex
mlock	SuperServer/RoleregCache.cpp	/^	zMutex mlock;$/;"	m	class:RoleDataContainer	file:
mlock	SuperServer/RoleregCache.h	/^    zMutex mlock;$/;"	m	class:RoleregCache
mlock	base/include/srvEngine.h	/^	zMutex mlock;          \/**< ‰∫íÊñ•ÂèòÈáè *\/$/;"	m	class:x_tcp_clientTaskPool
mlock	base/include/srvEngine.h	/^	zMutex mlock;$/;"	m	class:zMTCPServer
mlock	base/include/srvEngine.h	/^	zMutex mlock;$/;"	m	struct:zUser
mlock	base/src/x_tcptaskpool.cpp	/^	boost::mutex mlock;$/;"	m	class:zTCPTaskQueue	file:
mlock	base/src/zTCPClientTaskPool.cpp	/^	zMutex mlock;$/;"	m	class:x_tcp_clientTaskQueue	file:
mlock	base/x_subnetservice.h	/^	boost::mutex mlock;                    \/**< ÂÖ≥ËÅîÊúçÂä°Âô®‰ø°ÊÅØÂàóË°®ËÆøÈóÆ‰∫íÊñ•‰Ωì *\/$/;"	m	class:x_subnetservice
mlock	tmp/MiniServer/MiniServer.h	/^    zMutex mlock;$/;"	m	class:MiniTask
mnRight	SessionServer/libsessionserver/SessionServer.h	/^	WORD	mnRight; \/\/ª·‘±»®œﬁ;$/;"	m	struct:CSeptMember
mode	base/include/srvEngine.h	/^			uint16_t mode;\/\/È£ûË°åÊ®°Âºè$/;"	m	struct:SkillStatus::__anon138::__anon139
modifyList	SessionServer/libsessionserver/SessionServer.h	/^    hash_set<DWORD> modifyList;$/;"	m	class:CartoonPetService
money	BillServer/BillUser.h	/^    DWORD money;    \/**< “¯±“ ˝¡ø *\/$/;"	m	class:BillUser
money	BillServer/old_back/BillServer.h	/^    DWORD money;    \/**< “¯±“ ˝¡ø *\/$/;"	m	class:BillUser
money	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD money;$/;"	m	class:Dice
money	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::PrivateStore::SellInfo
money	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
money	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SeptGuard
money	base/include/csCommon.h	/^/;"	m	struct:CharBase
money	base/include/csCommon.h	/^/;"	m	struct:CharTest
money	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniGameScore
money	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniRoomData
money	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
money	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_bailCheck_SceneSession
money	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stInviteMiniGame
money	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stInviteRetMiniGame
money	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stStartMiniGame
money	tmp/MiniServer/MiniServer.h	/^    DWORD money;\/\/”Œœ∑±“ª˘ ˝$/;"	m	class:MiniGame
moneylistNum	BillServer/BillUser.h	/^    DWORD moneylistNum;  \/\/\/ ∏ˆ»Àπ…∆±¬Úµ• ˝¡ø$/;"	m	class:BillUser
moneylistNum	BillServer/old_back/BillServer.h	/^    DWORD moneylistNum;  \/\/\/ ∏ˆ»Àπ…∆±¬Úµ• ˝¡ø$/;"	m	class:BillUser
mount	SceneServer/libscenesserver/Horse.cpp	/^bool Horse::mount() const$/;"	f	class:Horse
mount	SceneServer/libscenesserver/Horse.cpp	/^void Horse::mount(bool flag, WORD speed, bool send)$/;"	f	class:Horse
move	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
moveAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
moveAllToSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::moveAllToSchool(CSchool *pSchool,CSchoolMemberListCallback *memberSet)$/;"	f	class:CSchoolMember
moveFastCount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
moveMemberToNewSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::moveMemberToNewSchool(const char *userName,CSchool *pSchool)$/;"	f	class:CSchool
moveMemberToTeacherGroup	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::moveMemberToTeacherGroup()$/;"	f	class:CSchool
moveObject	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::moveObject(SceneUser *pUser,zObject *srcObj,stObjectLocation &dst)$/;"	f	class:Packages
moveObjectToScene	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::moveObjectToScene(zObject *o,const zPos &pos,DWORD overdue_msecs,const unsigned long dwID)$/;"	f	class:Packages
moveToEnemy	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::moveToEnemy(SceneEntryPk * enemy)$/;"	f	class:SceneNpc
moveToMaster	SceneServer/libscenesserver/GuardNpc.cpp	/^bool GuardNpc::moveToMaster()$/;"	f	class:GuardNpc
moveToMaster	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::moveToMaster()$/;"	f	class:SceneNpc
moveToMaster	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::moveToMaster()$/;"	f	class:ScenePet
moved_permanently	tmp/base3/reply.cpp	/^const char moved_permanently[] =$/;"	m	namespace:http::server2::stock_replies	file:
moved_permanently	tmp/base3/reply.cpp	/^const std::string moved_permanently =$/;"	m	namespace:http::server2::status_strings	file:
moved_permanently	tmp/base3/reply.hpp	/^    moved_permanently = 301,$/;"	e	enum:http::server2::reply::status_type
moved_temporarily	tmp/base3/reply.cpp	/^const char moved_temporarily[] =$/;"	m	namespace:http::server2::stock_replies	file:
moved_temporarily	tmp/base3/reply.cpp	/^const std::string moved_temporarily =$/;"	m	namespace:http::server2::status_strings	file:
moved_temporarily	tmp/base3/reply.hpp	/^    moved_temporarily = 302,$/;"	e	enum:http::server2::reply::status_type
movespeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
movespeed	base/include/csCommon.h	/^/;"	m	struct:CharState
movespeed	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_NpcData
movespeed	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
mp	base/include/csCommon.h	/^/;"	m	struct:CharBase
mp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
mp_leechdom	base/include/csCommon.h	/^/;"	m	struct:CharTest
mpcooling	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Leechdom
mpcost	base/include/srvEngine.h	/^	uint32_t  mpcost;              \/\/Ê∂àËÄóÊ≥ïÊúØÂÄº$/;"	m	struct:zSkillB
mpleech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
mpleech	base/include/csCommon.h	/^/;"	m	struct:_Object
mpleech	base/include/srvEngine.h	/^	} hpleech,mpleech; \/\/\/\/x%Âê∏Êî∂ÁîüÂëΩÂÄºy,x%Âê∏Êî∂Ê≥ïÊúØÂÄºy$/;"	m	struct:zSoulStoneB	typeref:struct:zSoulStoneB::Value
mplock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
mpr	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
mpr	base/include/csCommon.h	/^/;"	m	struct:_Object
mpr	base/include/srvEngine.h	/^	luckRangeValue mpr;      \/\/ Ê≥ïÊúØÂÄºÊÅ¢Â§ç$/;"	m	struct:zColorObjectB
mpr	base/include/srvEngine.h	/^	luckRangeValue mpr;      \/\/ Ê≥ïÊúØÂÄºÊÅ¢Â§ç$/;"	m	struct:zHolyObjectB
mpspeedup	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
ms	BillServer/BillServer.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms	FLServer/FLServer.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms	GatewayServer/GatewayServer.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms	RecordServer/RecordServer.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms	SceneServer/SceneServer.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms	SessionServer/SessionServer.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms	SuperServer/SuperServer.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms	base/src/x_tcp_client.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms	base/src/x_tcptaskpool.cpp	/^typedef boost::chrono::milliseconds ms;$/;"	t	file:
ms_Singleton	FLServer/ServerACL.cpp	/^template<> ServerACL* Singleton<ServerACL>::ms_Singleton = NULL;$/;"	m	class:Singleton	file:
ms_Singleton	GatewayServer/LoginSessionManager.cpp	/^template<> LoginSessionManager *Singleton<LoginSessionManager>::ms_Singleton = NULL;$/;"	m	class:Singleton	file:
ms_Singleton	base/include/csCommon.h	/^/;"	m	class:Singleton
ms_Singleton	base/singleton.h	/^	static T* ms_Singleton;$/;"	m	class:Singleton
ms_Singleton	base/x_subnetservice.cpp	/^template<> x_subnetservice* Singleton<x_subnetservice>::ms_Singleton = 0;$/;"	m	class:Singleton	file:
ms_Singleton	client/Game.cpp	/^Game* Singleton<Game>::ms_Singleton = NULL;$/;"	m	class:Singleton	file:
ms_Singleton	client/NetworkManager.cpp	/^NetworkManager* Singleton<NetworkManager>::ms_Singleton = NULL;$/;"	m	class:Singleton	file:
msec	base/include/zTime.h	/^	uint32_t msec() const$/;"	f	class:zRTime
msecs	base/include/zTime.h	/^	Quint16_t msecs() const$/;"	f	class:zRTime
msg	SessionServer/libsessionserver/SessionServer.h	/^  char msg[256];$/;"	m	struct:worldMsg
msgParse	BillServer/old_back/BillClient.cpp	/^bool BillClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:BillClient
msgParse	BillServer/old_back/BillTask.cpp	/^bool BillTask::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:BillTask
msgParse	FLServer/LoginTask.cpp	/^bool LoginTask::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:LoginTask
msgParse	FLServer/ServerTask.cpp	/^bool ServerTask::msgParse(const Cmd::t_NullCmd *pNullCmd, const DWORD nCmdLen) {$/;"	f	class:ServerTask
msgParse	GatewayServer/old_back/BillClient.cpp	/^bool BillClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:BillClient
msgParse	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::msgParse(const Cmd::t_NullCmd *ptNull,const DWORD nCmdLen)$/;"	f	class:GatewayTask
msgParse	GatewayServer/old_back/MiniClient.cpp	/^bool MiniClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:MiniClient
msgParse	GatewayServer/old_back/RecordClient.cpp	/^bool RecordClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:RecordClient
msgParse	GatewayServer/old_back/SceneClient.cpp	/^bool SceneClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SceneClient
msgParse	GatewayServer/old_back/SessionClient.cpp	/^bool SessionClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
msgParse	SceneServer/libscenesserver/MiniClient.cpp	/^bool MiniClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:MiniClient
msgParse	SceneServer/libscenesserver/RecordClient.cpp	/^bool RecordClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:RecordClient
msgParse	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::msgParse(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SceneTask
msgParse	SceneServer/libscenesserver/SessionClient.cpp	/^bool SessionClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionClient
msgParse	SessionServer/libsessionserver/RecordClient.cpp	/^bool RecordClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:RecordClient
msgParse	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::msgParse(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SessionTask
msgParse	SuperServer/InfoClient.cpp	/^bool InfoClient::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:InfoClient
msgParse	SuperServer/ServerTask.cpp	/^bool ServerTask::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ServerTask
msgParse	base/include/srvEngine.h	/^	bool msgParse(const Cmd::t_NullCmd *pNullCmd,const uint32_t cmdLen) {$/;"	f	class:MessageQueue
msgParse	base/x_msgqueue.h	/^	bool msgParse(const void *pNullCmd,const uint32_t cmdLen)$/;"	f	class:MessageQueue
msgParse	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::msgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:MiniTask
msgParse_Arena	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::msgParse_Arena(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SessionTask
msgParse_Bill	SuperServer/ServerTask.cpp	/^bool ServerTask::msgParse_Bill(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ServerTask
msgParse_CountryOnline	SuperServer/ServerTask.cpp	/^bool ServerTask::msgParse_CountryOnline(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ServerTask
msgParse_Forward	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::msgParse_Forward(const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:SessionTask
msgParse_Gate	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::msgParse_Gate(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SessionTask
msgParse_Gateway	RecordServer/RecordTask.cpp	/^bool RecordTask::msgParse_Gateway(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:RecordTask
msgParse_Gateway	SceneServer/SceneTask.cpp	/^bool SceneTask::msgParse_Gateway(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SceneTask
msgParse_Gateway	SessionServer/SessionTask.cpp	/^bool SessionTask::msgParse_Gateway(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionTask
msgParse_Gateway	SuperServer/ServerTask.cpp	/^bool ServerTask::msgParse_Gateway(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ServerTask
msgParse_GmTool	SuperServer/ServerTask.cpp	/^bool ServerTask::msgParse_GmTool(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ServerTask
msgParse_Scene	RecordServer/RecordTask.cpp	/^bool RecordTask::msgParse_Scene(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:RecordTask
msgParse_Scene	SceneServer/SceneTask.cpp	/^bool SceneTask::msgParse_Scene(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SceneTask
msgParse_Scene	SessionServer/SessionTask.cpp	/^bool SessionTask::msgParse_Scene(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionTask
msgParse_Scene	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::msgParse_Scene(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SessionTask
msgParse_Select	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::msgParse_Select(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayTask
msgParse_Session	RecordServer/RecordTask.cpp	/^bool RecordTask::msgParse_Session(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:RecordTask
msgParse_Startup	SuperServer/ServerTask.cpp	/^bool ServerTask::msgParse_Startup(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ServerTask
msgParse_Startup	base/super_client.h	/^	bool msgParse_Startup(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen)$/;"	f	class:super_client
msgParse_SuperService	BillServer/BillServer.cpp	/^bool BillService::msgParse_SuperService(const Cmd::t_NullCmd* pNullCmd, const uint32_t nCmdLen)$/;"	f	class:BillService
msgParse_SuperService	BillServer/old_back/BillServer.cpp	/^bool BillService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:BillService
msgParse_SuperService	GatewayServer/GatewayServer.cpp	/^bool GatewayService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen)$/;"	f	class:GatewayService
msgParse_SuperService	GatewayServer/old_back/GatewayServer.cpp	/^bool GatewayService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayService
msgParse_SuperService	RecordServer/RecordServer.cpp	/^bool RecordService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen)$/;"	f	class:RecordService
msgParse_SuperService	SceneServer/SceneServer.cpp	/^bool SceneService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen)$/;"	f	class:SceneService
msgParse_SuperService	SceneServer/libscenesserver/ScenesServer.cpp	/^bool ScenesService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ScenesService
msgParse_SuperService	SessionServer/SessionServer.cpp	/^bool SessionService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const uint32_t nCmdLen)$/;"	f	class:SessionService
msgParse_SuperService	SessionServer/libsessionserver/SessionServer.cpp	/^bool SessionService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:SessionService
msgParse_SuperService	tmp/MiniServer/MiniServer.cpp	/^bool MiniService::msgParse_SuperService(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:MiniService
msgParse_Time	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::msgParse_Time(const Cmd::stNullUserCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:GatewayTask
msgParse_gyList	FLServer/ServerTask.cpp	/^bool ServerTask::msgParse_gyList(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ServerTask
msgParse_gyList	SuperServer/FLClient.cpp	/^bool FLClient::msgParse_gyList(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:FLClient
msgParse_loginServer	SuperServer/RoleregCache.cpp	/^bool RoleregCache::msgParse_loginServer(WORD wdServerID,DWORD accid,char name[MAX_NAMESIZE],WORD state)$/;"	f	class:RoleregCache
msgParse_session	FLServer/ServerTask.cpp	/^bool ServerTask::msgParse_session(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:ServerTask
msgParse_session	SuperServer/FLClient.cpp	/^bool FLClient::msgParse_session(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:FLClient
msgTime	base/include/csCommon.h	/^/;"	m	struct:CharBase
msg_	base/src/tcp_socket.h	/^	char msg_[MAX_MSG_SIZE];$/;"	m	class:tcp_socket
msg_	base/tcp_client.h	/^	char msg_[MAX_MSG_SIZE];$/;"	m	class:tcp_client
msg_	base/tcp_task.h	/^	char msg_[MAX_MSG_SIZE];$/;"	m	class:tcp_task
msg_length_	base/src/tcp_socket.h	/^	uint16_t msg_length_;$/;"	m	class:tcp_socket
msg_length_	base/tcp_client.h	/^	uint16_t msg_length_;$/;"	m	class:tcp_client
msg_length_	base/tcp_task.h	/^	uint16_t msg_length_;$/;"	m	class:tcp_task
msg_parse	GatewayServer/BillClient.h	/^	virtual void msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:BillClient
msg_parse	GatewayServer/RecordClient.h	/^	virtual void msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:RecordClient
msg_parse	GatewayServer/SessionClient.h	/^	virtual void msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:SessionClient
msg_parse	SceneServer/RecordClient.h	/^	virtual void msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:RecordClient
msg_parse	SceneServer/SessionClient.h	/^	virtual void msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:SessionClient
msg_parse	SessionServer/RecordClient.h	/^	virtual void msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:RecordClient
msg_parse	SuperServer/FLClient.h	/^	virtual void msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:FLClient
msg_parse	base/include/tcp_state.h	/^	virtual void msg_parse(){}$/;"	f	class:tcp_state
msg_parse	base/include/tcp_state.h	/^	virtual void msg_parse(const Cmd::t_NullCmd * cmd, uint32_t len){$/;"	f	class:state_verify
msg_parse	base/include/tcp_state.h	/^	virtual void msg_parse(const Cmd::t_NullCmd * cmd, uint32_t len){$/;"	f	class:state_wait_sync
msg_parse	base/super_client.h	/^	virtual void msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:super_client
msg_parse	client/ClientConn.cpp	/^void ClientConn::msg_parse(const void *cmd, const uint32_t len)$/;"	f	class:ClientConn
msg_parser_	base/include/tcp_task_new.h	/^	boost::function<void (void*,uint32_t)> msg_parser_;$/;"	m	class:tcp_task
mtkhpp	base/include/srvEngine.h	/^	uint16_t mtkhpp;  \/\/È≠îÊ≥ïÂÖç‰º§$/;"	m	struct:zObjectB
multiple_choices	tmp/base3/reply.cpp	/^const char multiple_choices[] =$/;"	m	namespace:http::server2::stock_replies	file:
multiple_choices	tmp/base3/reply.cpp	/^const std::string multiple_choices =$/;"	m	namespace:http::server2::status_strings	file:
multiple_choices	tmp/base3/reply.hpp	/^    multiple_choices = 300,$/;"	e	enum:http::server2::reply::status_type
must	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	namespace:O
mutex	BillServer/BillTaskManager.h	/^	boost::mutex mutex;$/;"	m	class:BillTaskManager
mutex	GatewayServer/old_back/GatewayServer.h	/^	zMutex mutex;$/;"	m	class:CountryInfo
mutex	RecordServer/RecordUser.h	/^	boost::mutex mutex;$/;"	m	class:RecordUser
mutex	SceneServer/libscenesserver/duplicateManager.h	/^	zMutex mutex;$/;"	m	class:duplicateManager
mutex	SceneServer/libscenesserver/meterialsManager.h	/^	zMutex mutex;$/;"	m	class:meterialsManager
mutex	SceneServer/libscenesserver/scriptTickTask.h	/^	zMutex mutex;$/;"	m	class:scriptTaskManagement
mutex	SessionServer/ServerManager.h	/^	boost::mutex mutex;$/;"	m	class:ServerManager
mutex	base/include/srvEngine.h	/^	zMutex mutex;$/;"	m	class:zUniqueID
mutex	base/include/x_socket.h	/^	boost::mutex mutex;$/;"	m	class:x_socket
mutex_	FLServer/ServerACL.h	/^	boost::mutex mutex_;$/;"	m	class:ServerACL
mutex_	RecordServer/RecordUserManager.h	/^	boost::mutex mutex_;$/;"	m	class:RecordUserM
mutex_	base/src/x_tcptaskpool.cpp	/^	boost::mutex mutex_;$/;"	m	class:x_verify_thread_functor	file:
mutex_container	SuperServer/ServerManager.h	/^	boost::mutex mutex_container;$/;"	m	class:ServerManager
mutex_hashmap	SuperServer/ServerManager.h	/^	boost::mutex mutex_hashmap;$/;"	m	class:ServerManager
mvspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
mvspeed	base/include/csCommon.h	/^/;"	m	struct:_Object
mvspeed	base/include/srvEngine.h	/^	luckRangeValue mvspeed;    \/\/ ÁßªÂä®ÈÄüÂ∫¶$/;"	m	struct:zColorObjectB
mvspeed	base/include/srvEngine.h	/^	luckRangeValue mvspeed;    \/\/ ÁßªÂä®ÈÄüÂ∫¶$/;"	m	struct:zHolyObjectB
mvspeed	base/include/srvEngine.h	/^	uint16_t mvspeed;        \/\/ ÁßªÂä®ÈÄüÂ∫¶$/;"	m	struct:zObjectB
myArmy	SessionServer/libsessionserver/SessionServer.h	/^    CArmy* myArmy;$/;"	m	class:CCaptain
myOverMan	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
myRecommend	SessionServer/libsessionserver/SessionServer.h	/^    Recommend*  myRecommend; \/\/ Œ“µƒÕ∆ºˆ»À$/;"	m	class:RecommendSub
mySept	SessionServer/libsessionserver/SessionServer.h	/^    CSept *mySept;$/;"	m	struct:CSeptMember
myUnion	SessionServer/libsessionserver/SessionServer.h	/^    CUnion *myUnion;$/;"	m	struct:CUnionMember
my_id	BillServer/old_back/BillServer.h	/^    DWORD my_id;$/;"	m	class:BillClient
my_key_equal	base/include/srvEngine.h	/^struct my_key_equal : public std::binary_function<keyT,keyT,bool>$/;"	s
mymemcpy	base/include/csCommon.h	/^/;"	f
mysql_home	BillServer/Makefile	/^mysql_home = `echo $(MYSQL_HOME)`$/;"	m
mysql_home	FLServer/Makefile	/^mysql_home = `echo $(MYSQL_HOME)`$/;"	m
mysql_home	GatewayServer/Makefile	/^mysql_home = `echo $(MYSQL_HOME)`$/;"	m
mysql_home	SceneServer/Makefile	/^mysql_home = `echo $(MYSQL_HOME)`$/;"	m
mysql_home	SessionServer/Makefile	/^mysql_home = `echo $(MYSQL_HOME)`$/;"	m
mysql_home	base/Makefile	/^mysql_home = `echo $(MYSQL_HOME)`$/;"	m
mysql_home	client/Makefile	/^mysql_home = `echo $(MYSQL_HOME)`$/;"	m
nCoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stXmlItemCoolTime
nEffect	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute
nFlag	base/include/csBox.h	/^	int nFlag;    \/\/sky ±ª…Ë÷√µƒ±Í÷æ$/;"	m	struct:Cmd::stTeamSetNPCFlagUserCmd
nPart	base/include/csCommon.h	/^/;"	m	struct:_Object::Suit_Attribute
nRight	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptMemberInfo
nSuitData	base/include/srvEngine.h	/^	int  nSuitData;$/;"	m	struct:zObjectB
name	BillServer/old_back/BillServer.h	/^  char   name[MAX_NAMESIZE+1];     \/\/\/ Ω«…´√˚≥∆$/;"	m	struct:BillSession
name	FLServer/ServerACL.h	/^	std::string name;$/;"	m	struct:ACLZone
name	FLServer/ServerTask.h	/^	std::string name;$/;"	m	class:ServerTask
name	GatewayServer/old_back/GatewayServer.h	/^		char name[MAX_NAMESIZE];$/;"	m	struct:CountryInfo::CountryDic
name	GatewayServer/old_back/GatewayServer.h	/^		char name[MAX_NAMESIZE];$/;"	m	struct:CountryInfo::MapDic
name	SceneServer/libscenesserver/SceneManager.cpp	/^    const char *name;$/;"	m	class:GetSceneByFileName	file:
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Add
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Differ
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Div
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Equal
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::GetP
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Great
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Less
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Mul
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Pow
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Set
name	SceneServer/libscenesserver/SceneServer1.h	/^    std::string name() const $/;"	f	class:Op::Sub
name	SceneServer/libscenesserver/SceneServer1.h	/^  char name[MAX_NAMESIZE+1];$/;"	m	struct:InitObject
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Add
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Differ
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Div
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Equal
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::GetP
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Great
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Less
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Mul
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Pow
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Set
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Sub
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::InitObject
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::CountryInfo
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::TeamMember
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Point
name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zPoint
name	SessionServer/libsessionserver/SessionServer.h	/^    char  name[MAX_NAMESIZE+1]; \/\/ π˙º“√˚≥∆$/;"	m	class:CCountry
name	SessionServer/libsessionserver/SessionServer.h	/^    char  name[MAX_NAMESIZE]; \/\/ æ¸∂”√˚≥∆$/;"	m	class:CArmy
name	SessionServer/libsessionserver/SessionServer.h	/^    char  name[MAX_NAMESIZE]; \/\/ Õ∆ºˆ»À√˚◊÷$/;"	m	class:Recommend
name	SessionServer/libsessionserver/SessionServer.h	/^    char  name[MAX_NAMESIZE];$/;"	m	class:CCity
name	SessionServer/libsessionserver/SessionServer.h	/^    char name[MAX_NAMESIZE]; \/\/ ±ªÕ∆ºˆ»À–’√˚$/;"	m	class:RecommendSub
name	SessionServer/libsessionserver/SessionServer.h	/^  char name[MAX_NAMESIZE+1];$/;"	m	struct:forbidInfo
name	SessionServer/libsessionserver/SessionServer.h	/^  char name[MAX_NAMESIZE];$/;"	m	struct:actInfo
name	SuperServer/RoleregCache.cpp	/^	char name[MAX_NAMESIZE];\/\/Ω«…´√˚$/;"	m	struct:RoleData	file:
name	SuperServer/RoleregCache.h	/^      char name[MAX_NAMESIZE];  \/**< Ω«…´√˚≥∆ *\/$/;"	m	struct:RoleregCache::Data
name	base/flcmd.h	/^			char name[MAX_ACCNAMESIZE];$/;"	m	struct:Cmd::FL::t_idinuse_Session
name	base/flcmd.h	/^			char name[MAX_NAMESIZE];$/;"	m	struct:Cmd::FL::t_LoginFL_OK
name	base/include/argp.h	/^  char *name;$/;"	m	struct:argp_state
name	base/include/argp.h	/^  const  char *name;$/;"	m	struct:argp_option
name	base/include/csBox.h	/^		char name[MAX_NAMESIZE + 1];$/;"	m	struct:Cmd::stNpcDirItemDataUserCmd::team
name	base/include/csCommon.h	/^/;"	m	struct:CharBase
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_UserLogin_Gateway
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserData
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::giftInfo
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_bailCheck_SceneSession
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forbidTalk_SceneSession
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forwardUser_SceneSession
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sysSetting_SceneSession
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapPetData
name	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
name	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolInfo
name	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
name	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
name	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptMemberInfo
name	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
name	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionMemberInfo
name	base/include/srvEngine.h	/^	char name[MAX_NAMESIZE+1];$/;"	m	struct:zEntryC
name	base/include/srvEngine.h	/^	std::string name;            \/**< ÊúçÂä°Âô®ÂêçÁß∞ *\/$/;"	m	class:zMTCPServer
name	base/src/getopt.c	/^  const char name[14];		\/* User name.  *\/$/;"	m	struct:uparam_name	file:
name	base/src/x_tcpserver.h	/^	std::string name;            \/**< ÊúçÂä°Âô®ÂêçÁß∞ *\/$/;"	m	class:x_tcpserver
name	base/supercmd.h	/^			char name[MAX_ACCNAMESIZE];$/;"	m	struct:Cmd::Super::t_idinuse_Bill
name	deps/tinyxml/tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:TiXmlAttribute
name	tmp/base3/header.hpp	/^  std::string name;$/;"	m	struct:http::server2::header
name1	SceneServer/libscenesserver/SceneServer1.h	/^    char name1[MAX_NAMESIZE],name2[MAX_NAMESIZE];$/;"	m	class:Dice
name1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
name2	SceneServer/libscenesserver/SceneServer1.h	/^    char name1[MAX_NAMESIZE],name2[MAX_NAMESIZE];$/;"	m	class:Dice
name2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
nameRepeat	GatewayServer/old_back/GatewayServer.h	/^	void nameRepeat()$/;"	f	class:GateUser
name_	base/x_service.h	/^	std::string name_;          \/**< ÊúçÂä°ÂêçÁß∞ *\/$/;"	m	class:x_service
name_value_separator	tmp/base3/reply.cpp	/^const char name_value_separator[] = { ':', ' ' };$/;"	m	namespace:http::server2::misc_strings	file:
nco	base/include/srvEngine.h	/^	NpcCarryObject nco;$/;"	m	struct:zNpcB
needLevel	base/include/srvEngine.h	/^	int needLevel;\/\/\/ÊäÄËÉΩid$/;"	m	struct:npcSkill
needRecalc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
needRecover	SceneServer/libscenesserver/SceneServer1.h	/^  bool needRecover;$/;"	m	class:SceneNpc
needSave	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSkill
needSave	tmp/MiniServer/MiniServer.h	/^    bool needSave;$/;"	m	class:MiniUser
needSave	tmp/MiniServer/MiniServer.h	/^  bool needSave;$/;"	m	struct:oneGameState
need_material	base/include/srvEngine.h	/^	material need_material;    \/\/ ÈúÄË¶ÅÂéüÊñô$/;"	m	struct:zObjectB
need_skill	base/include/srvEngine.h	/^	skills need_skill;      \/\/ ÈúÄË¶ÅÊäÄËÉΩ$/;"	m	struct:zObjectB
needlevel	base/include/csCommon.h	/^/;"	m	struct:_Object
needlevel	base/include/srvEngine.h	/^	uint16_t needlevel;        \/\/ ÈúÄË¶ÅÁ≠âÁ∫ß$/;"	m	struct:zObjectB
needobject	base/include/srvEngine.h	/^	uint16_t needobject;      \/\/ ÈÖçÂêàÁâ©ÂìÅ$/;"	m	struct:zObjectB
needpoint	base/include/srvEngine.h	/^	uint32_t  needpoint;            \/\/ÈúÄË¶ÅÊú¨Á∫øÊäÄËÉΩÁÇπÊï∞$/;"	m	struct:zSkillB
netType	BillServer/old_back/BillServer.h	/^    NetType netType;$/;"	m	class:BillClient
netType	SuperServer/FLClient.h	/^    NetType netType;$/;"	m	class:FLClient
netType	SuperServer/InfoClient.h	/^    NetType netType;$/;"	m	class:InfoClient
netType	base/flcmd.h	/^			BYTE netType;$/;"	m	struct:Cmd::FL::t_LoginFL_OK
newChangeLeaderExec	SceneServer/libscenesserver/TeamManager.cpp	/^	newChangeLeaderExec( const char * LeaderName )$/;"	f	struct:newChangeLeaderExec
newChangeLeaderExec	SceneServer/libscenesserver/TeamManager.cpp	/^struct newChangeLeaderExec : public TeamMemExec$/;"	s	file:
newHistoryGold	BillServer/old_back/BillServer.h	/^    Cmd::ConsignHistoryType newHistoryGold; $/;"	m	class:ConsignHistoryManager
newHistoryMoney	BillServer/old_back/BillServer.h	/^    Cmd::ConsignHistoryType newHistoryMoney; $/;"	m	class:ConsignHistoryManager
newInstance	base/include/srvEngine.h	/^	static void newInstance()$/;"	f	class:SingletonBase
newLoginTask	FLServer/FLServer.cpp	/^shared_ptr<tcp_task> FLService::newLoginTask(io_service& ios)$/;"	f	class:FLService
newMailMap	SessionServer/libsessionserver/SessionServer.h	/^    hash_map<DWORD,hash_set<DWORD> > newMailMap;$/;"	m	class:MailService
newServerTask	FLServer/FLServer.cpp	/^shared_ptr<tcp_task> FLService::newServerTask(io_service& ios)$/;"	f	class:FLService
newTCPTask	BillServer/BillServer.cpp	/^tcp_task_ptr BillService::newTCPTask(io_service& ios) {$/;"	f	class:BillService
newTCPTask	BillServer/old_back/BillServer.cpp	/^void BillService::newTCPTask(const SOCKET sock,const struct sockaddr_in *addr)$/;"	f	class:BillService
newTCPTask	GatewayServer/GatewayServer.cpp	/^tcp_task_ptr GatewayService::newTCPTask(io_service& ios) {$/;"	f	class:GatewayService
newTCPTask	GatewayServer/old_back/GatewayServer.cpp	/^void GatewayService::newTCPTask(const SOCKET sock,const struct sockaddr_in *addr)$/;"	f	class:GatewayService
newTCPTask	RecordServer/RecordServer.cpp	/^tcp_task_ptr RecordService::newTCPTask(io_service& ios) {$/;"	f	class:RecordService
newTCPTask	SceneServer/SceneServer.cpp	/^tcp_task_ptr SceneService::newTCPTask(io_service& ios) {$/;"	f	class:SceneService
newTCPTask	SceneServer/libscenesserver/ScenesServer.cpp	/^void ScenesService::newTCPTask(const SOCKET sock,const struct sockaddr_in *addr)$/;"	f	class:ScenesService
newTCPTask	SessionServer/SessionServer.cpp	/^tcp_task_ptr SessionService::newTCPTask(io_service& ios) {$/;"	f	class:SessionService
newTCPTask	SessionServer/libsessionserver/SessionServer.cpp	/^void SessionService::newTCPTask(const SOCKET sock,const struct sockaddr_in *addr)$/;"	f	class:SessionService
newTCPTask	SuperServer/SuperServer.cpp	/^shared_ptr<tcp_task> SuperService::newTCPTask(io_service& ios)$/;"	f	class:SuperService
newTCPTask	tmp/MiniServer/MiniServer.cpp	/^void MiniService::newTCPTask(const SOCKET sock,const struct sockaddr_in *addr)$/;"	f	class:MiniService
newThread	base/src/zTCPClientTaskPool.cpp	/^x_tcp_clientTaskThread *x_tcp_clientTaskPool::newThread()$/;"	f	class:x_tcp_clientTaskPool
newUser	tmp/MiniServer/MiniUserManager.cpp	/^MiniUser * MiniUserManager::newUser(Cmd::Mini::t_UserLogin_Gateway *info)$/;"	f	class:MiniUserManager
newZoneVec_iter	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::SceneManager
new_connection_	tmp/base3/server.hpp	/^  connection_ptr new_connection_;$/;"	m	class:server
new_tcp_task_	base/server.h	/^		handle_new_task_t new_tcp_task_;$/;"	m	class:server
newzon_vec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
newzone	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
next	base/include/argp.h	/^  int next;$/;"	m	struct:argp_state
next	base/include/zTime.h	/^	void next(const zRTime &cur)$/;"	f	class:RandTimer
next	base/include/zTime.h	/^	void next(const zRTime &cur)$/;"	f	class:Timer
next	base/src/getopt.c	/^  struct hol_cluster *next;$/;"	m	struct:hol_cluster	typeref:struct:hol_cluster::hol_cluster	file:
next	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:TiXmlAttribute
next	deps/tinyxml/tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:TiXmlNode
nextAttackTime	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime nextAttackTime;$/;"	m	class:SceneNpc
nextBlessTime	SessionServer/libsessionserver/SessionServer.h	/^    zRTime nextBlessTime;$/;"	m	class:UserSession
nextChatTime	GatewayServer/old_back/GatewayServer.h	/^	zRTime nextChatTime;$/;"	m	class:GatewayTask
nextCountryChatTime	GatewayServer/old_back/GatewayServer.h	/^	zRTime nextCountryChatTime;$/;"	m	class:GatewayTask
nextMoveTime	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime nextMoveTime;$/;"	m	class:SceneNpc
nextPhase	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::nextPhase(int index = -1)$/;"	f	class:NpcAIController
nextPhaseTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
nextPointSeat	tmp/MiniServer/DDZCardGame.cpp	/^BYTE DDZCardGame::nextPointSeat()$/;"	f	class:DDZCardGame
nextPutUser	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::nextPutUser(BYTE seat)$/;"	f	class:DDZCardGame
nextTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::FixedRush
nextUserSeat	tmp/MiniServer/MiniGame.cpp	/^BYTE MiniGame::nextUserSeat(BYTE from)$/;"	f	class:MiniGame
next_io_service_	base/io_service_pool.h	/^		std::size_t next_io_service_;$/;"	m	class:io_service_pool
next_io_service_	tmp/base3/io_service_pool.hpp	/^  std::size_t next_io_service_;$/;"	m	class:io_service_pool
next_time	base/include/zTime.h	554;"	d
nextexp	base/include/csCommon.h	/^/;"	m	struct:CharState
nextexp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
nextexp	base/include/srvEngine.h	/^	Quint16_t  nextexp;      \/\/ÈúÄË¶ÅÁªèÈ™å$/;"	m	struct:zExperienceB
ninescreen	GatewayServer/old_back/GatewayServer.h	/^	NineScreen_map ninescreen;$/;"	m	class:ScreenIndex
ninescreen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
nm	SceneServer/libscenesserver/TeamManager.cpp	/^	SceneUser *nm;$/;"	m	struct:SendMemberDataExec	file:
nm	SceneServer/libscenesserver/TeamManager.cpp	/^  SceneUser *nm;$/;"	m	struct:AddNewMemberExec	file:
noCharInfo	GatewayServer/old_back/GatewayServer.h	/^	void noCharInfo()$/;"	f	class:GateUser
noTeam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
no_content	tmp/base3/reply.cpp	/^const char no_content[] =$/;"	m	namespace:http::server2::stock_replies	file:
no_content	tmp/base3/reply.cpp	/^const std::string no_content =$/;"	m	namespace:http::server2::status_strings	file:
no_content	tmp/base3/reply.hpp	/^    no_content = 204,$/;"	e	enum:http::server2::reply::status_type
node	base/include/srvEngine.h	/^		zPathPoint *node;$/;"	m	struct:zAStar::zPathQueue
node	deps/tinyxml/tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:TiXmlHandle
node_	base/x_config.h	/^		std::string node_;$/;"	m	class:x_config
nofivedam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
nofivedef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
nofivemaxdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
nofivemaxmdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
nofivemdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
nofivemdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkPreValue::__anon61::__anon62
none_mode	SceneServer/libscenesserver/SceneServer1.h	/^      none_mode =   0x00,$/;"	e	enum:Gm::__anon100
none_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Gm::__anon90
normalAction	SceneServer/libscenesserver/CartoonPet.cpp	/^bool CartoonPet::normalAction()$/;"	f	class:CartoonPet
normalAction	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::normalAction()$/;"	f	class:SceneNpc
normalAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual bool normalAction(){return SceneNpc::normalAction();}$/;"	f	class:ScenePet
normalAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ScenePet
normal_exp_time	SessionServer/libsessionserver/SessionServer.h	/^    DWORD normal_exp_time;$/;"	m	class:CSept
normal_mode	SceneServer/libscenesserver/SceneServer1.h	/^      normal_mode =   0x01,$/;"	e	enum:Gm::__anon100
normal_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Gm::__anon90
normalexptime	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
not_found	tmp/base3/reply.cpp	/^const char not_found[] =$/;"	m	namespace:http::server2::stock_replies	file:
not_found	tmp/base3/reply.cpp	/^const std::string not_found =$/;"	m	namespace:http::server2::status_strings	file:
not_found	tmp/base3/reply.hpp	/^    not_found = 404,$/;"	e	enum:http::server2::reply::status_type
not_implemented	tmp/base3/reply.cpp	/^const char not_implemented[] =$/;"	m	namespace:http::server2::stock_replies	file:
not_implemented	tmp/base3/reply.cpp	/^const std::string not_implemented =$/;"	m	namespace:http::server2::status_strings	file:
not_implemented	tmp/base3/reply.hpp	/^    not_implemented = 501,$/;"	e	enum:http::server2::reply::status_type
not_modified	tmp/base3/reply.cpp	/^const char not_modified[] =$/;"	m	namespace:http::server2::stock_replies	file:
not_modified	tmp/base3/reply.cpp	/^const std::string not_modified =$/;"	m	namespace:http::server2::status_strings	file:
not_modified	tmp/base3/reply.hpp	/^    not_modified = 304,$/;"	e	enum:http::server2::reply::status_type
note	SessionServer/libsessionserver/SessionServer.h	/^    char          note[255];$/;"	m	class:CSept
note	SessionServer/libsessionserver/SessionServer.h	/^    char    note[255];$/;"	m	class:CUnion
note	SessionServer/libsessionserver/SessionServer.h	/^    char note[256];$/;"	m	class:CCountry
note	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptInfo
note	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
notify	SceneServer/libscenesserver/Quest.cpp	/^int Quest::notify(SceneUser& user)$/;"	f	class:Quest
notify	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::notify(SceneUser& user) const$/;"	f	class:QuestList
notify	SceneServer/libscenesserver/Quest.cpp	/^int Vars::notify(SceneUser& user) const$/;"	f	class:Vars
notify	SceneServer/libscenesserver/Quest.cpp	/^int Vars::notify(SceneUser& user,const std::string& name) const$/;"	f	class:Vars
notify	SceneServer/libscenesserver/zObject.cpp	/^void StorePack::notify(SceneUser* user)$/;"	f	class:StorePack
notifyAllReSendInitData	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::notifyAllReSendInitData(CSendSchoolCallback *callback)$/;"	f	class:CSchoolMember
notifyCountryTax	SessionServer/libsessionserver/SessionManager.cpp	/^void SceneSessionManager::notifyCountryTax(DWORD dwCountry,BYTE byTax)$/;"	f	class:SceneSessionManager
notifyDareReady	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareObj::notifyDareReady()$/;"	f	class:CNpcDareObj
notifyDareReady	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::notifyDareReady()$/;"	f	class:CNpcDareM
notifyHMS	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
notifyLoginServer	GatewayServer/old_back/GatewayServer.cpp	/^bool GatewayService::notifyLoginServer()$/;"	f	class:GatewayService
notifyMemberFire	SessionServer/libsessionserver/Sept.cpp	/^void CSept::notifyMemberFire(const char * pName)$/;"	f	class:CSept
notifyMemberFire	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
notifyNewMemberAdd	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::notifyNewMemberAdd()$/;"	f	class:CSchoolMember
notifyNpcHoldData	SessionServer/libsessionserver/Sept.cpp	/^void CSept::notifyNpcHoldData()$/;"	f	class:CSept
notifyNpcHoldData	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::notifyNpcHoldData(DWORD septid)$/;"	f	class:CSeptM
notifyNpcHoldData	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::notifyNpcHoldData()$/;"	f	class:CSeptMember
notifyOnlineToGate	SessionServer/libsessionserver/SessionManager.cpp	/^void UserSessionManager::notifyOnlineToGate()$/;"	f	class:UserSessionManager
notifyOther	SuperServer/ServerTask.cpp	/^bool ServerTask::notifyOther()$/;"	f	class:ServerTask
notifyOther	SuperServer/ServerTask.cpp	/^bool ServerTask::notifyOther(WORD dstID)$/;"	f	class:ServerTask
notifySchoolMemberRemove	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::notifySchoolMemberRemove()$/;"	f	class:CSchoolMember
notifyTeacherGroup	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::notifyTeacherGroup()$/;"	f	class:CSchoolMember
notifyWarResult	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
notifyWarResult	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
notifyWarResult	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::notifyWarResult(int winner_type)$/;"	f	class:CDareSept
notifyWarResult	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::notifyWarResult(const char* msg,...)$/;"	f	class:CSchool
notifyWarResult	SessionServer/libsessionserver/Sept.cpp	/^void CSept::notifyWarResult(const char* msg,...)$/;"	f	class:CSept
notifyWarResult	SessionServer/libsessionserver/SessionServer.h	/^     virtual void notifyWarResult(int winner_type){};$/;"	f	class:CDareSeptNpc
notifyWarResult	SessionServer/libsessionserver/SessionServer.h	/^     virtual void notifyWarResult(int winner_type){};$/;"	f	class:CDareUnionCity
notifyWarResult	SessionServer/libsessionserver/SessionServer.h	/^    virtual void notifyWarResult(int winner_type) {};$/;"	f	class:CDareCountry
notifyWarResult	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
notifystep	SceneServer/libscenesserver/SceneServer1.h	/^  BYTE notifystep; \/\/¬ÃBOSSÕ®÷™≤Ω÷Ë$/;"	m	class:SceneNpc
notuse	base/src/x_tcptask.h	/^		notuse    =  0,            \/**< ËøûÊé•ÂÖ≥Èó≠Áä∂ÊÄÅ *\/$/;"	e	enum:x_tcptask::zTCPTask_State
now	base/include/zTime.h	/^	void now()$/;"	f	class:zRTime
now	base/include/zTime.h	/^	void now()$/;"	f	class:zTime
nowByDelay	base/include/zTime.h	/^	void nowByDelay(int delay)$/;"	f	class:zRTime
nowrelive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
npc	SceneServer/libscenesserver/SceneNpcAI.cpp	/^  SceneNpc * npc;$/;"	m	struct:getEntriesCallBack	file:
npc	SceneServer/libscenesserver/SceneServer1.h	/^  SceneNpc * npc;$/;"	m	class:NpcAIController
npc	SceneServer/libscenesserver/SceneServer1.h	/^  zNpcB *npc;$/;"	m	class:SceneNpc
npcDefine	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
npcHoldData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser	typeref:struct:O::LiveSkills::SceneUser::__anon87
npcRecover	base/include/srvEngine.h	/^	npcRecover()$/;"	f	struct:npcRecover
npcRecover	base/include/srvEngine.h	/^struct npcRecover$/;"	s
npcSkill	base/include/srvEngine.h	/^	npcSkill():id(0),needLevel(0),rate(0),coefficient(0){}$/;"	f	struct:npcSkill
npcSkill	base/include/srvEngine.h	/^	npcSkill(const npcSkill &skill)$/;"	f	struct:npcSkill
npcSkill	base/include/srvEngine.h	/^struct npcSkill$/;"	s
npcTradeGold	SceneServer/libscenesserver/Gold.cpp	/^bool SceneUser::npcTradeGold(Cmd::stBuyObjectNpcTradeUserCmd *ptCmd,zObjectB *base,BYTE itemlevel)$/;"	f	class:SceneUser
npc_call_fellow_rate	SceneServer/libscenesserver/SceneNpcAI.cpp	/^const int NpcAIController::npc_call_fellow_rate = 30;\/\/\/NPCÂè¨Âî§Âêå‰º¥ÁöÑÂá†Áéá$/;"	m	class:NpcAIController	file:
npc_call_fellow_rate	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_call_fellow_rate;\/\/\/NPC’ŸªΩÕ¨∞Èµƒº∏¬ $/;"	m	class:NpcAIController
npc_canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
npc_canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
npc_checkpoint_region	SceneServer/libscenesserver/SceneNpcAI.cpp	/^const int NpcAIController::npc_checkpoint_region = 2;\/\/\/NPCÁßªÂä®,Âà∞Ëææ‰∏Ä‰∏™Ë∑ØÁÇπÁöÑÂà§ÂÆöËåÉÂõ¥$/;"	m	class:NpcAIController	file:
npc_checkpoint_region	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_checkpoint_region;\/\/\/NPC“∆∂Ø,µΩ¥Ô“ª∏ˆ¬∑µ„µƒ≈–∂®∑∂Œß$/;"	m	class:NpcAIController
npc_count	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
npc_dwNpcDataID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
npc_dwNpcTempID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
npc_flee_distance	SceneServer/libscenesserver/SceneNpcAI.cpp	/^const int NpcAIController::npc_flee_distance = 4;\/\/\/NPCÈÄÉÁ¶ªÊîªÂáªËÄÖÁöÑË∑ùÁ¶ª$/;"	m	class:NpcAIController	file:
npc_flee_distance	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_flee_distance;\/\/\/NPCÃ”¿Îπ•ª˜’ﬂµƒæ‡¿Î$/;"	m	class:NpcAIController
npc_getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
npc_getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
npc_getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
npc_getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
npc_id	SceneServer/libscenesserver/script_func.cpp	/^int npc_id(SceneNpc* npc)$/;"	f
npc_list	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd	typeref:struct:Cmd::stMapScreenSizeDataUserCmd::__anon207
npc_lost_target_region	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_lost_target_region = 12;$/;"	m	class:SceneNpc
npc_min_act_region	SceneServer/libscenesserver/SceneNpcAI.cpp	/^const int NpcAIController::npc_min_act_region = 5;\/\/\/NPCÈÄÉÁ¶ªÊîªÂáªËÄÖÁöÑË∑ùÁ¶ª$/;"	m	class:NpcAIController	file:
npc_min_act_region	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_min_act_region;\/\/\/NPC◊Ó–°ªÓ∂Ø∑∂Œß$/;"	m	class:NpcAIController
npc_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Event
npc_one_checkpoint_time	SceneServer/libscenesserver/SceneNpcAI.cpp	/^const int NpcAIController::npc_one_checkpoint_time = 60;\/\/\/NPCÊåâÁÖßË∑ØÁ∫øÁßªÂä®Êó∂,Ëµ∞‰∏Ä‰∏™Ë∑ØÁÇπÁöÑÊúÄÈïøÊó∂Èó¥$/;"	m	class:NpcAIController	file:
npc_one_checkpoint_time	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_one_checkpoint_time;\/\/\/NPC∞¥’’¬∑œﬂ“∆∂Ø ±,◊ﬂ“ª∏ˆ¬∑µ„µƒ◊Ó≥§ ±º‰$/;"	m	class:NpcAIController
npc_onhit_stop_time	SceneServer/libscenesserver/SceneNpcAI.cpp	/^const int NpcAIController::npc_onhit_stop_time = 2;\/\/\/‰ªªÂä°NPCÁßªÂä®‰∏≠Ë¢´ÊîªÂáªÊó∂,ÂÅúÊ≠¢ÁöÑÊó∂Èó¥$/;"	m	class:NpcAIController	file:
npc_onhit_stop_time	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_onhit_stop_time;\/\/\/»ŒŒÒNPC“∆∂Ø÷–±ªπ•ª˜ ±,Õ£÷πµƒ ±º‰$/;"	m	class:NpcAIController
npc_out_of_range_region	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_out_of_range_region = 20;$/;"	m	class:SceneNpc
npc_outofbound	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
npc_outofbound	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
npc_pet_chase_region	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_pet_chase_region = 2;$/;"	m	class:SceneNpc
npc_pet_run_region	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_pet_run_region = 4;$/;"	m	class:SceneNpc
npc_pet_warp_region	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_pet_warp_region = 6;$/;"	m	class:SceneNpc
npc_search_region	SceneServer/libscenesserver/SceneServer1.h	/^  static const int npc_search_region = 5;$/;"	m	class:SceneNpc
npc_tempid	SceneServer/libscenesserver/script_func.cpp	/^int npc_tempid(SceneNpc* npc)$/;"	f
npcbm	base/src/zDatabaseManager.cpp	/^zDataBM<zNpcB,NpcBase> &npcbm=zDataBM<zNpcB,NpcBase>::getMe();$/;"	v
npcdareCountryID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
npcdareMapID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
npcdareNotify	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
npcdarePosX	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
npcdarePosY	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
npcdareflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
npcid	SceneServer/libscenesserver/SceneServer1.h	/^      DWORD npcid;      \/\/\/Npc±‡∫≈$/;"	m	struct:NpcTrade::NpcDialog
npcid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::NpcTrade::NpcDialog
npcid	base/include/csBox.h	/^	uint32_t npcid;$/;"	m	struct:Cmd::stNpcStartChangeUserCmd
nsc_updamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
num	BillServer/old_back/BillServer.h	/^  DWORD num;$/;"	m	struct:ConsignTrait
num	SceneServer/libscenesserver/MiniClient.cpp	/^    DWORD num() const$/;"	f	struct:Capacity
num	SceneServer/libscenesserver/MiniClient.cpp	/^    DWORD num() const$/;"	f	struct:DrawCombin
num	SceneServer/libscenesserver/SceneServer1.h	/^  WORD  num;$/;"	m	struct:InitObject
num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::Combination
num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::InitObject
num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::bossDefine
num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::servantDefine
num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::__anon75
num	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
num	SceneServer/libscenesserver/giftBox.h	/^	unsigned int num;$/;"	m	struct:boxObject
num	base/CmdAnalysis.h	/^		uint32_t num;$/;"	m	struct:CmdAnalysis::__anon126
num	base/include/csBox.h	/^	BYTE num;		\/\/sky ¥Ú‘Ï ˝¡ø$/;"	m	struct:Cmd::stNewMakeObjectUserCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Check_Draw
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Deposit
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Draw_Ret
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stAddOneRoomUserCommonMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stAddRoomUserCommonMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stDealCardMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stDepositCommonMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stDiceNumMiniGame
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stDrawCommonMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stGameListCommonMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stOneSeatStateCommonMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stPointDDZMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stPutCardMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stReserveCardsDDZMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stRetTopCommonMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stSeatStateCommonMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stShowHandDDZMiniGameCmd
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapNpcDataState
num	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapUserDataState
num	base/include/srvEngine.h	/^	uint32_t num;$/;"	m	struct:npcRecover
num	base/src/getopt.c	/^  unsigned num;$/;"	m	struct:hol_entry	file:
numPassword	GatewayServer/old_back/GatewayServer.h	/^	char numPassword[MAX_NUMPASSWORD];$/;"	m	class:GatewayTask
numPwd	GatewayServer/old_back/GatewayServer.h	/^	DWORD numPwd;$/;"	m	class:GatewayTask
num_child_inputs	base/src/getopt.c	/^  size_t num_child_inputs;	\/* Child input slots.  *\/$/;"	m	struct:parser_sizes	file:
num_entries	base/src/getopt.c	/^  unsigned num_entries;$/;"	m	struct:hol	file:
num_groups	base/src/getopt.c	/^  size_t num_groups;		\/* Group structures we mallocte.  *\/$/;"	m	struct:parser_sizes	file:
number	base/include/csCommon.h	/^/;"	f	class:Cmd::Cmd::Card
number	base/include/srvEngine.h	/^			uint16_t number;$/;"	m	struct:zObjectB::material::stuff
numkind	SceneServer/libscenesserver/giftBox.h	/^	unsigned int numkind;$/;"	m	struct:qualitys
numpasswd	base/flcmd.h	/^		char numpasswd[MAX_NUMPASSWORD];$/;"	m	struct:Cmd::t_NewLoginSession
nuparam_names	base/src/getopt.c	2366;"	d	file:
o	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:SaveObjectExec	file:
o	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSceneObject
oalias	base/src/getopt.c	2461;"	d	file:
obj	SceneServer/libscenesserver/giftBox.h	/^		boxObject obj;$/;"	m	struct:boxItem::_levelObj
obj	base/include/srvEngine.h	/^	static object_type obj;$/;"	m	struct:singleton_default
obj	base/include/srvEngine.h	/^typename singleton_default<T>::object_type singleton_default<T>::obj;$/;"	m	class:singleton_default
obj_id	SceneServer/libscenesserver/giftBox.h	/^	unsigned int obj_id;$/;"	m	struct:boxObject
obj_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
objcost	base/include/srvEngine.h	/^	uint32_t  objcost;            \/\/Ê∂àËÄóÁâ©ÂìÅÁ±ªÂûã$/;"	m	struct:zSkillB
object	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::PrivateStore::SellInfo
object	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ObjectPack
object	base/include/csBox.h	/^	t_Object object;	\/\/±ªROLLµƒŒÔ∆∑µƒ ˝æ›$/;"	m	struct:Cmd::stTeamRollItemNoticeUserCmd
object	base/include/csCommon.h	/^/;"	m	struct:SaveObject
object_type	base/include/srvEngine.h	/^	typedef T object_type;$/;"	t	struct:singleton_default
objectbm	base/src/zDatabaseManager.cpp	/^zDataBM<zObjectB,ObjectBase> &objectbm=zDataBM<zObjectB,ObjectBase>::getMe();$/;"	v
objects	BillServer/Makefile	/^objects = BillServer.o BillTask.o BillTaskManager.o$/;"	m
objects	FLServer/Makefile	/^objects = FLServer.o ServerACL.o LoginManager.o LoginTask.o GYListManager.o ServerTask.o ServerManager.o$/;"	m
objects	GatewayServer/Makefile	/^objects = GatewayServer.o GatewayTask.o LoginSessionManager.o BillClient.o$/;"	m
objects	RecordServer/Makefile	/^objects = RecordServer.o RecordTask.o RecordUser.o RecordUserManager.o$/;"	m
objects	SceneServer/Makefile	/^objects = SceneServer.o SceneTask.o $/;"	m
objects	SceneServer/libscenesserver/SceneServer1.h	/^    ObjectsContainer objects;$/;"	m	class:CharInitInfo
objects	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::CharInitInfo
objects	SessionServer/Makefile	/^objects = SessionServer.o SessionTask.o ServerManager.o$/;"	m
objects	SuperServer/Makefile	/^objects = SuperServer.o ServerTask.o ServerManager.o FLClient.o$/;"	m
objects	base/Makefile	/^objects = common.o x_logger.o x_service.o server.o x_simple_db_table.o $/;"	m
objects	base/include/csBox.h	/^	t_Object	objects[0];$/;"	m	struct:Cmd::stNpcDirItemDataUserCmd
objects	base/include/csBox.h	/^	t_Object objects[17];$/;"	m	struct:Cmd::stGetCowBoxInitCmd
objects	client/Makefile	/^objects = client.o ClientConn.o Game.o NetworkManager.o$/;"	m
objects	deps/tinyxml/Makefile	/^objects = tinyxml.o tinyxmlparser.o tinyxmlerror.o$/;"	m
objects	tmp/base2/makefile	/^objects = connection.o io_service_pool.o server.o main.o$/;"	m
objlogger	SceneServer/libscenesserver/ScenesServer.cpp	/^zLogger * ScenesService::objlogger = NULL;$/;"	m	class:ScenesService	file:
objlogger	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
objnum	base/include/srvEngine.h	/^	uint32_t  objnum;              \/\/Ê∂àËÄóÁâ©ÂìÅÊï∞Èáè$/;"	m	struct:zSkillB
obtain_exp	SceneServer/libscenesserver/zObject.cpp	/^void EquipPack::obtain_exp(SceneUser* user,DWORD exp,bool force)$/;"	f	class:EquipPack
occupation	SessionServer/libsessionserver/SessionServer.h	/^    WORD  occupation;$/;"	m	class:UserSession
occupation	SessionServer/libsessionserver/SessionServer.h	/^  WORD  occupation;$/;"	m	struct:CRelation
odds	SceneServer/libscenesserver/SceneServer1.h	/^      int odds;    $/;"	m	struct:EquipMaker::Odds
odds	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:EquipMaker::Odds
odds	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::leech
odds	base/include/csCommon.h	/^/;"	m	struct:LiveSkill
odds	base/include/csCommon.h	/^/;"	m	struct:_Object::leech
odds	base/include/srvEngine.h	/^		rangeValue odds; $/;"	m	struct:zSoulStoneB::Value
odds	base/include/srvEngine.h	/^		uint16_t odds;$/;"	m	struct:zSetObjectB::SET
odds	base/include/srvEngine.h	/^		uint32_t odds;  \/\/Âá†Áéá$/;"	m	class:zLiveSkillB::ITEM
odds	base/include/srvEngine.h	/^	uint16_t odds;    \/\/ ÂØπÂ∫îÊàêÂäüÁéá$/;"	m	struct:zUpgradeObjectB
odds	base/include/srvEngine.h	/^	uint16_t odds; \/\/Âá†Áéá$/;"	m	struct:skillbonus
odds_gem	SceneServer/libscenesserver/SceneServer1.h	/^      int odds_gem;$/;"	m	struct:EquipMaker::Odds
odds_gem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:EquipMaker::Odds
odds_of_blue	SceneServer/libscenesserver/RebuildObject.cpp	/^int EquipMaker::odds_of_blue(const zObjectB* ob)$/;"	f	class:EquipMaker
odds_of_gold	SceneServer/libscenesserver/RebuildObject.cpp	/^int EquipMaker::odds_of_gold(const zObjectB* ob)$/;"	f	class:EquipMaker
odds_of_holy	SceneServer/libscenesserver/RebuildObject.cpp	/^int EquipMaker::odds_of_holy(int object)$/;"	f	class:EquipMaker
odds_of_property	SceneServer/libscenesserver/RebuildObject.cpp	/^int EquipMaker::odds_of_property(int object,int property)$/;"	f	class:EquipMaker
odds_of_white	SceneServer/libscenesserver/RebuildObject.cpp	/^int EquipMaker::odds_of_white(const zObjectB* ob)$/;"	f	class:EquipMaker
odds_t	base/include/zTime.h	/^struct odds_t$/;"	s
odoc	base/src/getopt.c	2464;"	d	file:
oend	base/src/getopt.c	2467;"	d	file:
offline	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::offline(const DWORD dwID,const char* name)$/;"	f	class:CRelationManager
offline	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::offline()$/;"	f	class:CSchoolMember
offline	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::offline()$/;"	f	class:CSeptMember
offline	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
offlineCount	SessionServer/libsessionserver/Sort.cpp	/^void CSortM::offlineCount(UserSession *pUser)$/;"	f	class:CSortM
offline_member	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Team
offlinetime	base/include/csCommon.h	/^/;"	m	struct:CharBase
offset	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventTrigger2
offtime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::TeamMember
ok	tmp/base3/reply.cpp	/^const char ok[] = "";$/;"	m	namespace:http::server2::stock_replies	file:
ok	tmp/base3/reply.cpp	/^const std::string ok =$/;"	m	namespace:http::server2::status_strings	file:
ok	tmp/base3/reply.hpp	/^    ok = 200,$/;"	e	enum:http::server2::reply::status_type
okay	base/include/srvEngine.h	/^		okay    =  2,            \/**< ËøûÊé•Â§ÑÁêÜÈò∂ÊÆµ *\/$/;"	e	enum:x_tcp_clientTask::ConnState
okay	base/src/x_tcptask.h	/^		okay    =  3,            \/**< ËøûÊé•Â§ÑÁêÜÈò∂ÊÆµÔºåÈ™åËØÅÈÄöËøá‰∫ÜÔºåËøõÂÖ•‰∏ªÂæ™ÁéØ *\/$/;"	e	enum:x_tcptask::zTCPTask_State
okayThreadFunctors	base/src/x_tcptaskpool.h	/^	std::vector<boost::shared_ptr<x_okay_thread_functor> > okayThreadFunctors;$/;"	m	class:x_tcptaskpool
okayThreads	base/src/x_tcptaskpool.h	/^	boost::thread_group okayThreads;$/;"	m	class:x_tcptaskpool
old	FLServer/ServerTask.h	/^	DWORD old;$/;"	m	class:ServerTask
old	GatewayServer/old_back/GatewayServer.h	/^	DWORD old;$/;"	m	class:GatewayTask
oldAI	SceneServer/libscenesserver/SceneServer1.h	/^  t_NpcAIDefine curAI,oldAI;$/;"	m	class:NpcAIController
onPhaseTimeOver	SceneServer/libscenesserver/Rush.cpp	/^void Rush::onPhaseTimeOver()$/;"	f	class:Rush
onTimeOver	SceneServer/libscenesserver/Rush.cpp	/^void Rush::onTimeOver()$/;"	f	class:Rush
on_attack	SceneServer/libscenesserver/Mask.cpp	/^int Mask::on_attack(SceneUser* victim)$/;"	f	class:Mask
on_change_state	base/task_state.cpp	/^void state_closed::on_change_state()$/;"	f	class:state_closed
on_change_state	base/task_state.cpp	/^void state_no_wait_sync::on_change_state()$/;"	f	class:state_no_wait_sync
on_change_state	base/task_state.cpp	/^void state_okay::on_change_state()$/;"	f	class:state_okay
on_change_state	base/task_state.cpp	/^void state_verify::on_change_state()$/;"	f	class:state_verify
on_change_state	base/task_state.cpp	/^void state_wait::on_change_state()$/;"	f	class:state_wait
on_change_state	base/task_state.cpp	/^void state_wait_sync::on_change_state()$/;"	f	class:state_wait_sync
on_death	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::on_death(SceneEntryPk* attacker)$/;"	f	class:GuardNpc
on_death	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void on_death(SceneEntryPk* att){}$/;"	f	class:SceneNpc
on_death	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void on_death(SceneEntryPk* att){}$/;"	f	class:ScenePet
on_death	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ScenePet
on_defence	SceneServer/libscenesserver/Mask.cpp	/^int Mask::on_defence()$/;"	f	class:Mask
on_die	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::on_die()$/;"	f	class:NpcAIController
on_find_enemy	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::on_find_enemy(const SceneEntryPk *pFound)$/;"	f	class:NpcAIController
on_gem	SceneServer/libscenesserver/Mask.cpp	/^int Mask::on_gem()$/;"	f	class:Mask
on_hit	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::on_hit(SceneEntryPk *pAtk)$/;"	f	class:NpcAIController
on_phaseEnd	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::on_phaseEnd()$/;"	f	class:NpcAIController
on_reached	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::on_reached()$/;"	f	class:GuardNpc
on_reached	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void on_reached() { }$/;"	f	class:SceneNpc
on_relive	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::on_relive()$/;"	f	class:NpcAIController
on_timer	SceneServer/libscenesserver/Mask.cpp	/^int Mask::on_timer()$/;"	f	class:Mask
on_trade	SceneServer/libscenesserver/Mask.cpp	/^int Mask::on_trade()$/;"	f	class:Mask
on_use	SceneServer/libscenesserver/Mask.cpp	/^int Mask::on_use(SceneUser* user,zObject* ob)$/;"	f	class:Mask
oneGameState	tmp/MiniServer/MiniServer.h	/^  oneGameState()$/;"	f	struct:oneGameState
oneGameState	tmp/MiniServer/MiniServer.h	/^struct oneGameState$/;"	s
oneGameUserNum	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniRoomData
oneGameUserNum	tmp/MiniServer/MiniServer.h	/^    DWORD oneGameUserNum;$/;"	m	class:MiniRoom
one_second	GatewayServer/old_back/GatewayServer.h	/^	Timer one_second;$/;"	m	class:GatewayTimeTick
online	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::online(const DWORD dwID)$/;"	f	class:CRelationManager
online	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::online(UserSession *pUser)$/;"	f	class:CSchoolMember
online	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::online(const DWORD status)$/;"	f	class:CSeptMember
online	SessionServer/libsessionserver/SessionServer.h	/^  bool online;$/;"	m	struct:CRelation
online	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
onlineCount	SessionServer/libsessionserver/Sort.cpp	/^void CSortM::onlineCount(DWORD dwCharID, WORD wdLevel, QWORD qwExp)$/;"	f	class:CSortM
onlineCount	SessionServer/libsessionserver/Sort.cpp	/^void CSortM::onlineCount(UserSession *pUser)$/;"	f	class:CSortM
onlinetime	base/include/csCommon.h	/^/;"	m	struct:CharBase
onlyme	SceneServer/libscenesserver/ObjectManager.cpp	/^GlobalObjectIndex *GlobalObjectIndex::onlyme=NULL;$/;"	m	class:GlobalObjectIndex	file:
onlyme	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::GlobalObjectIndex
open	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stToggleSeatCommonMiniGameCmd
open	tmp/MiniServer/MiniServer.h	/^  BYTE open;$/;"	m	struct:Seat
operation	SessionServer/libsessionserver/SessionServer.h	/^  WORD operation;$/;"	m	struct:forbidInfo
operation	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forbidTalk_SceneSession
operator !=	base/include/csCommon.h	/^/;"	f	struct:stObjectLocation
operator ()	BillServer/old_back/BillServer.h	/^      bool operator()(BillClient *s1,BillClient *s2) const$/;"	f	struct:BillClientManager::lt_client
operator ()	BillServer/old_back/BillServer.h	/^      bool operator()(const char* s1,const char* s2) const$/;"	f	struct:BillCache::eqstr
operator ()	FLServer/ServerACL.h	/^		std::size_t operator()(const GameZone_t & x) const$/;"	f	struct:ServerACL::ihash
operator ()	GatewayServer/old_back/GatewayServer.h	/^		void operator () (T target)$/;"	f	class:CheckerTable::FreeMemory
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^     void operator() (T& value,T action,SceneUser *user) const$/;"	f	class:Op::Div
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^     void operator() (T& value,T action,SceneUser *user) const$/;"	f	class:Op::GetP
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^     void operator() (T& value,T action,SceneUser *user) const$/;"	f	class:Op::Mul
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^     void operator() (T& value,T action,SceneUser *user) const$/;"	f	class:Op::Pow
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^     void operator() (T& value,T action,SceneUser *user) const$/;"	f	class:Op::Set
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^    bool operator() (T value,T condition) const$/;"	f	class:Op::Differ
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^    bool operator() (T value,T condition) const$/;"	f	class:Op::Equal
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^    bool operator() (T value,T condition) const$/;"	f	class:Op::Great
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^    bool operator() (T value,T condition) const$/;"	f	class:Op::Less
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^    void operator() (T& value,T action,SceneUser *user) const$/;"	f	class:Op::Add
operator ()	SceneServer/libscenesserver/SceneServer1.h	/^    void operator() (T& value,T action,SceneUser *user) const$/;"	f	class:Op::Sub
operator ()	SceneServer/libscenesserver/SceneUserManager.cpp	/^    void operator()(T id)$/;"	f	struct:Del
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Event::FreeMemory
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Event::LessIgnoreHB
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Add
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Differ
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Div
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Equal
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::GetP
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Great
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Less
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Mul
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Pow
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Set
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Op::Sub
operator ()	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::TeamManager::ltword
operator ()	SessionServer/libsessionserver/OfflineMessage.cpp	/^  bool operator()(const std::string s1,const std::string s2) const$/;"	f	struct:ltstring
operator ()	SessionServer/libsessionserver/Quiz.cpp	/^    void operator() (int subid)$/;"	f	class:PrintSet
operator ()	SessionServer/libsessionserver/SessionServer.cpp	/^  bool operator()(const DWORD s1,const DWORD s2) const$/;"	f	struct:ss
operator ()	SessionServer/libsessionserver/SessionServer.h	/^      bool operator()(const DWORD s1,const DWORD s2) const$/;"	f	struct:CSchoolMember::ltword
operator ()	SessionServer/libsessionserver/SessionServer.h	/^      bool operator()(const QWORD s1,const QWORD s2) const$/;"	f	struct:CSortM::ltqword
operator ()	SuperServer/InfoClientManager.h	/^      bool operator()(InfoClient *s1,InfoClient *s2) const$/;"	f	struct:InfoClientManager::lt_client
operator ()	SuperServer/RoleregCache.cpp	/^		bool operator()(const char* s1,const char* s2) const$/;"	f	struct:RoleDataContainer::eqstr
operator ()	base/include/srvEngine.h	/^	V* operator () (const std::string& down,const std::string& separator_down)$/;"	f	class:Parse
operator ()	base/include/srvEngine.h	/^	V* operator () (const std::string& down,const std::string& separator_down)$/;"	f	class:Parse3
operator ()	base/include/srvEngine.h	/^	char operator() (char c) const$/;"	f	struct:ToLower
operator ()	base/include/srvEngine.h	/^	char operator() (char c) const$/;"	f	struct:ToUpper
operator ()	base/include/srvEngine.h	/^	void operator() (const std::string& list,T& dest,const std::string& separator_up = ";",const std::string& separator_down = ",")$/;"	f	class:Split
operator ()	base/include/srvEngine.h	/^inline bool my_key_equal<const char *>::operator()(const char * s1,const char * s2) const$/;"	f	class:my_key_equal
operator ()	base/include/srvEngine.h	/^inline bool my_key_equal<uint32_t>::operator()(const uint32_t s1,const uint32_t s2) const$/;"	f	class:my_key_equal
operator ()	base/include/zTime.h	/^	bool operator() (const zRTime& current)$/;"	f	class:RandTimer
operator ()	base/include/zTime.h	/^	bool operator() (const zRTime& current)$/;"	f	class:Timer
operator ()	base/src/x_tcp_client.cpp	/^void x_tcp_buffer_client::operator()()$/;"	f	class:x_tcp_buffer_client
operator ()	base/src/x_tcp_client.cpp	/^void x_tcp_client::operator()()$/;"	f	class:x_tcp_client
operator ()	base/src/x_tcptaskpool.cpp	/^void x_okay_thread_functor::operator()()$/;"	f	class:x_okay_thread_functor
operator ()	base/src/x_tcptaskpool.cpp	/^void x_recycle_thread_functor::operator()()$/;"	f	class:x_recycle_thread_functor
operator ()	base/src/x_tcptaskpool.cpp	/^void x_sync_thread_functor::operator()()$/;"	f	class:x_sync_thread_functor
operator ()	base/src/x_tcptaskpool.cpp	/^void x_verify_thread_functor::operator()()$/;"	f	class:x_verify_thread_functor
operator ()	base/supercmd.h	/^			bool operator()(const Cmd::Super::ServerEntry &s1,const Cmd::Super::ServerEntry &s2) const$/;"	f	struct:Cmd::Super::key_equal
operator ()	base/supercmd.h	/^			size_t operator()(const Cmd::Super::ServerEntry &x) const$/;"	f	struct:Cmd::Super::key_hash
operator ()	tmp/MiniServer/CardPattern.cpp	/^    int operator()(const std::pair<DWORD,Cmd::Card> &p1,const std::pair<DWORD,Cmd::Card> &p2)$/;"	f	class:m_sort
operator ()	tmp/MiniServer/DDZCardGame.cpp	/^    int operator()(const Cmd::Card &p1,const Cmd::Card &p2)$/;"	f	class:m_sort
operator ()	tmp/MiniServer/Top100.cpp	/^  bool operator()(const Cmd::MiniUserData &d)$/;"	f	struct:findID
operator ()	tmp/MiniServer/Top100.cpp	/^  bool operator()(const Cmd::MiniUserData &d)$/;"	f	struct:findScore
operator +	base/include/srvEngine.h	/^	const zPos & operator+ (const zAdjust &adjust)$/;"	f	struct:zPos
operator +	base/include/srvEngine.h	/^	const zPos & operator+ (const zPos &pos)$/;"	f	struct:zPos
operator +	base/include/zTime.h	/^	const zRTime & operator+ (const zRTime &rt)$/;"	f	class:zRTime
operator +	base/include/zTime.h	/^	const zTime & operator+ (const zTime &rt)$/;"	f	class:zTime
operator +=	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniGameScore
operator +=	base/include/srvEngine.h	/^	const zPos & operator+= (const zAdjust &adjust)$/;"	f	struct:zPos
operator +=	base/include/srvEngine.h	/^	const zPos & operator+= (const zPos &pos)$/;"	f	struct:zPos
operator -	base/include/srvEngine.h	/^	const zPos & operator- (const zAdjust &adjust)$/;"	f	struct:zPos
operator -	base/include/srvEngine.h	/^	const zPos & operator- (const zPos &pos)$/;"	f	struct:zPos
operator -	base/include/zTime.h	/^	const zRTime & operator- (const zRTime &rt)$/;"	f	class:zRTime
operator -	base/include/zTime.h	/^	const zTime & operator- (const zTime &rt)$/;"	f	class:zTime
operator -=	base/include/srvEngine.h	/^	const zPos & operator-= (const zAdjust &adjust)$/;"	f	struct:zPos
operator -=	base/include/srvEngine.h	/^	const zPos & operator-= (const zPos &pos)$/;"	f	struct:zPos
operator -=	base/include/zTime.h	/^	const zTime & operator-= (const time_t s)$/;"	f	class:zTime
operator ->	base/x_logger.h	/^	const log4cxx::LoggerPtr operator->() const$/;"	f	class:x_logger
operator ->	base/x_logger.h	/^	log4cxx::LoggerPtr operator->()$/;"	f	class:x_logger
operator <	SessionServer/libsessionserver/Sept.cpp	/^    friend bool operator<(const CSeptSort& lhs,const CSeptSort& rhs)$/;"	f	class:CSeptSort
operator <	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionSort
operator <	base/include/csCommon.h	/^/;"	f	class:Cmd::Cmd::Card
operator <	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniGameScore
operator <	base/include/srvEngine.h	/^	const bool operator< (const zPos &pos) const$/;"	f	struct:zPos
operator <	base/include/zTime.h	/^	bool operator < (const zRTime &rt) const$/;"	f	class:zRTime
operator <	base/include/zTime.h	/^	bool operator < (const zTime &rt) const$/;"	f	class:zTime
operator <	base/supercmd.h	/^			bool operator < (const ServerEntry& se) const {$/;"	f	struct:Cmd::Super::ServerEntry
operator <	deps/tinyxml/tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute
operator <<	deps/tinyxml/tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f
operator <<	deps/tinyxml/tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f
operator <=	base/include/srvEngine.h	/^	const bool operator<= (const zPos &pos) const$/;"	f	struct:zPos
operator <=	base/include/zTime.h	/^	bool operator <= (const zRTime &rt) const$/;"	f	class:zRTime
operator <=	base/include/zTime.h	/^	bool operator <= (const zTime &rt) const$/;"	f	class:zTime
operator =	BillServer/old_back/BillServer.h	/^  BillInfo & operator= (const BillInfo &ai)$/;"	f	struct:BillInfo
operator =	GatewayServer/old_back/GatewayServer.h	/^		LoginSession & operator= (const LoginSession &ls)$/;"	f	struct:LoginSessionManager::LoginSession
operator =	SceneServer/libscenesserver/SceneServer1.h	/^  t_NpcAIDefine & operator = (const t_NpcAIDefine &ad)$/;"	f	struct:t_NpcAIDefine
operator =	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::ZoneTypeDef
operator =	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::t_NpcDefine
operator =	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::Point
operator =	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zPoint
operator =	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zRegion
operator =	SessionServer/libsessionserver/Sept.cpp	/^    CSeptSort& operator =(const CSeptSort& ref)$/;"	f	class:CSeptSort
operator =	SessionServer/libsessionserver/SessionManager.cpp	/^    CGraceUser& operator =(const CGraceUser& ref)$/;"	f	class:CGraceUser
operator =	SessionServer/libsessionserver/SessionServer.h	/^    const CSubject & operator= (const CSubject &ref)$/;"	f	class:CSubject
operator =	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionSort
operator =	SuperServer/RoleregCache.cpp	/^	const RoleData & operator= (const RoleData &rd)$/;"	f	struct:RoleData
operator =	SuperServer/RoleregCache.h	/^      Data &operator=(const Data &data)$/;"	f	struct:RoleregCache::Data
operator =	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniGameScore
operator =	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniUserData
operator =	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniUserPosition
operator =	base/include/csCommon.h	/^/;"	f	struct:stObjectLocation
operator =	base/include/srvEngine.h	/^		zPathQueue & operator= (const zPathQueue &queue)$/;"	f	struct:zAStar::zPathQueue
operator =	base/include/srvEngine.h	/^	npcSkill& operator = (const npcSkill &skill)$/;"	f	struct:npcSkill
operator =	base/include/srvEngine.h	/^	zPos & operator= (const zPos &pos)$/;"	f	struct:zPos
operator =	base/include/zTime.h	/^	zRTime & operator= (const zRTime &rt)$/;"	f	class:zRTime
operator =	base/include/zTime.h	/^	zTime & operator= (const zTime &rt)$/;"	f	class:zTime
operator =	deps/tinyxml/tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment
operator =	deps/tinyxml/tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration
operator =	deps/tinyxml/tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument
operator =	deps/tinyxml/tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement
operator =	deps/tinyxml/tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { if ( &ref != this ) this->node = ref.node; return *this; }$/;"	f	class:TiXmlHandle
operator =	deps/tinyxml/tinyxml.h	/^	TiXmlText& operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); return *this; }$/;"	f	class:TiXmlText
operator =	deps/tinyxml/tinyxml.h	/^	TiXmlUnknown& operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); return *this; }$/;"	f	class:TiXmlUnknown
operator =	tmp/MiniServer/CardPattern.cpp	/^CardPattern & CardPattern::operator=(const CardPattern &c)$/;"	f	class:CardPattern
operator ==	base/common.h	/^	bool operator == (const GameZone_t& t) const {$/;"	f	struct:GameZone_t
operator ==	base/include/csCommon.h	/^/;"	f	class:Cmd::Cmd::Card
operator ==	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniGameScore
operator ==	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniUserPosition
operator ==	base/include/csCommon.h	/^/;"	f	struct:stObjectLocation
operator ==	base/include/srvEngine.h	/^	const bool operator== (const zPos &pos) const$/;"	f	struct:zPos
operator ==	base/include/zTime.h	/^	bool operator == (const zRTime &rt) const$/;"	f	class:zRTime
operator ==	base/include/zTime.h	/^	bool operator == (const zTime &rt) const$/;"	f	class:zTime
operator ==	base/supercmd.h	/^			bool operator == (const ServerEntry& se) const {$/;"	f	struct:Cmd::Super::ServerEntry
operator ==	deps/tinyxml/tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute
operator >	base/include/csCommon.h	/^/;"	f	class:Cmd::Cmd::Card
operator >	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniGameScore
operator >	base/include/srvEngine.h	/^	const bool operator> (const zPos &pos) const$/;"	f	struct:zPos
operator >	base/include/zTime.h	/^	bool operator > (const zRTime &rt) const$/;"	f	class:zRTime
operator >	base/include/zTime.h	/^	bool operator > (const zTime &rt) const$/;"	f	class:zTime
operator >	deps/tinyxml/tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute
operator >	tmp/MiniServer/CardPattern.cpp	/^bool CardPattern::operator>(const CardPattern &c)$/;"	f	class:CardPattern
operator >=	base/include/srvEngine.h	/^	const bool operator>= (const zPos &pos) const$/;"	f	struct:zPos
operator >=	base/include/zTime.h	/^	bool operator >= (const zRTime &rt) const$/;"	f	class:zRTime
operator >=	base/include/zTime.h	/^	bool operator >= (const zTime &rt) const$/;"	f	class:zTime
operator >>	deps/tinyxml/tinyxml.cpp	/^std::istream& operator>> (std::istream & in, TiXmlNode & base)$/;"	f
operator []	base/x_properties.h	/^	std::string & operator[] (const std::string &key)$/;"	f	class:x_properties
operator int	SceneServer/libscenesserver/giftBox.h	/^		operator int() const $/;"	f	struct:boxItem::_levelObj
operator int	base/include/srvEngine.h	/^	operator int()$/;"	f	struct:luckRangeValue
opt	base/src/getopt.c	/^  const struct argp_option *opt;$/;"	m	struct:hol_entry	typeref:struct:hol_entry::argp_option	file:
opt_data	base/src/getopt.c	/^  struct _getopt_data opt_data;$/;"	m	struct:parser	typeref:struct:parser::_getopt_data	file:
opt_doc_col	base/src/getopt.c	/^  int opt_doc_col;$/;"	m	struct:uparams	file:
optarg	base/src/getopt.c	/^  char *optarg;$/;"	m	struct:_getopt_data	file:
optarg	base/src/getopt.c	/^char *optarg;$/;"	v
opterr	base/src/getopt.c	/^  int opterr;$/;"	m	struct:_getopt_data	file:
opterr	base/src/getopt.c	/^int opterr = 1;$/;"	v
optind	base/src/getopt.c	/^  int optind;$/;"	m	struct:_getopt_data	file:
optind	base/src/getopt.c	/^int optind = 1;$/;"	v
options	base/include/argp.h	/^  const  struct argp_option *options;$/;"	m	struct:argp	typeref:struct:argp::argp_option
optopt	base/src/getopt.c	/^  int optopt;$/;"	m	struct:_getopt_data	file:
optopt	base/src/getopt.c	/^int optopt = '?';$/;"	v
order	SceneServer/libscenesserver/SceneServer1.h	/^      int order;$/;"	m	struct:MessageSystem::t_Message
orig	base/include/srvEngine.h	/^	bool orig; \/\/ÂàùÂßãÊäÄËÉΩ$/;"	m	struct:zLiveSkillB
oshort	base/src/getopt.c	2470;"	d	file:
oskill	base/include/csCommon.h	/^/;"	s
other	base/include/csCommon.h	/^/;"	m	struct:oskill
otherBangle	base/include/csCommon.h	1532;"	d
otherHand	base/include/csCommon.h	1529;"	d
otherPutTime	tmp/MiniServer/MiniServer.h	/^    BYTE otherPutTime;\/\/∆‰À˚»À≥ˆπ˝º∏¥Œ≈∆$/;"	m	class:DDZCardGame
outOfRandRegion	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::outOfRandRegion(zPos * pos)$/;"	f	class:SceneNpc
outOfRegion	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool NpcAIController::outOfRegion() const$/;"	f	class:NpcAIController
out_stream	base/include/argp.h	/^  FILE *out_stream;    \/* For information; initialized to stdout. *\/$/;"	m	struct:argp_state
outofbound	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestUserAndSend
ovisible	base/src/getopt.c	2458;"	d	file:
owner	SceneServer/libscenesserver/GuardNpc.cpp	/^SceneUser* GuardNpc::owner()$/;"	f	class:GuardNpc
owner	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::owner(SceneUser* user)$/;"	f	class:GuardNpc
owner	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
owner	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Packages
owner	SessionServer/libsessionserver/SessionServer.h	/^  char owner[MAX_NAMESIZE+1];$/;"	m	struct:auctionBidInfo
ownerID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSceneObject
ownerID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD ownerID;$/;"	m	struct:auctionBidInfo
p	base/src/getopt.c	/^  char *p;			\/* Current end of text in BUF. *\/$/;"	m	struct:argp_fmtstream	file:
p1	SceneServer/libscenesserver/scriptTickTask.h	/^	int p1;$/;"	m	struct:scriptTask
pCmd	SceneServer/libscenesserver/TeamManager.cpp	/^	Cmd::stTeamRollItemNoticeUserCmd pCmd;$/;"	m	struct:NoticeRollExec	file:
pContent	SessionServer/libsessionserver/SessionTask.cpp	/^  char * pContent;$/;"	m	struct:broadcastRushToEveryUser	file:
pLoginSessionM	GatewayServer/GatewayServer.h	/^		boost::scoped_ptr<LoginSessionManager> pLoginSessionM;$/;"	m	class:GatewayService
pService	base/include/srvEngine.h	/^	x_netservice* pService;$/;"	m	class:zAcceptThread
pSock	base/include/srvEngine.h	/^		x_socket* pSock;$/;"	m	struct:pollfd
pSocket	base/include/srvEngine.h	/^	x_socket *pSocket;                \/**< Â∫ïÂ±ÇÂ•óÊé•Âè£ *\/$/;"	m	class:x_tcp_clientTask
pSocket	base/src/x_tcp_client.h	/^	boost::scoped_ptr<x_socket> pSocket;                \/**< Â∫ïÂ±ÇÂ•óÊé•Âè£ *\/$/;"	m	class:x_tcp_client
pStampData	SceneServer/libscenesserver/ScenesServer.cpp	/^Cmd::stChannelChatUserCmd * ScenesService::pStampData = 0;$/;"	m	class:ScenesService	file:
pStampData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
pUser	GatewayServer/old_back/GatewayServer.h	/^	GateUser *pUser;$/;"	m	class:GatewayTask
pUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:sendAllObjectListToUser	file:
pUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:sendAllObjectToUser	file:
pUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:sendAllSkillToUser	file:
pUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
pUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestNpcAndSend	file:
pUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestUserAndSend	file:
pUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:SendStateWarToNineEveryOne	file:
pack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DropFromPack::Param
pack	SceneServer/libscenesserver/zObject.cpp	/^ObjectPack* EquipPack::pack(PACKNO no) const$/;"	f	class:EquipPack
packNum	tmp/MiniServer/MiniServer.h	/^    BYTE packNum;\/\/º∏∏±≈∆$/;"	m	class:DDZCardGame
packetAppend	base/include/srvEngine.h	/^inline uint32_t x_socket::packetAppend(const void *pData,const uint32_t nLen,buffer_type &cmd_queue)$/;"	f	class:x_socket
packetAppendNoEnc	base/include/srvEngine.h	/^inline uint32_t x_socket::packetAppendNoEnc(const void *pData,const uint32_t nLen,buffer_type &cmd_queue)$/;"	f	class:x_socket
packetMinSize	base/include/x_socket.h	/^	uint32_t packetMinSize() const { return PH_LEN; }$/;"	f	class:x_socket
packetPackEnc	base/include/srvEngine.h	/^inline uint32_t x_socket::packetPackEnc(buffer_type &cmd_queue,const uint32_t current_cmd,uint32_t offset)$/;"	f	class:x_socket
packetPackZip	base/include/srvEngine.h	/^inline uint32_t x_socket::packetPackZip(const void *pData,const uint32_t nLen,buffer_type &cmd_queue,const bool _compress)$/;"	f	class:x_socket
packetSize	base/include/x_socket.h	/^	uint32_t packetSize(const BYTE *in) const { return PH_LEN + ((*((uint32_t *)in)) & PACKET_MASK); }$/;"	f	class:x_socket
packets	GatewayServer/old_back/GatewayServer.h	/^	int packets() const$/;"	f	class:CheckInfo
packets	GatewayServer/old_back/GatewayServer.h	/^	void packets(int packets_)$/;"	f	class:CheckInfo
packs	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
packs	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
para	base/x_nullcmd.h	/^		BYTE para;$/;"	m	struct:Cmd::t_NullCmd
params	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
paras	SceneServer/libscenesserver/scriptTickTask.h	/^	typedef std::vector<const char *> paras;$/;"	t	class:scriptMessageFilter
parent	base/src/getopt.c	/^  struct group *parent;$/;"	m	struct:group	typeref:struct:group::group	file:
parent	base/src/getopt.c	/^  struct hol_cluster *parent;$/;"	m	struct:hol_cluster	typeref:struct:hol_cluster::hol_cluster	file:
parent	deps/tinyxml/tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:TiXmlNode
parent_index	base/src/getopt.c	/^  unsigned parent_index;	\/* And the our position in the parent.   *\/$/;"	m	struct:group	file:
parse	SceneServer/libscenesserver/QuestEvent.cpp	/^bool Event::parse(const std::string& file_name)$/;"	f	class:Event
parse	SceneServer/libscenesserver/SceneServer1.h	/^        bool (*parse)( SceneUser *pUser,const char *para);$/;"	m	struct:Gm
parse	SceneServer/libscenesserver/SceneServer1.h	/^  bool parse (zXMLParser& xml,xmlNodePtr& node)$/;"	f	class:ScenesParser
parse	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventManager
parse	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ScenesParser
parse	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Gm
parse	base/include/srvEngine.h	/^	void parse(const char * str)$/;"	f	struct:npcRecover
parse	tmp/base3/request_parser.hpp	/^  boost::tuple<boost::tribool, InputIterator> parse(request& req,$/;"	f	class:http::server2::request_parser
parseAction	SceneServer/libscenesserver/Rush.cpp	/^Rush::rushAction Rush::parseAction(const char * action)$/;"	f	class:Rush
parseAction	SceneServer/libscenesserver/SceneNpcAI.cpp	/^SceneNpcAIType NpcAIController::parseAction(char * action)$/;"	f	class:NpcAIController
parseCmdLine	base/x_properties.h	/^	size_t parseCmdLine(const std::string &cmdLine)$/;"	f	class:x_properties
parseCommonCmd	tmp/MiniServer/MiniHall.cpp	/^bool MiniHall::parseCommonCmd(MiniUser *u,Cmd::stCommonMiniGameCmd *cmd,DWORD len)$/;"	f	class:MiniHall
parseForwardMsg	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::parseForwardMsg(const Cmd::t_NullCmd * cmd,const DWORD len)$/;"	f	class:MiniTask
parseGameCmd	tmp/MiniServer/MiniGame.cpp	/^bool MiniGame::parseGameCmd(MiniUser *u,Cmd::stMiniGameUserCmd *cmd,DWORD len)$/;"	f	class:MiniGame
parseGateMsg	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::parseGateMsg(const Cmd::t_NullCmd * cmd,const DWORD len)$/;"	f	class:MiniTask
parseMySQLURLString	base/include/srvEngine.h	/^	void parseMySQLURLString()$/;"	f	struct:UrlInfo
parseSceneMsg	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::parseSceneMsg(const Cmd::t_NullCmd * cmd,const DWORD len)$/;"	f	class:MiniTask
parseSkills	base/include/srvEngine.h	/^	bool parseSkills(const char * str)$/;"	f	struct:zNpcB
parseUserCmd	tmp/MiniServer/MiniHall.cpp	/^bool MiniHall::parseUserCmd(MiniUser *u,Cmd::stMiniGameUserCmd *cmd,DWORD len)$/;"	f	class:MiniHall
parseYour	BillServer/old_back/BillServer.cpp	/^  bool parseYour(const xmlNodePtr node)$/;"	f	class:BillConfile	file:
parseYour	GatewayServer/old_back/GatewayServer.cpp	/^  bool parseYour(const xmlNodePtr node)$/;"	f	class:GatewayConfile	file:
parseYour	SceneServer/libscenesserver/ScenesServer.cpp	/^	bool parseYour(const xmlNodePtr node)$/;"	f	class:SceneConfile	file:
parseYour	SessionServer/libsessionserver/SessionServer.cpp	/^  bool parseYour(const xmlNodePtr node)$/;"	f	class:SessionConfile	file:
parseYour	tmp/MiniServer/MiniServer.cpp	/^  bool parseYour(const xmlNodePtr node)$/;"	f	class:MiniConfile	file:
parser	base/include/argp.h	/^  argp_parser_t parser;$/;"	m	struct:argp
parser	base/include/srvEngine.h	/^	zXMLParser parser;$/;"	m	class:zConfile
parser	base/src/getopt.c	/^  argp_parser_t parser;$/;"	m	struct:group	file:
parser	base/src/getopt.c	/^  struct parser *parser;$/;"	m	struct:parser_convert_state	typeref:struct:parser_convert_state::parser	file:
parser	base/src/getopt.c	/^struct parser$/;"	s	file:
parser_convert	base/src/getopt.c	/^parser_convert (struct parser *parser, const struct argp *argp, int flags)$/;"	f	file:
parser_convert_state	base/src/getopt.c	/^struct parser_convert_state$/;"	s	file:
parser_finalize	base/src/getopt.c	/^parser_finalize (struct parser *parser,$/;"	f	file:
parser_init	base/src/getopt.c	/^parser_init (struct parser *parser, const struct argp *argp,$/;"	f	file:
parser_parse_arg	base/src/getopt.c	/^parser_parse_arg (struct parser *parser, char *val)$/;"	f	file:
parser_parse_next	base/src/getopt.c	/^parser_parse_next (struct parser *parser, int *arg_ebadkey)$/;"	f	file:
parser_parse_opt	base/src/getopt.c	/^parser_parse_opt (struct parser *parser, int opt, char *val)$/;"	f	file:
parser_sizes	base/src/getopt.c	/^struct parser_sizes$/;"	s	file:
passTime	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD passTime;$/;"	m	class:GangScene
passdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
passpodPwd	base/command.h	/^		char passpodPwd[9];$/;"	m	struct:Cmd::stUserRequestLoginCmd
passwd	base/flcmd.h	/^		char passwd[MAX_PASSWORD];$/;"	m	struct:Cmd::t_NewLoginSession
passwd	base/include/srvEngine.h	/^	char passwd[MAX_PASSuint16_t];$/;"	m	struct:UrlInfo
passwd2	base/flcmd.h	/^		char passwd2[MAX_PASSWORD];$/;"	m	struct:Cmd::t_NewLoginSession
password	BillServer/BillUser.h	/^    char password[MAX_PASSWORD+1];$/;"	m	class:BillUser
password	BillServer/old_back/BillServer.h	/^    char password[MAX_PASSWORD+1];$/;"	m	class:BillUser
patrating	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pattackspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pblazeappend	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
pdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
pdam	base/include/csCommon.h	/^/;"	m	struct:_Object
pdam	base/include/srvEngine.h	/^			luckRangeValue pdam;    \/\/ Â¢ûÂä†Áâ©ÁêÜÊîªÂáªÂäõ$/;"	m	struct:zColorObjectB::__anon130::__anon131
pdamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
pdamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
pdamage	base/include/csCommon.h	/^/;"	m	struct:CharState
pdamage	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
pdamage	base/include/csCommon.h	/^/;"	m	struct:_Object
pdamage	base/include/srvEngine.h	/^	rangeValue pdamage;      \/\/ ÊúÄÂ∞èÁâ©Êîª$/;"	m	struct:zColorObjectB
pdamage	base/include/srvEngine.h	/^	uint32_t pdamage;        \/\/ ÊúÄÂ∞èÊîªÂáªÂäõ$/;"	m	struct:zObjectB
pdamage	base/include/srvEngine.h	/^	uint32_t pdamage;        \/\/ ÊúÄÂ∞èÊîªÂáªÂäõ$/;"	m	struct:zUpgradeObjectB
pdamtodef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
pdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
pdef	base/include/csCommon.h	/^/;"	m	struct:_Object
pdef	base/include/srvEngine.h	/^			luckRangeValue pdef;    \/\/ Â¢ûÂä†Áâ©ÁêÜÈò≤Âæ°Âäõ$/;"	m	struct:zColorObjectB::__anon130::__anon131
pdefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
pdefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
pdefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pdefence	base/include/csCommon.h	/^/;"	m	struct:CharState
pdefence	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
pdefence	base/include/csCommon.h	/^/;"	m	struct:_Object
pdefence	base/include/srvEngine.h	/^	rangeValue pdefence;      \/\/ Áâ©Èò≤$/;"	m	struct:zColorObjectB
pdefence	base/include/srvEngine.h	/^	uint32_t  pdefence;      \/\/ ÊúÄÂ∞èÁâ©ÁêÜÈò≤Âæ°Âäõ$/;"	m	struct:zNpcB
pdefence	base/include/srvEngine.h	/^	uint32_t pdefence;        \/\/ Áâ©Èò≤$/;"	m	struct:zObjectB
pdefence	base/include/srvEngine.h	/^	uint32_t pdefence;        \/\/ Áâ©Èò≤$/;"	m	struct:zUpgradeObjectB
pdefencep	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pdeftodam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pdeftozero	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
penalty	SceneServer/libscenesserver/SceneBattlefiel.h	/^	std::vector<stBattleReward> penalty;$/;"	m	class:GangScene
pentry_state	base/src/getopt.c	/^struct pentry_state$/;"	s	file:
per	SceneServer/libscenesserver/SceneServer1.h	/^      int per;$/;"	m	struct:EquipMaker::Odds
per	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:EquipMaker::Odds
per	base/include/srvEngine.h	/^	uint16_t per;  \/\/ÊòØÂê¶‰∫ßÁîüÊú¨Â±ûÊÄßÁöÑÂá†Áéá$/;"	m	struct:luckRangeValue
percent	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
percent	base/include/srvEngine.h	/^			uint32_t percent;$/;"	m	struct:SkillElement::__anon136::__anon137
percent_up_off	GatewayServer/old_back/GatewayServer.h	/^class percent_up_off$/;"	c
personals	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CSubject> personals;$/;"	m	class:CSubjectM
pet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
petBonus	SceneServer/libscenesserver/SceneServer1.h	/^struct petBonus$/;"	s
petBonus	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
petBuf	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetEnvryOneAndSend	file:
petBuf	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:GetRequestNpcAndSend	file:
petBuf	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetEnvryOneAndSend	file:
petBuf	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetRequestNpcAndSend	file:
petData	SceneServer/libscenesserver/SceneServer1.h	/^  Cmd::t_PetData petData;$/;"	m	class:ScenePet
petData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ScenePet
petData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
petDeath	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::petDeath()$/;"	f	class:ScenePet
petDeath	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void petDeath(){}$/;"	f	class:SceneNpc
petLevelUp	SceneServer/libscenesserver/SceneEntryPk.cpp	/^void SceneEntryPk::petLevelUp(ScenePet * up)$/;"	f	class:SceneEntryPk
petList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
petPack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Packages
petPack	base/include/csCommon.h	/^/;"	m	struct:CharBase
petPoint	base/include/csCommon.h	/^/;"	m	struct:CharBase
petType	base/include/csCommon.h	/^/;"	g	namespace:Cmd
pet_canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
pet_canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
pet_getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
pet_getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
pet_getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
pet_getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
pet_outofbound	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
pet_outofbound	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetRequestNpcAndSend
pet_pic	base/include/srvEngine.h	/^	uint32_t  pet_pic;      \/\/ÂÆ†Áâ©ÂõæÁâá$/;"	m	struct:zNpcB
pet_type	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapPetData
petbm	base/src/zDatabaseManager.cpp	/^zDataBM<zPetB,PetBase> &petbm = zDataBM<zPetB,PetBase>::getMe();$/;"	v
petrify	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
petrify	base/include/csCommon.h	/^/;"	m	struct:_Object
petrify	base/include/srvEngine.h	/^	rangeValue petrify; \/\/Áü≥ÂåñÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
petrifyRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
petrifydef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
petrifydef	base/include/csCommon.h	/^/;"	m	struct:_Object
petrifydef	base/include/srvEngine.h	/^			luckRangeValue petrifydef;    \/\/ ÊäóÁü≥ÂåñÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
petrifydef	base/include/srvEngine.h	/^	rangeValue petrifydef; \/\/ÊäóÁü≥ÂåñÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
petrifyp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pfds	base/include/srvEngine.h	/^	std::vector<struct pollfd> pfds;$/;"	m	class:zMTCPServer
pfds	base/src/zTCPClientTaskPool.cpp	/^	pollfdContainer pfds;$/;"	m	class:x_tcp_clientTaskThread	file:
pfds	base/src/zTCPClientTaskPool.cpp	/^	pollfdContainer pfds;$/;"	m	class:zCheckwaitThread	file:
phaseDefine	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills::Rush
phaseEndTime	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime phaseEndTime;$/;"	m	class:NpcAIController
phaseTimeOver	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool NpcAIController::phaseTimeOver()$/;"	f	class:NpcAIController
phaseVector	SceneServer/libscenesserver/SceneServer1.h	/^  std::vector<t_NpcAIDefine> phaseVector;$/;"	m	class:NpcAIController
phaseVector	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
pic	base/include/srvEngine.h	/^	uint32_t  pic;        \/\/ ÂõæÁâá$/;"	m	struct:zNpcB
pickupBounty	SessionServer/libsessionserver/RecommendManager.cpp	/^void Recommend::pickupBounty(UserSession* pUser)$/;"	f	class:Recommend
pickupBounty	SessionServer/libsessionserver/RecommendManager.cpp	/^void RecommendSub::pickupBounty(UserSession* pUser)$/;"	f	class:RecommendSub
ping_element	base/command.h	/^		ping_element() {$/;"	f	struct:Cmd::ping_element
ping_element	base/command.h	/^	struct ping_element {$/;"	s	namespace:Cmd
ping_list	base/command.h	/^		struct ping_element ping_list;$/;"	m	struct:Cmd::stPingList	typeref:struct:Cmd::stPingList::ping_element
pk1	SessionServer/libsessionserver/SessionServer.h	/^    DWORD pk1;              \/\/ …Áª·πÿœµ1PK»À ˝$/;"	m	class:CDare
pk2	SessionServer/libsessionserver/SessionServer.h	/^    DWORD pk2;              \/\/ …Áª·πÿœµ2PK»À ˝$/;"	m	class:CDare
pkData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Horse
pkMode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
pkState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
pkValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
pkaddition	base/include/csCommon.h	/^/;"	m	struct:CharBase
pklevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
pklevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneManager::MapInfo
pkmode	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
pkpreValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
playState	GatewayServer/old_back/GateUser.cpp	/^void GateUser::playState(SceneClient *s,DWORD scene_tempid)$/;"	f	class:GateUser
plevinappend	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pmaxhp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
point	BillServer/old_back/BillServer.h	/^  DWORD  point;                                      \/\/ø€∑—µ„ ˝  $/;"	m	struct:BillData
point	BillServer/old_back/BillServer.h	/^  DWORD point;                    \/\/\/ ø€∑—µ„ ˝$/;"	m	struct:BillSession
point	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::WayPoint
point	base/include/csCommon.h	/^/;"	m	struct:LiveSkill
point	base/include/csCommon.h	/^/;"	m	struct:_Object::skillbonus
point	base/include/csCommon.h	/^/;"	m	struct:_Object::skillsbonus
point	base/include/srvEngine.h	/^	uint32_t point; \/\/ÂçáÁ∫ßÊâÄÈúÄÊäÄËÉΩÁÇπ$/;"	m	struct:zLiveSkillB
point	tmp/MiniServer/MiniServer.h	/^    BYTE point;\/\/∑÷ ˝$/;"	m	class:DDZCardGame
pointC	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::WayPoint
pointTime	tmp/MiniServer/MiniServer.h	/^    BYTE pointTime;\/\/±∂¬ $/;"	m	class:DDZCardGame
point_col	base/src/getopt.c	/^  ssize_t point_col;$/;"	m	struct:argp_fmtstream	file:
point_offs	base/src/getopt.c	/^  size_t point_offs;$/;"	m	struct:argp_fmtstream	file:
points	base/include/csCommon.h	/^/;"	m	struct:CharBase
points	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
poison	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
poison	base/include/csCommon.h	/^/;"	m	struct:_Object
poison	base/include/srvEngine.h	/^	rangeValue poison; \/\/‰∏≠ÊØíÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
poisonRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
poisondef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
poisondef	base/include/csCommon.h	/^/;"	m	struct:_Object
poisondef	base/include/srvEngine.h	/^			luckRangeValue poisondef;  \/\/ ÊäóÊØíÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
poisondef	base/include/srvEngine.h	/^	rangeValue poisondef; \/\/ÊäóÊØíÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
poisonp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pollfd	base/include/srvEngine.h	/^	struct pollfd {$/;"	s
pollfdContainer	base/src/x_tcptaskpool.cpp	/^typedef std::vector<struct pollfd> pollfdContainer;$/;"	t	file:
pollfdContainer	base/src/zTCPClientTaskPool.cpp	/^typedef std::vector<struct pollfd> pollfdContainer;$/;"	t	file:
pool	base/src/x_tcptaskpool.cpp	/^		boost::shared_ptr<x_tcptaskpool> pool;$/;"	m	class:x_sync_thread_functor	file:
pool	base/src/x_tcptaskpool.cpp	/^	boost::shared_ptr<x_tcptaskpool> pool;$/;"	m	class:x_okay_thread_functor	file:
pool	base/src/x_tcptaskpool.cpp	/^	boost::shared_ptr<x_tcptaskpool> pool;$/;"	m	class:x_recycle_thread_functor	file:
pool	base/src/x_tcptaskpool.cpp	/^	boost::shared_ptr<x_tcptaskpool> pool;$/;"	m	class:x_verify_thread_functor	file:
pool	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskPool *pool;$/;"	m	class:x_tcp_clientTaskThread	file:
pool	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskPool *pool;$/;"	m	class:zCheckconnectThread	file:
pool	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskPool *pool;$/;"	m	class:zCheckwaitThread	file:
port	FLServer/ServerACL.h	/^	WORD port;$/;"	m	struct:ACLZone
port	base/flcmd.h	/^			WORD port;$/;"	m	struct:Cmd::FL::t_LoginFL
port	base/include/srvEngine.h	/^	const uint16_t port;            \/**< ÊúçÂä°Âô®Á´ØÂè£ *\/$/;"	m	class:x_tcp_clientTask
port	base/include/srvEngine.h	/^	uint32_t port;$/;"	m	struct:UrlInfo
port	base/src/x_tcp_client.h	/^	uint16_t port;              \/**< ÊúçÂä°Âô®Á´ØÂè£ *\/$/;"	m	class:x_tcp_client
port	base/supercmd.h	/^			WORD port;$/;"	m	struct:Cmd::Super::t_GYList_Gateway
pos	SceneServer/libscenesserver/SceneServer1.h	/^  zPos pos;$/;"	m	struct:t_NpcAIDefine
pos	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetAllRemovePosNpc	file:
pos	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetAllRemovePosUser	file:
pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DropFromPack::Param
pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::bossDefine
pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::phaseDefine
pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::ZoneTypeDef
pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Point
pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zPoint
pos	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zZone
pos	SceneServer/libscenesserver/TeamManager.cpp	/^  zPosI pos;$/;"	m	struct:ExpSizeExec	file:
pos	SessionServer/libsessionserver/SessionServer.h	/^	Cmd::Session::CampPos pos[20];$/;"	m	struct:SceneMapData
pos	base/include/csBox.h	/^	POINT pos;			\/\/÷∆‘Ïµ„$/;"	m	struct:Cmd::stMakeTurretUserCmd
pos	base/include/csBox.h	/^	stObjectLocation pos;   \/\/ŒÔ∆∑‘⁄∞¸∏§÷–µƒŒª÷√$/;"	m	struct:Cmd::stAddAttruByteUserCmd
pos	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserData
pos	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stChatCommonMiniGameCmd
pos	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stUpdateUserStateCommonMiniGameCmd
pos	base/include/csCommon.h	/^/;"	m	struct:_Object
pos	base/include/srvEngine.h	/^		zPos pos;$/;"	m	struct:zAStar::zPathPoint
pos	base/include/srvEngine.h	/^	zPos pos;$/;"	m	struct:zSceneEntry
pos	tmp/MiniServer/MiniServer.h	/^  Cmd::MiniUserPosition pos;$/;"	m	struct:oneGameState
posi	base/include/srvEngine.h	/^	zPosI posi;$/;"	m	struct:zSceneEntry
posiEffect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
position	SceneServer/libscenesserver/zObject.cpp	/^int EquipPack::position(WORD x,WORD y) const$/;"	f	class:EquipPack
position	SceneServer/libscenesserver/zObject.cpp	/^int Package::position(WORD x,WORD y) const$/;"	f	class:Package
pothunter	SessionServer/libsessionserver/SessionServer.h	/^    CPothunter pothunter;$/;"	m	class:CQuizPersonal
pothunters	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CPothunter> pothunters;$/;"	m	class:CQuizWorld
preLevelNode	SessionServer/libsessionserver/SessionServer.h	/^    CSchoolMember  *preLevelNode;$/;"	m	class:CSchoolMember
pre_level_of_material	SceneServer/libscenesserver/RebuildObject.cpp	/^void  EquipMaker::pre_level_of_material(int id,int level)$/;"	f	class:EquipMaker
prefix	base/include/srvEngine.h	/^	char prefix[MAX_NAMESIZE];      \/\/ ÂêçÁß∞$/;"	m	struct:zColorObjectB
prenticeList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
prenticeList	SessionServer/libsessionserver/SessionServer.h	/^    std::map<DWORD,CSchoolMember*,ltword> prenticeList;$/;"	m	class:CSchoolMember
prenticeListValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,CSchoolMember*,ltword>::value_type prenticeListValueType;$/;"	t	class:CSchoolMember
prenticeRequestMemberInfo	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::prenticeRequestMemberInfo(DWORD &count,Cmd::stTeacherMember *point,CSchoolMember *me)$/;"	f	class:CSchoolMember
prentice_lastlevel	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  prentice_lastlevel;$/;"	m	class:CSchoolMember
prentice_lastlevel	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
prentice_total	SessionServer/libsessionserver/SessionServer.h	/^    DWORD  prentice_total;$/;"	m	class:CSchoolMember
prentice_total	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
preskill1	base/include/srvEngine.h	/^	uint32_t  preskill1;            \/\/ÂâçÊèêÊäÄËÉΩ1$/;"	m	struct:zSkillB
preskill2	base/include/srvEngine.h	/^	uint32_t  preskill2;            \/\/ÂâçÊèêÊäÄËÉΩ2$/;"	m	struct:zSkillB
preskill3	base/include/srvEngine.h	/^	uint32_t  preskill3;            \/\/ÂâçÊèêÊäÄËÉΩ3$/;"	m	struct:zSkillB
preskilllevel1	base/include/srvEngine.h	/^	uint32_t  preskilllevel1;          \/\/ÂâçÊèêÊäÄËÉΩÁ∫ßÂà´1$/;"	m	struct:zSkillB
preskilllevel2	base/include/srvEngine.h	/^	uint32_t  preskilllevel2;          \/\/ÂâçÊèêÊäÄËÉΩÁ∫ßÂà´2$/;"	m	struct:zSkillB
preskilllevel3	base/include/srvEngine.h	/^	uint32_t  preskilllevel3;          \/\/ÂâçÊèêÊäÄËÉΩÁ∫ßÂà´3$/;"	m	struct:zSkillB
prev	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:TiXmlAttribute
prev	deps/tinyxml/tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:TiXmlNode
prev_entry	base/src/getopt.c	/^  struct hol_entry *prev_entry;$/;"	m	struct:hol_help_state	typeref:struct:hol_help_state::hol_entry	file:
previous	GatewayServer/old_back/GatewayServer.h	/^	void previous(const zRTime& time)$/;"	f	class:CheckInfo
previous	GatewayServer/old_back/GatewayServer.h	/^	zRTime& previous()$/;"	f	class:CheckInfo
price	BillServer/old_back/BillServer.h	/^  DWORD price;$/;"	m	struct:ConsignTrait
price	SceneServer/libscenesserver/giftBox.h	/^	unsigned int price;$/;"	m	struct:boxitem
price	base/include/csCommon.h	/^/;"	m	struct:_Object
price	base/include/srvEngine.h	/^	uint32_t price;        \/\/ ‰ª∑Ê†º$/;"	m	struct:zObjectB
printSize	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizM::printSize()$/;"	f	class:CQuizM
printState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
printState	SessionServer/libsessionserver/Gem.cpp	/^void CGem::printState()$/;"	f	class:CGem
printState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::printState()$/;"	f	class:CQuiz
print_header	base/src/getopt.c	/^print_header (const char *str, const struct argp *argp,$/;"	f	file:
priv	SceneServer/libscenesserver/SceneServer1.h	/^  BYTE priv;$/;"	m	struct:Gm
priv	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Gm
priv	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
privatestore	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
proc_	base/src/tcp_socket.h	/^	shared_ptr<processor> proc_;$/;"	m	class:tcp_socket
process	SceneServer/libscenesserver/Rush.cpp	/^void Rush::process()$/;"	f	class:Rush
processAddCaptain	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processAddCaptain(UserSession* pUser,Cmd::stAddArmyCaptainUserCmd* rev)$/;"	f	class:CArmyM
processAddDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
processAddRecommended	SessionServer/libsessionserver/RecommendManager.cpp	/^void RecommendM::processAddRecommended(const Cmd::Record::t_chkUserExist_SessionRecord* cmd)$/;"	f	class:RecommendM
processAntiDareCountry	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processAntiDareCountry(UserSession* pUser,Cmd::stAntiDareCountryFormalCmd* rev)$/;"	f	class:CCountryM
processBulletin	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::processBulletin(const UserSession *pUser,const Cmd::stSchoolBulletinCmd *rev)$/;"	f	class:CSchoolM
processCancelCatcher	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processCancelCatcher(UserSession* pUser,Cmd::stCancelCatcherCmd* rev)$/;"	f	class:CCountryM
processCancelCountryAlly	SessionServer/libsessionserver/Ally.cpp	/^void CAllyM::processCancelCountryAlly(UserSession* pUser,Cmd::stCancelCountryAlly* rev)$/;"	f	class:CAllyM
processCancelDiplomat	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processCancelDiplomat(UserSession* pUser,Cmd::stCancelDiplomatCmd* rev)$/;"	f	class:CCountryM
processCancelTechSearch	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processCancelTechSearch(UserSession* pUser,Cmd::stCancelTechSearchUserCmd* rev)$/;"	f	class:CCountryM
processChange	GatewayServer/old_back/CountryInfo.cpp	/^void CountryInfo::processChange(GateUser *pUser,Cmd::Scene::t_ChangeCountryStatus *rev)$/;"	f	class:CountryInfo
processChangeArmyName	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processChangeArmyName(UserSession* pUser,Cmd::stChangeArmyNameUserCmd* rev)$/;"	f	class:CArmyM
processCheckTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
processConfirmSearcher	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processConfirmSearcher(UserSession* pUser,Cmd::stConfirmSearcherUserCmd* rev)$/;"	f	class:CCountryM
processCreateArmy	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processCreateArmy(UserSession* pUser,Cmd::stCreateArmyUserCmd* rev)$/;"	f	class:CArmyM
processDareCountry	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processDareCountry(UserSession* pUser,Cmd::stDareCountryFormalCmd* rev)$/;"	f	class:CCountryM
processDeath	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::processDeath(SceneEntryPk *pAtt)$/;"	f	class:SceneEntryPk
processDeath	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
processExitArmy	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processExitArmy(UserSession* pUser,Cmd::stExitArmyUserCmd* rev)$/;"	f	class:CArmyM
processFireCaptain	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processFireCaptain(UserSession* pUser,Cmd::stFireArmyCaptainUserCmd* rev)$/;"	f	class:CArmyM
processGateMessage	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::processGateMessage(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:CSeptM
processGetGold	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::processGetGold(Cmd::Session::t_NpcDare_GetGold_SceneSession *rev)$/;"	f	class:CNpcDareM
processGetGold	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::processGetGold(UserSession *pUser,DWORD septid,DWORD dwNpcID,DWORD dwMapID,DWORD dwCountryID)$/;"	f	class:CNpcDareObj
processLeaveGroup	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::processLeaveGroup(UserSession *pUser)$/;"	f	class:CSchoolM
processLeaveGroupDirect	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::processLeaveGroupDirect(const char* roleName)$/;"	f	class:CSchoolM
processLeaveSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::processLeaveSchool(CSchoolMember * member,bool deleteTeacher)$/;"	f	class:CSchool
processMaskOnAttack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
processMaskOnDefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
processMemberLeave	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::processMemberLeave(const DWORD dwSeptID,const DWORD dwCharID)$/;"	f	class:CSeptM
processPassiveness	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
processPhase	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::processPhase()$/;"	f	class:NpcAIController
processQuery	SessionServer/libsessionserver/RecommendManager.cpp	/^void Recommend::processQuery(UserSession* pUser)$/;"	f	class:Recommend
processRemoveArmy	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processRemoveArmy(UserSession* pUser,Cmd::stRemoveArmyUserCmd* rev)$/;"	f	class:CArmyM
processReqArmyList	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processReqArmyList(Cmd::Session::t_ReqArmyList_SceneSession* rev)$/;"	f	class:CArmyM
processReqArmySpec	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processReqArmySpec(UserSession* pUser,Cmd::stReqArmySpecUserCmd* rev)$/;"	f	class:CArmyM
processReqCountryAlly	SessionServer/libsessionserver/Ally.cpp	/^void CAllyM::processReqCountryAlly(UserSession* pUser,Cmd::stReqCountryAlly* rev)$/;"	f	class:CAllyM
processReqCountryAllyInfo	SessionServer/libsessionserver/Ally.cpp	/^void CAllyM::processReqCountryAllyInfo(UserSession* pUser,Cmd::stReqCountryAllyInfo* rev)$/;"	f	class:CAllyM
processReqDailyEmperorMoney	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processReqDailyEmperorMoney(UserSession* pUser,Cmd::stReqDailyEmperorMoneyCmd* rev)$/;"	f	class:CCountryM
processReqWaitGen	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::processReqWaitGen(UserSession* pUser,Cmd::stReqWaitGenUserCmd* rev)$/;"	f	class:CArmyM
processReqWaitOfficial	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processReqWaitOfficial(UserSession* pUser,Cmd::stReqWaitOfficialUserCmd* rev)$/;"	f	class:CCountryM
processRequest	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::processRequest(Cmd::Session::t_NpcDare_Dare_SceneSession * rev)$/;"	f	class:CNpcDareM
processRequestDare	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processRequestDare(UserSession* pUser,Cmd::stRequestDareCountryCmd* rev)$/;"	f	class:CCountryM
processRequestSeptExpMessage	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::processRequestSeptExpMessage(UserSession* pUser,const Cmd::stRequestSeptExpCmd* ptCmd)$/;"	f	class:CSeptM
processRequestSeptNormalExpMessage	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::processRequestSeptNormalExpMessage(UserSession* pUser,$/;"	f	class:CSeptM
processRequestTech	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processRequestTech(UserSession* pUser,Cmd::stReqTechUserCmd* rev)$/;"	f	class:CCountryM
processResult	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::processResult(DWORD septid)$/;"	f	class:CNpcDareObj
processRush	SceneServer/libscenesserver/Scene.cpp	/^void Scene::processRush()$/;"	f	class:Scene
processSceneMessage	SessionServer/libsessionserver/Ally.cpp	/^bool CAllyM::processSceneMessage(const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CAllyM
processSceneMessage	SessionServer/libsessionserver/Army.cpp	/^bool CArmyM::processSceneMessage(const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CArmyM
processSceneMessage	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountryM::processSceneMessage(const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CCountryM
processSceneMessage	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
processSceneMessage	SessionServer/libsessionserver/Gem.cpp	/^bool CGemM::processSceneMessage(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:CGemM
processSceneMessage	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareM::processSceneMessage(const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CNpcDareM
processSceneMessage	SessionServer/libsessionserver/Quiz.cpp	/^bool CQuizM::processSceneMessage(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:CQuizM
processSceneMessage	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendM::processSceneMessage(const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:RecommendM
processSceneMessage	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::processSceneMessage(const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CSchoolM
processSceneMessage	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::processSceneMessage(const Cmd::t_NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:CSeptM
processSceneSeptMessage	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::processSceneSeptMessage(const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CSeptM
processSeptSortMessage	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::processSeptSortMessage(UserSession* pUser,const Cmd::stReqSeptSort* ptCmd)$/;"	f	class:CSeptM
processSetCatcher	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processSetCatcher(UserSession* pUser,Cmd::stAppointCatcherCmd* rev)$/;"	f	class:CCountryM
processSetDiplomat	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processSetDiplomat(UserSession* pUser,Cmd::stAppointDiplomatCmd* rev)$/;"	f	class:CCountryM
processSetTechSearch	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processSetTechSearch(UserSession* pUser,Cmd::stSetTechSearchUserCmd* rev)$/;"	f	class:CCountryM
processUpTech	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::processUpTech(UserSession* pUser,Cmd::stUpTechDegreeUserCmd* rev)$/;"	f	class:CCountryM
processUpdate	SceneServer/libscenesserver/CountryAlly.cpp	/^void   CountryAllyM::processUpdate(Cmd::Session::t_updateAlly_SceneSession *rev)$/;"	f	class:CountryAllyM
processUserMessage	SessionServer/libsessionserver/Ally.cpp	/^bool CAllyM::processUserMessage(UserSession* pUser,const Cmd::stNullUserCmd* pNullCmd,const DWORD cmdLen)$/;"	f	class:CAllyM
processUserMessage	SessionServer/libsessionserver/Army.cpp	/^bool CArmyM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CArmyM
processUserMessage	SessionServer/libsessionserver/CountryManager.cpp	/^bool CCountryM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CCountryM
processUserMessage	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
processUserMessage	SessionServer/libsessionserver/DareRecordManager.cpp	/^bool CDareRecordM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CDareRecordM
processUserMessage	SessionServer/libsessionserver/Gem.cpp	/^bool CGemM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CGemM
processUserMessage	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CNpcDareM
processUserMessage	SessionServer/libsessionserver/Quiz.cpp	/^bool CQuizM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CQuizM
processUserMessage	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendM::processUserMessage(UserSession *pUser,$/;"	f	class:RecommendM
processUserMessage	SessionServer/libsessionserver/RelationManager.cpp	/^bool CRelationManager::processUserMessage(const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CRelationManager
processUserMessage	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CSchoolM
processUserMessage	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CSeptM
processUserMessage	SessionServer/libsessionserver/Vote.cpp	/^bool CVoteM::processUserMessage(UserSession *pUser,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CVoteM
process_extra_add	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::process_extra_add(zObject* ob)$/;"	f	class:EquipPack
process_extra_get	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::process_extra_get(zObject** ob,WORD x,WORD y)$/;"	f	class:EquipPack
process_extra_remove	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::process_extra_remove(zObject* ob)$/;"	f	class:EquipPack
processor	base/src/tcp_socket.h	/^struct processor$/;"	s
profession	SceneServer/libscenesserver/SceneServer1.h	/^  WORD  profession;$/;"	m	struct:InitObject
profession	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::InitObject
properties	base/x_properties.h	/^	property_hashtype properties;      \/**< ‰øùÂ≠òÂ±ûÊÄßÁöÑÈîÆÂÄºÂØπ *\/$/;"	m	class:x_properties
property_hashtype	base/x_properties.h	/^	typedef std::map<std::string,std::string> property_hashtype;$/;"	t	class:x_properties
protectPeriod	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
protectTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zSceneObject
protectUpAtt	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
protect_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
protectdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pstate	base/include/argp.h	/^  void *pstate;      \/* Private,for use by argp.  *\/$/;"	m	struct:argp_state
pstrCityName	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
pstrCountryName	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
pstrExtIP	SuperServer/ServerTask.h	/^		std::string pstrExtIP;$/;"	m	class:ServerTask
pstrExtIP	base/supercmd.h	/^			char pstrExtIP[MAX_IP_LENGTH];$/;"	m	struct:Cmd::Super::ServerEntry
pstrExtIP	base/supercmd.h	/^			char pstrExtIP[MAX_IP_LENGTH];$/;"	m	struct:Cmd::Super::t_Startup_Response
pstrFilename	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
pstrGroupName	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
pstrIP	SuperServer/ServerTask.h	/^		std::string pstrIP;      \/**< ∑˛ŒÒ∆˜ƒ⁄Õ¯µÿ÷∑ *\/$/;"	m	class:ServerTask
pstrIP	base/include/csCommon.h	/^/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd
pstrIP	base/supercmd.h	/^			char pstrIP[MAX_IP_LENGTH];$/;"	m	struct:Cmd::Super::ServerEntry
pstrIP	base/supercmd.h	/^			char pstrIP[MAX_IP_LENGTH];$/;"	m	struct:Cmd::Super::t_Startup_Request
pstrIP	base/x_subnetservice.h	/^	std::string pstrIP;      \/**< ÊúçÂä°Âô®ÂÜÖÁΩëÂú∞ÂùÄ *\/$/;"	m	class:x_subnetservice
pstrMapName	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
pstrName	SuperServer/ServerTask.h	/^		std::string pstrName;	\/\/server name$/;"	m	class:ServerTask
pstrName	base/command.h	/^		char pstrName[MAX_ACCNAMESIZE];$/;"	m	struct:Cmd::stPasswdLogonUserCmd
pstrName	base/command.h	/^		char pstrName[MAX_ACCNAMESIZE];$/;"	m	struct:Cmd::stUserRequestLoginCmd
pstrName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Country_Info
pstrName	base/include/csCommon.h	/^/;"	m	struct:Cmd::stPasswdLogonUserCmd
pstrName	base/include/csCommon.h	/^/;"	m	struct:Cmd::stUserRequestLoginCmd
pstrName	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapBuildingData
pstrName	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
pstrName	base/supercmd.h	/^			char pstrName[MAX_NAMESIZE];$/;"	m	struct:Cmd::Super::ServerEntry
pstrPassword	base/command.h	/^		char pstrPassword[MAX_PASSWORD];$/;"	m	struct:Cmd::stPasswdLogonUserCmd
pstrPassword	base/command.h	/^		char pstrPassword[MAX_PASSWORD];$/;"	m	struct:Cmd::stUserRequestLoginCmd
pstrPassword	base/include/csCommon.h	/^/;"	m	struct:Cmd::stPasswdLogonUserCmd
pstrPassword	base/include/csCommon.h	/^/;"	m	struct:Cmd::stUserRequestLoginCmd
pstrUserName	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapBuildingData
pumdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pumdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pumdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
punishTime	base/include/csCommon.h	/^/;"	m	struct:CharBase
pupdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
pupdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
push	GatewayServer/old_back/GatewayServer.h	/^	bool push(GateUser * &e)$/;"	f	class:GateUserAccountID
push	base/include/srvEngine.h	/^	inline bool push(zEntry * &e) { return true; }$/;"	f	class:zEntryNone
push	base/include/srvEngine.h	/^	inline bool push(zEntry * &e)$/;"	f	class:zEntryID
push	base/include/srvEngine.h	/^	inline bool push(zEntry * &e)$/;"	f	class:zEntryName
push	base/include/srvEngine.h	/^	inline bool push(zEntry * &e)$/;"	f	class:zMultiEntryName
push	base/include/srvEngine.h	/^	inline bool push(zEntry * e)$/;"	f	class:zEntryTempID
put	FLServer/GYListManager.cpp	/^bool GYListManager::put(const GameZone_t &gameZone,const GYList &gy) {$/;"	f	class:GYListManager
put	GatewayServer/LoginSessionManager.cpp	/^void LoginSessionManager::put(const t_NewLoginSession &session)$/;"	f	class:LoginSessionManager
put	base/include/srvEngine.h	/^	bool put(const void *pNullCmd,const uint32_t cmdLen)$/;"	f	class:MsgQueue
put	base/include/srvEngine.h	/^	void put(T id)$/;"	f	class:zUniqueID
put	base/src/x_buffer.h	/^	inline void put(const BYTE *buf,const uint32_t size)$/;"	f	class:ByteBuffer
put	base/src/zTCPClientTaskPool.cpp	/^bool x_tcp_clientTaskPool::put(x_tcp_clientTask *task)$/;"	f	class:x_tcp_clientTaskPool
put	base/x_msgqueue.h	/^	bool put(const void *pNullCmd,const uint32_t cmdLen) {$/;"	f	class:MsgQueue
putARecycleDup	SceneServer/libscenesserver/duplicateManager.h	/^	void putARecycleDup(clearDupStruct _clearDupStruct)$/;"	f	class:duplicateManager
putAway	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::putAway(Cmd::Session::saveType saveType)$/;"	f	class:CartoonPet
putAway	SceneServer/libscenesserver/Horse.cpp	/^bool Horse::putAway()$/;"	f	class:Horse
putBounty	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::putBounty()$/;"	f	class:CSchoolMember
putCards	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::putCards(BYTE seat,Cmd::stPutCardMiniGameCmd *cmd,DWORD len)$/;"	f	class:DDZCardGame
putList	BillServer/BillUser.cpp	/^bool BillUser::putList(DWORD num,DWORD price,BYTE type)$/;"	f	class:BillUser
putOperationToMe	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
putPassivenessOperationToMe	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
putQueueToArray	base/include/srvEngine.h	/^	bool putQueueToArray()$/;"	f	class:MsgQueue
putQueueToArray	base/x_msgqueue.h	/^	bool putQueueToArray()$/;"	f	class:MsgQueue
putSelectUserInfo	GatewayServer/old_back/GateUser.cpp	/^void GateSelectUserSession::putSelectUserInfo(const Cmd::SelectUserInfo &info)$/;"	f	class:GateSelectUserSession
putTeamID	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::putTeamID(const DWORD &tempid)$/;"	f	class:SceneManager
putUniqeID	BillServer/BillUserManager.cpp	/^void BillUserManager::putUniqeID(const DWORD &tempid)$/;"	f	class:BillUserManager
putUniqeID	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::putUniqeID(const DWORD &tempid)$/;"	f	class:GateUserManager
putUniqeID	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::putUniqeID(const DWORD &tempid)$/;"	f	class:SceneManager
putUniqeID	SceneServer/libscenesserver/SceneServer1.h	/^    void putUniqeID(const DWORD &tempid) {}$/;"	f	class:SceneNpcManager
putUniqeID	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::putUniqeID(const DWORD& tempid)$/;"	f	class:SceneUserManager
putUniqeID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneNpcManager
putUniqeID	SceneServer/libscenesserver/SkillManager.cpp	/^void SkillManager::putUniqeID(const DWORD &tempid)$/;"	f	class:SkillManager
putUniqeID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
putUniqeID	SessionServer/libsessionserver/Gem.cpp	/^void CGemM::putUniqeID(const DWORD &tempid)$/;"	f	class:CGemM
putUniqeID	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizM::putUniqeID(const DWORD &tempid)$/;"	f	class:CQuizM
putUniqeID	SessionServer/libsessionserver/SessionChat.cpp	/^void SessionChannelManager::putUniqeID(const DWORD &tempid)$/;"	f	class:SessionChannelManager
putUniqeID	SessionServer/libsessionserver/SessionManager.cpp	/^void SceneSessionManager::putUniqeID(const DWORD &tempid)$/;"	f	class:SceneSessionManager
putUniqeID	SessionServer/libsessionserver/SessionManager.cpp	/^void UserSessionManager::putUniqeID(const DWORD &tempid)$/;"	f	class:UserSessionManager
put_hole	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Hole::put_hole(zObject* ob,int index,zObject* gam)$/;"	f	class:Hole
quality	SceneServer/libscenesserver/giftBox.h	/^	unsigned int quality;$/;"	m	struct:qualitys
qualityID	SceneServer/libscenesserver/giftBox.h	/^	unsigned int qualityID;$/;"	m	struct:boxItem
qualityodds	SceneServer/libscenesserver/giftBox.h	/^	unsigned int qualityodds;$/;"	m	struct:qualitys
qualitys	SceneServer/libscenesserver/giftBox.h	/^struct qualitys$/;"	s
queryBounty	SessionServer/libsessionserver/RecommendManager.cpp	/^DWORD RecommendSub::queryBounty()$/;"	f	class:RecommendSub
queryBounty	SessionServer/libsessionserver/SchoolManager.cpp	/^DWORD CSchoolMember::queryBounty()$/;"	f	class:CSchoolMember
queryBounty	SessionServer/libsessionserver/SessionServer.h	/^    DWORD queryBounty()$/;"	f	class:Recommend
queryNewZonePos	SceneServer/libscenesserver/SceneManager.cpp	/^SceneManager::NewZoneVec &SceneManager::queryNewZonePos()$/;"	f	class:SceneManager
queryTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
queryTotal	SessionServer/libsessionserver/SessionServer.h	/^    DWORD queryTotal()$/;"	f	class:Recommend
queryTotal	SessionServer/libsessionserver/SessionServer.h	/^    DWORD queryTotal()$/;"	f	class:RecommendSub
query_point	BillServer/BillUser.cpp	/^bool BillUser::query_point(const BillData* bd)$/;"	f	class:BillUser
quest	SceneServer/libscenesserver/QuestTable.cpp	/^const Quest* QuestTable::quest(DWORD id) const$/;"	f	class:QuestTable
quest_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventTrigger2
quest_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars
quest_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Event
quest_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::QuestList
quest_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::QuestTable
quest_list	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
question_count	SessionServer/libsessionserver/SessionServer.h	/^    DWORD question_count;$/;"	m	class:CQuiz
queueCmd	base/include/srvEngine.h	/^	std::queue<CmdPair> queueCmd;$/;"	m	class:MsgQueue
queueCmd	base/x_msgqueue.h	/^	std::queue<CmdPair> queueCmd;$/;"	m	class:MsgQueue
queueRead	base/include/srvEngine.h	/^	uint32_t queueRead;$/;"	m	class:MsgQueue
queueRead	base/x_msgqueue.h	/^	uint32_t queueRead;$/;"	m	class:MsgQueue
queueWrite	base/include/srvEngine.h	/^	uint32_t queueWrite;$/;"	m	class:MsgQueue
queueWrite	base/x_msgqueue.h	/^	uint32_t queueWrite;$/;"	m	class:MsgQueue
quiz	GatewayServer/old_back/GatewayServer.h	/^	bool quiz;$/;"	m	class:GateUser
quiz	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneTimeTick
quizState	GatewayServer/old_back/GatewayServer.h	/^	void quizState()$/;"	f	class:GateUser
quiz_type	SessionServer/libsessionserver/SessionServer.h	/^    int  quiz_type; \/\/ 0Œ™»´π˙,1Œ™∏ˆ»À,2Œ™£≤£∞º∂$/;"	m	class:CSubject
quoted	base/include/argp.h	/^  int quoted;$/;"	m	struct:argp_state
qwBowlder	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwBowlder;  \/\/ ”Ò Ø$/;"	m	class:CCountry
qwCoat	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwCoat;  \/\/ ∆§√´$/;"	m	class:CCountry
qwExp	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwExp;$/;"	m	class:UserSession
qwExp	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_levelupNotify_SceneSession
qwExp	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
qwExp	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
qwGameTime	GatewayServer/old_back/GatewayServer.h	/^	QWORD qwGameTime;$/;"	m	class:GatewayTask
qwGameTime	base/common.cpp	/^	volatile uint64_t qwGameTime = 0;$/;"	m	namespace:Seal	file:
qwGameTime	base/include/csCommon.h	/^/;"	m	struct:Cmd::stGameTimeTimerUserCmd
qwGameTime	base/include/csCommon.h	/^/;"	m	struct:Cmd::stUserGameTimeTimerUserCmd
qwGameTime	base/supercmd.h	/^			QWORD qwGameTime;$/;"	m	struct:Cmd::Super::t_GameTime
qwGold	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwGold;  \/\/\/π˙ø‚$/;"	m	class:CCountry
qwHerbal	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwHerbal;  \/\/ ≤›“©$/;"	m	class:CCountry
qwMaterial	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwMaterial; \/\/ ŒÔ◊ $/;"	m	class:CCountry
qwOre	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwOre;  \/\/ øÛ Ø$/;"	m	class:CCountry
qwSilk	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwSilk;  \/\/ Àøœﬂ$/;"	m	class:CCountry
qwStock	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwStock;  \/\/ ‘≠¡œ$/;"	m	class:CCountry
qwThisID	base/include/csBox.h	/^	uint32_t	qwThisID;	\/\/±ª∑÷≈‰ŒÔ∆∑µƒŒ®“ªID$/;"	m	struct:Cmd::stNpcGiveItemUserCmd
qwThisID	base/include/csBox.h	/^	uint32_t qwThisID;$/;"	m	struct:Cmd::stSetCowBoxKeyCmd
qwThisID	base/include/csCommon.h	/^/;"	m	struct:_Object
qwTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
qwWood	SessionServer/libsessionserver/SessionServer.h	/^    QWORD qwWood;  \/\/ ƒæ≤ƒ$/;"	m	class:CCountry
rCardNum	tmp/MiniServer/MiniServer.h	/^    BYTE rCardNum;\/\/±£¡Ùº∏’≈µ◊≈∆$/;"	m	class:DDZCardGame
radius	SceneServer/libscenesserver/SceneNpcAI.cpp	/^  int radius;$/;"	m	struct:getEntriesCallBack	file:
randBetween	base/src/zMisc.cpp	/^int randBetween(int min,int max)$/;"	f
randPosByRegion	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::randPosByRegion(const zPosIndex &index,zPos &pos) const$/;"	f	class:Scene
randnum	base/include/csCommon.h	/^/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd::__anon197::__anon198
random	base/command.h	/^				BYTE random[58];$/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd::__anon121::__anon122
randomMove	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::randomMove()$/;"	f	class:SceneNpc
randomMove	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::randomMove()$/;"	f	class:ScenePet
random_key_des	base/src/zEncDec.cpp	/^void CEncrypt::random_key_des(ZES_cblock *ret)$/;"	f	class:CEncrypt
randzPosByZoneType	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::randzPosByZoneType(const int type,zPos &pos) const$/;"	f	class:Scene
randzPosByZoneType	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::randzPosByZoneType(const int type,zPos &pos,const zPos orign)$/;"	f	class:Scene
randzPosNewZone	SceneServer/libscenesserver/SceneManager.cpp	/^bool SceneManager::randzPosNewZone(Scene *intoScene,zPos &findedPos)$/;"	f	class:SceneManager
randzPosOnRect	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::randzPosOnRect(const zPos &center,zPos &pos,WORD rectx,WORD recty) const$/;"	f	class:Scene
range	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::MagicPos
range	base/include/srvEngine.h	/^			uint16_t range;\/\/ËåÉÂõ¥$/;"	m	struct:SkillStatus::__anon138::__anon139
rangeValue	base/include/srvEngine.h	/^struct rangeValue$/;"	s
ranges	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::MagicRangeInit
rate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::servantDefine
rate	base/include/srvEngine.h	/^	int   rate;$/;"	m	struct:CarryObject
rate	base/include/srvEngine.h	/^	int rate;\/\/\/‰ΩøÁî®Âá†Áéá$/;"	m	struct:npcSkill
rating	base/include/srvEngine.h	/^	uint32_t  rating;        \/\/ ÂëΩ‰∏≠Áéá$/;"	m	struct:zNpcB
rcvTimePet	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime rcvTimePet;\/\/≥ËŒÔ–›œ¢$/;"	m	class:SceneNpc
rcvTimeRest	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime rcvTimeRest;\/\/Õ—¿Î’Ω∂∑$/;"	m	class:SceneNpc
rcvTimeUnder30	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime rcvTimeUnder30;\/\/hp30“‘œ¬$/;"	m	class:SceneNpc
rd_buf	base/src/x_buffer.h	/^	inline BYTE *rd_buf()$/;"	f	class:ByteBuffer
rd_flip	base/src/x_buffer.h	/^	inline void rd_flip(uint32_t size)$/;"	f	class:ByteBuffer
rd_msec	base/include/x_socket.h	/^	int rd_msec;                \/**< ËØªÂèñË∂ÖÊó∂ÔºåÊØ´Áßí *\/$/;"	m	class:x_socket
rd_ready	base/src/x_buffer.h	/^	inline bool rd_ready()$/;"	f	class:ByteBuffer
rd_size	base/src/x_buffer.h	/^	inline uint32_t rd_size()$/;"	f	class:ByteBuffer
rdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::__anon53::__anon54
rdam	base/include/csCommon.h	/^/;"	m	struct:_Object::__anon182::__anon183
rdam	base/include/srvEngine.h	/^	rangeValue rdam; \/\/‰º§ÂÆ≥ÂèçÂ∞Ñ%x$/;"	m	struct:zFiveSetB
reSendData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
reSendOther	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
reached	SceneServer/libscenesserver/SceneServer1.h	/^  bool reached;$/;"	m	class:NpcAIController
readCharbase	RecordServer/RecordUser.cpp	/^bool RecordUser::readCharbase(){$/;"	f	class:RecordUser
readCharbase	RecordServer/RecordUser.cpp	/^bool RecordUser::readCharbase(RecordTask* task, uint32_t dwMapID){$/;"	f	class:RecordUser
readTempArchive	SessionServer/libsessionserver/TempArchive.cpp	/^bool GlobalTempArchiveIndex::readTempArchive(DWORD id,char *out,DWORD &outSize)$/;"	f	class:GlobalTempArchiveIndex
read_cmd	base/src/tcp_socket.h	/^	int read_cmd(void* ptr, const int nlen) {$/;"	f	class:tcp_socket
read_cmd	base/tcp_client.h	/^	int read_cmd(void* ptr, const uint32_t nlen) $/;"	f	class:tcp_client
read_error	base/include/tcp_state.h	/^	virtual void read_error(){ timer_.cancel(); }$/;"	f	class:state_verify
read_error	base/include/tcp_state.h	/^	virtual void read_error(){ timer_.cancel(); }$/;"	f	class:state_wait_sync
read_error	base/include/tcp_state.h	/^	virtual void read_error(){}$/;"	f	class:tcp_state
ready	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::ready(SceneUser* target)$/;"	f	class:TradeOrder
ready_question_time	SessionServer/libsessionserver/SessionServer.h	/^    DWORD ready_question_time;$/;"	m	class:CQuiz
ready_time	SessionServer/libsessionserver/SessionServer.h	/^    DWORD ready_time;$/;"	m	class:CDare
ready_time	SessionServer/libsessionserver/SessionServer.h	/^    DWORD ready_time;$/;"	m	class:CQuiz
ready_time	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createDare_SceneSession
ready_time	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createQuiz_SceneSession
reason	SessionServer/libsessionserver/SessionServer.h	/^  char reason[256];$/;"	m	struct:forbidInfo
reason	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forbidTalk_SceneSession
reason	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stEndMiniGame
recast	base/include/srvEngine.h	/^	BYTE recast;        \/\/ ÊîπÈÄ†$/;"	m	struct:zObjectB
recastcost	base/include/srvEngine.h	/^	uint16_t recastcost;      \/\/ ÂêàÊàêÂçï‰ª∑$/;"	m	struct:zObjectB
recastlevel	base/include/srvEngine.h	/^	BYTE recastlevel;       \/\/ ÂêàÊàêÁ≠âÁ∫ß$/;"	m	struct:zObjectB
recommendIter	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,Recommend*>::iterator recommendIter;$/;"	t	class:RecommendM
recommendValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,Recommend*>::value_type recommendValueType;$/;"	t	class:RecommendM
recommendid	SessionServer/libsessionserver/SessionServer.h	/^    DWORD recommendid; \/\/ Õ∆ºˆ»ÀID$/;"	m	class:RecommendSub
recommends	SessionServer/libsessionserver/SessionServer.h	/^    std::map<DWORD,Recommend*> recommends;$/;"	m	class:RecommendM
recommendsubIndex	SessionServer/libsessionserver/SessionServer.h	/^    std::map<DWORD,RecommendSub*> recommendsubIndex;$/;"	m	class:RecommendM
recommendsubIndexValueType	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,RecommendSub*>::value_type recommendsubIndexValueType;$/;"	t	class:RecommendM
recordClient	GatewayServer/GatewayServer.h	/^		boost::shared_ptr<RecordClient> recordClient;$/;"	m	class:GatewayService
recordClient	GatewayServer/old_back/RecordClient.cpp	/^RecordClient *recordClient = NULL;$/;"	v
recordClient	SceneServer/SceneServer.h	/^		boost::shared_ptr<RecordClient> recordClient;$/;"	m	class:SceneService
recordClient	SceneServer/libscenesserver/RecordClient.cpp	/^RecordClient *recordClient = NULL;$/;"	v
recordClient	SessionServer/SessionServer.h	/^		boost::shared_ptr<RecordClient> recordClient;$/;"	m	class:SessionService
recordClient	SessionServer/libsessionserver/RecordClient.cpp	/^RecordClient *recordClient = NULL;$/;"	v
recover	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::recover()$/;"	f	class:ScenePet
recover	base/include/srvEngine.h	/^	npcRecover recover;$/;"	m	struct:zNpcB
recoverRate	SceneServer/libscenesserver/ScenesServer.cpp	/^WORD recoverRate = 4;$/;"	v
recoverSp	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::recoverSp(DWORD num)$/;"	f	class:CartoonPet
recoverUnder30	SceneServer/libscenesserver/SceneServer1.h	/^  bool recoverUnder30;$/;"	m	class:SceneNpc
recvGold	SessionServer/libsessionserver/SessionServer.h	/^  DWORD recvGold;$/;"	m	struct:mailContentInfo
recvGold	SessionServer/libsessionserver/SessionServer.h	/^  DWORD recvGold;$/;"	m	struct:mailForwardInfo
recvGold	SessionServer/libsessionserver/SessionServer.h	/^  DWORD recvGold;$/;"	m	struct:mailTurnBackInfo
recvMoney	SessionServer/libsessionserver/SessionServer.h	/^  DWORD recvMoney;$/;"	m	struct:mailContentInfo
recvMoney	SessionServer/libsessionserver/SessionServer.h	/^  DWORD recvMoney;$/;"	m	struct:mailForwardInfo
recvMoney	SessionServer/libsessionserver/SessionServer.h	/^  DWORD recvMoney;$/;"	m	struct:mailTurnBackInfo
recvToBuf	base/include/x_socket.cpp	/^int x_socket::recvToBuf()$/;"	f	class:x_socket
recvToBuf_NoPoll	base/include/x_socket.cpp	/^int x_socket::recvToBuf_NoPoll()$/;"	f	class:x_socket
recvToCmd	base/include/x_socket.cpp	/^int x_socket::recvToCmd(void* pstrCmd,const int nCmdLen,const bool wait)$/;"	f	class:x_socket
recvToCmd_NoPoll	base/include/x_socket.cpp	/^int x_socket::recvToCmd_NoPoll(void *pstrCmd,const int nCmdLen)$/;"	f	class:x_socket
recycle	base/include/srvEngine.h	/^		recycle    =  3              \/**< ËøûÊé•ÈÄÄÂá∫Áä∂ÊÄÅ *\/$/;"	e	enum:x_tcp_clientTask::ConnState
recycle	base/src/x_tcptask.h	/^		recycle    =  4              \/**< ËøûÊé•ÈÄÄÂá∫Áä∂ÊÄÅÔºåÂõûÊî∂ *\/$/;"	e	enum:x_tcptask::zTCPTask_State
recycleConn	BillServer/BillTask.cpp	/^int BillTask::recycleConn()$/;"	f	class:BillTask
recycleConn	BillServer/old_back/BillTask.cpp	/^int BillTask::recycleConn()$/;"	f	class:BillTask
recycleConn	FLServer/LoginTask.cpp	/^int LoginTask::recycleConn() { return 1; }$/;"	f	class:LoginTask
recycleConn	GatewayServer/old_back/GatewayTask.cpp	/^int GatewayTask::recycleConn()$/;"	f	class:GatewayTask
recycleConn	RecordServer/RecordTask.cpp	/^int RecordTask::recycleConn()$/;"	f	class:RecordTask
recycleConn	SceneServer/SceneTask.cpp	/^int SceneTask::recycleConn()$/;"	f	class:SceneTask
recycleConn	SceneServer/libscenesserver/SceneTask.cpp	/^int SceneTask::recycleConn()$/;"	f	class:SceneTask
recycleConn	SessionServer/SessionTask.cpp	/^int SessionTask::recycleConn()$/;"	f	class:SessionTask
recycleConn	SessionServer/libsessionserver/SessionTask.cpp	/^int SessionTask::recycleConn()$/;"	f	class:SessionTask
recycleConn	SuperServer/ServerTask.cpp	/^int ServerTask::recycleConn()$/;"	f	class:ServerTask
recycleConn	base/include/srvEngine.h	/^	virtual void recycleConn() {};$/;"	f	class:x_tcp_clientTask
recycleConn	base/src/x_tcptask.h	/^	virtual int recycleConn()$/;"	f	class:x_tcptask
recycleConn	tmp/MiniServer/MiniTask.cpp	/^int MiniTask::recycleConn()$/;"	f	class:MiniTask
recycleList	SceneServer/libscenesserver/duplicateManager.h	/^	typedef std::list<clearDupStruct> recycleList;$/;"	t	class:duplicateManager
recycleThread	base/src/x_tcptaskpool.h	/^	boost::scoped_ptr<boost::thread> recycleThread;$/;"	m	class:x_tcptaskpool
recycleThreadFunctor	base/src/x_tcptaskpool.h	/^	boost::shared_ptr<x_recycle_thread_functor> recycleThreadFunctor;$/;"	m	class:x_tcptaskpool
recycle_delay	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
recycle_state	BillServer/old_back/BillServer.h	/^    int recycle_state;$/;"	m	class:BillTask
recycle_state	SceneServer/libscenesserver/SceneServer1.h	/^    int recycle_state;$/;"	m	class:SceneTask
recycle_state	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneTask
recycle_state	SessionServer/libsessionserver/SessionServer.h	/^    int recycle_state;$/;"	m	class:SessionTask
recycle_state	tmp/MiniServer/MiniServer.h	/^    int recycle_state;$/;"	m	class:MiniTask
recycle_wait	GatewayServer/old_back/GatewayServer.h	/^	DWORD recycle_wait;$/;"	m	class:GatewayTask
redeem_gold	BillServer/BillUser.cpp	/^bool BillUser::redeem_gold(const BillData* bd)$/;"	f	class:BillUser
redeem_gold_err	BillServer/BillUser.cpp	/^bool BillUser::redeem_gold_err(const BillData* bd)$/;"	f	class:BillUser
redeem_moth_card	BillServer/BillUser.cpp	/^bool BillUser::redeem_moth_card(const BillData* bd)$/;"	f	class:BillUser
redeem_object_card	BillServer/BillUser.cpp	/^bool BillUser::redeem_object_card(const BillData* bd)$/;"	f	class:BillUser
redeem_object_card_err	BillServer/BillUser.cpp	/^bool BillUser::redeem_object_card_err(const BillData* bd)$/;"	f	class:BillUser
reduceDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
reduceDur	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::reduceDur(SceneUser *pThis,DWORD which)$/;"	f	class:EquipPack
reduceDur	SceneServer/libscenesserver/zObject.cpp	/^int EquipPack::reduceDur(SceneUser *pThis,DWORD which,DWORD type,DWORD num,bool needFresh,bool needCal)$/;"	f	class:EquipPack
reduceGoodness	SceneServer/libscenesserver/ScenePk.cpp	/^void SceneUser::reduceGoodness(SceneNpc *pNpc)$/;"	f	class:SceneUser
reduceGoodness	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
reduceObjectNum	SceneServer/libscenesserver/ObjectManager.cpp	/^int UserObjectM::reduceObjectNum(SceneUser* user,DWORD id,DWORD number,zObject*& update_ob,ObjID_vec& del_obs,BYTE upgrade)$/;"	f	class:UserObjectM
reduce_akdodge	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reduce_atrating	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reduce_permanence	SceneServer/libscenesserver/Mask.cpp	/^int Mask::reduce_permanence()$/;"	f	class:Mask
reel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
reel	base/include/csCommon.h	/^/;"	m	struct:_Object
reel	base/include/srvEngine.h	/^	rangeValue reel; \/\/Áú©ÊôïÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
reeldef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
reeldef	base/include/csCommon.h	/^/;"	m	struct:_Object
reeldef	base/include/srvEngine.h	/^			luckRangeValue reeldef;    \/\/ ÊäóÁú©ÊôïÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
reeldef	base/include/srvEngine.h	/^	rangeValue reeldef; \/\/ÊäóÁú©ÊôïÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
reference	base/include/srvEngine.h	/^	typedef typename zPathQueueHead::reference reference;$/;"	t	class:zAStar
reflect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reflect2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reflectDam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
reflectSkill	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
reflect_ardor	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reflect_frost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reflect_icelull	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reflect_lull	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reflect_poison	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reflectp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
refresh	GatewayServer/old_back/ScreenIndex.cpp	/^bool ScreenIndex::refresh(GateUser *e,const DWORD newIndex)$/;"	f	class:ScreenIndex
refresh	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^bool zSceneEntryIndex::refresh(zSceneEntry *e,const zPos & newPos)$/;"	f	class:zSceneEntryIndex
refresh	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneRecycleUserManager::refresh()$/;"	f	class:SceneRecycleUserManager
refresh	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
refresh	SceneServer/libscenesserver/Skill.cpp	/^void zSkill::refresh(bool ignoredirty)$/;"	f	class:zSkill
refresh	SceneServer/libscenesserver/SkillManager.cpp	/^void UserSkillM::refresh()$/;"	f	class:UserSkillM
refresh	base/include/srvEngine.h	/^	bool refresh(const char *filename)$/;"	f	class:zDataBM
refresh	base/include/srvEngine.h	/^	bool refresh(datafile &base)$/;"	f	class:zDataBM
refreshAlly	SessionServer/libsessionserver/Ally.cpp	/^void CAlly::refreshAlly(bool isFire)$/;"	f	class:CAlly
refreshAlly	SessionServer/libsessionserver/Ally.cpp	/^void CAllyM::refreshAlly(SessionTask* scene)$/;"	f	class:CAllyM
refreshAllyToAllUser	SessionServer/libsessionserver/Ally.cpp	/^void CAlly::refreshAllyToAllUser(bool isFire)$/;"	f	class:CAlly
refreshCharInfo	GatewayServer/old_back/GateUser.cpp	/^void GateUser::refreshCharInfo()$/;"	f	class:GateUser
refreshDB	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareM::refreshDB()$/;"	f	class:CNpcDareM
refreshGeneral	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::refreshGeneral()$/;"	f	class:CCountry
refreshGeneral	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::refreshGeneral(DWORD country)$/;"	f	class:CCountryM
refreshNPC	SessionServer/libsessionserver/Gem.cpp	/^bool CArhat::refreshNPC()$/;"	f	class:CArhat
refreshNpc	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::refreshNpc(SceneNpc *sceneNpc,const zPos & pos)$/;"	f	class:Scene
refreshSaveBase	RecordServer/RecordUser.cpp	/^bool RecordUser::refreshSaveBase(const Cmd::Record::t_WriteUser_SceneRecord * rev){$/;"	f	class:RecordUser
refreshSeptExp	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
refreshTax	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::refreshTax()$/;"	f	class:CCountryM
refreshTech	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::refreshTech(SessionTask* scene,DWORD dwCountryID)$/;"	f	class:CCountryM
refreshUnion	SessionServer/libsessionserver/CityManager.cpp	/^void CCityM::refreshUnion(DWORD dwCountryID,DWORD dwCityID)$/;"	f	class:CCityM
refresh_npc	SceneServer/libscenesserver/script_func.cpp	/^void refresh_npc(int id)$/;"	f
refresh_pack	SceneServer/libscenesserver/RebuildObject.cpp	/^void Base::refresh_pack(SceneUser& user,ObjectPack* pack)$/;"	f	class:Base
refresh_quest	SceneServer/libscenesserver/script_func.cpp	/^void refresh_quest(int id)$/;"	f
refresh_status	SceneServer/libscenesserver/script_func.cpp	/^void refresh_status(SceneNpc* npc)$/;"	f
reg	GatewayServer/old_back/GateUser.cpp	/^void GateUser::reg(int charno)$/;"	f	class:GateUser
reg	SessionServer/libsessionserver/SessionServer.h	/^    bool SceneSession::reg(Cmd::Session::t_regScene_SceneSession *reginfo)$/;"	f	class:SceneSession::SceneSession
reg	SessionServer/libsessionserver/SessionServer.h	/^    bool reg(Cmd::Session::t_regUser_GateSession *reginfo)$/;"	f	class:UserSession
regTime	SessionServer/libsessionserver/SessionServer.h	/^    zRTime regTime;$/;"	m	class:UserSession
regex_Build	base/src/regexLib.c	/^BOOL regex_Build(DWORD isCount,PSTR szName[],PSTR szVar[],PSTR pSrc,PSTR pDst,DWORD dwDst)$/;"	f
regex_Escape	base/src/regexLib.c	/^void regex_Escape(PSTR pSrc,PSTR pDst,DWORD dwDst)$/;"	f
regex_Replace	base/src/regexLib.c	/^BOOL regex_Replace(regex_t *reg,PSTR szVar[],regmatch_t *pmatch,PSTR pSrc,PSTR pDst,DWORD dwDst)$/;"	f
regex_ReplaceEx	base/src/regexLib.c	/^BOOL regex_ReplaceEx(PSTR szPattern,PSTR szVar[],regmatch_t *pmatch,PSTR pSrc,PSTR pDst,DWORD dwDst)$/;"	f
regex_ReplaceExEx	base/src/regexLib.c	/^BOOL regex_ReplaceExEx(DWORD isCount,PSTR szName[],PSTR szVar[],regmatch_t *pmatch,PSTR pSrc,PSTR pDst,DWORD dwDst)$/;"	f
region	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::bossDefine
region	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::phaseDefine
region	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::ZoneTypeDef
region	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
regionX	SceneServer/libscenesserver/SceneServer1.h	/^  int regionX,regionY;$/;"	m	struct:t_NpcAIDefine
regionY	SceneServer/libscenesserver/SceneServer1.h	/^  int regionX,regionY;$/;"	m	struct:t_NpcAIDefine
registerMap	SceneServer/libscenesserver/duplicateManager.cpp	/^void duplicateManager::registerMap(DWORD id,zTiles* _zTiles)$/;"	f	class:duplicateManager
register_creator	SceneServer/libscenesserver/SceneServer1.h	/^  void register_creator(const I& id,C* creator)  $/;"	f	class:ProductFactory
reinitFilter	SceneServer/libscenesserver/scriptTickTask.h	/^		static void reinitFilter()$/;"	f	class:scriptMessageFilter
relationID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD relationID;        $/;"	m	struct:cartoon_relation_struct
relationID2	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createDare_SceneSession
relationManager	SessionServer/libsessionserver/SessionServer.h	/^    CRelationManager relationManager;$/;"	m	class:UserSession
relationid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::WarRecord
relationlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
releaseExp	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::releaseExp()$/;"	f	class:CartoonPet
releaseExp	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::releaseExp(DWORD num)$/;"	f	class:CartoonPet
relive	SceneServer/libscenesserver/ScenePk.cpp	/^bool SceneUser::relive(const int relive_type,const int delaytime,const int data_percent)$/;"	f	class:SceneUser
relive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
relive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
reliveAll	SceneServer/libscenesserver/SessionClient.cpp	/^	void reliveAll()$/;"	f	struct:ClearAllNotUnion
relivePet	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void relivePet(){};$/;"	f	class:SceneNpc
relivePet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
reliveReady	SceneServer/libscenesserver/ScenePk.cpp	/^bool SceneUser::reliveReady(const Cmd::stOKReliveUserCmd *rev,bool isOrigin)$/;"	f	class:SceneUser
reliveRun	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::reliveRun()$/;"	f	class:GangScene
reliveSecGen	SceneServer/libscenesserver/Scene.cpp	/^void Scene::reliveSecGen()$/;"	f	class:Scene
reliveSecondFlag	SceneServer/libscenesserver/CountryDare.cpp	/^void CountryDareM::reliveSecondFlag(Scene* scene,DWORD dwNpcID)$/;"	f	class:CountryDareM
reliveTime	SceneServer/libscenesserver/SceneBattlefiel.h	/^	WORD reliveTime;$/;"	m	class:GangScene
reliveTime	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime reliveTime;\/\/∏¥ªÓ ±º‰$/;"	m	class:SceneNpc
reliveType	SceneServer/libscenesserver/SceneBattlefiel.h	/^	BYTE reliveType;$/;"	m	class:GangScene
reliveWeakTime	base/include/csCommon.h	/^/;"	m	struct:CharBase
reload	GatewayServer/old_back/CountryInfo.cpp	/^bool CountryInfo::reload()$/;"	f	class:CountryInfo
reload	SceneServer/libscenesserver/ScenesServer.cpp	/^bool ScenesService::reload=false;$/;"	m	class:ScenesService	file:
reload	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
reloadConfig	BillServer/BillServer.cpp	/^void BillService::reloadConfig()$/;"	f	class:BillService
reloadConfig	BillServer/old_back/BillServer.cpp	/^void BillService::reloadConfig()$/;"	f	class:BillService
reloadConfig	GatewayServer/GatewayServer.cpp	/^void GatewayService::reloadConfig() {$/;"	f	class:GatewayService
reloadConfig	GatewayServer/old_back/GatewayServer.cpp	/^void GatewayService::reloadConfig()$/;"	f	class:GatewayService
reloadConfig	RecordServer/RecordServer.cpp	/^void RecordService::reloadConfig()$/;"	f	class:RecordService
reloadConfig	SceneServer/SceneServer.cpp	/^void SceneService::reloadConfig()$/;"	f	class:SceneService
reloadConfig	SceneServer/libscenesserver/ScenesServer.cpp	/^void ScenesService::reloadConfig()$/;"	f	class:ScenesService
reloadConfig	SessionServer/SessionServer.cpp	/^void SessionService::reloadConfig()$/;"	f	class:SessionService
reloadConfig	SessionServer/libsessionserver/SessionServer.cpp	/^void SessionService::reloadConfig()$/;"	f	class:SessionService
reloadConfig	tmp/MiniServer/MiniServer.cpp	/^void MiniService::reloadConfig()$/;"	f	class:MiniService
reloadVM	SceneServer/libscenesserver/script.cpp	/^void ScriptingSystemLua::reloadVM()$/;"	f	class:ScriptingSystemLua
remark	BillServer/old_back/BillServer.h	/^  char          remark[Cmd::UserServer::REMARK_LENGTH +1];  \/\/±∏◊¢$/;"	m	struct:BillData
remove	BillServer/old_back/BillCache.cpp	/^void BillCache::remove(const char *tid)$/;"	f	class:BillCache
remove	BillServer/old_back/BillClientManager.cpp	/^void BillClientManager::remove(BillClient *billClient)$/;"	f	class:BillClientManager
remove	BillServer/old_back/BillSessionManager.cpp	/^bool BillSessionManager::remove(const std::string& tid)$/;"	f	class:BillSessionManager
remove	FLServer/LoginManager.cpp	/^bool LoginManager::remove(shared_ptr<LoginTask> task) {$/;"	f	class:LoginManager
remove	GatewayServer/old_back/SceneClientManager.cpp	/^void SceneClientManager::remove(SceneClient *sceneClient)$/;"	f	class:SceneClientManager
remove	RecordServer/RecordUserManager.cpp	/^bool RecordUserM::remove(const uint32_t accid, const uint32_t id, const uint32_t dwServerID){$/;"	f	class:RecordUserM
remove	RecordServer/RecordUserManager.cpp	/^bool RecordUserM::remove(shared_ptr<RecordUser> u) {$/;"	f	class:RecordUserM
remove	SceneServer/libscenesserver/Trade.cpp	/^void PrivateStore::remove(DWORD id) $/;"	f	class:PrivateStore
remove	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::remove(DWORD id)$/;"	f	class:TradeOrder
remove	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::remove(zObject *object)$/;"	f	class:EquipPack
remove	SceneServer/libscenesserver/zObject.cpp	/^bool MainPack::remove(zObject *object)$/;"	f	class:MainPack
remove	SceneServer/libscenesserver/zObject.cpp	/^bool Package::remove(zObject *object)$/;"	f	class:Package
remove	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::remove(DWORD id)$/;"	f	class:SessionChannel
remove	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::remove(UserSession *pUser)$/;"	f	class:SessionChannel
remove	SessionServer/libsessionserver/SessionChat.cpp	/^void SessionChannelManager::remove(DWORD id)$/;"	f	class:SessionChannelManager
remove	SessionServer/libsessionserver/TempArchive.cpp	/^void GlobalTempArchiveIndex::remove(TempArchive_iterator del_iter)$/;"	f	class:GlobalTempArchiveIndex
remove	SuperServer/FLClientManager.cpp	/^void FLClientManager::remove(FLClient *flClient)$/;"	f	class:FLClientManager
remove	SuperServer/InfoClientManager.cpp	/^void InfoClientManager::remove(InfoClient *infoClient)$/;"	f	class:InfoClientManager
remove	SuperServer/RoleregCache.cpp	/^	void remove(const char *name)$/;"	f	class:RoleDataContainer
remove	base/include/srvEngine.h	/^	inline void remove(const keyT &key)$/;"	f	class:LimitHash
remove	base/include/srvEngine.h	/^	inline void remove(zEntry * &e) { }$/;"	f	class:zEntryNone
remove	base/include/srvEngine.h	/^	inline void remove(zEntry * &e)$/;"	f	class:zMultiEntryName
remove	base/include/srvEngine.h	/^	inline void remove(zEntry * e)$/;"	f	class:zEntryID
remove	base/include/srvEngine.h	/^	inline void remove(zEntry * e)$/;"	f	class:zEntryName
remove	base/include/srvEngine.h	/^	inline void remove(zEntry * e)$/;"	f	class:zEntryTempID
remove	base/src/x_tcptaskpool.cpp	/^	void remove(shared_ptr<x_tcptask> task)$/;"	f	class:x_verify_thread_functor	file:
remove	base/src/zTCPClientTaskPool.cpp	/^	void remove(x_tcp_clientTask_IT &it,int p)$/;"	f	class:x_tcp_clientTaskThread	file:
remove	base/src/zTCPClientTaskPool.cpp	/^	void remove(x_tcp_clientTask_IT &it,int p)$/;"	f	class:zCheckwaitThread	file:
remove	tmp/MiniServer/Top100.cpp	/^void Top100::remove(DWORD id)$/;"	f	class:Top100
removeAll	SceneServer/libscenesserver/zObject.cpp	/^void Package::removeAll()$/;"	f	class:Package
removeAllByServerID	RecordServer/RecordUserManager.cpp	/^void RecordUserM::removeAllByServerID(const uint32_t dwServerID){$/;"	f	class:RecordUserM
removeAllSceneByTask	SessionServer/libsessionserver/SessionManager.cpp	/^void SceneSessionManager::removeAllSceneByTask(SessionTask *task)$/;"	f	class:SceneSessionManager
removeAllUser	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::removeAllUser()$/;"	f	class:GateUserManager
removeAllUser	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::removeAllUser()$/;"	f	class:SceneUserManager
removeAllUser	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::removeAllUser()$/;"	f	class:SessionChannel
removeAllUserByTask	SessionServer/libsessionserver/SessionManager.cpp	/^void UserSessionManager::removeAllUserByTask(SessionTask *task)$/;"	f	class:UserSessionManager
removeAlly	SessionServer/libsessionserver/Ally.cpp	/^void CAllyM::removeAlly(DWORD dwCountryID1,DWORD dwCountryID2)$/;"	f	class:CAllyM
removeArmyByGenID	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::removeArmyByGenID(DWORD dwGenID)$/;"	f	class:CArmyM
removeArmyByID	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::removeArmyByID(DWORD dwArmyID)$/;"	f	class:CArmyM
removeBlackList	GatewayServer/old_back/GateUser.cpp	/^void GateUser::removeBlackList(const char *name)$/;"	f	class:GateUser
removeCaptain	SessionServer/libsessionserver/Army.cpp	/^bool CArmyM::removeCaptain(DWORD dwUserID)$/;"	f	class:CArmyM
removeCountryUser	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::removeCountryUser(GateUser *user)$/;"	f	class:GateUserManager
removeEntry	base/include/srvEngine.h	/^	inline void removeEntry(zEntry * e)$/;"	f	class:zEntryManager
removeEntryByID	base/include/srvEngine.h	/^	void removeEntryByID(uint32_t id)$/;"	f	class:zDataBM
removeEntryByName	SessionServer/libsessionserver/Sept.cpp	/^void CSept::removeEntryByName(const char * name)$/;"	f	class:CSept
removeEntryByName	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::removeEntryByName(const char * name)$/;"	f	class:CSeptM
removeEntryByName	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
removeEntryByName	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
removeEntryByName	base/include/srvEngine.h	/^	void removeEntryByName(const char * name)$/;"	f	class:zDataBM
removeEntry_Pred	base/include/srvEngine.h	/^struct removeEntry_Pred$/;"	s
removeEntry_if	base/include/srvEngine.h	/^	inline void removeEntry_if (removeEntry_Pred<YourEntry> &pred)$/;"	f	class:zEntryManager
removeFromContainer	BillServer/old_back/BillClient.cpp	/^void BillClient::removeFromContainer()$/;"	f	class:BillClient
removeFromContainer	GatewayServer/old_back/GatewayTask.cpp	/^void GatewayTask::removeFromContainer()$/;"	f	class:GatewayTask
removeFromContainer	GatewayServer/old_back/SceneClient.cpp	/^void SceneClient::removeFromContainer()$/;"	f	class:SceneClient
removeFromContainer	SessionServer/SessionTask.cpp	/^void SessionTask::removeFromContainer()$/;"	f	class:SessionTask
removeFromContainer	SessionServer/libsessionserver/SessionTask.cpp	/^void SessionTask::removeFromContainer()$/;"	f	class:SessionTask
removeFromContainer	SuperServer/InfoClient.cpp	/^void InfoClient::removeFromContainer()$/;"	f	class:InfoClient
removeFromContainer	SuperServer/ServerTask.cpp	/^void ServerTask::removeFromContainer()$/;"	f	class:ServerTask
removeFromContainer	base/include/srvEngine.h	/^	virtual void removeFromContainer() {};$/;"	f	class:x_tcp_clientTask
removeFromContainer	base/src/x_tcptask.h	/^	virtual void removeFromContainer() {}$/;"	f	class:x_tcptask
removeFromContainer	base/tcp_task.h	/^	virtual void removeFromContainer(){}$/;"	f	class:tcp_task
removeGateUser	GatewayServer/old_back/ScreenIndex.cpp	/^void ScreenIndex::removeGateUser(GateUser *e)$/;"	f	class:ScreenIndex
removeGold	BillServer/BillUser.cpp	/^bool BillUser::removeGold(DWORD num,const char *disc,bool transfer,bool tax)$/;"	f	class:BillUser
removeGold	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::removeGold(DWORD num,const char *disc,bool need)$/;"	f	class:Packages
removeIndex	GatewayServer/old_back/GatewayServer.h	/^	void removeIndex(GateUser *pUser,const DWORD map)$/;"	f	class:SceneClient
removeMember	SceneServer/libscenesserver/Team.cpp	/^void Team::removeMember(DWORD id,DWORD tempid)$/;"	f	class:Team
removeMember	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::removeMember(Cmd::stRemoveTeamMemberUserCmd *rev)$/;"	f	class:TeamManager
removeMember	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::removeMember(SceneUser *mem)$/;"	f	class:TeamManager
removeMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::removeMember(CSchoolMember *member)$/;"	f	class:CSchool
removeMemberByID	SceneServer/libscenesserver/Team.cpp	/^void Team::removeMemberByID(DWORD id)$/;"	f	class:Team
removeMemberByID	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::removeMemberByID(DWORD id)$/;"	f	class:TeamManager
removeMemberByName	SceneServer/libscenesserver/Team.cpp	/^DWORD Team::removeMemberByName(const char *pname)$/;"	f	class:Team
removeMemberByTempID	SceneServer/libscenesserver/Team.cpp	/^void Team::removeMemberByTempID(DWORD tempid)$/;"	f	class:Team
removeMemberByTempID	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::removeMemberByTempID(DWORD tempid)$/;"	f	class:TeamManager
removeMemberIndex	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolM::removeMemberIndex(const char *pName)$/;"	f	class:CSchoolM
removeMemberIndex	SessionServer/libsessionserver/Sept.cpp	/^bool CSeptM::removeMemberIndex(const char *pName)$/;"	f	class:CSeptM
removeMoney	BillServer/BillUser.cpp	/^bool BillUser::removeMoney(DWORD num,const char *disc,bool transfer,bool tax)$/;"	f	class:BillUser
removeMoney	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::removeMoney(DWORD num,const char *disc)$/;"	f	class:Packages
removeMoney	tmp/MiniServer/MiniUser.cpp	/^bool MiniUser::removeMoney(int num)$/;"	f	class:MiniUser
removeNpc	SceneServer/libscenesserver/Scene.cpp	/^void Scene::removeNpc(SceneNpc *sn)$/;"	f	class:Scene
removeNpc	SceneServer/libscenesserver/duplicateManager.cpp	/^bool duplicateManager::removeNpc(SceneNpc *npc,unsigned short index)$/;"	f	class:duplicateManager
removeNpcInOneScene	SceneServer/libscenesserver/SceneNpcManager.cpp	/^void SceneNpcManager::removeNpcInOneScene(Scene *scene)$/;"	f	class:SceneNpcManager
removeNpc_if	SceneServer/libscenesserver/SceneServer1.h	/^    void removeNpc_if(removeEntry_Pred<YourNpcEntry> &pred)$/;"	f	class:SceneNpcManager
removeNpc_if	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneNpcManager
removeObj	SceneServer/libscenesserver/duplicateManager.cpp	/^bool duplicateManager::removeObj(zSceneObject *obj,unsigned short index)$/;"	f	class:duplicateManager
removeObject	SceneServer/libscenesserver/ObjectManager.cpp	/^void GlobalObjectIndex::removeObject(DWORD thisid)$/;"	f	class:GlobalObjectIndex
removeObject	SceneServer/libscenesserver/ObjectManager.cpp	/^void UserObjectM::removeObject(zObject * o)$/;"	f	class:UserObjectM
removeObject	SceneServer/libscenesserver/Scene.cpp	/^void Scene::removeObject(zSceneObject *so)$/;"	f	class:Scene
removeObject	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::removeObject(zObject *srcObj,bool notify,bool del)$/;"	f	class:Packages
removeObjectByThisID	SceneServer/libscenesserver/ObjectManager.cpp	/^void UserObjectM::removeObjectByThisID(DWORD thisid)$/;"	f	class:UserObjectM
removeOne_if	SessionServer/libsessionserver/SessionServer.h	/^         void removeOne_if(removeEntry_Pred<YourEntry> &pred)$/;"	f	class:CSchool
removeOne_if	SessionServer/libsessionserver/SessionServer.h	/^      void removeOne_if(removeEntry_Pred<YourEntry> &pred)$/;"	f	class:CDareM
removeOne_if	SessionServer/libsessionserver/SessionServer.h	/^      void removeOne_if(removeEntry_Pred<YourEntry> &pred)$/;"	f	class:CQuizM
removeOne_if	SessionServer/libsessionserver/SessionServer.h	/^    void removeOne_if(removeEntry_Pred<YourEntry> &pred)$/;"	f	class:CGemM
removeOne_if	SessionServer/libsessionserver/SessionServer.h	/^    void removeOne_if(removeEntry_Pred<YourEntry> &pred)$/;"	f	class:CSept
removeOne_if	SessionServer/libsessionserver/SessionServer.h	/^    void removeOne_if(removeEntry_Pred<YourEntry> &pred)$/;"	f	class:CSeptM
removeOne_if	SessionServer/libsessionserver/SessionServer.h	/^    void removeOne_if(removeEntry_Pred<YourEntry> &pred)$/;"	f	class:CUnion
removeOne_if	SessionServer/libsessionserver/SessionServer.h	/^    void removeOne_if(removeEntry_Pred<YourEntry> &pred)$/;"	f	class:CUnionM
removeRecommendSub	SessionServer/libsessionserver/RecommendManager.cpp	/^bool RecommendM::removeRecommendSub(DWORD dwUserID)$/;"	f	class:RecommendM
removeRelation	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::removeRelation(const char * name)$/;"	f	class:CRelationManager
removeScene	SessionServer/libsessionserver/SessionManager.cpp	/^void SceneSessionManager::removeScene(SceneSession *scene)$/;"	f	class:SceneSessionManager
removeSceneEntry	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^bool zSceneEntryIndex::removeSceneEntry(zSceneEntry *e)$/;"	f	class:zSceneEntryIndex
removeSceneNpc	SceneServer/libscenesserver/SceneNpcManager.cpp	/^void SceneNpcManager::removeSceneNpc(SceneNpc *sceneNpc)$/;"	f	class:SceneNpcManager
removeSceneObjectInOneScene	SceneServer/libscenesserver/Scene.cpp	/^void Scene::removeSceneObjectInOneScene()$/;"	f	class:Scene
removeScene_if	base/include/srvEngine.h	/^	void removeScene_if(removeEntry_Pred<YourSceneEntry> &pred)$/;"	f	class:zSceneManager
removeServer	SessionServer/ServerManager.cpp	/^void ServerManager::removeServer(shared_ptr<SessionTask> task) {$/;"	f	class:ServerManager
removeServer	SuperServer/ServerManager.cpp	/^void ServerManager::removeServer(shared_ptr<ServerTask> task) {$/;"	f	class:ServerManager
removeSessionTask	SessionServer/libsessionserver/SessionTaskManager.cpp	/^void SessionTaskManager::removeSessionTask(SessionTask *task)$/;"	f	class:SessionTaskManager
removeSkill	SceneServer/libscenesserver/SceneSkill.cpp	/^bool SceneUser::removeSkill(const Cmd::stRemoveUserSkillPropertyUserCmd *rev)$/;"	f	class:SceneUser
removeSkill	SceneServer/libscenesserver/SkillManager.cpp	/^void UserSkillM::removeSkill(zSkill *s)$/;"	f	class:UserSkillM
removeSkillByTempID	SceneServer/libscenesserver/SkillManager.cpp	/^void UserSkillM::removeSkillByTempID(DWORD id)$/;"	f	class:UserSkillM
removeSpecialNpc	SceneServer/libscenesserver/SceneNpcManager.cpp	/^void SceneNpcManager::removeSpecialNpc(SceneNpc *sceneNpc)$/;"	f	class:SceneNpcManager
removeTicket	SceneServer/libscenesserver/zObject.cpp	/^bool Packages::removeTicket(DWORD num,const char *disc)$/;"	f	class:Packages
removeUser	BillServer/BillUserManager.h	/^    void removeUser(BillUser *user)$/;"	f	class:BillUserManager
removeUser	BillServer/old_back/BillServer.h	/^    void removeUser(BillUser *user)$/;"	f	class:BillUserManager
removeUser	SceneServer/libscenesserver/Scene.cpp	/^void Scene::removeUser(SceneUser *so)$/;"	f	class:Scene
removeUser	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneRecycleUserManager::removeUser(SceneUser *user)$/;"	f	class:SceneRecycleUserManager
removeUser	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::removeUser(SceneUser *user)$/;"	f	class:SceneUserManager
removeUser	SessionServer/libsessionserver/SessionChat.cpp	/^void SessionChannelManager::removeUser(UserSession * user)$/;"	f	class:SessionChannelManager
removeUser	base/include/srvEngine.h	/^	void removeUser(zSceneEntry *user)$/;"	f	class:zUserManager
removeUser	tmp/MiniServer/MiniServer.h	/^    void removeUser(MiniUser *user)$/;"	f	class:MiniUserManager
removeUserByGatewayID	BillServer/BillUserManager.cpp	/^void BillUserManager::removeUserByGatewayID(BillTask *task)$/;"	f	class:BillUserManager
removeUserByGatewayID	tmp/MiniServer/MiniUserManager.cpp	/^void MiniUserManager::removeUserByGatewayID(MiniTask *task)$/;"	f	class:MiniUserManager
removeUserBySceneClient	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::removeUserBySceneClient(SceneClient *scene)$/;"	f	class:GateUserManager
removeUserByTask	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::removeUserByTask(SceneTask *task)$/;"	f	class:SceneUserManager
removeUserInOneScene	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::removeUserInOneScene(Scene *scene)$/;"	f	class:SceneUserManager
removeUserOnlyByAccID	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::removeUserOnlyByAccID(DWORD accid)$/;"	f	class:GateUserManager
removeUserToHuangcheng	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::removeUserToHuangcheng(Scene *scene)$/;"	f	class:SceneUserManager
removeUser_if	base/include/srvEngine.h	/^	void removeUser_if(removeEntry_Pred<YourUserEntry> &pred)$/;"	f	class:zUserManager
removeVote	SessionServer/libsessionserver/Vote.cpp	/^void CVoteM::removeVote(DWORD dwCountryID,DWORD dwType)$/;"	f	class:CVoteM
removeVoteByID	SessionServer/libsessionserver/Vote.cpp	/^void CVoteM::removeVoteByID(DWORD dwID)$/;"	f	class:CVoteM
remove_from	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Decompose::remove_from(SceneUser& user)$/;"	f	class:Decompose
remove_money	SceneServer/libscenesserver/script_func.cpp	/^bool remove_money(SceneUser* user,int money)$/;"	f
remove_object	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Base::remove_object(SceneUser& user,zObject* ob)$/;"	f	class:Base
removed	base/include/srvEngine.h	/^	std::vector<YourEntry *> removed;$/;"	m	struct:removeEntry_Pred
repairData	SessionServer/libsessionserver/CartoonPetService.cpp	/^void CartoonPetService::repairData()$/;"	f	class:CartoonPetService
repeat	SceneServer/libscenesserver/SceneServer1.h	/^  int repeat;$/;"	m	class:NpcAIController
repentange	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
reply	tmp/base3/reply.hpp	/^struct reply$/;"	s	namespace:http::server2
replyText	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
reply_	tmp/base3/connection.hpp	/^  reply reply_;$/;"	m	class:http::server2::connection
reportGm	SessionServer/libsessionserver/SessionServer.cpp	/^bool SessionService::reportGm(const char * fromName,const char * msg,...)$/;"	f	class:SessionService
reqAdopter	SessionServer/libsessionserver/SessionServer.h	/^    DWORD reqAdopter;$/;"	m	class:Session
request	tmp/base3/request.hpp	/^struct request$/;"	s	namespace:http::server2
requestFriendDegree	SceneServer/libscenesserver/SessionClient.cpp	/^void SessionClient::requestFriendDegree(SceneUser *pUser)$/;"	f	class:SessionClient
requestFriendDegree	SceneServer/libscenesserver/Team.cpp	/^void Team::requestFriendDegree()$/;"	f	class:Team
requestFriendDegree	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::requestFriendDegree()$/;"	f	class:TeamManager
requestLogin	FLServer/LoginTask.cpp	/^bool LoginTask::requestLogin(const Cmd::stUserRequestLoginCmd *ptCmd)$/;"	f	class:LoginTask
requestNpc	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
requestUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
request_	tmp/base3/connection.hpp	/^  request request_;$/;"	m	class:http::server2::connection
request_handler	tmp/base3/request_handler.cpp	/^request_handler::request_handler(const std::string& doc_root)$/;"	f	class:http::server2::request_handler
request_handler	tmp/base3/request_handler.hpp	/^class request_handler$/;"	c	namespace:http::server2
request_handler_	tmp/base3/connection.hpp	/^  request_handler& request_handler_;$/;"	m	class:http::server2::connection
request_handler_	tmp/base3/server.hpp	/^  request_handler request_handler_;$/;"	m	class:server
request_parser	tmp/base3/request_parser.cpp	/^request_parser::request_parser()$/;"	f	class:http::server2::request_parser
request_parser	tmp/base3/request_parser.hpp	/^class request_parser$/;"	c	namespace:http::server2
request_parser_	tmp/base3/connection.hpp	/^  request_parser request_parser_;$/;"	m	class:http::server2::connection
res	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stResultMiniGame
reserve	SceneServer/libscenesserver/Quest.cpp	/^bool Vars::reserve()$/;"	f	class:Vars
reserve	SceneServer/libscenesserver/zObject.cpp	/^const stObjectLocation &zObject::reserve() const$/;"	f	class:zObject
reserve	base/command.h	/^		DWORD reserve;$/;"	m	struct:Cmd::stUserVerifyVerCmd
reset	SceneServer/libscenesserver/GuardNpc.cpp	/^void GuardNpc::reset()$/;"	f	class:GuardNpc
reset	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void reset(){}$/;"	f	class:ScenePet
reset	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Equips
reset	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ScenePet
reset	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::reset()$/;"	f	class:TradeOrder
reset	base/src/x_buffer.h	/^	inline void reset()$/;"	f	class:ByteBuffer
reset	tmp/base3/request_parser.cpp	/^void request_parser::reset()$/;"	f	class:http::server2::request_parser
resetAllUseTime	SceneServer/libscenesserver/SkillManager.cpp	/^void UserSkillM::resetAllUseTime()$/;"	f	class:UserSkillM
resetCallTimes	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::resetCallTimes()$/;"	f	class:CCountryM
resetDragon	SessionServer/libsessionserver/Gem.cpp	/^void    CGem::resetDragon()$/;"	f	class:CGem
resetSpeedRate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
resetState	base/src/x_tcptask.cpp	/^void x_tcptask::resetState()$/;"	f	class:x_tcptask
resetState	base/src/zTCPClientTask.cpp	/^void x_tcp_clientTask::resetState()$/;"	f	class:x_tcp_clientTask
resetTiger	SessionServer/libsessionserver/Gem.cpp	/^void    CGem::resetTiger()$/;"	f	class:CGem
resetUseTime	SceneServer/libscenesserver/Skill.cpp	/^void zSkill::resetUseTime()$/;"	f	class:zSkill
resist	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
response	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Base::response(SceneUser& user,int status,BYTE type)$/;"	f	class:Base
responseOther	SuperServer/ServerManager.cpp	/^void ServerManager::responseOther(const WORD srcID,const WORD wdServerID) {$/;"	f	class:ServerManager
responseOther	SuperServer/ServerTask.cpp	/^void ServerTask::responseOther(const WORD wdServerID)$/;"	f	class:ServerTask
restituteDurability	SceneServer/libscenesserver/zObject.cpp	/^void EquipPack::restituteDurability(SceneUser *pThis,const zRTime &ct)$/;"	f	class:EquipPack
restore	SceneServer/libscenesserver/zObject.cpp	/^void zObject::restore(const stObjectLocation &loc)$/;"	f	class:zObject
restorecard	BillServer/BillUser.cpp	/^bool BillUser::restorecard()$/;"	f	class:BillUser
restoregold	BillServer/BillUser.cpp	/^bool BillUser::restoregold()$/;"	f	class:BillUser
resubIter	SessionServer/libsessionserver/SessionServer.h	/^    typedef std::map<DWORD,RecommendSub *>::iterator resubIter;$/;"	t	class:RecommendM
result	BillServer/old_back/BillServer.h	/^  int            result;                                      \/\/Ωª“◊Ω·π˚,1≥…π¶,0 ß∞‹$/;"	m	struct:BillData
resultTime	SessionServer/libsessionserver/SessionServer.h	/^    zRTime resultTime;$/;"	m	class:CNpcDareObj
resumedur	base/include/srvEngine.h	/^	luckRangeValue resumedur;    \/\/ ÊÅ¢Â§çËÄê‰πÖÂ∫¶$/;"	m	struct:zColorObjectB
resumehp	base/include/csCommon.h	/^/;"	m	struct:CharState
resumehp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
resumemp	base/include/csCommon.h	/^/;"	m	struct:CharState
resumemp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
resumesp	base/include/csCommon.h	/^/;"	m	struct:CharState
resumesp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
ret	SceneServer/libscenesserver/SceneManager.cpp	/^    Scene *ret;$/;"	m	class:GetSceneByFileName	file:
ret	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:sendAllSkillToUser	file:
ret	SceneServer/libscenesserver/TeamManager.cpp	/^	Cmd::stRemoveTeamChangeLeaderUserCmd ret;$/;"	m	struct:newChangeLeaderExec	file:
ret	SceneServer/libscenesserver/TeamManager.cpp	/^	Cmd::stRemoveTeamMemberUserCmd ret;$/;"	m	struct:RemoveMemberExec	file:
ret	SceneServer/libscenesserver/TeamManager.cpp	/^  Cmd::stFreshTeamMemberUserCmd ret;$/;"	m	struct:SendTeamDataExec	file:
ret	SceneServer/libscenesserver/TeamManager.cpp	/^  Cmd::stRemoveTeamUserCmd ret;$/;"	m	struct:DeleteTeamExec	file:
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Deposit_Ret
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Draw_Ret
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stContinueMiniGame
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stDrawRetCommonMiniGameCmd
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stEnterGameRetCommonMiniGameCmd
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stEnterRoomRetCommonMiniGameCmd
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stInviteRetMiniGame
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stLoginCommonMiniGameCmd
ret	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stLoginRetCommonMiniGameCmd
ret_1	SceneServer/libscenesserver/TeamManager.cpp	/^	Cmd::stAddTeamMemberUserCmd ret_1;$/;"	m	struct:AddAwayNewMemberExec	file:
ret_1	SceneServer/libscenesserver/TeamManager.cpp	/^	Cmd::stAddTeamMemberUserCmd ret_1;$/;"	m	struct:SendMemberDataExec	file:
ret_1	SceneServer/libscenesserver/TeamManager.cpp	/^  Cmd::stAddTeamMemberUserCmd ret_1;$/;"	m	struct:AddNewMemberExec	file:
ret_2	SceneServer/libscenesserver/TeamManager.cpp	/^  Cmd::stAddTeamMemberUserCmd ret_2;$/;"	m	struct:AddNewMemberExec	file:
retcode	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_unregUser_SceneSession
returnNum	base/include/csBox.h	/^	uint16_t returnNum; \/\/sky ∑µªÿ¥ÌŒÛ¬Î(0:≥…π¶ 1:«Æ≤ªπª 2:≤ƒ¡œ≤ªπª 3:∞¸∏§ø’º‰≤ª◊„ 4:Œ¥÷™¥ÌŒÛ)$/;"	m	struct:Cmd::stNewMakeObjectReturnUserCmd
returnToRegion	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::returnToRegion()$/;"	f	class:NpcAIController
returnToRegion	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::returnToRegion()$/;"	f	class:ScenePet
rev	SessionServer/libsessionserver/SessionServer.h	/^	Cmd::Session::t_Team_AddMember rev;$/;"	m	struct:TeamAddMemberSceneExec
rev	SessionServer/libsessionserver/SessionServer.h	/^	Cmd::Session::t_Team_ChangeLeader rev;$/;"	m	struct:TeamChangeLeaberSceneExec
rev	SessionServer/libsessionserver/SessionServer.h	/^	Cmd::Session::t_Team_DelMember rev;$/;"	m	struct:TeamDelMemberSceneExec
rev	SessionServer/libsessionserver/SessionServer.h	/^	Cmd::Session::t_Team_DelTeam rev;$/;"	m	struct:TeamDelTeamSceneExec
revCmd	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusCarrier
revCmd	SessionServer/libsessionserver/SessionTask.cpp	/^  Cmd::stChannelChatUserCmd * revCmd;$/;"	m	struct:EveryUserSessionAction	file:
revCmd	SessionServer/libsessionserver/SessionTask.cpp	/^  Cmd::stChannelChatUserCmd * revCmd;$/;"	m	struct:broadcastToEveryUser	file:
revents	base/include/srvEngine.h	/^		short revents;$/;"	m	struct:pollfd
reversedirect_screen	GatewayServer/old_back/GatewayServer.h	/^	NineScreen_map reversedirect_screen[8];$/;"	m	class:ScreenIndex
reversedirect_screen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
rgb	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
ride	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
ride	base/include/srvEngine.h	/^	uint32_t  ride;              \/\/ÂèØÂê¶È™ëÈ©¨‰ΩøÁî®$/;"	m	struct:zSkillB
ridepet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
rmRecommended	SessionServer/libsessionserver/RecommendManager.cpp	/^void Recommend::rmRecommended(DWORD dwUserID)$/;"	f	class:Recommend
rmargin	base/src/getopt.c	/^  int rmargin;$/;"	m	struct:uparams	file:
rmargin	base/src/getopt.c	/^  size_t lmargin, rmargin;	\/* Left and right margins.  *\/$/;"	m	struct:argp_fmtstream	file:
role	RecordServer/RecordUser.h	/^	uint8_t role[MAX_MSG_SIZE];$/;"	m	class:RecordUser
role_size	RecordServer/RecordUser.h	/^	uint32_t role_size;$/;"	m	class:RecordUser
rolereg_verify	GatewayServer/old_back/GatewayServer.h	/^	bool rolereg_verify;$/;"	m	class:GatewayService
rollback	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::rollback()$/;"	f	class:TradeOrder
rollitem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::TeamMember
rollnum	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::TeamMember
rolltype	SceneServer/libscenesserver/TeamManager.cpp	/^	BYTE  rolltype;$/;"	m	struct:SetMemberRollExec	file:
rolltype	SceneServer/libscenesserver/TeamManager.cpp	/^	BYTE rolltype;		\/\/sky µ±«∞◊Ó¥ÛROLL¿‡–Õ$/;"	m	struct:ComparisonRollnumExec	file:
room	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserPosition
roomDataCmd	tmp/MiniServer/MiniServer.h	/^    Cmd::stGameListCommonMiniGameCmd *roomDataCmd;$/;"	m	class:MiniHall
roomID	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::MiniUserPosition
roomID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniRoomData
roomID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stAddOneRoomUserCommonMiniGameCmd
roomID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stAddRoomUserCommonMiniGameCmd
roomID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stEnterRoomCommonMiniGameCmd
roomID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stEnterRoomRetCommonMiniGameCmd
roomID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stLeaveRoomCommonMiniGameCmd
roomList	tmp/MiniServer/MiniServer.h	/^    std::map<DWORD,MiniRoom *> roomList;$/;"	m	class:MiniHall
room_	tmp/base3/x_tcp_server.cpp	/^		chat_room room_;$/;"	m	class:chat_server	file:
room_iter	tmp/MiniServer/MiniServer.h	/^    typedef std::map<DWORD,MiniRoom *>::iterator room_iter;$/;"	t	class:MiniHall
root_argp	base/include/argp.h	/^  const  struct argp *root_argp;$/;"	m	struct:argp_state	typeref:struct:argp_state::argp
rootpath	SessionServer/libsessionserver/SessionServer.cpp	/^std::string COfflineMessage::rootpath = "";$/;"	m	class:COfflineMessage	file:
rootpath	SessionServer/libsessionserver/SessionServer.h	/^  static std::string rootpath;$/;"	m	class:COfflineMessage
rotate	SceneServer/libscenesserver/Dice.cpp	/^bool Dice::rotate(DWORD id)$/;"	f	class:Dice
round	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD round;\/\/n÷‹ƒø$/;"	m	class:Dice
round	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
row	deps/tinyxml/tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor
rpupdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
run	BillServer/old_back/TimeTick.cpp	/^void BillTimeTick::run()$/;"	f	class:BillTimeTick
run	GatewayServer/old_back/BillClient.cpp	/^void BillClient::run()$/;"	f	class:BillClient
run	GatewayServer/old_back/MiniClient.cpp	/^void MiniClient::run()$/;"	f	class:MiniClient
run	GatewayServer/old_back/RecordClient.cpp	/^void RecordClient::run()$/;"	f	class:RecordClient
run	GatewayServer/old_back/SessionClient.cpp	/^void SessionClient::run()$/;"	f	class:SessionClient
run	GatewayServer/old_back/TimeTick.cpp	/^void GatewayTimeTick::run()$/;"	f	class:GatewayTimeTick
run	SceneServer/libscenesserver/MiniClient.cpp	/^void MiniClient::run()$/;"	f	class:MiniClient
run	SceneServer/libscenesserver/RecordClient.cpp	/^void RecordClient::run()$/;"	f	class:RecordClient
run	SceneServer/libscenesserver/SessionClient.cpp	/^void SessionClient::run()$/;"	f	class:SessionClient
run	SceneServer/libscenesserver/TimeTick.cpp	/^void SceneTimeTick::run()$/;"	f	class:SceneTimeTick
run	SessionServer/libsessionserver/RecordClient.cpp	/^void RecordClient::run()$/;"	f	class:RecordClient
run	SessionServer/libsessionserver/TimeTick.cpp	/^void SessionTimeTick::run()$/;"	f	class:SessionTimeTick
run	base/include/srvEngine.h	/^	void run()         \/\/ [ranqd] Êé•Êî∂ËøûÊé•Á∫øÁ®ãÂáΩÊï∞$/;"	f	class:zAcceptThread
run	base/include/tcp_state.h	/^	virtual void run(){}$/;"	f	class:state_verify
run	base/include/tcp_state.h	/^	virtual void run(){}$/;"	f	class:state_wait_sync
run	base/include/tcp_state.h	/^	virtual void run(){}$/;"	f	class:tcp_state
run	base/io_service_pool.cpp	/^void io_service_pool::run() {$/;"	f	class:io_service_pool
run	base/server.cpp	/^void server::run() {$/;"	f	class:server
run	base/src/zTCPClientTaskPool.cpp	/^	virtual void run()$/;"	f	class:zCheckconnectThread
run	base/src/zTCPClientTaskPool.cpp	/^void x_tcp_clientTaskThread::run()$/;"	f	class:x_tcp_clientTaskThread
run	base/src/zTCPClientTaskPool.cpp	/^void zCheckwaitThread::run()$/;"	f	class:zCheckwaitThread
run	base/x_service.h	/^	virtual void run() {$/;"	f	class:x_service
run	client/NetworkManager.h	/^	void run()$/;"	f	class:NetworkManager
run	tmp/MiniServer/TimeTick.cpp	/^void MiniTimeTick::run()$/;"	f	class:MiniTimeTick
run	tmp/base3/io_service_pool.cpp	/^void io_service_pool::run()$/;"	f	class:http::server2::io_service_pool
run	tmp/base3/server.cpp	/^void server::run()$/;"	f	class:server
runCircle_anti_clockwise	SceneServer/libscenesserver/Scene.cpp	/^void Scene::runCircle_anti_clockwise($/;"	f	class:Scene
runCircle_clockwise	SceneServer/libscenesserver/Scene.cpp	/^void Scene::runCircle_clockwise($/;"	f	class:Scene
runOffEnemy	SceneServer/libscenesserver/SceneNpcAI.cpp	/^bool SceneNpc::runOffEnemy(SceneEntryPk_vec & enemies)$/;"	f	class:SceneNpc
runOffEnemy	SceneServer/libscenesserver/ScenePet.cpp	/^bool ScenePet::runOffEnemy(SceneEntryPk_vec& enemies)$/;"	f	class:ScenePet
runStatusElement	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
running_state	base/include/srvEngine.h	/^	uint32_t running_state;$/;"	m	struct:zScene
rushAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::LiveSkills::Rush
rushCallback	SessionServer/libsessionserver/TimeTick.cpp	/^	rushCallback(DWORD r,DWORD d,DWORD c):rushID(r),delay(d),cityID(c){}$/;"	f	struct:rushCallback
rushCallback	SessionServer/libsessionserver/TimeTick.cpp	/^struct rushCallback : public CCountryM::countryCallback$/;"	s	file:
rushDelay	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
rushDelay	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
rushID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
rushID	SessionServer/libsessionserver/TimeTick.cpp	/^	DWORD rushID;$/;"	m	struct:rushCallback	file:
rushList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
rushName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
rushName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_cityRush_SceneSession
rushRate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
rwlock	BillServer/BillUserManager.h	/^    zRWLock rwlock;$/;"	m	class:BillUserManager
rwlock	BillServer/old_back/BillServer.h	/^    zRWLock rwlock;$/;"	m	class:BillClientManager
rwlock	BillServer/old_back/BillServer.h	/^    zRWLock rwlock;$/;"	m	class:BillTaskManager
rwlock	BillServer/old_back/BillServer.h	/^    zRWLock rwlock;$/;"	m	class:BillUserManager
rwlock	GatewayServer/old_back/GatewayServer.h	/^	zRWLock rwlock;$/;"	m	class:GateUser
rwlock	GatewayServer/old_back/GatewayServer.h	/^	zRWLock rwlock;$/;"	m	class:GatewayTaskManager
rwlock	GatewayServer/old_back/GatewayServer.h	/^	zRWLock rwlock;$/;"	m	class:SceneClientManager
rwlock	SceneServer/libscenesserver/SceneServer1.h	/^    zRWLock rwlock;$/;"	m	class:CharInitInfo
rwlock	SceneServer/libscenesserver/SceneServer1.h	/^    zRWLock rwlock;$/;"	m	class:MessageSystem
rwlock	SceneServer/libscenesserver/SceneServer1.h	/^    zRWLock rwlock;$/;"	m	class:NpcTrade
rwlock	SceneServer/libscenesserver/SceneServer1.h	/^    zRWLock rwlock;$/;"	m	class:SceneNpcManager
rwlock	SceneServer/libscenesserver/SceneServer1.h	/^    zRWLock rwlock;$/;"	m	class:SceneRecycleUserManager
rwlock	SceneServer/libscenesserver/SceneServer1.h	/^    zRWLock rwlock;$/;"	m	class:SceneTaskManager
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::CharInitInfo
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryAllyM
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryDareM
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryTech
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryTechM
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::MagicRangeInit
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneRecycleUserManager
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::NpcTrade
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneNpcManager
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneTaskManager
rwlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Team
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;                             \/\/ ∂¡–¥À¯$/;"	m	class:CDare
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;                             \/\/ ∂¡–¥À¯$/;"	m	class:CGem
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;                             \/\/ ∂¡–¥À¯$/;"	m	class:CQuiz
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CAlly
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CAllyM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CArmy
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CArmyM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CCity
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CCityM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CCountry
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CCountryM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CDareM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CDareRecord
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CDareRecordM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CQuizM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CSchool
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CSchoolM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CSchoolMember
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CSept
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CSeptM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CTech
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CUnion
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CUnionM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CVote
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:CVoteM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:Recommend
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:RecommendM
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	class:SessionTaskManager
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	struct:CSeptMember
rwlock	SessionServer/libsessionserver/SessionServer.h	/^    zRWLock rwlock;$/;"	m	struct:CUnionMember
rwlock	SessionServer/libsessionserver/SessionServer.h	/^  zRWLock rwlock;$/;"	m	class:CGemM
rwlock	SuperServer/FLClientManager.h	/^    zRWLock rwlock;$/;"	m	class:FLClientManager
rwlock	SuperServer/InfoClientManager.h	/^    zRWLock rwlock;$/;"	m	class:InfoClientManager
rwlock	base/include/srvEngine.h	/^	zRWLock rwlock;$/;"	m	class:zDataBM
rwlock	base/include/srvEngine.h	/^	zRWLock rwlock;$/;"	m	class:zSceneManager
rwlock	base/include/srvEngine.h	/^	zRWLock rwlock;$/;"	m	class:zUserManager
rwlock	tmp/MiniServer/MiniServer.h	/^    zRWLock rwlock;$/;"	m	class:MiniTaskManager
rwlock	tmp/MiniServer/MiniServer.h	/^    zRWLock rwlock;$/;"	m	class:MiniUserManager
s	SceneServer/libscenesserver/Chat.cpp	/^/;"	v
s	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:SaveSkillExec	file:
s	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zRegion
s_dbConn	BillServer/BillServer.cpp	/^boost::shared_ptr<sql::Connection> BillService::s_dbConn;$/;"	m	class:BillService	file:
s_dbConn	BillServer/BillServer.h	/^		static boost::shared_ptr<sql::Connection> s_dbConn;$/;"	m	class:BillService
s_dbConn	FLServer/FLServer.h	/^	static boost::shared_ptr<sql::Connection> s_dbConn;$/;"	m	class:FLService
s_dbConn	RecordServer/RecordServer.cpp	/^boost::shared_ptr<sql::Connection> RecordService::s_dbConn;$/;"	m	class:RecordService	file:
s_dbConn	RecordServer/RecordServer.h	/^		static boost::shared_ptr<sql::Connection> s_dbConn;$/;"	m	class:RecordService
s_dbConn	SceneServer/SceneServer.cpp	/^boost::shared_ptr<sql::Connection> SceneService::s_dbConn;$/;"	m	class:SceneService	file:
s_dbConn	SceneServer/SceneServer.h	/^		static boost::shared_ptr<sql::Connection> s_dbConn;$/;"	m	class:SceneService
s_dbConn	SessionServer/SessionServer.cpp	/^boost::shared_ptr<sql::Connection> SessionService::s_dbConn;$/;"	m	class:SessionService	file:
s_dbConn	SessionServer/SessionServer.h	/^		static boost::shared_ptr<sql::Connection> s_dbConn;$/;"	m	class:SessionService
s_dbConn	SuperServer/SuperServer.h	/^	static boost::shared_ptr<sql::Connection> s_dbConn;$/;"	m	class:SuperService
safety	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
safety_setup	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
sampleInterval	GatewayServer/old_back/GatewayServer.h	/^	static const DWORD sampleInterval = 20000;$/;"	m	class:GatewayTask
sampleInterval_error_msecs	GatewayServer/old_back/GatewayServer.h	/^	static const DWORD sampleInterval_error_msecs = sampleInterval;$/;"	m	class:GatewayTask
sampleInterval_error_sec	GatewayServer/old_back/GatewayServer.h	/^	static const DWORD sampleInterval_error_sec = sampleInterval\/1000;$/;"	m	class:GatewayTask
sampleInterval_sec	GatewayServer/old_back/GatewayServer.h	/^	static const DWORD sampleInterval_sec = sampleInterval\/1000;$/;"	m	class:GatewayTask
satrating	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
save	SceneServer/libscenesserver/CartoonPet.cpp	/^DWORD CartoonPet::save(BYTE * dest)$/;"	f	class:CartoonPet
save	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::save(Cmd::Session::saveType type)$/;"	f	class:CartoonPet
save	SceneServer/libscenesserver/GuardNpc.cpp	/^DWORD GuardNpc::save(BYTE * dest)$/;"	f	class:GuardNpc
save	SceneServer/libscenesserver/Horse.cpp	/^int Horse::save(BYTE *d)$/;"	f	class:Horse
save	SceneServer/libscenesserver/Quest.cpp	/^bool UserVar::save() const$/;"	f	class:UserVar
save	SceneServer/libscenesserver/Quest.cpp	/^int Quest::save(SceneUser& user,BYTE* dest)$/;"	f	class:Quest
save	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::save(BYTE* dest) const$/;"	f	class:QuestList
save	SceneServer/libscenesserver/Quest.cpp	/^int UserVar::VAR::save(BYTE* dest) const$/;"	f	class:UserVar::VAR
save	SceneServer/libscenesserver/Quest.cpp	/^int Vars::save(BYTE* dest) const$/;"	f	class:Vars
save	SceneServer/libscenesserver/Scene.cpp	/^bool StaticScene::save()$/;"	f	class:StaticScene
save	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
save	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
save	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^bool GangScene::save()$/;"	f	class:GangScene
save	SceneServer/libscenesserver/zObject.cpp	/^int StorePack::save(BYTE* dest)$/;"	f	class:StorePack
save	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::save()$/;"	f	class:CCountryM
save	base/x_simple_db_table.cpp	/^bool x_simple_db_table::save()$/;"	f	class:x_simple_db_table
save	tmp/MiniServer/MiniUser.cpp	/^bool MiniUser::save()$/;"	f	class:MiniUser
saveAdopt	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
saveCallBack	tmp/MiniServer/MiniUserManager.cpp	/^  saveCallBack(BYTE g=0)$/;"	f	struct:saveCallBack
saveCallBack	tmp/MiniServer/MiniUserManager.cpp	/^struct saveCallBack : public execEntry<MiniUser>$/;"	s	file:
saveCharbase	RecordServer/RecordUser.cpp	/^bool RecordUser::saveCharbase(){$/;"	f	class:RecordUser
saveCharbase	RecordServer/RecordUser.cpp	/^bool RecordUser::saveCharbase(const Cmd::Record::t_WriteUser_SceneRecord * rev){$/;"	f	class:RecordUser
saveGroup	tmp/MiniServer/MiniServer.h	/^    BYTE saveGroup;$/;"	m	class:MiniUserManager
saveGroup	tmp/MiniServer/MiniUserManager.cpp	/^  BYTE saveGroup;$/;"	m	struct:saveCallBack	file:
saveGuard	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
savePkMode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser::__anon84::__anon85
saveSkillStatus	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
save_timer	SceneServer/libscenesserver/Quest.cpp	/^int Vars::save_timer(BYTE* dest) const$/;"	f	class:Vars
say	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::phaseDefine
scene	GatewayServer/old_back/GatewayServer.h	/^	SceneClient *scene;$/;"	m	class:GateUser
scene	SceneServer/libscenesserver/Scene.cpp	/^  Scene *scene;$/;"	m	struct:RemoveSceneObjectCallBack	file:
scene	SceneServer/libscenesserver/Scene.cpp	/^  Scene *scene;$/;"	m	struct:UpdateSceneObjectCallBack	file:
scene	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
scene	SessionServer/libsessionserver/SessionServer.h	/^    SceneSession *scene;$/;"	m	class:UserSession
scene	tmp/MiniServer/MiniServer.h	/^    MiniTask *scene;$/;"	m	class:MiniUser
sceneClientPool	GatewayServer/old_back/GatewayServer.h	/^	x_tcp_clientTaskPool *sceneClientPool;$/;"	m	class:SceneClientManager
sceneExp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
sceneID	GatewayServer/old_back/GatewayServer.h	/^	DWORD sceneID;$/;"	m	class:GateUser
sceneMapID	SessionServer/libsessionserver/SessionServer.h	/^	std::vector<SceneMapData> sceneMapID;$/;"	m	class:CQueuingManager
sceneServerID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_UserLogin_Gateway
sceneTaskList	SessionServer/libsessionserver/SessionServer.h	/^    TaskContainer sceneTaskList;$/;"	m	class:SessionTaskManager
sceneTaskSet	SceneServer/libscenesserver/SceneServer1.h	/^    SceneTaskHashmap sceneTaskSet;$/;"	m	class:SceneTaskManager
sceneTaskSet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneTaskManager
sceneTeamID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
sceneTempID	GatewayServer/old_back/GatewayServer.h	/^	DWORD sceneTempID;$/;"	m	class:GateUser
sceneUniqeID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
sceneWH	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
sceneentrystate	base/include/srvEngine.h	/^	SceneEntryState sceneentrystate;$/;"	m	struct:zSceneEntry
sceneentrytype	base/include/srvEngine.h	/^	const SceneEntryType sceneentrytype;$/;"	m	struct:zSceneEntry
sceneid	SceneServer/libscenesserver/TeamManager.cpp	/^  DWORD sceneid;$/;"	m	struct:ExpSizeExec	file:
school	SessionServer/libsessionserver/SessionServer.h	/^    CSchool      *school;$/;"	m	class:CSchoolMember
schoolName	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createSchool_SceneSession
schoolTreeCallback	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::schoolTreeCallback(DWORD level,DWORD tgLevel,bool &condition,CSendSchoolCallback &callback,BYTE &tag)$/;"	f	class:CSchoolMember
schoolid	SessionServer/libsessionserver/SessionServer.h	/^    DWORD schoolid;$/;"	m	class:UserSession
schoolid	base/include/csCommon.h	/^/;"	m	struct:CharBase
scm	SessionServer/libsessionserver/SessionServer.h	/^    static SessionChannelManager * scm;$/;"	m	class:SessionChannelManager
score	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniGameScore
score	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserData
score	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stGameResultCommonMiniGameCmd
score	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stUserScoreCommonMiniGameCmd
score	tmp/MiniServer/MiniServer.h	/^    Cmd::MiniGameScore score;$/;"	m	class:MiniUser
screenMax	GatewayServer/old_back/GatewayServer.h	/^	const DWORD screenMax;$/;"	m	class:ScreenIndex
screenMax	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
screenx	GatewayServer/old_back/GatewayServer.h	/^	const DWORD screenx;$/;"	m	class:ScreenIndex
screenx	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
screeny	GatewayServer/old_back/GatewayServer.h	/^	const DWORD screeny;$/;"	m	class:ScreenIndex
screeny	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
script	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::bossDefine
scriptID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
scriptMessageFilter	SceneServer/libscenesserver/scriptTickTask.h	/^class scriptMessageFilter$/;"	c
scriptTask	SceneServer/libscenesserver/scriptTickTask.cpp	/^scriptTask::scriptTask(const char* _funcName,time_t _elapse,SceneUser *_user):funcName(_funcName)$/;"	f	class:scriptTask
scriptTask	SceneServer/libscenesserver/scriptTickTask.h	/^struct scriptTask$/;"	s
scriptTaskManagement	SceneServer/libscenesserver/scriptTickTask.h	/^	scriptTaskManagement():id(1){ }$/;"	f	class:scriptTaskManagement
scriptTaskManagement	SceneServer/libscenesserver/scriptTickTask.h	/^class scriptTaskManagement : public SingletonBase<scriptTaskManagement>$/;"	c
sculpt	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
se_	SuperServer/ServerTask.h	/^		Cmd::Super::ServerEntry se_;$/;"	m	class:ServerTask
se_	SuperServer/SuperServer.h	/^	Cmd::Super::ServerEntry se_;$/;"	m	class:SuperService
searchRecord	SessionServer/libsessionserver/NpcDare.cpp	/^CNpcDareObj* CNpcDareM::searchRecord(DWORD dwCountryID,DWORD dwMapID,DWORD dwNpcID)$/;"	f	class:CNpcDareM
searchSept	SessionServer/libsessionserver/NpcDare.cpp	/^bool CNpcDareM::searchSept(DWORD septid)$/;"	f	class:CNpcDareM
searchSeptHold	SessionServer/libsessionserver/NpcDare.cpp	/^CNpcDareObj* CNpcDareM::searchSeptHold(DWORD septid)$/;"	f	class:CNpcDareM
seat	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserPosition
seatID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniSeatData
seatID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stEnterGameCommonMiniGameCmd
seatID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stEnterGameRetCommonMiniGameCmd
seatID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stToggleSeatCommonMiniGameCmd
seatList	tmp/MiniServer/MiniServer.h	/^    std::vector<Seat> seatList;$/;"	m	class:MiniGame
sec	base/include/zTime.h	/^	time_t sec() const$/;"	f	class:zTime
sec	base/include/zTime.h	/^	uint32_t sec() const$/;"	f	class:zRTime
second	base/include/srvEngine.h	/^	unsigned int second;$/;"	m	class:zRegex
secondID	SessionServer/libsessionserver/SessionServer.h	/^    DWORD secondID;    \/\/ ∑¿ ÿ∑Ω…Áª·πÿœµID2$/;"	m	class:CDare
secondTargetID	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD secondTargetID;$/;"	m	class:SceneNpc
secondTargetType	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD secondTargetType;$/;"	m	class:SceneNpc
secretkey	base/recordcmd.h	/^			DWORD secretkey;$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
secs	base/include/zTime.h	/^	time_t secs;$/;"	m	class:zTime
selectByLakh	base/src/zMisc.cpp	/^bool selectByLakh(const uint32_t lakh)$/;"	f
selectByOdds	base/src/zMisc.cpp	/^bool selectByOdds(const uint32_t upNum,const uint32_t downNum)$/;"	f
selectByOneHM	base/src/zMisc.cpp	/^bool selectByOneHM(const uint32_t lakh)$/;"	f
selectByPercent	base/src/zMisc.cpp	/^bool selectByPercent(const uint32_t percent)$/;"	f
selectByTenTh	base/src/zMisc.cpp	/^bool selectByTenTh(const uint32_t tenth)$/;"	f
selectByt_Odds	base/src/zMisc.cpp	/^bool selectByt_Odds(const odds_t &odds)$/;"	f
selectServerState	GatewayServer/old_back/GatewayServer.h	/^	void selectServerState()$/;"	f	class:GateUser
selectState	GatewayServer/old_back/GatewayServer.h	/^	void selectState()$/;"	f	class:GateUser
selected	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
self_t	SceneServer/libscenesserver/SceneServer1.h	/^  typedef ProductFactory<I,C> self_t;$/;"	t	class:ProductFactory
self_t	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::EventManager
self_t	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::GlobalVarImpl
sell_ob	SceneServer/libscenesserver/Trade.cpp	/^PrivateStore::SellInfo* PrivateStore::sell_ob(DWORD id)$/;"	f	class:PrivateStore
semipetList	SceneServer/libscenesserver/SceneServer1.h	/^  std::list<ScenePet *> semipetList;\/\/∞Î≥ËŒÔ¡–±Ì$/;"	m	class:SceneNpc
send	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:sendAllObjectListToUser	file:
send	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	class:sendAllObjectToUser	file:
send	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:SendStateWarToNineEveryOne	file:
send	tmp/MiniServer/Top100.cpp	/^void Top100::send(MiniUser *u)$/;"	f	class:Top100
sendActiveStateToScene	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
sendActiveStateToScene	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareCountry
sendActiveStateToScene	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
sendActiveStateToScene	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
sendActiveStateToScene	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::sendActiveStateToScene(UserSession* pUser)$/;"	f	class:CDareSept
sendActiveStateToScene	SessionServer/libsessionserver/Gem.cpp	/^void CGem::sendActiveStateToScene(UserSession* pUser)$/;"	f	class:CGem
sendActiveStateToScene	SessionServer/libsessionserver/SessionServer.h	/^    virtual void sendActiveStateToScene(UserSession* pUser)$/;"	f	class:CDareSeptNpc
sendActiveStateToScene	SessionServer/libsessionserver/SessionServer.h	/^    virtual void sendActiveStateToScene(UserSession* pUser)$/;"	f	class:CDareUnionCity
sendAllBlackListToGateway	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::sendAllBlackListToGateway()$/;"	f	class:CRelationManager
sendAllCmd	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::sendAllCmd(const void *cmd,const DWORD len)$/;"	f	class:SessionChannel
sendAllInfo	SceneServer/libscenesserver/Dice.cpp	/^bool Dice::sendAllInfo(const char *pattern,...)$/;"	f	class:Dice
sendAllInfo	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::sendAllInfo(int type,const char* mess,...)$/;"	f	class:SessionChannel
sendAllObjectListToUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	c	file:
sendAllObjectListToUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:sendAllObjectListToUser
sendAllObjectToUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	c	file:
sendAllSkillToUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	c	file:
sendAllSkillToUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:sendAllSkillToUser
sendAntiAtt	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareCountry
sendAntiAtt	SessionServer/libsessionserver/SessionServer.h	/^    virtual void sendAntiAtt(){};$/;"	f	class:CDare
sendAuctionItem	SessionServer/libsessionserver/AuctionService.cpp	/^bool AuctionService::sendAuctionItem(DWORD h,DWORD auctionID,BYTE newState,bool toOwner)$/;"	f	class:AuctionService
sendBlackListToGateway	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::sendBlackListToGateway(const char *name,const BYTE oper)$/;"	f	class:CRelationManager
sendBulletinToMe	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendBulletinToMe()$/;"	f	class:CSchoolMember
sendCallCmdToAllMemberScene	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendCallCmdToAllMemberScene(Cmd::Session::t_GoTo_Leader_Check_SceneSession* ptCmd,const DWORD cmdLen,DWORD expect)$/;"	f	class:CSept
sendCallCmdToAllMemberScene	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendChangedUserData	SceneServer/libscenesserver/ScenePk.cpp	/^bool  ScenePk::sendChangedUserData(SceneUser *pUser)$/;"	f	class:ScenePk
sendChatMessages	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendChatMessages(const Cmd::stChannelChatUserCmd *rev,const DWORD cmdLen)$/;"	f	class:CSchoolMember
sendChatToMyFriend	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::sendChatToMyFriend(const Cmd::stChannelChatUserCmd *pCmd,const DWORD cmdLen)$/;"	f	class:CRelationManager
sendCmd	BillServer/BillUser.h	/^    bool sendCmd(const void *pstrCmd,const int nCmdLen)$/;"	f	class:BillUser
sendCmd	BillServer/old_back/BillServer.h	/^    bool sendCmd(const void *pstrCmd,const int nCmdLen)$/;"	f	class:BillUser
sendCmd	GatewayServer/old_back/GateUser.cpp	/^bool GateUser::sendCmd(const void *pstrCmd,const DWORD nCmdLen,const DWORD type,const char *strName,const bool hasPacked)$/;"	f	class:GateUser
sendCmd	SessionServer/libsessionserver/SessionServer.h	/^    bool sendCmd(const void *pstrCmd,const int nCmdLen) const$/;"	f	class:Session
sendCmd	SessionServer/libsessionserver/SessionServer.h	/^  Cmd::t_NullCmd* sendCmd;$/;"	m	struct:OneCountryScene
sendCmd	SessionServer/libsessionserver/SessionTask.cpp	/^  Cmd::stNullUserCmd* sendCmd;$/;"	m	struct:OneCountryUserSessionAction	file:
sendCmd	base/include/x_socket.cpp	/^bool x_socket::sendCmd(const void* pstrCmd, const int nCmdLen,const bool buffer)$/;"	f	class:x_socket
sendCmd	base/src/tcp_socket.h	/^	size_t sendCmd(const void* data, const size_t len) {$/;"	f	class:tcp_socket
sendCmd	base/src/x_tcp_client.cpp	/^bool x_tcp_buffer_client::sendCmd(const void *pstrCmd,const int nCmdLen)$/;"	f	class:x_tcp_buffer_client
sendCmd	base/src/x_tcp_client.cpp	/^bool x_tcp_client::sendCmd(const void *pstrCmd,const int nCmdLen)$/;"	f	class:x_tcp_client
sendCmd	base/src/x_tcptask.cpp	/^bool x_tcptask::sendCmd(const void *pstrCmd,int nCmdLen)$/;"	f	class:x_tcptask
sendCmd	base/src/zTCPClientTask.cpp	/^bool x_tcp_clientTask::sendCmd(const void *pstrCmd,const int nCmdLen)$/;"	f	class:x_tcp_clientTask
sendCmd	base/tcp_client.h	/^	size_t sendCmd(const void* data, const size_t len) {$/;"	f	class:tcp_client
sendCmd	base/tcp_task.cpp	/^bool tcp_task::sendCmd(const void* data, const int len) {$/;"	f	class:tcp_task
sendCmdByCondition	SessionServer/libsessionserver/SessionManager.cpp	/^void UserSessionManager::sendCmdByCondition(const Cmd::stNullUserCmd *pstrCmd,const DWORD nCmdLen,Compare* compare)$/;"	f	class:UserSessionManager
sendCmdNoPack	base/include/x_socket.cpp	/^bool x_socket::sendCmdNoPack(const void* pstrCmd,const int nCmdLen,const bool buffer)$/;"	f	class:x_socket
sendCmdNoPack	base/src/x_tcptask.cpp	/^bool x_tcptask::sendCmdNoPack(const void *pstrCmd,int nCmdLen)$/;"	f	class:x_tcptask
sendCmdToAll	GatewayServer/old_back/ScreenIndex.cpp	/^void ScreenIndex::sendCmdToAll(const void *pstrCmd,const int nCmdLen)$/;"	f	class:ScreenIndex
sendCmdToAll	SceneServer/libscenesserver/Dice.cpp	/^bool Dice::sendCmdToAll(const void *cmd,const DWORD len)$/;"	f	class:Dice
sendCmdToAll	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::sendCmdToAll(const void *cmd,int len)$/;"	f	class:SessionChannel
sendCmdToAll	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::sendCmdToAll(const void *cmd,const DWORD len) const$/;"	f	class:MiniGame
sendCmdToAll	tmp/MiniServer/MiniRoom.cpp	/^void MiniRoom::sendCmdToAll(const void *cmd,const DWORD len)$/;"	f	class:MiniRoom
sendCmdToAllDarePlayer	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareCountry
sendCmdToAllDarePlayer	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
sendCmdToAllDarePlayer	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
sendCmdToAllDarePlayer	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::sendCmdToAllDarePlayer(Cmd::Session::t_enterWar_SceneSession* cmd,DWORD cmdLen,DWORD relationID)$/;"	f	class:CDareSept
sendCmdToAllDarePlayer	SessionServer/libsessionserver/SessionServer.h	/^    virtual void sendCmdToAllDarePlayer(Cmd::Session::t_enterWar_SceneSession* cmd,$/;"	f	class:CDareUnionCity
sendCmdToAllDarePlayer	SessionServer/libsessionserver/SessionServer.h	/^    virtual void sendCmdToAllDarePlayer(Cmd::Session::t_enterWar_SceneSession* cmd,DWORD cmdLen,DWORD relationID)$/;"	f	class:CDareSeptNpc
sendCmdToAllMember	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendCmdToAllMember(const Cmd::stNullUserCmd * ptCmd,const DWORD nCmdLen )$/;"	f	class:CSept
sendCmdToAllMember	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendCmdToAllMemberExcept	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendCmdToAllMemberExcept(const Cmd::stNullUserCmd * ptCmd,const DWORD nCmdLen,const char * except)$/;"	f	class:CSept
sendCmdToAllMemberScene	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::sendCmdToAllMemberScene(Cmd::Session::t_enterWar_SceneSession* ptEnterWarCmd,const DWORD cmdLen)$/;"	f	class:CSchool
sendCmdToAllMemberScene	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendCmdToAllMemberScene(Cmd::Session::t_enterWar_SceneSession* ptEnterWarCmd,const DWORD cmdLen)$/;"	f	class:CSept
sendCmdToAllMemberScene	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendCmdToBill	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendCmdToCountry	GatewayServer/old_back/GateUserManager.cpp	/^void GateUserManager::sendCmdToCountry(const DWORD country,const void *pstrCmd,const DWORD nCmdLen)$/;"	f	class:GateUserManager
sendCmdToCountry	SessionServer/libsessionserver/SessionTaskManager.cpp	/^bool SessionTaskManager::sendCmdToCountry(DWORD country,const void *pstrCmd,int nCmdLen)$/;"	f	class:SessionTaskManager
sendCmdToDirect	GatewayServer/old_back/ScreenIndex.cpp	/^void ScreenIndex::sendCmdToDirect(const zPosI posi,const int direct,const void *pstrCmd,const int nCmdLen,unsigned short dupIndex)$/;"	f	class:ScreenIndex
sendCmdToDirect	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::sendCmdToDirect(const zPosI posi,const int direct,const void *pstrCmd,const int nCmdLen,unsigned short dupIndex)$/;"	f	class:Scene
sendCmdToIdle	tmp/MiniServer/MiniRoom.cpp	/^void MiniRoom::sendCmdToIdle(const void *cmd,const DWORD len)$/;"	f	class:MiniRoom
sendCmdToItsFriendAndFamily	SessionServer/libsessionserver/CartoonPetService.cpp	/^void CartoonPetService::sendCmdToItsFriendAndFamily(DWORD id,const char * name,const void *cmd,DWORD len,const char * except)$/;"	f	class:CartoonPetService
sendCmdToMe	BillServer/BillUser.h	/^    bool sendCmdToMe(const void *pstrCmd,const int nCmdLen)$/;"	f	class:BillUser
sendCmdToMe	BillServer/old_back/BillServer.h	/^    bool sendCmdToMe(const void *pstrCmd,const int nCmdLen)$/;"	f	class:BillUser
sendCmdToMe	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendCmdToMe	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendCmdToMe(const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CSchoolMember
sendCmdToMe	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::sendCmdToMe(const Cmd::stNullUserCmd *pstrCmd,const DWORD nCmdLen)$/;"	f	class:CSeptMember
sendCmdToMe	SessionServer/libsessionserver/Session.cpp	/^void UserSession::sendCmdToMe(const void *pstrCmd,const DWORD nCmdLen) const $/;"	f	class:UserSession
sendCmdToMe	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
sendCmdToMe	tmp/MiniServer/MiniUser.cpp	/^bool MiniUser::sendCmdToMe(const void *pstrCmd,const int nCmdLen) const$/;"	f	class:MiniUser
sendCmdToMyFriend	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::sendCmdToMyFriend(const void *pCmd,const DWORD cmdLen,bool sendMe)$/;"	f	class:CRelationManager
sendCmdToMyFriendExcept	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::sendCmdToMyFriendExcept(const void *pCmd,const DWORD cmdLen,bool sendMe,const char * except)$/;"	f	class:CRelationManager
sendCmdToNine	GatewayServer/old_back/ScreenIndex.cpp	/^void ScreenIndex::sendCmdToNine(const DWORD posi,const void *pstrCmd,const int nCmdLen,unsigned short dupIndex)$/;"	f	class:ScreenIndex
sendCmdToNine	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::sendCmdToNine(const zPosI posi,const void *pstrCmd,const int nCmdLen,unsigned short dupIndex)$/;"	f	class:Scene
sendCmdToNineExceptMe	GatewayServer/old_back/ScreenIndex.cpp	/^void ScreenIndex::sendCmdToNineExceptMe(const DWORD posi,const DWORD exceptme_id,const void *pstrCmd,const int nCmdLen)$/;"	f	class:ScreenIndex
sendCmdToNineExceptMe	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::sendCmdToNineExceptMe(zSceneEntry *pEntry,const zPosI posi,const void *pstrCmd,const int nCmdLen)$/;"	f	class:Scene
sendCmdToNineUnWatch	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::sendCmdToNineUnWatch(const zPosI posi,const void *pstrCmd,const int nCmdLen)$/;"	f	class:Scene
sendCmdToReverseDirect	GatewayServer/old_back/ScreenIndex.cpp	/^void ScreenIndex::sendCmdToReverseDirect(const zPosI posi,const int direct,const void *pstrCmd,const int nCmdLen,unsigned short dupIndex)$/;"	f	class:ScreenIndex
sendCmdToReverseDirect	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::sendCmdToReverseDirect(const zPosI posi,const int direct,const void *pstrCmd,const int nCmdLen,unsigned short dupIndex)$/;"	f	class:Scene
sendCmdToScene	BillServer/BillTask.cpp	/^bool BillTask::sendCmdToScene(const uint32_t id,const void *pstrCmd,const DWORD nCmdLen) {$/;"	f	class:BillTask
sendCmdToScene	BillServer/BillUser.h	/^    bool sendCmdToScene(const void *pstrCmd,const int nCmdLen)$/;"	f	class:BillUser
sendCmdToScene	BillServer/old_back/BillServer.h	/^    bool sendCmdToScene(const void *pstrCmd,const int nCmdLen)$/;"	f	class:BillUser
sendCmdToScene	BillServer/old_back/BillTask.cpp	/^bool BillTask::sendCmdToScene(DWORD id,const void *pstrCmd,const DWORD nCmdLen)$/;"	f	class:BillTask
sendCmdToScene	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::sendCmdToScene(const void *pstrCmd,const int nCmdLen,unsigned short dupIndex)$/;"	f	class:Scene
sendCmdToScene	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::sendCmdToScene(DWORD id,const void *pstrCmd,const DWORD nCmdLen)$/;"	f	class:MiniTask
sendCmdToScene	tmp/MiniServer/MiniUser.cpp	/^bool MiniUser::sendCmdToScene(const void *pstrCmd,const int nCmdLen) const$/;"	f	class:MiniUser
sendCmdToSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::sendCmdToSchool(const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:CSchool
sendCmdToSelected	SceneServer/libscenesserver/SceneEntryPk.cpp	/^void SceneEntryPk::sendCmdToSelected(const void *pstrCmd,const DWORD nCmdLen)$/;"	f	class:SceneEntryPk
sendCmdToSuperServer	base/x_subnetservice.cpp	/^bool x_subnetservice::sendCmdToSuperServer(const void *pstrCmd,const int nCmdLen)$/;"	f	class:x_subnetservice
sendCmdToTeacherGroup	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendCmdToTeacherGroup(const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen,bool exceptMe)$/;"	f	class:CSchoolMember
sendCmdToTeam	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::sendCmdToTeam(SceneUser *user,void *cmd,DWORD cmdLen)$/;"	f	class:TeamManager
sendCmdToUser	BillServer/BillTask.cpp	/^bool BillTask::sendCmdToUser(const uint32_t id,const void *pstrCmd,const DWORD nCmdLen) {$/;"	f	class:BillTask
sendCmdToUser	BillServer/old_back/BillTask.cpp	/^bool BillTask::sendCmdToUser(DWORD id,const void *pstrCmd,const DWORD nCmdLen)$/;"	f	class:BillTask
sendCmdToUser	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::sendCmdToUser(DWORD id,const void *pstrCmd,const DWORD nCmdLen)$/;"	f	class:MiniTask
sendCmdToWatchTrap	SceneServer/libscenesserver/Scene.cpp	/^bool Scene::sendCmdToWatchTrap(const zPosI posi,const void *pstrCmd,const int nCmdLen)$/;"	f	class:Scene
sendCmdToWorld	SessionServer/libsessionserver/SessionTaskManager.cpp	/^bool SessionTaskManager::sendCmdToWorld(const void *pstrCmd,int nCmdLen)$/;"	f	class:SessionTaskManager
sendCountry	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::sendCountry(DWORD countryID,const void *cmd,DWORD len)$/;"	f	class:SessionChannel
sendCountryInfo	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::sendCountryInfo(int type,DWORD countryID,const char* mess,...)$/;"	f	class:SessionChannel
sendDareListToUser	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::sendDareListToUser(const UserSession *pUser)$/;"	f	class:CSeptM
sendData	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::sendData()$/;"	f	class:CartoonPet
sendData	SceneServer/libscenesserver/Horse.cpp	/^void Horse::sendData()$/;"	f	class:Horse
sendData	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::sendData()$/;"	f	class:ScenePet
sendDataToUser	BillServer/old_back/StockConsign.cpp	/^bool ConsignHistoryManager::sendDataToUser(BillUser *pUser,DWORD begintime,DWORD num)$/;"	f	class:ConsignHistoryManager
sendDestroyNotifyToMe	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendDestroyNotifyToMe()$/;"	f	class:CSchoolMember
sendDistributeSeptExpToScene	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendDistributeSeptExpToScene(const DWORD dwUserID,const Cmd::Session::t_distributeSeptExp_SceneSession * ptCmd)$/;"	f	class:CSept
sendDupChangeCmdToGate	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendExitToAll	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizWorld::sendExitToAll()$/;"	f	class:CQuizWorld
sendExitToAll	SessionServer/libsessionserver/SessionServer.h	/^    virtual void sendExitToAll(){};$/;"	f	class:CQuiz
sendExploitSort	SessionServer/libsessionserver/SessionManager.cpp	/^void UserSessionManager::sendExploitSort(UserSession* pUser)$/;"	f	class:UserSessionManager
sendFirstFiveToUser	BillServer/old_back/StockConsign.cpp	/^bool Consign::sendFirstFiveToUser(BillUser *pUser)$/;"	f	class:Consign
sendFriendDegree	SessionServer/libsessionserver/Session.cpp	/^void UserSession::sendFriendDegree(Cmd::Session::t_RequestFriendDegree_SceneSession *rev)$/;"	f	class:UserSession
sendFriendDegreeToSession	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::sendFriendDegreeToSession()$/;"	f	class:TeamManager
sendGameScore	tmp/MiniServer/MiniUser.cpp	/^void MiniUser::sendGameScore(MiniUser *u)$/;"	f	class:MiniUser
sendGiftEquip	SceneServer/libscenesserver/ScenePk.cpp	/^void SceneUser::sendGiftEquip(WORD level)$/;"	f	class:SceneUser
sendGmChat	SessionServer/libsessionserver/Session.cpp	/^void UserSession::sendGmChat(int type,const char *pattern,...) const$/;"	f	class:UserSession
sendGold	SessionServer/libsessionserver/SessionServer.h	/^  DWORD sendGold;$/;"	m	struct:mailContentInfo
sendGoldToMember	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendGoldToMember(DWORD userID,DWORD num)$/;"	f	class:CSept
sendGoldToMember	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::sendGoldToMember(DWORD userID,DWORD num)$/;"	f	class:CSeptMember
sendGraceSort	SessionServer/libsessionserver/SessionManager.cpp	/^void UserSessionManager::sendGraceSort(UserSession* pUser)$/;"	f	class:UserSessionManager
sendHpExp	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::sendHpExp()$/;"	f	class:CartoonPet
sendHpExp	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::sendHpExp()$/;"	f	class:ScenePet
sendInfoToAll	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::sendInfoToAll(const int type,const char *info,...) const$/;"	f	class:MiniGame
sendInfomationToMe	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendInfomationToMe(CSendSchoolCallback *callback)$/;"	f	class:CSchoolMember
sendInitToMe	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendListToMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSendSchoolCallback::sendListToMember(CSchoolMember *member)$/;"	f	class:CSendSchoolCallback
sendListToUser	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::sendListToUser(const UserSession *pUser)$/;"	f	class:CSeptM
sendMail	SessionServer/libsessionserver/MailService.cpp	/^bool MailService::sendMail(Cmd::Session::t_sendMail_SceneSession & sm)$/;"	f	class:MailService
sendMail	SessionServer/libsessionserver/MailService.cpp	/^bool MailService::sendMail(DWORD h,Cmd::Session::t_sendMail_SceneSession & sm)$/;"	f	class:MailService
sendMeToNine	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::sendMeToNine()$/;"	f	class:ScenePet
sendMeToNine	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendMeToNineDirect	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendMessageToMe	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
sendMessageToMe	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::sendMessageToMe(int type,const char *message)$/;"	f	class:CSeptMember
sendMessageToMe	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
sendMiniInfo	tmp/MiniServer/MiniUser.cpp	/^void MiniUser::sendMiniInfo(int type,const char *info,...) const$/;"	f	class:MiniUser
sendMoney	SessionServer/libsessionserver/SessionServer.h	/^  DWORD sendMoney;$/;"	m	struct:mailContentInfo
sendMoneyMail	SessionServer/libsessionserver/MailService.cpp	/^bool MailService::sendMoneyMail(char * fromName,DWORD fromID,char * toName,DWORD toID,DWORD money,char * text,DWORD h,BYTE type,DWORD itemID)$/;"	f	class:MailService
sendNineToMe	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendNineToMeDirect	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendNotifyToMember	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMemberListCallback::sendNotifyToMember()$/;"	f	class:CSchoolMemberListCallback
sendNotifyToScene	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelation::sendNotifyToScene()$/;"	f	class:CRelation
sendNotifyToScene	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendNotifyToScene()$/;"	f	class:CSchoolMember
sendNpcDareCmdToScene	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendNpcDareCmdToScene(Cmd::Session::t_NpcDare_NotifyScene_SceneSession* pCmd,const DWORD cmdLen)$/;"	f	class:CSept
sendNpcDareCmdToScene	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::sendNpcDareCmdToScene(const DWORD septID,Cmd::Session::t_NpcDare_NotifyScene_SceneSession* ptCmd,DWORD nCmdLen)$/;"	f	class:CSeptM
sendOnlineStatusMessage	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendOnlineStatusMessage(BYTE onlineStatus)$/;"	f	class:CSchoolMember
sendPetDataToNine	SceneServer/libscenesserver/SceneEntryPk.cpp	/^void SceneEntryPk::sendPetDataToNine()$/;"	f	class:SceneEntryPk
sendPetDataToNine	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::sendPetDataToNine()$/;"	f	class:ScenePet
sendPrison	SessionServer/libsessionserver/SessionServer.h	/^    DWORD sendPrison; \/\/π˙Õıπÿº‡”¸$/;"	m	class:CCountry
sendPrivate	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::sendPrivate(UserSession * pUser,const char * fromName,const char* mess,...)$/;"	f	class:SessionChannel
sendPrivateChatToFriend	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::sendPrivateChatToFriend(const Cmd::stChannelChatUserCmd *pCmd,const DWORD cmdLen)$/;"	f	class:CRelationManager
sendRawData	base/include/x_socket.cpp	/^int x_socket::sendRawData(const void *pBuffer, const int nSize)$/;"	f	class:x_socket
sendRawDataIM	base/include/x_socket.cpp	/^bool x_socket::sendRawDataIM(const void* pBuffer, const int nSize)$/;"	f	class:x_socket
sendRawData_NoPoll	base/include/x_socket.cpp	/^int x_socket::sendRawData_NoPoll(const void* pBuffer, const int nSize)$/;"	f	class:x_socket
sendRelationList	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::sendRelationList()$/;"	f	class:CRelationManager
sendRoomData	tmp/MiniServer/MiniHall.cpp	/^void MiniHall::sendRoomData(MiniUser *u)$/;"	f	class:MiniHall
sendRoomToUser	tmp/MiniServer/MiniRoom.cpp	/^void MiniRoom::sendRoomToUser(MiniUser *u)$/;"	f	class:MiniRoom
sendSceneCmdToBill	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
sendSchoolChatMessages	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::sendSchoolChatMessages(const UserSession *pUser,const Cmd::stChannelChatUserCmd *rev,const DWORD cmdLen)$/;"	f	class:CSchoolM
sendSchoolPrivateChatMessages	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::sendSchoolPrivateChatMessages(const UserSession *pUser,const Cmd::stChannelChatUserCmd *rev,const DWORD cmdLen)$/;"	f	class:CSchoolM
sendSelectStates	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
sendSelfDataToUser	BillServer/old_back/StockConsign.cpp	/^bool ConsignHistoryManager::sendSelfDataToUser(BillUser *pUser,DWORD begintime,DWORD num)$/;"	f	class:ConsignHistoryManager
sendSeptChatMessages	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::sendSeptChatMessages(const UserSession *pUser,const Cmd::stChannelChatUserCmd *pCmd,const DWORD cmdLen)$/;"	f	class:CSeptM
sendSeptInfoToAll	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendSeptInfoToAll()$/;"	f	class:CSept
sendSeptInfoToUser	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendSeptInfoToUser(UserSession *pUser)$/;"	f	class:CSept
sendSeptMemberList	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendSeptMemberList(UserSession *pUser)$/;"	f	class:CSept
sendSeptNotify	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendSeptNotify(const char* message,...)$/;"	f	class:CSept
sendSeptNotify	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::sendSeptNotify(const DWORD septID,const char* message,...)$/;"	f	class:CSeptM
sendSeptPrivateChatMessages	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::sendSeptPrivateChatMessages(const UserSession *pUser,const Cmd::stChannelChatUserCmd *rev,const DWORD cmdLen)$/;"	f	class:CSeptM
sendSeptReputeToAll	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendSeptReputeToAll()$/;"	f	class:CSept
sendSevenStateToMe	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
sendSkill	SceneServer/libscenesserver/ScenePk.cpp	/^void SceneUser::sendSkill(WORD wdSkillID,BYTE level,DWORD target,BYTE attackType,BYTE action)$/;"	f	class:SceneUser
sendStatusChange	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::sendStatusChange(const CRelation *relation,const BYTE byState)$/;"	f	class:CRelationManager
sendSys	tmp/MiniServer/MiniUser.cpp	/^void MiniUser::sendSys(int type,const char *pattern,...) const$/;"	f	class:MiniUser
sendSysChat	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::sendSysChat(int type,const char *pattern,...)$/;"	f	class:CSchoolMember
sendSysChat	SessionServer/libsessionserver/Session.cpp	/^void UserSession::sendSysChat(int type,const char *pattern,...) const$/;"	f	class:UserSession
sendTextMail	SessionServer/libsessionserver/MailService.cpp	/^bool MailService::sendTextMail(char * fromName,DWORD fromID,char * toName,DWORD toID,char * text,DWORD h,BYTE type)$/;"	f	class:MailService
sendTo	GatewayServer/old_back/SceneClientManager.cpp	/^bool SceneClientManager::sendTo(const DWORD tempid,const void *pstrCmd,int nCmdLen)$/;"	f	class:SceneClientManager
sendTo	SuperServer/FLClientManager.cpp	/^void FLClientManager::sendTo(const WORD tempid,const void *pstrCmd,int nCmdLen)$/;"	f	class:FLClientManager
sendTo	SuperServer/InfoClientManager.cpp	/^bool InfoClientManager::sendTo(const DWORD tempid,const void *pstrCmd,int nCmdLen)$/;"	f	class:InfoClientManager
sendToOthers	SessionServer/libsessionserver/SessionChat.cpp	/^bool SessionChannel::sendToOthers(UserSession *pUser,const Cmd::stChannelChatUserCmd *cmd,DWORD len)$/;"	f	class:SessionChannel
sendUnionDare	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendUnionDare	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
sendUnionInfoToAll	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendUnionInfoToUser	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendUnionManaToAll	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendUnionMemberList	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendUnionNotify	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendUserData	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::sendUserData(UserSession *pUser)$/;"	f	class:CNpcDareM
sendUserSeptData	SessionServer/libsessionserver/Sept.cpp	/^void CSept::sendUserSeptData(const char *pName)$/;"	f	class:CSept
sendUserSeptData	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::sendUserSeptData()$/;"	f	class:CSeptMember
sendUserStateToRoom	tmp/MiniServer/MiniRoom.cpp	/^void MiniRoom::sendUserStateToRoom(MiniUser *u)$/;"	f	class:MiniRoom
sendUserToRoom	tmp/MiniServer/MiniRoom.cpp	/^void MiniRoom::sendUserToRoom(MiniUser *u)$/;"	f	class:MiniRoom
sendUserUnionData	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sendUserUnionData	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
sendUserUnionPrivateData	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
sendVoteListToUser	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::sendVoteListToUser(const UserSession *pUser)$/;"	f	class:CSeptM
sendWaitDataToUser	BillServer/old_back/StockConsign.cpp	/^bool Consign::sendWaitDataToUser(BillUser *pUser)$/;"	f	class:Consign
sendtoTeamCharData	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::sendtoTeamCharData(SceneUser *leader,SceneUser *user)$/;"	f	class:TeamManager
sendtoTeamCharData	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::sendtoTeamCharData(SceneUser *user)$/;"	f	class:TeamManager
sentinel	deps/tinyxml/tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet
sep_groups	base/src/getopt.c	/^  int sep_groups;$/;"	m	struct:hol_help_state	file:
septExp	SessionServer/libsessionserver/SessionServer.h	/^    WORD septExp;$/;"	m	class:UserSession
septMaster	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
septName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
septName	SessionServer/libsessionserver/Sept.cpp	/^    char  septName[MAX_NAMESIZE];           \/\/ º“◊Â√˚≥∆$/;"	m	class:CSeptSort	file:
septSize	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
sept_maxhp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
sept_maxmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
sept_umdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
sept_umdefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
sept_updamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
sept_updefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
septid	SessionServer/libsessionserver/SessionServer.h	/^    DWORD septid;$/;"	m	class:UserSession
septid	SessionServer/libsessionserver/SessionServer.h	/^    DWORD septid;$/;"	m	struct:CUnionMember
septid	base/include/csCommon.h	/^/;"	m	struct:CharBase
septmaster	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
sequenceOK	SuperServer/ServerTask.h	/^		bool sequenceOK;          \/**<  «∑Ò“—æ≠¥¶¿ÌÕÍ≥…¡À∆Ù∂ØÀ≥–Ú *\/$/;"	m	class:ServerTask
serialID	SceneServer/libscenesserver/SceneNpc.cpp	/^DWORD SceneNpc::serialID = SceneNpc::maxUniqueID;$/;"	m	class:SceneNpc	file:
serialID	SceneServer/libscenesserver/SceneServer1.h	/^  static DWORD serialID;$/;"	m	class:SceneNpc
serialNum	tmp/MiniServer/MiniServer.h	/^    DWORD serialNum;\/\/¡¨–¯º∏∏ˆ$/;"	m	class:CardPattern
servantDefine	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills::Rush
servantVector	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
servants	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
server	base/server.cpp	/^server::server(const std::string& address, const std::string& port, io_service_pool& pool, handle_new_task_t task_handle) $/;"	f	class:server
server	base/server.h	/^class server : private boost::noncopyable$/;"	c
server	tmp/base3/server.cpp	/^server::server(const std::string& address, const std::string& port,$/;"	f	class:server
server	tmp/base3/server.hpp	/^class server$/;"	c
server2	tmp/base3/connection.cpp	/^namespace server2 {$/;"	n	namespace:http	file:
server2	tmp/base3/connection.hpp	/^namespace server2 {$/;"	n	namespace:http
server2	tmp/base3/header.hpp	/^namespace server2 {$/;"	n	namespace:http
server2	tmp/base3/io_service_pool.cpp	/^namespace server2 {$/;"	n	namespace:http	file:
server2	tmp/base3/mime_types.cpp	/^namespace server2 {$/;"	n	namespace:http	file:
server2	tmp/base3/mime_types.hpp	/^namespace server2 {$/;"	n	namespace:http
server2	tmp/base3/reply.cpp	/^namespace server2 {$/;"	n	namespace:http	file:
server2	tmp/base3/reply.hpp	/^namespace server2 {$/;"	n	namespace:http
server2	tmp/base3/request.hpp	/^namespace server2 {$/;"	n	namespace:http
server2	tmp/base3/request_handler.cpp	/^namespace server2 {$/;"	n	namespace:http	file:
server2	tmp/base3/request_handler.hpp	/^namespace server2 {$/;"	n	namespace:http
server2	tmp/base3/request_parser.cpp	/^namespace server2 {$/;"	n	namespace:http	file:
server2	tmp/base3/request_parser.hpp	/^namespace server2 {$/;"	n	namespace:http
serverID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_SetScene
serverList	base/x_subnetservice.h	/^	std::deque<Cmd::Super::ServerEntry> serverList;    \/**< ÂÖ≥ËÅîÊúçÂä°Âô®‰ø°ÊÅØÂàóË°®Ôºå‰øùËØÅÊúçÂä°Âô®‰πãÈó¥ÁöÑÈ™åËØÅÂÖ≥Á≥ª *\/$/;"	m	class:x_subnetservice
serverSequence	SuperServer/ServerTask.cpp	/^static boost::unordered_map<int,std::vector<int> > serverSequence;$/;"	v	file:
serverServer	FLServer/FLServer.h	/^	boost::shared_ptr<server> serverServer;$/;"	m	class:FLService
server_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
server_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::UserVar
serverid	RecordServer/RecordUser.h	/^	uint32_t serverid;$/;"	m	class:RecordUser
serviceCallback	base/src/zMNetService.cpp	/^bool zMNetService::serviceCallback()$/;"	f	class:zMNetService
serviceName	base/include/srvEngine.h	/^	std::string serviceName;      \/**< ÁΩëÁªúÊúçÂä°Âô®ÂêçÁß∞ *\/$/;"	m	class:zMNetService
service_gold	GatewayServer/old_back/GatewayServer.cpp	/^bool GatewayService::service_gold=true;$/;"	m	class:GatewayService	file:
service_gold	GatewayServer/old_back/GatewayServer.h	/^	static bool service_gold;$/;"	m	class:GatewayService
service_main	SceneServer/libscenesserver/ScenesServer.cpp	/^int service_main(int argc,char *argv[])$/;"	f
service_main	SessionServer/libsessionserver/SessionServer.cpp	/^int service_main(int argc,char *argv[])$/;"	f
service_stock	GatewayServer/old_back/GatewayServer.cpp	/^bool GatewayService::service_stock=true;$/;"	m	class:GatewayService	file:
service_stock	GatewayServer/old_back/GatewayServer.h	/^	static bool service_stock;$/;"	m	class:GatewayService
service_unavailable	tmp/base3/reply.cpp	/^const char service_unavailable[] =$/;"	m	namespace:http::server2::stock_replies	file:
service_unavailable	tmp/base3/reply.cpp	/^const std::string service_unavailable =$/;"	m	namespace:http::server2::status_strings	file:
service_unavailable	tmp/base3/reply.hpp	/^    service_unavailable = 503$/;"	e	enum:http::server2::reply::status_type
ses	SuperServer/ServerTask.h	/^		Container ses;$/;"	m	class:ServerTask
ses_	SuperServer/SuperServer.h	/^	std::vector<Cmd::Super::ServerEntry> ses_;$/;"	m	class:SuperService
session	GatewayServer/LoginSessionManager.h	/^		t_NewLoginSession session;$/;"	m	struct:LoginSessionManager::LoginSession
session	GatewayServer/old_back/GatewayServer.h	/^		t_NewLoginSession session;$/;"	m	struct:LoginSessionManager::LoginSession
session	base/billcmd.h	/^			t_NewLoginSession session;$/;"	m	struct:Cmd::Bill::t_NewSession_Gateway
session	base/flcmd.h	/^			t_NewLoginSession session;$/;"	m	struct:Cmd::FL::t_NewSession_Session
session	base/supercmd.h	/^			t_NewLoginSession session;$/;"	m	struct:Cmd::Super::t_NewSession_Bill
session	base/supercmd.h	/^			t_NewLoginSession session;$/;"	m	struct:Cmd::Super::t_NewSession_Gateway
sessionClient	GatewayServer/GatewayServer.h	/^		boost::shared_ptr<SessionClient> sessionClient;$/;"	m	class:GatewayService
sessionClient	GatewayServer/old_back/SessionClient.cpp	/^SessionClient *sessionClient = NULL;$/;"	v
sessionClient	SceneServer/SceneServer.h	/^		boost::shared_ptr<SessionClient> sessionClient;$/;"	m	class:SceneService
sessionClient	SceneServer/libscenesserver/SessionClient.cpp	/^SessionClient *sessionClient = NULL;$/;"	v
sessionData	GatewayServer/LoginSessionManager.h	/^	LoginSessionHashmap sessionData;$/;"	m	class:LoginSessionManager
sessionData	GatewayServer/old_back/GatewayServer.h	/^	LoginSessionHashmap sessionData;$/;"	m	class:LoginSessionManager
sessionMap	BillServer/old_back/BillServer.h	/^    BillSessionHashmap sessionMap;$/;"	m	class:BillSessionManager
sessionTaskSet	BillServer/old_back/BillServer.h	/^    BillTaskHashmap sessionTaskSet;$/;"	m	class:BillTaskManager
sessionTaskSet	SessionServer/libsessionserver/SessionServer.h	/^    SessionTaskHashmap sessionTaskSet;$/;"	m	class:SessionTaskManager
sessionTaskSet	tmp/MiniServer/MiniServer.h	/^    MiniTaskHashmap sessionTaskSet;$/;"	m	class:MiniTaskManager
session_timeout_value	BillServer/BillUser.h	/^    static const int session_timeout_value = 10;$/;"	m	class:BillUser
session_timeout_value	BillServer/old_back/BillServer.h	/^    static const int session_timeout_value = 10;$/;"	m	class:BillManager
session_timeout_value	BillServer/old_back/BillServer.h	/^    static const int session_timeout_value = 10;$/;"	m	class:BillUser
set	GatewayServer/old_back/GatewayServer.h	/^	typedef std::set<I> set;$/;"	t	class:CmdChecker
set	SceneServer/libscenesserver/Scene.cpp	/^  typedef std::set<zSceneObject *,std::less<zSceneObject *> > set;$/;"	t	struct:RemoveSceneObjectCallBack	file:
set	SceneServer/libscenesserver/Scene.cpp	/^  typedef std::set<zSceneObject *,std::less<zSceneObject *> > set;$/;"	t	struct:UpdateSceneObjectCallBack	file:
set	base/include/srvEngine.h	/^	bool set(const char *objects)$/;"	f	struct:NpcCarryObject
set	base/x_simple_db_table.cpp	/^void x_simple_db_table::set(const uint32_t id, const uint32_t value, const bool save)$/;"	f	class:x_simple_db_table
setAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::setAI(const t_NpcAIDefine ai,const bool setTime)$/;"	f	class:NpcAIController
setAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void SceneNpc::setAI(const t_NpcAIDefine &ai)$/;"	f	class:SceneNpc
setAType	base/include/srvEngine.h	/^	void setAType(const char *data,int size)$/;"	f	struct:zNpcB
setActRegion	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::setActRegion(zPos pos,int x,int y)$/;"	f	class:NpcAIController
setActiveQuestionState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setActiveQuestionState()$/;"	f	class:CQuiz
setActiveState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
setActiveState	SessionServer/libsessionserver/DareEmperor.cpp	/^void CDareEmperor::setActiveState()$/;"	f	class:CDareEmperor
setActiveState	SessionServer/libsessionserver/Gem.cpp	/^void CGem::setActiveState()$/;"	f	class:CGem
setActiveState	SessionServer/libsessionserver/Vote.cpp	/^void CVote::setActiveState()$/;"	f	class:CVote
setAntiAtt	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::setAntiAtt(DWORD dwType,DWORD dwFromRelationID,DWORD dwToRelationID)$/;"	f	class:SceneUserManager
setAppendDamage	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::setAppendDamage(WORD mindamage,WORD maxdamage)$/;"	f	class:ScenePet
setAvailable	SceneServer/libscenesserver/zObject.cpp	/^void PetPack::setAvailable(WORD s)$/;"	f	class:PetPack
setBattleTask	SessionServer/libsessionserver/SessionServer.cpp	/^std::set<SessionTask *> setBattleTask;$/;"	v
setBlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
setBulletin	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::setBulletin(const char *buf)$/;"	f	class:CSchool
setBulletin	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::setBulletin(const char *buf)$/;"	f	class:CSchoolMember
setCartoonData	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::setCartoonData(Cmd::t_CartoonData& data)$/;"	f	class:CartoonPet
setCartoonID	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::setCartoonID(DWORD id)$/;"	f	class:CartoonPet
setCountryDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
setCountryOrder	GatewayServer/old_back/CountryInfo.cpp	/^void CountryInfo::setCountryOrder(Cmd::Session::CountrOrder *ptCmd)$/;"	f	class:CountryInfo
setCurTarget	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::setCurTarget(DWORD tempid,DWORD type,bool force)$/;"	f	class:SceneEntryPk
setCurTarget	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::setCurTarget(SceneEntryPk * target,bool force)$/;"	f	class:SceneEntryPk
setData	SceneServer/libscenesserver/script.cpp	/^void LuaScript::setData( const std::string& rData )$/;"	f	class:LuaScript
setDeathBackToMapID	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
setDeathState	SceneServer/libscenesserver/ScenePk.cpp	/^void SceneUser::setDeathState()$/;"	f	class:SceneUser
setDefTarget	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::setDefTarget(DWORD tempid,DWORD type,bool force)$/;"	f	class:SceneEntryPk
setDefTarget	SceneServer/libscenesserver/SceneEntryPk.cpp	/^bool SceneEntryPk::setDefTarget(SceneEntryPk * target,bool force)$/;"	f	class:SceneEntryPk
setDegree	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::setDegree(const WORD &degree)$/;"	f	class:CSchoolMember
setDir	base/include/srvEngine.h	/^	void setDir(const BYTE dir)$/;"	f	struct:zSceneEntry
setEmperorDare	SceneServer/libscenesserver/SceneUserManager.cpp	/^void SceneUserManager::setEmperorDare(Scene *scene)$/;"	f	class:SceneUserManager
setEmperorDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
setEncMethod	base/src/zEncDec.cpp	/^void CEncrypt::setEncMethod(encMethod m)$/;"	f	class:CEncrypt
setEndBattleTime	SceneServer/libscenesserver/SceneEntryPk.cpp	/^void SceneEntryPk::setEndBattleTime(const zRTime &ct,int delay)$/;"	f	class:SceneEntryPk
setEndQuestionState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setEndQuestionState()$/;"	f	class:CQuiz
setEndQuestionState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizPersonal::setEndQuestionState()$/;"	f	class:CQuizPersonal
setEndQuestionState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizWorld::setEndQuestionState()$/;"	f	class:CQuizWorld
setEndTime	SceneServer/libscenesserver/Rush.cpp	/^void Rush::setEndTime(const int delay)$/;"	f	class:Rush
setExp	SessionServer/libsessionserver/SessionServer.h	/^    void  setExp()$/;"	f	class:CSept
setExpMode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
setExpRate	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::setExpRate(BYTE rate)$/;"	f	class:CartoonPet
setFriendDegree	SceneServer/libscenesserver/TeamManager.cpp	/^void TeamManager::setFriendDegree(Cmd::Session::t_ReturnFriendDegree_SceneSession *rev)$/;"	f	class:TeamManager
setFriendDegree	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::setFriendDegree(Cmd::Session::t_CountFriendDegree_SceneSession *rev)$/;"	f	class:CRelationManager
setFriendDegree	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::setFriendDegree(const Cmd::Session::t_CountFriendDegree_SceneSession *rev)$/;"	f	class:CSchoolMember
setFriendDegree	SessionServer/libsessionserver/Session.cpp	/^void UserSession::setFriendDegree(Cmd::Session::t_CountFriendDegree_SceneSession *rev)$/;"	f	class:UserSession
setFriendDegreeByOtherUser	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::setFriendDegreeByOtherUser(const DWORD dwUserID,const WORD wdDegree,const DWORD currTime)$/;"	f	class:CRelationManager
setGamePos	tmp/MiniServer/MiniUser.cpp	/^void MiniUser::setGamePos(const BYTE &t,const Cmd::MiniUserPosition &p)$/;"	f	class:MiniUser
setGameState	tmp/MiniServer/MiniUser.cpp	/^void MiniUser::setGameState(const BYTE &t,const Cmd::MiniUserState &s)$/;"	f	class:MiniUser
setHairColor	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
setHairType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
setHoldCountry	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
setHoldUnion	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
setHost	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::setHost(BYTE seat)$/;"	f	class:MiniGame
setIP	base/src/x_tcp_client.h	/^	void setIP(const char *ip)$/;"	f	class:x_tcp_client
setInValid	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::setInValid()$/;"	f	class:CSchoolMember
setIndexKey	GatewayServer/old_back/GatewayServer.h	/^	void setIndexKey(const DWORD screen)$/;"	f	class:GateUser
setLastTime	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::setLastTime(const DWORD &lasttime)$/;"	f	class:CSchoolMember
setLeader	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
setLeader	SessionServer/libsessionserver/Team.cpp	/^bool Team::setLeader(const DWORD leader)$/;"	f	class:Team
setLevel	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::setLevel(const WORD level)$/;"	f	class:CSchoolMember
setMaster	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::setMaster(DWORD id,DWORD type)$/;"	f	class:CartoonPet
setMaster	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::setMaster(SceneEntryPk * master)$/;"	f	class:CartoonPet
setMaster	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::setMaster(DWORD id,DWORD type)$/;"	f	class:ScenePet
setMaster	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::setMaster(SceneEntryPk * m)$/;"	f	class:ScenePet
setMaster	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void setMaster(SceneEntryPk *){}$/;"	f	class:SceneNpc
setMasterSerialID	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::setMasterSerialID(const DWORD &id)$/;"	f	class:CSchool
setName	SceneServer/libscenesserver/CartoonPet.cpp	/^void CartoonPet::setName(char * n)$/;"	f	class:CartoonPet
setNewZoneConfig	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::setNewZoneConfig(bool type)$/;"	f	class:SceneManager
setNextObjOwnerID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
setNextObjOwnerID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::Team
setNonblock	base/include/x_socket.cpp	/^bool x_socket::setNonblock()$/;"	f	class:x_socket
setNormalAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::setNormalAI()$/;"	f	class:NpcAIController
setNote	SessionServer/libsessionserver/Sept.cpp	/^void CSept::setNote(Cmd::stNoteSeptCmd *pCmd)$/;"	f	class:CSept
setNote	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
setObjMode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
setObjectBlock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
setOpen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
setOverDueTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
setOverState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
setOverState	SessionServer/libsessionserver/Gem.cpp	/^void CGem::setOverState()$/;"	f	class:CGem
setOverState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setOverState()$/;"	f	class:CQuiz
setOverState	SessionServer/libsessionserver/Vote.cpp	/^void CVote::setOverState()$/;"	f	class:CVote
setOwner	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
setPetAI	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::setPetAI(Cmd::petAIMode mode)$/;"	f	class:ScenePet
setPetAI	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void setPetAI(Cmd::petAIMode){}$/;"	f	class:SceneNpc
setPetType	SceneServer/libscenesserver/ScenePet.cpp	/^void ScenePet::setPetType(Cmd::petType petType)$/;"	f	class:ScenePet
setPetType	SceneServer/libscenesserver/SceneServer1.h	/^  virtual void setPetType(Cmd::petType){}$/;"	f	class:SceneNpc
setPetsChaseTarget	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
setPhaseTime	SceneServer/libscenesserver/Rush.cpp	/^void Rush::setPhaseTime(const int delay)$/;"	f	class:Rush
setPhaseTime	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::setPhaseTime(const int delay)$/;"	f	class:NpcAIController
setPort	base/src/x_tcp_client.h	/^	void setPort(const uint16_t port)$/;"	f	class:x_tcp_client
setPos	base/include/srvEngine.h	/^	bool setPos(const zPos &screenWH,const zPos &newPos)$/;"	f	struct:zSceneEntry
setPower	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
setPreLevelNode	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::setPreLevelNode(CSchoolMember *pPreNode)$/;"	f	class:CSchoolMember
setPriv	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
setProperty	base/x_properties.h	/^	void setProperty(const std::string &key,const std::string &value)$/;"	f	class:x_properties
setReadSortState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setReadSortState()$/;"	f	class:CQuiz
setReadTimeout	base/include/x_socket.h	/^	void setReadTimeout(const int msec) { rd_msec = msec; }$/;"	f	class:x_socket
setReady	SceneServer/libscenesserver/Dice.cpp	/^bool Dice::setReady(SceneUser * user)$/;"	f	class:Dice
setReadyActiveState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
setReadyActiveState	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::setReadyActiveState(UserSession* pUser)$/;"	f	class:CDareSept
setReadyOverState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
setReadyOverState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareAntiCountry
setReadyOverState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnionCity
setReadyOverState	SessionServer/libsessionserver/DareEmperor.cpp	/^void CDareEmperor::setReadyOverState()$/;"	f	class:CDareEmperor
setReadyOverState	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::setReadyOverState()$/;"	f	class:CDareSept
setReadyOverState	SessionServer/libsessionserver/DareSeptNpc.cpp	/^void CDareSeptNpc::setReadyOverState()$/;"	f	class:CDareSeptNpc
setReadyOverState	SessionServer/libsessionserver/Gem.cpp	/^void CGem::setReadyOverState()$/;"	f	class:CGem
setReadyOverState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setReadyOverState()$/;"	f	class:CQuiz
setReadyOverState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizPersonal::setReadyOverState()$/;"	f	class:CQuizPersonal
setReadyOverState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizWorld::setReadyOverState()$/;"	f	class:CQuizWorld
setReadyOverState	SessionServer/libsessionserver/Vote.cpp	/^void CVote::setReadyOverState()$/;"	f	class:CVote
setReadyQuestionState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
setReadyQuestionState	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::setReadyQuestionState()$/;"	f	class:CDareSept
setReadyQuestionState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setReadyQuestionState()$/;"	f	class:CQuiz
setReadyState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
setReadyState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnionCity
setReadyState	SessionServer/libsessionserver/Gem.cpp	/^void CGem::setReadyState()$/;"	f	class:CGem
setReadyState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setReadyState()$/;"	f	class:CQuiz
setReadyState	SessionServer/libsessionserver/Vote.cpp	/^void CVote::setReadyState()$/;"	f	class:CVote
setRelationData	SessionServer/libsessionserver/SessionServer.h	/^    bool setRelationData(const Cmd::Session::t_regUserSuccess_SceneSession *regsuccess)$/;"	f	class:UserSession
setRepeat	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::setRepeat(int re)$/;"	f	class:NpcAIController
setReturnGoldState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
setReturnGoldState	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::setReturnGoldState()$/;"	f	class:CDareSept
setReturnGoldState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setReturnGoldState()$/;"	f	class:CQuiz
setReturnGoldState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizPersonal::setReturnGoldState()$/;"	f	class:CQuizPersonal
setRunningState	base/include/srvEngine.h	/^	uint32_t setRunningState(uint32_t set)$/;"	f	struct:zScene
setScene	tmp/MiniServer/MiniUser.cpp	/^void MiniUser::setScene(MiniTask *s)$/;"	f	class:MiniUser
setSceneWH	SceneServer/libscenesserver/SceneEntryIndex.cpp	/^void zSceneEntryIndex::setSceneWH(const zPos sceneWH,const DWORD screenx,const DWORD screeny,const DWORD screenMax)$/;"	f	class:zSceneEntryIndex
setSchoolName	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchool::setSchoolName(const char *pName)$/;"	f	class:CSchool
setSearcher	SessionServer/libsessionserver/CountryManager.cpp	/^void CTech::setSearcher(UserSession* pUser)$/;"	f	class:CTech
setSecondID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareCountry
setSecondID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
setSecondID	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
setSecondID	SessionServer/libsessionserver/DareEmperor.cpp	/^void CDareEmperor::setSecondID(DWORD dwID)$/;"	f	class:CDareEmperor
setSecondID	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::setSecondID(DWORD dwID)$/;"	f	class:CDareSept
setSecondID	SessionServer/libsessionserver/SessionServer.h	/^    virtual void setSecondID(DWORD dwID){CDareSept::setSecondID(dwID);}$/;"	f	class:CDareSeptNpc
setSecondID	SessionServer/libsessionserver/SessionServer.h	/^    virtual void setSecondID(DWORD dwID){CDareUnion::setSecondID(dwID);}$/;"	f	class:CDareUnionCity
setSelectUserInfo	GatewayServer/old_back/GateUser.cpp	/^void GateSelectUserSession::setSelectUserInfo(const Cmd::Record::t_Ret_SelectInfo_GateRecord *ptCmd)$/;"	f	class:GateSelectUserSession
setSendQuestionState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::setSendQuestionState()$/;"	f	class:CQuiz
setSendQuestionState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizPersonal::setSendQuestionState()$/;"	f	class:CQuizPersonal
setSendQuestionState	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizWorld::setSendQuestionState()$/;"	f	class:CQuizWorld
setSept	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::setSept(CSept * pSept)$/;"	f	class:CSeptMember
setSeptNote	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::setSeptNote(UserSession *pUser,Cmd::stNoteSeptCmd *pCmd)$/;"	f	class:CSeptM
setServerInfo	base/x_subnetservice.cpp	/^void x_subnetservice::setServerInfo(const Cmd::Super::t_Startup_Response *ptCmd)$/;"	f	class:x_subnetservice
setSpace	SceneServer/libscenesserver/zObject.cpp	/^void Package::setSpace(WORD s)$/;"	f	class:Package
setSpeedRate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
setState	base/include/srvEngine.h	/^	void setState(const ConnState state)$/;"	f	class:x_tcp_clientTask
setState	base/include/srvEngine.h	/^	void setState(const SceneEntryState & state)$/;"	f	struct:zSceneEntry
setState	base/src/x_tcptask.h	/^	void setState(const zTCPTask_State state)$/;"	f	class:x_tcptask
setState	base/src/x_tcptaskpool.h	/^	void setState(const int state)$/;"	f	class:x_tcptaskpool
setSummonTime	SceneServer/libscenesserver/Horse.cpp	/^void Horse::setSummonTime(int delay)$/;"	f	class:Horse
setTax	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
setTeamtempId	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
setTick	base/src/x_tcptask.h	/^	void setTick()$/;"	f	class:x_tcptask
setUState	base/include/srvEngine.h	/^	inline bool setUState(const int state)$/;"	f	struct:zSceneEntry
setUnion	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
setUnionDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
setUnique	base/src/x_tcptask.h	/^	void setUnique()$/;"	f	class:x_tcptask
setUser	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::setUser(UserSession *pUser)$/;"	f	class:CRelationManager
setUser	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolMember::setUser(UserSession *pUser)$/;"	f	class:CSchoolMember
setUserLevel	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::setUserLevel(const char *pName,const WORD &level)$/;"	f	class:CSchoolM
setUsleepTime	GatewayServer/old_back/GatewayServer.h	/^	void setUsleepTime(int time)$/;"	f	class:SceneClientManager
setUsleepTime	base/include/srvEngine.h	/^	void setUsleepTime(int time)$/;"	f	class:x_tcp_clientTaskPool
setUsleepTime	base/src/x_tcp_client.h	/^	void setUsleepTime(const int utime)$/;"	f	class:x_tcp_buffer_client
setUsleepTime	base/src/x_tcptaskpool.h	/^	static void  setUsleepTime(int time)$/;"	f	class:x_tcptaskpool
setVip	GatewayServer/old_back/GateUser.cpp	/^void GateUser::setVip(bool b)$/;"	f	class:GateUser
setVip	GatewayServer/old_back/GatewayServer.h	/^	void setVip(bool vip)$/;"	f	class:GatewayTask
setWaitBountyState	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
setWinnerExp	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::setWinnerExp()$/;"	f	class:CCountry
setWriteTimeout	base/include/x_socket.h	/^	void setWriteTimeout(const int msec) { wr_msec = msec; }$/;"	f	class:x_socket
setZoneID	SuperServer/SuperServer.h	/^	void setZoneID(const GameZone_t &gameZone) { this->gameZone = gameZone; }$/;"	f	class:SuperService
setZoneName	SuperServer/SuperServer.h	/^	void setZoneName(const char *zoneName) { this->zoneName = zoneName; }$/;"	f	class:SuperService
set_flag	base/include/x_socket.h	/^	void set_flag(uint32_t _f) { bitmask |= _f; }$/;"	f	class:x_socket
set_key_des	base/src/zEncDec.cpp	/^void CEncrypt::set_key_des(const_ZES_cblock *key)$/;"	f	class:CEncrypt
set_key_rc5	base/src/zEncDec.cpp	/^void CEncrypt::set_key_rc5(const BYTE *data,int nLen,int rounds)$/;"	f	class:CEncrypt
set_me	SceneServer/libscenesserver/script_func.cpp	/^void set_me(SceneUser* user)$/;"	f
set_menu	SceneServer/libscenesserver/Quest.cpp	/^bool QuestList::set_menu(const std::string& menu)$/;"	f	class:QuestList
set_skillState	base/include/srvEngine.h	/^	bool set_skillState(const char *data)$/;"	f	struct:zSkillB
set_state	base/include/csCommon.h	/^/;"	f	namespace:Cmd
set_state	base/tcp_task.cpp	/^void tcp_task::set_state(state_ptr state) { $/;"	f	class:tcp_task
set_timer	SceneServer/libscenesserver/Quest.cpp	/^int Vars::set_timer()$/;"	f	class:Vars
set_timer	SceneServer/libscenesserver/Quest.cpp	/^int Vars::set_timer(int start)$/;"	f	class:Vars
set_value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars
set_var	SceneServer/libscenesserver/script_func.cpp	/^void set_var(Vars* vars,const char* name,int value)$/;"	f
set_varS	SceneServer/libscenesserver/script_func.cpp	/^void set_varS(Vars* vars,const char* name,const char * value)$/;"	f
set_weaponlist	base/include/srvEngine.h	/^	bool set_weaponlist(const char *data)$/;"	f	struct:zSkillB
setmsecs	base/include/zTime.h	/^	void setmsecs(Quint16_t data)$/;"	f	class:zRTime
setobjectbm	base/src/zDatabaseManager.cpp	/^zDataBM<zSetObjectB,SetObjectBase> &setobjectbm=zDataBM<zSetObjectB,SetObjectBase>::getMe();$/;"	v
setpos	base/include/srvEngine.h	/^	BYTE setpos;        \/\/ Ë£ÖÂ§á‰ΩçÁΩÆ$/;"	m	struct:zObjectB
setprotectTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
sets	base/include/srvEngine.h	/^	SETS sets;$/;"	m	struct:zSetObjectB
setter	SuperServer/InfoClientManager.h	/^    InfoClient_set setter;$/;"	m	class:InfoClientManager
setting	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser::__anon84::__anon85
setting	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
setupCharBase	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
setupCharBase	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
setupCharm	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
setupSkillBase	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::setupSkillBase(SceneEntryPk *pEntry)$/;"	f	class:zSkill
sevendownp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
sex	SceneServer/libscenesserver/giftBox.h	/^	unsigned char sex;$/;"	m	struct:boxObject
sex	base/include/srvEngine.h	/^	uint32_t sex;$/;"	m	struct:zHeadListB
shiftMove	base/include/srvEngine.h	/^inline bool zAStar<step,radius>::shiftMove(const int direct)$/;"	f	class:zAStar
short_end	base/src/getopt.c	/^  char *short_end;$/;"	m	struct:group	file:
short_end	base/src/getopt.c	/^  char *short_end;$/;"	m	struct:parser_convert_state	file:
short_len	base/src/getopt.c	/^  size_t short_len;		\/* Getopt short options string.  *\/$/;"	m	struct:parser_sizes	file:
short_opt_col	base/src/getopt.c	/^  int short_opt_col;$/;"	m	struct:uparams	file:
short_options	base/src/getopt.c	/^  char *short_options;$/;"	m	struct:hol	file:
short_options	base/src/getopt.c	/^  char *short_options;$/;"	m	struct:hol_entry	file:
short_opts	base/src/getopt.c	/^  char *short_opts;$/;"	m	struct:parser	file:
show	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
show	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::UserVar
show	SceneServer/libscenesserver/Trade.cpp	/^void PrivateStore::show(SceneUser* target)$/;"	f	class:PrivateStore
showActive	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
showMagicToAll	SceneServer/libscenesserver/Skill.cpp	/^bool zSkill::showMagicToAll()$/;"	f	class:zSkill
showPassiveness	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
showRecovery	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
showReserveCards	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::showReserveCards()$/;"	f	class:DDZCardGame
showTime	SceneServer/libscenesserver/SceneServer1.h	/^  zRTime showTime;$/;"	m	class:SceneNpc
showValue	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
showValueToLog	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
show_dialog	SceneServer/libscenesserver/script_func.cpp	/^void show_dialog(SceneNpc* npc,const char* menu)$/;"	f
shuffle	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::shuffle()$/;"	f	class:DDZCardGame
shutdown_time	SessionServer/libsessionserver/SessionServer.h	/^    Cmd::Session::t_shutdown_SceneSession shutdown_time;$/;"	m	class:SessionService
signals_	tmp/base3/server.hpp	/^  boost::asio::signal_set signals_;$/;"	m	class:server
signals_hup_	base/x_service.h	/^	boost::asio::signal_set signals_hup_;$/;"	m	class:x_service
signals_int_	base/x_service.h	/^	boost::asio::signal_set signals_int_;$/;"	m	class:x_service
silver	SceneServer/libscenesserver/giftBox.h	/^	silver,\/\/“¯œ‰$/;"	e	enum:boxType
silverBox	SceneServer/libscenesserver/giftBox.h	/^	struct giftBox silverBox;$/;"	m	class:globalBox	typeref:struct:globalBox::giftBox
silverBoxCircle	SceneServer/libscenesserver/boxCircle.h	/^	unsigned short silverBoxCircle[11];\/\/“¯±¶∫–◊™≈Ã$/;"	m	class:boxCircle
simpleTextPrint	deps/tinyxml/tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:TiXmlPrinter
simple_table	SuperServer/SuperServer.h	/^	boost::shared_ptr<x_simple_db_table> simple_table;$/;"	m	class:SuperService
singleton_default	base/include/srvEngine.h	/^struct singleton_default$/;"	s
sitdownRestitute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
size	SceneServer/libscenesserver/SkillManager.cpp	/^int UserSkillM::size() const$/;"	f	class:UserSkillM
size	SceneServer/libscenesserver/TeamManager.cpp	/^  int size;$/;"	m	struct:ExpSizeExec	file:
size	SceneServer/libscenesserver/giftBox.h	/^	unsigned int size;$/;"	m	struct:boxitem
size	SceneServer/libscenesserver/zObject.cpp	/^WORD Package::size() const$/;"	f	class:Package
size	SceneServer/libscenesserver/zObject.cpp	/^WORD PetPack::size() const$/;"	f	class:PetPack
size	SessionServer/libsessionserver/Sept.cpp	/^DWORD CSept::size()$/;"	f	class:CSept
size	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
size	base/CmdAnalysis.h	/^		uint32_t size;$/;"	m	struct:CmdAnalysis::__anon126
size	base/billcmd.h	/^			WORD size;$/;"	m	struct:Cmd::Bill::t_Bill_ForwardBillToScene
size	base/billcmd.h	/^			WORD size;$/;"	m	struct:Cmd::Bill::t_Bill_ForwardUser
size	base/include/csCommon.h	/^/;"	m	struct:BinaryArchiveMember
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_ForwardMiniToScene
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_ForwardUser
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Mini_UserForwardMini
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_ForwardMini
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::MapData_ItemHeader
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::stCountryInfoUserCmd
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::stJpegPassportUserCmd
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::stRequestUserDataMapScreenUserCmd
size	base/include/csCommon.h	/^/;"	m	struct:Cmd::stStampDataUserCmd
size	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolInfo
size	base/include/csCommon.h	/^/;"	m	struct:TempArchiveMember
size	base/include/srvEngine.h	/^	inline int size() const$/;"	f	class:zEntryManager
size	base/include/srvEngine.h	/^	inline uint32_t size() const$/;"	f	class:LimitHash
size	base/include/srvEngine.h	/^	inline uint32_t size() const$/;"	f	class:MultiHash
size	base/src/x_tcptaskpool.cpp	/^	const x_list_tcptask::size_type size() const$/;"	f	class:x_okay_thread_functor
size	base/src/zTCPClientTaskPool.cpp	/^	const x_tcp_clientTaskContainer::size_type size() const$/;"	f	class:x_tcp_clientTaskThread
size_type	BillServer/old_back/BillServer.h	/^    typedef BillClientContainer::size_type size_type;$/;"	t	class:BillClientManager
skill	SceneServer/libscenesserver/SceneSkill.cpp	/^  zSkill *skill;$/;"	m	struct:TeamSkillExec	file:
skill	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
skill	base/include/csCommon.h	/^/;"	m	struct:_Object	typeref:struct:_Object::skillbonus
skill	base/include/srvEngine.h	/^	std::vector<skillbonus> skill;  \/\/ ÊäÄËÉΩÂä†Êàê$/;"	m	struct:zColorObjectB
skill	base/include/srvEngine.h	/^	std::vector<skillbonus> skill;  \/\/ ÊäÄËÉΩÂä†Êàê$/;"	m	struct:zHolyObjectB
skill	base/include/srvEngine.h	/^	uint32_t  skill;        \/\/ ÊäÄËÉΩ$/;"	m	struct:zNpcB
skillAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
skillCheckReduceObject	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::skillCheckReduceObject(SceneUser* pThis,DWORD kind,WORD num)$/;"	f	class:EquipPack
skillMap	base/include/srvEngine.h	/^	std::map<int,std::vector<npcSkill> > skillMap;$/;"	m	struct:zNpcB
skillPoint	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
skillReduceObject	SceneServer/libscenesserver/zObject.cpp	/^bool EquipPack::skillReduceObject(SceneUser* pThis,DWORD kind,WORD num)$/;"	f	class:EquipPack
skillReduceObject	SceneServer/libscenesserver/zObject.cpp	/^bool MainPack::skillReduceObject(SceneUser* pThis,DWORD id,DWORD num)$/;"	f	class:MainPack
skillStatus	base/include/srvEngine.h	/^	std::vector<SkillStatus> skillStatus;  \/\/ÊïàÊûú$/;"	m	struct:zSkillB
skillStatusM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
skillUpLevel	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
skillValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
skill_hash	base/include/srvEngine.h	4467;"	d
skill_id	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
skill_id	base/include/srvEngine.h	/^	uint16_t skill_id; \/\/ÊäÄËÉΩÊ†áËØÜ$/;"	m	struct:zLiveSkillB
skill_level	SceneServer/libscenesserver/SceneServer1.h	/^      int skill_level;$/;"	m	struct:EquipMaker::Odds
skill_level	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:EquipMaker::Odds
skill_t	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills
skillbase	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusCarrier
skillbm	base/src/zDatabaseManager.cpp	/^zDataBM<zSkillB,SkillBase> &skillbm = zDataBM<zSkillB,SkillBase>::getMe();$/;"	v
skillbonus	base/include/csCommon.h	/^/;"	s	struct:_Object
skillbonus	base/include/srvEngine.h	/^	skillbonus(std::string _odds="0",std::string _id="0",std::string _level="0") : odds(atoi(_odds.c_str())),id(atoi(_id.c_str())),level(atoi(_level.c_str()))$/;"	f	struct:skillbonus
skillbonus	base/include/srvEngine.h	/^struct skillbonus {$/;"	s
skillid	base/include/csCommon.h	/^/;"	m	struct:_Skill
skillid	base/include/srvEngine.h	/^	uint32_t  skillid;            \/\/ÊäÄËÉΩID$/;"	m	struct:zSkillB
skillpoint	base/include/csCommon.h	/^/;"	m	struct:CharBase
skills	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
skills	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
skills	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::LiveSkillsManager::Factory
skills	base/include/csCommon.h	/^/;"	m	struct:_Object	typeref:struct:_Object::skillsbonus
skills	base/include/srvEngine.h	/^		skills(const std::string& id_="0",const std::string& level_="0") : id(atoi(id_.c_str())),level(atoi(level_.c_str()))$/;"	f	struct:zObjectB::skills
skills	base/include/srvEngine.h	/^	char  skills[1024];    \/\/ ‰ΩøÁî®ÊäÄËÉΩ$/;"	m	struct:zNpcB
skills	base/include/srvEngine.h	/^	skillbonus skills;        \/\/ ÂÖ®Á≥ªÊäÄËÉΩÂä†Êàê$/;"	m	struct:zColorObjectB
skills	base/include/srvEngine.h	/^	skillbonus skills;        \/\/ ÂÖ®Á≥ªÊäÄËÉΩÂä†Êàê$/;"	m	struct:zHolyObjectB
skills	base/include/srvEngine.h	/^	struct skills $/;"	s	struct:zObjectB
skillsbonus	base/include/csCommon.h	/^/;"	s	struct:_Object
sleight	SceneServer/libscenesserver/SceneServer1.h	/^      int sleight;$/;"	m	struct:EquipMaker::Odds
sleight	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:EquipMaker::Odds
sleightValue	base/include/srvEngine.h	/^	uint16_t sleightValue;  \/\/Ê†πÊçÆÁÜüÁªÉÂ∫¶‰∫ßÁîüÁöÑÂä†ÊùÉÂÄº$/;"	m	struct:luckRangeValue
slow	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
slow	base/include/csCommon.h	/^/;"	m	struct:_Object
slow	base/include/srvEngine.h	/^	rangeValue slow; \/\/ÂáèÈÄüÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
slowRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
slowdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
slowdef	base/include/csCommon.h	/^/;"	m	struct:_Object
slowdef	base/include/srvEngine.h	/^			luckRangeValue slowdef;    \/\/ ÊäóÂáèÈÄüÂ¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
slowdef	base/include/srvEngine.h	/^	rangeValue slowdef; \/\/ÊäóÂáèÈÄüÂ¢ûÂä†$/;"	m	struct:zSoulStoneB
slowdown	base/include/csCommon.h	/^/;"	m	struct:_Object
slowdown_def	base/include/csCommon.h	/^/;"	m	struct:_Object
sm	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneManager
sm	SessionServer/libsessionserver/SessionServer.h	/^    static CSchoolM * sm;$/;"	m	class:CSchoolM
sm	SessionServer/libsessionserver/SessionServer.h	/^    static SceneSessionManager *sm;$/;"	m	class:SceneSessionManager
sm	SessionServer/libsessionserver/SessionServer.h	/^    static UserSessionManager *sm;$/;"	m	class:UserSessionManager
snm	SceneServer/libscenesserver/SceneServer1.h	/^    static SceneNpcManager *snm;$/;"	m	class:SceneNpcManager
snm	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneNpcManager
sock	base/include/x_socket.h	/^	int sock;                  \/**< Â•óÊé•Âè£ *\/$/;"	m	class:x_socket
sock	base/src/x_tcpserver.h	/^	int sock;                \/**< Â•óÊé•Âè£ *\/$/;"	m	class:x_tcpserver
sock_	base/src/tcp_socket.h	/^	ip::tcp::socket sock_;$/;"	m	class:tcp_socket
sock_	base/tcp_client.h	/^	ip::tcp::socket sock_;$/;"	m	class:tcp_client
sock_	base/tcp_task.h	/^	boost::asio::ip::tcp::socket sock_;$/;"	m	class:tcp_task
socket	tmp/base3/connection.cpp	/^boost::asio::ip::tcp::socket& connection::socket()$/;"	f	class:http::server2::connection
socket_	tmp/base3/connection.hpp	/^  boost::asio::ip::tcp::socket socket_;$/;"	m	class:http::server2::connection
sort	SceneServer/libscenesserver/script.cpp	/^void ScriptQuest::sort()$/;"	f	class:ScriptQuest
soulstonebm	base/src/zDatabaseManager.cpp	/^zDataBM<zSoulStoneB,SoulStoneBase> &soulstonebm = zDataBM<zSoulStoneB,SoulStoneBase>::getMe();$/;"	v
source	BillServer/old_back/BillClientManager.cpp	/^int    BillClientManager::source = -1;$/;"	m	class:BillClientManager	file:
source	BillServer/old_back/BillServer.h	/^    static int  source;$/;"	m	class:BillClientManager
sources	base/Makefile	/^sources = $(objects:%.o=%.cpp)$/;"	m
sources	tmp/base2/makefile	/^sources = $(objects:%.o=%.cpp)$/;"	m
sp	base/include/csCommon.h	/^/;"	m	struct:CharBase
sp	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
sp_leechdom	base/include/csCommon.h	/^/;"	m	struct:CharTest
space	SceneServer/libscenesserver/ObjectManager.cpp	/^int UserObjectM::space(const SceneUser* user) const$/;"	f	class:UserObjectM
space	SceneServer/libscenesserver/script_func.cpp	/^int  space(SceneUser* user)$/;"	f
space	SceneServer/libscenesserver/zObject.cpp	/^WORD Package::space() const$/;"	f	class:Package
space	base/src/getopt.c	/^space (argp_fmtstream_t stream, size_t ensure)$/;"	f	file:
space_before_header_value	tmp/base3/request_parser.hpp	/^    space_before_header_value,$/;"	e	enum:http::server2::request_parser::state
spcooling	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Leechdom
spcost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::PkValue::__anon63::__anon64
spcost	base/include/srvEngine.h	/^	uint32_t  spcost;              \/\/Ê∂àËÄó‰ΩìÂäõÂÄº$/;"	m	struct:zSkillB
specialNpc	SceneServer/libscenesserver/SceneServer1.h	/^    MonkeyNpcs specialNpc;$/;"	m	class:SceneNpcManager
specialNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneNpcManager
specialNpcCallBack	SceneServer/libscenesserver/SceneServer1.h	/^struct specialNpcCallBack$/;"	s
special_index	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::zSceneEntryIndex
speed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
speedOutM	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePkState::speedOutM(WORD speed,DWORD dwTime)$/;"	f	class:ScenePkState
speedOutP	SceneServer/libscenesserver/ScenePk.cpp	/^bool ScenePkState::speedOutP(WORD speed,DWORD dwTime)$/;"	f	class:ScenePkState
speedRate	SceneServer/libscenesserver/SceneServer1.h	/^  float speedRate;$/;"	m	class:SceneNpc
speedUpOffMaster	SceneServer/libscenesserver/SceneServer1.h	/^  bool speedUpOffMaster;$/;"	m	class:ScenePet
speedUpOffMaster	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ScenePet
speedUpUnder20	SceneServer/libscenesserver/SceneServer1.h	/^  bool speedUpUnder20;$/;"	m	class:SceneNpc
spi	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
spi	base/include/csCommon.h	/^/;"	m	struct:_Object
spi	base/include/srvEngine.h	/^			luckRangeValue spi;      \/\/ Á≤æÁ•û$/;"	m	struct:zColorObjectB::__anon128::__anon129
spi	base/include/srvEngine.h	/^	rangeValue spi;      \/\/ Á≤æÁ•û$/;"	m	struct:zSoulStoneB
spi	base/include/srvEngine.h	/^	uint16_t spi;				 \/\/Á≤æÁ•û$/;"	m	struct:zObjectB
spi_Attribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::Freedom_Attribute
spi_Attribute	base/include/csCommon.h	/^/;"	m	struct:_Object::Freedom_Attribute
splock	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
sppersist	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Leechdom
spr	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
spr	base/include/csCommon.h	/^/;"	m	struct:_Object
spr	base/include/srvEngine.h	/^	luckRangeValue spr;      \/\/ ‰ΩìÂäõÂÄºÊÅ¢Â§ç$/;"	m	struct:zColorObjectB
spr	base/include/srvEngine.h	/^	luckRangeValue spr;      \/\/ ‰ΩìÂäõÂÄºÊÅ¢Â§ç$/;"	m	struct:zHolyObjectB
spspeedup	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
spupdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
spupdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
srcID	base/supercmd.h	/^			WORD srcID;$/;"	m	struct:Cmd::Super::t_Restart_ServerEntry_NotifyOther
srcID	base/supercmd.h	/^			WORD srcID;$/;"	m	struct:Cmd::Super::t_Startup_ServerEntry_NotifyOther
src_name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
src_name	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_privateChat_SceneSession
src_priv	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
ss	SessionServer/libsessionserver/SessionServer.cpp	/^struct ss$/;"	s	file:
ssize_t	base/src/getopt.c	/^typedef int ssize_t;$/;"	t	file:
stAccountLogonUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stAccountLogonUserCmd
stAccountLogonUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stAddAttruByteUserCmd	base/include/csBox.h	/^	stAddAttruByteUserCmd()$/;"	f	struct:Cmd::stAddAttruByteUserCmd
stAddAttruByteUserCmd	base/include/csBox.h	/^struct stAddAttruByteUserCmd : public stAttruByteUserCmd$/;"	s	namespace:Cmd
stAddMapObjectMapScreenUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stAddMapObjectMapScreenUserCmd
stAddMapObjectMapScreenUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stAddOneRoomUserCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stAddOneRoomUserCommonMiniGameCmd
stAddOneRoomUserCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stAddRoomUserCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stAddRoomUserCommonMiniGameCmd
stAddRoomUserCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stAddUserMapScreenUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stAddUserMapScreenUserCmd
stAddUserMapScreenUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stArenaQueuingUserCmd	base/include/csBox.h	/^	stArenaQueuingUserCmd()$/;"	f	struct:Cmd::stArenaQueuingUserCmd
stArenaQueuingUserCmd	base/include/csBox.h	/^struct stArenaQueuingUserCmd : stArenaUserCmd$/;"	s	namespace:Cmd
stArenaUserCmd	base/include/csBox.h	/^	stArenaUserCmd()$/;"	f	struct:Cmd::stArenaUserCmd
stArenaUserCmd	base/include/csBox.h	/^struct stArenaUserCmd : public stNullUserCmd$/;"	s	namespace:Cmd
stAttruByteUserCmd	base/include/csBox.h	/^	stAttruByteUserCmd()$/;"	f	struct:Cmd::stAttruByteUserCmd
stAttruByteUserCmd	base/include/csBox.h	/^struct stAttruByteUserCmd : public stNullUserCmd$/;"	s	namespace:Cmd
stBackSelectUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stBackSelectUserCmd
stBackSelectUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stBattleReward	SceneServer/libscenesserver/SceneBattlefiel.h	/^	stBattleReward()$/;"	f	struct:stBattleReward
stBattleReward	SceneServer/libscenesserver/SceneBattlefiel.h	/^struct stBattleReward$/;"	s
stCampMember	SceneServer/libscenesserver/SceneBattlefiel.h	/^	stCampMember()$/;"	f	struct:stCampMember
stCampMember	SceneServer/libscenesserver/SceneBattlefiel.h	/^struct  stCampMember$/;"	s
stCardMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stCardMiniGameCmd
stCardMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stChatCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stChatCommonMiniGameCmd
stChatCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stCommonMiniGameCmd
stCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stContinueMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stContinueMiniGame
stContinueMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stCoolTimeType	SceneServer/libscenesserver/ItemCoolTime.h	/^typedef struct stCoolTimeType$/;"	s
stCountryInfoUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stCountryInfoUserCmd
stCountryInfoUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stCowBoxUserCmd	base/include/csBox.h	/^	stCowBoxUserCmd()$/;"	f	struct:Cmd::stCowBoxUserCmd
stCowBoxUserCmd	base/include/csBox.h	/^struct stCowBoxUserCmd : public stNullUserCmd$/;"	s	namespace:Cmd
stDataUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stDataUserCmd
stDataUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stDealCardMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stDealCardMiniGameCmd
stDealCardMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stDegreeMember	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
stDepositCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stDepositCommonMiniGameCmd
stDepositCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stDiceNumMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stDiceNumMiniGame
stDiceNumMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stDrawCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stDrawCommonMiniGameCmd
stDrawCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stDrawRetCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stDrawRetCommonMiniGameCmd
stDrawRetCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stEndMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stEndMiniGame
stEndMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stEndOfInitDataDataUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stEndOfInitDataDataUserCmd
stEndOfInitDataDataUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stEnterGameCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stEnterGameCommonMiniGameCmd
stEnterGameCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stEnterGameRetCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stEnterGameRetCommonMiniGameCmd
stEnterGameRetCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stEnterMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stEnterMiniGame
stEnterMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stEnterRoomCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stEnterRoomCommonMiniGameCmd
stEnterRoomCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stEnterRoomRetCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stEnterRoomRetCommonMiniGameCmd
stEnterRoomRetCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stExitHotspringCmd	base/include/csBox.h	/^	stExitHotspringCmd()$/;"	f	struct:Cmd::stExitHotspringCmd
stExitHotspringCmd	base/include/csBox.h	/^struct  stExitHotspringCmd : public stHotspringUserCmd  \/\/¿Îø™Œ¬»™$/;"	s	namespace:Cmd
stGameEndCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stGameEndCommonMiniGameCmd
stGameEndCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stGameListCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stGameListCommonMiniGameCmd
stGameListCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stGameResultCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stGameResultCommonMiniGameCmd
stGameResultCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stGameStartCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stGameStartCommonMiniGameCmd
stGameStartCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stGameTimeTimerUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stGameTimeTimerUserCmd
stGameTimeTimerUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stGetCowBoxInitCmd	base/include/csBox.h	/^	stGetCowBoxInitCmd()$/;"	f	struct:Cmd::stGetCowBoxInitCmd
stGetCowBoxInitCmd	base/include/csBox.h	/^struct stGetCowBoxInitCmd : public stCowBoxUserCmd$/;"	s	namespace:Cmd
stGoToFemaleCmd	base/include/csBox.h	/^	stGoToFemaleCmd()$/;"	f	struct:Cmd::stGoToFemaleCmd
stGoToFemaleCmd	base/include/csBox.h	/^struct  stGoToFemaleCmd : public stHotspringUserCmd  \/\/Ω¯»Î≈ÆŒ¬»™$/;"	s	namespace:Cmd
stGoToMaleCmd	base/include/csBox.h	/^	stGoToMaleCmd()$/;"	f	struct:Cmd::stGoToMaleCmd
stGoToMaleCmd	base/include/csBox.h	/^struct stGoToMaleCmd : public stHotspringUserCmd   \/\/Ω¯»Îƒ–Œ¬»™$/;"	s	namespace:Cmd
stHorseTrainingUserCmd	base/include/csBox.h	/^	stHorseTrainingUserCmd()$/;"	f	struct:Cmd::stHorseTrainingUserCmd
stHorseTrainingUserCmd	base/include/csBox.h	/^struct stHorseTrainingUserCmd : public stHorseUserCmd$/;"	s	namespace:Cmd
stHorseUserCmd	base/include/csBox.h	/^	stHorseUserCmd()$/;"	f	struct:Cmd::stHorseUserCmd
stHorseUserCmd	base/include/csBox.h	/^struct stHorseUserCmd : public stNullUserCmd$/;"	s	namespace:Cmd
stHotspringUserCmd	base/include/csBox.h	/^	stHotspringUserCmd()$/;"	f	struct:Cmd::stHotspringUserCmd
stHotspringUserCmd	base/include/csBox.h	/^struct stHotspringUserCmd : public stNullUserCmd    \/\/Œ¬»™œ˚œ¢$/;"	s	namespace:Cmd
stIncrementBySuit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:stIncrementBySuit
stIncrementBySuit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s
stInviteMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stInviteMiniGame
stInviteMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stInviteRetMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stInviteRetMiniGame
stInviteRetMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stItemCoolTimesUserCmd	base/include/csBox.h	/^	stItemCoolTimesUserCmd(uint16_t Count = 0)$/;"	f	struct:Cmd::stItemCoolTimesUserCmd
stItemCoolTimesUserCmd	base/include/csBox.h	/^struct stItemCoolTimesUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stItemIdCoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:stItemIdCoolTime
stItemIdCoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s
stItemTypeCoolTiem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:stItemTypeCoolTiem
stItemTypeCoolTiem	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s
stItemUseItemSuccessUserCmd	base/include/csBox.h	/^	stItemUseItemSuccessUserCmd()$/;"	f	struct:Cmd::stItemUseItemSuccessUserCmd
stItemUseItemSuccessUserCmd	base/include/csBox.h	/^struct stItemUseItemSuccessUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stJpegPassportUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stJpegPassportUserCmd
stJpegPassportUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stKickUserCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stKickUserCommonMiniGameCmd
stKickUserCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stLeaveGameCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stLeaveGameCommonMiniGameCmd
stLeaveGameCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stLeaveRoomCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stLeaveRoomCommonMiniGameCmd
stLeaveRoomCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stLevelDegreeDataUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stLevelDegreeDataUserCmd
stLevelDegreeDataUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stLoadMapOKDataUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stLoadMapOKDataUserCmd
stLoadMapOKDataUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stLoginCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stLoginCommonMiniGameCmd
stLoginCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stLoginPing	base/command.h	/^		stLoginPing() {$/;"	f	struct:Cmd::stLoginPing
stLoginPing	base/command.h	/^	struct stLoginPing : public stPingUserCmd {$/;"	s	namespace:Cmd
stLoginRetCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stLoginRetCommonMiniGameCmd
stLoginRetCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stLogonUserCmd	base/command.h	/^		stLogonUserCmd(){ byCmd = LOGON_USERCMD; }$/;"	f	struct:Cmd::stLogonUserCmd
stLogonUserCmd	base/command.h	/^	struct stLogonUserCmd : public stNullUserCmd{$/;"	s	namespace:Cmd
stLogonUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stLogonUserCmd
stLogonUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stLogoutCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stLogoutCommonMiniGameCmd
stLogoutCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stMainUserDataUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stMainUserDataUserCmd
stMainUserDataUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stMakeObjectUserCmd	base/include/csBox.h	/^	stMakeObjectUserCmd()$/;"	f	struct:Cmd::stMakeObjectUserCmd
stMakeObjectUserCmd	base/include/csBox.h	/^struct stMakeObjectUserCmd : public stNullUserCmd$/;"	s	namespace:Cmd
stMakeTurretUserCmd	base/include/csBox.h	/^	stMakeTurretUserCmd()$/;"	f	struct:Cmd::stMakeTurretUserCmd
stMakeTurretUserCmd	base/include/csBox.h	/^struct stMakeTurretUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stMapFileHeader	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
stMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::Scene::stMapName
stMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills::Scene
stMapScreenSizeDataUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stMapScreenSizeDataUserCmd
stMapScreenSizeDataUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stMapScreenUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stMapScreenUserCmd
stMapScreenUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stMergeVersionCheckUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stMergeVersionCheckUserCmd
stMergeVersionCheckUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stMiniGameUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stMiniGameUserCmd
stMiniGameUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stMosaicGemUserCmd	base/include/csBox.h	/^	stMosaicGemUserCmd()$/;"	f	struct:Cmd::stMosaicGemUserCmd
stMosaicGemUserCmd	base/include/csBox.h	/^struct stMosaicGemUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stNewMakeObjectReturnUserCmd	base/include/csBox.h	/^	stNewMakeObjectReturnUserCmd()$/;"	f	struct:Cmd::stNewMakeObjectReturnUserCmd
stNewMakeObjectReturnUserCmd	base/include/csBox.h	/^struct stNewMakeObjectReturnUserCmd : public stReMakUserCmd$/;"	s	namespace:Cmd
stNewMakeObjectUserCmd	base/include/csBox.h	/^	stNewMakeObjectUserCmd()$/;"	f	struct:Cmd::stNewMakeObjectUserCmd
stNewMakeObjectUserCmd	base/include/csBox.h	/^struct stNewMakeObjectUserCmd : public stReMakUserCmd$/;"	s	namespace:Cmd
stNotifyPointDDZMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stNotifyPointDDZMiniGameCmd
stNotifyPointDDZMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stNotifyPutCardMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stNotifyPutCardMiniGameCmd
stNotifyPutCardMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stNpcChangeUserCmd	base/include/csBox.h	/^	stNpcChangeUserCmd()$/;"	f	struct:Cmd::stNpcChangeUserCmd
stNpcChangeUserCmd	base/include/csBox.h	/^struct stNpcChangeUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stNpcDirItemDataUserCmd	base/include/csBox.h	/^	stNpcDirItemDataUserCmd()$/;"	f	struct:Cmd::stNpcDirItemDataUserCmd
stNpcDirItemDataUserCmd	base/include/csBox.h	/^struct stNpcDirItemDataUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stNpcDirItemUserCmd	base/include/csBox.h	/^  stNpcDirItemUserCmd()$/;"	f	struct:Cmd::stNpcDirItemUserCmd
stNpcDirItemUserCmd	base/include/csBox.h	/^struct stNpcDirItemUserCmd : public stMakeObjectUserCmd{$/;"	s	namespace:Cmd
stNpcGiveItemUserCmd	base/include/csBox.h	/^	stNpcGiveItemUserCmd()$/;"	f	struct:Cmd::stNpcGiveItemUserCmd
stNpcGiveItemUserCmd	base/include/csBox.h	/^struct stNpcGiveItemUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stNpcStartChangeUserCmd	base/include/csBox.h	/^	stNpcStartChangeUserCmd()$/;"	f	struct:Cmd::stNpcStartChangeUserCmd
stNpcStartChangeUserCmd	base/include/csBox.h	/^struct stNpcStartChangeUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stNullUserCmd	base/command.h	/^		stNullUserCmd(){$/;"	f	struct:Cmd::stNullUserCmd
stNullUserCmd	base/command.h	/^	struct stNullUserCmd{$/;"	s	namespace:Cmd
stNullUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stNullUserCmd
stNullUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stObjectLocation	base/include/csCommon.h	/^/;"	f	struct:stObjectLocation
stObjectLocation	base/include/csCommon.h	/^/;"	s
stOneSeatStateCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stOneSeatStateCommonMiniGameCmd
stOneSeatStateCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stPackBuyTanbNumUserCmd	base/include/csBox.h	/^	stPackBuyTanbNumUserCmd() $/;"	f	struct:Cmd::stPackBuyTanbNumUserCmd
stPackBuyTanbNumUserCmd	base/include/csBox.h	/^struct stPackBuyTanbNumUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stPasswdLogonUserCmd	base/command.h	/^		stPasswdLogonUserCmd()$/;"	f	struct:Cmd::stPasswdLogonUserCmd
stPasswdLogonUserCmd	base/command.h	/^	struct stPasswdLogonUserCmd : stLogonUserCmd $/;"	s	namespace:Cmd
stPasswdLogonUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stPasswdLogonUserCmd
stPasswdLogonUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stPasswordLogonUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stPasswordLogonUserCmd
stPasswordLogonUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stPingList	base/command.h	/^		stPingList() {$/;"	f	struct:Cmd::stPingList
stPingList	base/command.h	/^	struct stPingList : public stPingUserCmd {$/;"	s	namespace:Cmd
stPingTimeTimerUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stPingTimeTimerUserCmd
stPingTimeTimerUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stPingUserCmd	base/command.h	/^		stPingUserCmd() {$/;"	f	struct:Cmd::stPingUserCmd
stPingUserCmd	base/command.h	/^	struct stPingUserCmd : public stNullUserCmd {$/;"	s	namespace:Cmd
stPointDDZMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stPointDDZMiniGameCmd
stPointDDZMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stPutCardMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stPutCardMiniGameCmd
stPutCardMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stReMakUserCmd	base/include/csBox.h	/^	stReMakUserCmd()$/;"	f	struct:Cmd::stReMakUserCmd
stReMakUserCmd	base/include/csBox.h	/^struct stReMakUserCmd : public stNullUserCmd$/;"	s	namespace:Cmd
stRefreshStateMapScreenUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stRefreshStateMapScreenUserCmd
stRefreshStateMapScreenUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stRemoveMapObjectMapScreenUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stRemoveMapObjectMapScreenUserCmd
stRemoveMapObjectMapScreenUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stRemoveUserMapScreenUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stRemoveUserMapScreenUserCmd
stRemoveUserMapScreenUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stReqRoomDataCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stReqRoomDataCommonMiniGameCmd
stReqRoomDataCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stReqTopCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stReqTopCommonMiniGameCmd
stReqTopCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stRequestPingList	base/command.h	/^		stRequestPingList() {$/;"	f	struct:Cmd::stRequestPingList
stRequestPingList	base/command.h	/^	struct stRequestPingList : public stPingUserCmd {$/;"	s	namespace:Cmd
stRequestUserDataMapScreenUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stRequestUserDataMapScreenUserCmd
stRequestUserDataMapScreenUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stRequestUserGameTimeTimerUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stRequestUserGameTimeTimerUserCmd
stRequestUserGameTimeTimerUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stReserveCardsDDZMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stReserveCardsDDZMiniGameCmd
stReserveCardsDDZMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stResultMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stResultMiniGame
stResultMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stRetTopCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stRetTopCommonMiniGameCmd
stRetTopCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stReturnPasswordStockUserCmd	base/command.h	/^		stReturnPasswordStockUserCmd()$/;"	f	struct:Cmd::stReturnPasswordStockUserCmd
stReturnPasswordStockUserCmd	base/command.h	/^	struct stReturnPasswordStockUserCmd : stStockBillUserCmd$/;"	s	namespace:Cmd
stRideMapScreenUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stRideMapScreenUserCmd
stRideMapScreenUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stSchoolInfo	base/include/csCommon.h	/^/;"	s	namespace:School
stSchoolMemberInfo	base/include/csCommon.h	/^/;"	s	namespace:School
stSeatStateCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stSeatStateCommonMiniGameCmd
stSeatStateCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stSelectCountryUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stSelectCountryUserCmd
stSelectCountryUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stSeptInfo	base/include/csCommon.h	/^/;"	s	namespace:SeptDef
stSeptMemberInfo	base/include/csCommon.h	/^/;"	s	namespace:SeptDef
stServerReturnLoginFailedCmd	base/command.h	/^		stServerReturnLoginFailedCmd() {$/;"	f	struct:Cmd::stServerReturnLoginFailedCmd
stServerReturnLoginFailedCmd	base/command.h	/^	struct stServerReturnLoginFailedCmd : stLogonUserCmd {$/;"	s	namespace:Cmd
stServerReturnLoginFailedCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stServerReturnLoginFailedCmd
stServerReturnLoginFailedCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stServerReturnLoginSuccessCmd	base/command.h	/^		stServerReturnLoginSuccessCmd() {$/;"	f	struct:Cmd::stServerReturnLoginSuccessCmd
stServerReturnLoginSuccessCmd	base/command.h	/^	struct stServerReturnLoginSuccessCmd : public stLogonUserCmd {$/;"	s	namespace:Cmd
stServerReturnLoginSuccessCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stServerReturnLoginSuccessCmd
stServerReturnLoginSuccessCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stSetCowBoxKeyCmd	base/include/csBox.h	/^	stSetCowBoxKeyCmd()$/;"	f	struct:Cmd::stSetCowBoxKeyCmd
stSetCowBoxKeyCmd	base/include/csBox.h	/^struct stSetCowBoxKeyCmd : public stCowBoxUserCmd$/;"	s	namespace:Cmd
stSetCowBoxTiquCmd	base/include/csBox.h	/^	stSetCowBoxTiquCmd()$/;"	f	struct:Cmd::stSetCowBoxTiquCmd
stSetCowBoxTiquCmd	base/include/csBox.h	/^struct stSetCowBoxTiquCmd : public stCowBoxUserCmd$/;"	s	namespace:Cmd
stSetHPAndMPDataUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stSetHPAndMPDataUserCmd
stSetHPAndMPDataUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stShowHandDDZMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stShowHandDDZMiniGameCmd
stShowHandDDZMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stSrvMapTile	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
stStampCheckUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stStampCheckUserCmd
stStampCheckUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stStampDataUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stStampDataUserCmd
stStampDataUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stStartMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stStartMiniGame
stStartMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stStepRight	SessionServer/libsessionserver/SessionServer.h	/^	struct stStepRight$/;"	s	class:CSept
stStockBillUserCmd	base/command.h	/^		stStockBillUserCmd()$/;"	f	struct:Cmd::stStockBillUserCmd
stStockBillUserCmd	base/command.h	/^	struct stStockBillUserCmd : public stNullUserCmd$/;"	s	namespace:Cmd
stStopDiceMiniGame	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stStopDiceMiniGame
stStopDiceMiniGame	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stTeamAllNPCFlagUserCmd	base/include/csBox.h	/^	stTeamAllNPCFlagUserCmd()$/;"	f	struct:Cmd::stTeamAllNPCFlagUserCmd
stTeamAllNPCFlagUserCmd	base/include/csBox.h	/^struct stTeamAllNPCFlagUserCmd: public stChatUserCmd$/;"	s	namespace:Cmd
stTeamRollItemNoticeUserCmd	base/include/csBox.h	/^	stTeamRollItemNoticeUserCmd()$/;"	f	struct:Cmd::stTeamRollItemNoticeUserCmd
stTeamRollItemNoticeUserCmd	base/include/csBox.h	/^struct stTeamRollItemNoticeUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stTeamRollItemStartUserCmd	base/include/csBox.h	/^	stTeamRollItemStartUserCmd()$/;"	f	struct:Cmd::stTeamRollItemStartUserCmd
stTeamRollItemStartUserCmd	base/include/csBox.h	/^struct stTeamRollItemStartUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stTeamRollItemTypeUserCmd	base/include/csBox.h	/^	stTeamRollItemTypeUserCmd()$/;"	f	struct:Cmd::stTeamRollItemTypeUserCmd
stTeamRollItemTypeUserCmd	base/include/csBox.h	/^struct stTeamRollItemTypeUserCmd : public stMakeObjectUserCmd$/;"	s	namespace:Cmd
stTeamSetNPCFlagUserCmd	base/include/csBox.h	/^	stTeamSetNPCFlagUserCmd()$/;"	f	struct:Cmd::stTeamSetNPCFlagUserCmd
stTeamSetNPCFlagUserCmd	base/include/csBox.h	/^struct stTeamSetNPCFlagUserCmd: public stChatUserCmd$/;"	s	namespace:Cmd
stTempDegreeMember	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
stTimerUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stTimerUserCmd
stTimerUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stToggleReadyCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stToggleReadyCommonMiniGameCmd
stToggleReadyCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stToggleSeatCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stToggleSeatCommonMiniGameCmd
stToggleSeatCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stTurnRequestCmd	base/include/csTurn.h	/^		stTurnRequestCmd()$/;"	f	struct:Cmd::stTurnRequestCmd
stTurnRequestCmd	base/include/csTurn.h	/^	struct stTurnRequestCmd : public stTurnUserCmd$/;"	s	namespace:Cmd
stTurnResultCmd	base/include/csTurn.h	/^		stTurnResultCmd()$/;"	f	struct:Cmd::stTurnResultCmd
stTurnResultCmd	base/include/csTurn.h	/^	struct  stTurnResultCmd : public stTurnUserCmd$/;"	s	namespace:Cmd
stTurnUserCmd	base/include/csTurn.h	/^		stTurnUserCmd()$/;"	f	struct:Cmd::stTurnUserCmd
stTurnUserCmd	base/include/csTurn.h	/^	struct stTurnUserCmd : public stNullUserCmd$/;"	s	namespace:Cmd
stUnionInfo	base/include/csCommon.h	/^/;"	s	namespace:UnionDef
stUnionMemberInfo	base/include/csCommon.h	/^/;"	s	namespace:UnionDef
stUpdateUserStateCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stUpdateUserStateCommonMiniGameCmd
stUpdateUserStateCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stUserBattfieldData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::stUserBattfieldData
stUserBattfieldData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
stUserDataCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stUserDataCommonMiniGameCmd
stUserDataCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stUserGameTimeTimerUserCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stUserGameTimeTimerUserCmd
stUserGameTimeTimerUserCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stUserReLoginCmd	base/command.h	/^		stUserReLoginCmd() {$/;"	f	struct:Cmd::stUserReLoginCmd
stUserReLoginCmd	base/command.h	/^	struct stUserReLoginCmd : stLogonUserCmd {$/;"	s	namespace:Cmd
stUserRequestLoginCmd	base/command.h	/^		stUserRequestLoginCmd() {$/;"	f	struct:Cmd::stUserRequestLoginCmd
stUserRequestLoginCmd	base/command.h	/^	struct stUserRequestLoginCmd : public stLogonUserCmd {$/;"	s	namespace:Cmd
stUserRequestLoginCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stUserRequestLoginCmd
stUserRequestLoginCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stUserScoreCommonMiniGameCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::stUserScoreCommonMiniGameCmd
stUserScoreCommonMiniGameCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd
stUserVerifyVerCmd	base/command.h	/^		stUserVerifyVerCmd(){$/;"	f	struct:Cmd::stUserVerifyVerCmd
stUserVerifyVerCmd	base/command.h	/^	struct stUserVerifyVerCmd : public stLogonUserCmd {$/;"	s	namespace:Cmd
stUserVerifyVerCmd	base/include/csCommon.h	/^/;"	f	struct:Cmd::stUserVerifyVerCmd
stUserVerifyVerCmd	base/include/csCommon.h	/^/;"	s	namespace:Cmd
stXmlItemCoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:stXmlItemCoolTime
stXmlItemCoolTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s
st_SuitEffect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s
stable	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
stable	base/include/csCommon.h	/^/;"	m	struct:_Object
stable	base/include/srvEngine.h	/^	rangeValue stable; \/\/ÂÆöË∫´Â¢ûÂä†$/;"	m	struct:zSoulStoneB
stabledef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
stabledef	base/include/csCommon.h	/^/;"	m	struct:_Object
stabledef	base/include/srvEngine.h	/^			luckRangeValue stabledef;    \/\/ ÊäóÂÆöË∫´Â¢ûÂä†$/;"	m	struct:zColorObjectB::__anon130::__anon131
stabledef	base/include/srvEngine.h	/^	rangeValue stabledef; \/\/ÊäóÂÆöË∫´Â¢ûÂä†$/;"	m	struct:zSoulStoneB
stamp	deps/tinyxml/tinyxmlparser.cpp	/^	const char*		stamp;$/;"	m	class:TiXmlParsingData	file:
standalone	deps/tinyxml/tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration
start	base/include/srvEngine.h	/^	uint32_t start;$/;"	m	struct:npcRecover
start	base/include/tcp_state.h	/^	virtual void start(){$/;"	f	class:state_verify
start	base/include/tcp_state.h	/^	virtual void start(){$/;"	f	class:state_wait_sync
start	base/include/tcp_state.h	/^	virtual void start(){}$/;"	f	class:tcp_state
start	base/include/tcp_task_new.h	/^	virtual void start(){$/;"	f	class:tcp_task
start	base/io_service_pool.cpp	/^void io_service_pool::start() {$/;"	f	class:io_service_pool
start	base/src/tcp_socket.h	/^	void start() {$/;"	f	class:tcp_socket
start	base/tcp_client.h	/^	void start() {$/;"	f	class:tcp_client
start	base/tcp_task.cpp	/^void tcp_task::start(){$/;"	f	class:tcp_task
start	tmp/MiniServer/MiniGame.cpp	/^bool MiniGame::start()$/;"	f	class:MiniGame
start	tmp/base3/connection.cpp	/^void connection::start()$/;"	f	class:http::server2::connection
startText	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
startTime	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD startTime;$/;"	m	class:Dice
startTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
startTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::FixedRush
startTime	SessionServer/libsessionserver/SessionServer.h	/^  QWORD startTime;$/;"	m	struct:forbidInfo
startUpFinish	GatewayServer/old_back/GatewayServer.h	/^	bool startUpFinish;$/;"	m	class:GatewayService
start_accept	base/server.cpp	/^void server::start_accept() {$/;"	f	class:server
start_accept	tmp/base3/server.cpp	/^void server::start_accept()$/;"	f	class:server
start_accept	tmp/base3/x_tcp_server.cpp	/^		void start_accept()$/;"	f	class:chat_server
start_accept	tmp/base3/x_tcp_server.h	/^		void start_accept()$/;"	f	class:x_tcp_server
start_time	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::start_time(DWORD id) const$/;"	f	class:QuestList
start_time	SceneServer/libscenesserver/Quest.cpp	/^int Vars::start_time() const$/;"	f	class:Vars
start_time	SessionServer/libsessionserver/SessionServer.h	/^    time_t  start_time;$/;"	m	class:CDare
starttime	SceneServer/libscenesserver/SceneServer1.h	/^      time_t starttime;$/;"	m	struct:MessageSystem::t_Message
state	BillServer/BillUser.h	/^    state;          \/**< session state *\/ $/;"	m	class:BillUser	typeref:enum:BillUser::LoginState
state	BillServer/old_back/BillServer.h	/^    state;          \/**< ª·ª∞◊¥Ã¨ *\/ $/;"	m	class:BillUser	typeref:enum:BillUser::LoginState
state	BillServer/old_back/BillServer.h	/^  state;          \/**< ª·ª∞◊¥Ã¨ *\/$/;"	m	struct:BillInfo	typeref:enum:BillInfo::__anon2
state	FLServer/GYListManager.h	/^	int  state;          \/**< ∑˛ŒÒ∆˜◊¥Ã¨ *\/$/;"	m	struct:GYList
state	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::state(DWORD id) const$/;"	f	class:QuestList
state	SceneServer/libscenesserver/Quest.cpp	/^int Vars::state() const$/;"	f	class:Vars
state	SceneServer/libscenesserver/QuestEvent.cpp	/^int Event::state(SceneUser& user)$/;"	f	class:Event
state	SceneServer/libscenesserver/SceneNpcAI.cpp	/^  const int state;$/;"	m	struct:getEntriesCallBack	file:
state	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills
state	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventManager
state	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::ZoneTypeDef
state	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
state	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
state	SessionServer/libsessionserver/SessionServer.h	/^    BYTE   state;         \/\/ À˘¥¶◊¥Ã¨$/;"	m	class:CGem
state	SessionServer/libsessionserver/SessionServer.h	/^    BYTE  state;         \/\/ À˘¥¶◊¥Ã¨$/;"	m	class:CDare
state	SessionServer/libsessionserver/SessionServer.h	/^    BYTE state;$/;"	m	class:CQuiz
state	SessionServer/libsessionserver/SessionServer.h	/^    DWORD state()$/;"	f	class:CTech
state	SessionServer/libsessionserver/SessionServer.h	/^    void state(DWORD newState)$/;"	f	class:CTech
state	SessionServer/libsessionserver/SessionServer.h	/^  BYTE state;$/;"	m	struct:actInfo
state	SessionServer/libsessionserver/SessionServer.h	/^  BYTE state;$/;"	m	struct:auctionBidInfo
state	SessionServer/libsessionserver/SessionServer.h	/^  BYTE state;$/;"	m	struct:mailContentInfo
state	SessionServer/libsessionserver/SessionServer.h	/^  BYTE state;$/;"	m	struct:mailForwardInfo
state	SessionServer/libsessionserver/SessionServer.h	/^  BYTE state;$/;"	m	struct:mailHeadInfo
state	SessionServer/libsessionserver/SessionServer.h	/^  BYTE state;$/;"	m	struct:mailStateInfo
state	SessionServer/libsessionserver/SessionServer.h	/^  BYTE state;$/;"	m	struct:mailTurnBackInfo
state	SuperServer/RoleregCache.h	/^      WORD state;          \/**< ∏˜÷÷◊¥Ã¨µƒŒª◊È∫œ *\/$/;"	m	struct:RoleregCache::Data
state	SuperServer/ServerTask.h	/^		int state;$/;"	m	class:ServerTask
state	base/command.h	/^		BYTE state;$/;"	m	struct:Cmd::ping_element
state	base/flcmd.h	/^			int state;$/;"	m	struct:Cmd::FL::t_GYList_FL
state	base/flcmd.h	/^		BYTE state;$/;"	m	struct:Cmd::t_NewLoginSession
state	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniSeatData
state	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserData
state	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stUpdateUserStateCommonMiniGameCmd
state	base/include/csCommon.h	/^/;"	m	struct:Cmd::stRefreshStateMapScreenUserCmd
state	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapNpcDataState
state	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapUserData
state	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapUserDataState
state	base/include/srvEngine.h	/^			uint32_t state;$/;"	m	struct:SkillElement::__anon136::__anon137
state	base/include/srvEngine.h	/^	char  state[1024];    \/\/ Áä∂ÊÄÅ$/;"	m	struct:zNpcB
state	base/include/srvEngine.h	/^	volatile ConnState state;            \/**< ËøûÊé•Áä∂ÊÄÅ *\/$/;"	m	class:x_tcp_clientTask
state	base/src/getopt.c	/^  const struct argp_state *state;$/;"	m	struct:pentry_state	typeref:struct:pentry_state::argp_state	file:
state	base/src/getopt.c	/^  struct argp_state state;$/;"	m	struct:parser	typeref:struct:parser::argp_state	file:
state	base/src/x_tcptask.h	/^	zTCPTask_State state;              \/**< ËøûÊé•Áä∂ÊÄÅ *\/$/;"	m	class:x_tcptask
state	base/src/x_tcptaskpool.h	/^	int state;                        \/**< ËøûÊé•Ê±†Áä∂ÊÄÅ *\/$/;"	m	class:x_tcptaskpool
state	base/supercmd.h	/^			WORD state;$/;"	m	struct:Cmd::Super::ServerEntry
state	base/supercmd.h	/^			int state;$/;"	m	struct:Cmd::Super::t_GYList_Gateway
state	tmp/MiniServer/MiniServer.h	/^    Cmd::MiniGameState state;$/;"	m	class:MiniGame
state	tmp/MiniServer/MiniServer.h	/^  Cmd::MiniUserState state;$/;"	m	struct:oneGameState
state	tmp/base3/request_parser.hpp	/^  enum state$/;"	g	class:http::server2::request_parser
stateList	base/include/srvEngine.h	/^	SceneEntryStateList stateList;$/;"	m	struct:zSceneEntry
state_	base/tcp_task.h	/^	state_ptr state_;$/;"	m	class:tcp_task
state_	tmp/base3/request_parser.hpp	/^  } state_;$/;"	m	class:http::server2::request_parser	typeref:enum:http::server2::request_parser::state
state_closed	base/task_state.h	/^	state_closed(tcp_task_ptr task):task_state(task){}$/;"	f	class:state_closed
state_closed	base/task_state.h	/^class state_closed : public task_state$/;"	c
state_closed_	base/tcp_task.h	/^	state_ptr state_closed_;$/;"	m	class:tcp_task
state_maintain	base/common.h	/^	state_maintain = 1 <<0,$/;"	e	enum:__anon119
state_maintain	base/include/csCommon.h	/^/;"	e	enum:__anon176
state_no_wait_sync	base/task_state.h	/^	state_no_wait_sync(tcp_task_ptr task):task_state(task){}$/;"	f	class:state_no_wait_sync
state_no_wait_sync	base/task_state.h	/^class state_no_wait_sync : public task_state$/;"	c
state_none	base/common.h	/^	state_none = 0,$/;"	e	enum:__anon119
state_none	base/include/csCommon.h	/^/;"	e	enum:__anon176
state_okay	base/include/tcp_state.h	/^class state_okay: public tcp_state{$/;"	c
state_okay	base/task_state.h	/^	state_okay(tcp_task_ptr task):task_state(task){}$/;"	f	class:state_okay
state_okay	base/task_state.h	/^class state_okay : public task_state$/;"	c
state_okay_	base/tcp_task.h	/^	state_ptr state_okay_;$/;"	m	class:tcp_task
state_ptr	base/task_state.h	/^typedef shared_ptr<task_state> state_ptr;$/;"	t
state_ptr	base/tcp_task.h	/^typedef shared_ptr<task_state> state_ptr;$/;"	t
state_verify	base/include/tcp_state.h	/^	state_verify(shared_ptr<tcp_task> task):tcp_state(task){$/;"	f	class:state_verify
state_verify	base/include/tcp_state.h	/^class state_verify: public tcp_state{$/;"	c
state_verify	base/task_state.h	/^	state_verify(tcp_task_ptr task):task_state(task){waiting = true;}$/;"	f	class:state_verify
state_verify	base/task_state.h	/^class state_verify : public task_state$/;"	c
state_verify_	base/tcp_task.h	/^	state_ptr state_verify_;$/;"	m	class:tcp_task
state_wait	base/task_state.h	/^	state_wait(tcp_task_ptr task):task_state(task){}$/;"	f	class:state_wait
state_wait	base/task_state.h	/^class state_wait : public task_state$/;"	c
state_wait_	SuperServer/ServerTask.h	/^		state_ptr state_wait_;$/;"	m	class:ServerTask
state_wait_sync	base/include/tcp_state.h	/^	state_wait_sync(shared_ptr<tcp_task> task):tcp_state(task){$/;"	f	class:state_wait_sync
state_wait_sync	base/include/tcp_state.h	/^class state_wait_sync: public tcp_state{$/;"	c
state_wait_sync	base/task_state.h	/^	state_wait_sync(tcp_task_ptr task):task_state(task){waiting = true;}$/;"	f	class:state_wait_sync
state_wait_sync	base/task_state.h	/^class state_wait_sync : public task_state$/;"	c
state_wait_sync_	SuperServer/ServerTask.h	/^		state_ptr state_wait_sync_;$/;"	m	class:ServerTask
status	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusCarrier
status	SessionServer/libsessionserver/SessionServer.h	/^    void status(BYTE value)$/;"	f	class:CArmy
status	base/include/srvEngine.h	/^		uint16_t status[7];$/;"	m	union:SkillStatus::__anon138
status	tmp/base3/reply.hpp	/^  } status;$/;"	m	struct:http::server2::reply	typeref:enum:http::server2::reply::status_type
status_strings	tmp/base3/reply.cpp	/^namespace status_strings {$/;"	n	namespace:http::server2	file:
status_type	tmp/base3/reply.hpp	/^  enum status_type$/;"	g	struct:http::server2::reply
stdbang	base/include/csCommon.h	/^/;"	m	struct:CharState
stdbang	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
stdmdamage	base/include/csCommon.h	/^/;"	m	struct:CharState
stdmdamage	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
stdmdefence	base/include/csCommon.h	/^/;"	m	struct:CharState
stdmdefence	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
stdpdamage	base/include/csCommon.h	/^/;"	m	struct:CharState
stdpdamage	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
stdpdefence	base/include/csCommon.h	/^/;"	m	struct:CharState
stdpdefence	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
step	SceneServer/libscenesserver/Trade.cpp	/^PrivateStore::STEP PrivateStore::step()$/;"	f	class:PrivateStore
step	SceneServer/libscenesserver/Trade.cpp	/^void PrivateStore::step(STEP step_,SceneUser *pUser)$/;"	f	class:PrivateStore
step_state	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
stockSave	SceneServer/libscenesserver/Stock.cpp	/^bool SceneUser::stockSave(DWORD mon,DWORD go)$/;"	f	class:SceneUser
stock_login	BillServer/BillUser.h	/^    bool stock_login;$/;"	m	class:BillUser
stock_login	BillServer/old_back/BillServer.h	/^    bool stock_login;$/;"	m	class:BillUser
stock_replies	tmp/base3/reply.cpp	/^namespace stock_replies {$/;"	n	namespace:http::server2	file:
stock_reply	tmp/base3/reply.cpp	/^reply reply::stock_reply(reply::status_type status)$/;"	f	class:http::server2::reply
stone	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
stop	base/io_service_pool.cpp	/^void io_service_pool::stop()$/;"	f	class:io_service_pool
stop	tmp/base3/io_service_pool.cpp	/^void io_service_pool::stop()$/;"	f	class:http::server2::io_service_pool
storage	base/src/getopt.c	/^  void *storage;$/;"	m	struct:parser	file:
store	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Packages
str	SceneServer/libscenesserver/SceneServer1.h	/^  char str[MAX_CHATINFO];$/;"	m	struct:t_NpcAIDefine
str	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Equips
str	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_HorsePkData
str	base/include/csCommon.h	/^/;"	m	struct:_Object
str	base/include/srvEngine.h	/^			luckRangeValue str;      \/\/ ÂäõÈáè$/;"	m	struct:zColorObjectB::__anon128::__anon129
str	base/include/srvEngine.h	/^	rangeValue str;      \/\/ ÂäõÈáè$/;"	m	struct:zSoulStoneB
str	base/include/srvEngine.h	/^	uint16_t str;				 \/\/ÂäõÈáè$/;"	m	struct:zObjectB
str	base/include/srvEngine.h	/^	uint32_t  str;        \/\/ ÂäõÈáè$/;"	m	struct:zNpcB
str	base/include/srvEngine.h	/^	uint32_t str;        \/\/ ÂäõÈáè$/;"	m	struct:zPetB
str	deps/tinyxml/tinyxml.h	/^		const char*     str;$/;"	m	struct:TiXmlBase::Entity
strField1	base/include/srvEngine.h	/^	char  strField1[16];    \/\/ Â§¥ÂÉèÂêç$/;"	m	struct:HeadList
strField1	base/include/srvEngine.h	/^	char  strField1[16];    \/\/ Áâ©ÁêÜ‰º§ÂÆ≥ÂáèÂ∞ëx%$/;"	m	struct:FiveSetBase
strField1	base/include/srvEngine.h	/^	char  strField1[32];    \/\/ ÂêçÁß∞$/;"	m	struct:HairColour
strField1	base/include/srvEngine.h	/^	char  strField1[32];    \/\/ ÂêçÁß∞$/;"	m	struct:HairStyle
strField1	base/include/srvEngine.h	/^	char  strField1[32];    \/\/ ÂêçÁß∞$/;"	m	struct:NpcBase
strField1	base/include/srvEngine.h	/^	char  strField1[32];    \/\/ ÂêçÁß∞$/;"	m	struct:SetObjectBase
strField1	base/include/srvEngine.h	/^	char  strField1[32];    \/\/ ÂêçÁß∞$/;"	m	struct:SoulStoneBase
strField1	base/include/srvEngine.h	/^	char  strField1[32];    \/\/ ÊäÄËÉΩÂêçÁß∞$/;"	m	struct:SkillBase
strField1	base/include/srvEngine.h	/^	char  strField1[64];    \/\/ ÂêçÁß∞$/;"	m	struct:ColorObjectBase
strField1	base/include/srvEngine.h	/^	char  strField1[64];    \/\/ ÂêçÁß∞$/;"	m	struct:HolyObjectBase
strField1	base/include/srvEngine.h	/^	char  strField1[64];    \/\/ ÂêçÁß∞$/;"	m	struct:ObjectBase
strField1	base/include/srvEngine.h	/^	char  strField1[64];    \/\/ ÊäÄËÉΩÂêçÁß∞$/;"	m	struct:LiveSkillBase
strField10	base/include/srvEngine.h	/^	char  strField10[16];    \/\/ ÂëΩ‰∏≠Áéá$/;"	m	struct:HolyObjectBase
strField10	base/include/srvEngine.h	/^	char  strField10[16];    \/\/ ÊäóÈ∫ªÁóπÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField10	base/include/srvEngine.h	/^	char  strField10[32];    \/\/ ÊúÄÂ∞èÁâ©Êîª$/;"	m	struct:ColorObjectBase
strField11	base/include/srvEngine.h	/^	char  strField11[16];    \/\/ ÊäóÁú©ÊôïÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField11	base/include/srvEngine.h	/^	char  strField11[16];    \/\/ Èó™ÈÅøÁéá$/;"	m	struct:HolyObjectBase
strField11	base/include/srvEngine.h	/^	char  strField11[32];    \/\/ ÊúÄÂ§ßÁâ©Êîª$/;"	m	struct:ColorObjectBase
strField12	base/include/srvEngine.h	/^	char  strField12[16];    \/\/ ÊäÄËÉΩÂä†Êàê$/;"	m	struct:HolyObjectBase
strField12	base/include/srvEngine.h	/^	char  strField12[16];    \/\/ ÊäóÂô¨È≠îÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField12	base/include/srvEngine.h	/^	char  strField12[32];    \/\/ ÊäÄËÉΩÁß∞Âè∑$/;"	m	struct:LiveSkillBase
strField12	base/include/srvEngine.h	/^	char  strField12[32];    \/\/ ÊúÄÂ∞èÈ≠îÊîª$/;"	m	struct:ColorObjectBase
strField13	base/include/srvEngine.h	/^	char  strField13[16];    \/\/ ÂÖ®Á≥ªÊäÄËÉΩÂä†Êàê$/;"	m	struct:HolyObjectBase
strField13	base/include/srvEngine.h	/^	char  strField13[16];    \/\/ ÊäóÂô¨ÂäõÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField13	base/include/srvEngine.h	/^	char  strField13[256];    \/\/ Ëé∑ÂæóÁâ©ÂìÅ$/;"	m	struct:LiveSkillBase
strField13	base/include/srvEngine.h	/^	char  strField13[32];    \/\/ ÊúÄÂ§ßÈ≠îÊîª$/;"	m	struct:ColorObjectBase
strField14	base/include/srvEngine.h	/^	char  strField14[16];    \/\/ ÂèåÂÄçÁªèÈ™å$/;"	m	struct:HolyObjectBase
strField14	base/include/srvEngine.h	/^	char  strField14[16];    \/\/ ÊäóÊ∑∑‰π±Â¢ûÂä†$/;"	m	struct:SoulStoneBase
strField14	base/include/srvEngine.h	/^	char  strField14[32];    \/\/ Áâ©Èò≤$/;"	m	struct:ColorObjectBase
strField15	base/include/srvEngine.h	/^	char  strField15[16];    \/\/ Â¢ûÂä†ÊéâÂÆùÁéá$/;"	m	struct:HolyObjectBase
strField15	base/include/srvEngine.h	/^	char  strField15[16];    \/\/ ÊäóÂÜ∞ÂÜªÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField15	base/include/srvEngine.h	/^	char  strField15[32];    \/\/ È≠îÈò≤$/;"	m	struct:ColorObjectBase
strField16	base/include/srvEngine.h	/^	char  strField16[128];  \/\/ ÈúÄË¶ÅÊ≠¶Âô®$/;"	m	struct:SkillBase
strField16	base/include/srvEngine.h	/^	char  strField16[16];    \/\/ ÊäóÁü≥ÂåñÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField16	base/include/srvEngine.h	/^	char  strField16[32];    \/\/ ÊúÄÂ§ßÁîüÂëΩÂÄº$/;"	m	struct:ColorObjectBase
strField17	base/include/srvEngine.h	/^	char  strField17[16];    \/\/ ÊäóÂ§±ÊòéÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField17	base/include/srvEngine.h	/^	char  strField17[32];    \/\/ ÊúÄÂ§ßÊ≥ïÊúØÂÄº$/;"	m	struct:ColorObjectBase
strField18	base/include/srvEngine.h	/^	char  strField18[16];    \/\/ ÊäóÂÆöË∫´Â¢ûÂä†$/;"	m	struct:SoulStoneBase
strField18	base/include/srvEngine.h	/^	char  strField18[32];    \/\/ ÊúÄÂ§ß‰ΩìÂäõÂÄº$/;"	m	struct:ColorObjectBase
strField19	base/include/srvEngine.h	/^	char  strField19[16];    \/\/ ÊäóÂáèÈÄüÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField19	base/include/srvEngine.h	/^	char  strField19[32];    \/\/ ÁßªÂä®ÈÄüÂ∫¶$/;"	m	struct:ColorObjectBase
strField2	base/include/srvEngine.h	/^	char  strField2[16];    \/\/ Ê≥ïÊúØ‰º§ÂÆ≥ÂáèÂ∞ëx%$/;"	m	struct:FiveSetBase
strField2	base/include/srvEngine.h	/^	char  strField2[16];    \/\/ Á•ûÂú£‰∏ÄÂáª$/;"	m	struct:HolyObjectBase
strField2	base/include/srvEngine.h	/^	char  strField2[32];    \/\/ ËøûÊé•Á¨¶$/;"	m	struct:ColorObjectBase
strField2	base/include/srvEngine.h	/^	char  strField2[64];    \/\/ ÂêçÁß∞$/;"	m	struct:UpgradeObjectBase
strField2	base/include/srvEngine.h	/^	char  strField2[64];    \/\/ Â•óË£Ö5$/;"	m	struct:SetObjectBase
strField20	base/include/srvEngine.h	/^	char  strField20[16];    \/\/ ÊäóËØ±ÊÉëÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField20	base/include/srvEngine.h	/^	char  strField20[32];    \/\/ ÁîüÂëΩÂÄºÊÅ¢Â§ç$/;"	m	struct:ColorObjectBase
strField21	base/include/srvEngine.h	/^	char  strField21[1024];  \/\/ ÊïàÊûú$/;"	m	struct:SkillBase
strField21	base/include/srvEngine.h	/^	char  strField21[16];    \/\/ ‰∏≠ÊØíÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField21	base/include/srvEngine.h	/^	char  strField21[32];    \/\/ Ê≥ïÊúØÂÄºÊÅ¢Â§ç$/;"	m	struct:ColorObjectBase
strField22	base/include/srvEngine.h	/^	char  strField22[1024];    \/\/ ÊîªÂáªÁ±ªÂûã$/;"	m	struct:NpcBase
strField22	base/include/srvEngine.h	/^	char  strField22[16];    \/\/ È∫ªÁóπÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField22	base/include/srvEngine.h	/^	char  strField22[32];    \/\/ ‰ΩìÂäõÂÄºÊÅ¢Â§ç$/;"	m	struct:ColorObjectBase
strField23	base/include/srvEngine.h	/^	char  strField23[16];    \/\/ Áú©ÊôïÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField23	base/include/srvEngine.h	/^	char  strField23[32];    \/\/ ÊîªÂáªÈÄüÂ∫¶$/;"	m	struct:ColorObjectBase
strField24	base/include/srvEngine.h	/^	char  strField24[16];    \/\/ Âô¨È≠îÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField24	base/include/srvEngine.h	/^	char  strField24[32];    \/\/ Â¢ûÂä†Áâ©ÁêÜÊîªÂáªÂäõ$/;"	m	struct:ColorObjectBase
strField25	base/include/srvEngine.h	/^	char  strField25[16];    \/\/ Âô¨ÂäõÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField25	base/include/srvEngine.h	/^	char  strField25[32];    \/\/ Â¢ûÂä†Áâ©ÁêÜÈò≤Âæ°Âäõ$/;"	m	struct:ColorObjectBase
strField26	base/include/srvEngine.h	/^	char  strField26[16];    \/\/ Ê∑∑‰π±Â¢ûÂä†$/;"	m	struct:SoulStoneBase
strField26	base/include/srvEngine.h	/^	char  strField26[32];    \/\/ Â¢ûÂä†È≠îÊ≥ïÊîªÂáªÂäõ$/;"	m	struct:ColorObjectBase
strField27	base/include/srvEngine.h	/^	char  strField27[16];    \/\/ ÂÜ∞ÂÜªÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField27	base/include/srvEngine.h	/^	char  strField27[32];    \/\/ Â¢ûÂä†È≠îÊ≥ïÈò≤Âæ°Âäõ$/;"	m	struct:ColorObjectBase
strField27	base/include/srvEngine.h	/^	char  strField27[32];    \/\/ ÈúÄË¶ÅÊäÄËÉΩ$/;"	m	struct:ObjectBase
strField28	base/include/srvEngine.h	/^	char  strField28[1024];    \/\/ ÈúÄË¶ÅÂéüÊñô$/;"	m	struct:ObjectBase
strField28	base/include/srvEngine.h	/^	char  strField28[16];    \/\/ Áü≥ÂåñÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField28	base/include/srvEngine.h	/^	char  strField28[32];    \/\/ ÂëΩ‰∏≠Áéá$/;"	m	struct:ColorObjectBase
strField28	base/include/srvEngine.h	/^	char  strField28[4096];    \/\/ Êê∫Â∏¶Áâ©ÂìÅ$/;"	m	struct:NpcBase
strField29	base/include/srvEngine.h	/^	char  strField29[16];    \/\/ Â§±ÊòéÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField29	base/include/srvEngine.h	/^	char  strField29[32];    \/\/ Èó™ÈÅøÁéá$/;"	m	struct:ColorObjectBase
strField3	base/include/srvEngine.h	/^	char  strField3[128];    \/\/ ÈáëËâ≤ÂìÅË¥®$/;"	m	struct:ColorObjectBase
strField3	base/include/srvEngine.h	/^	char  strField3[16];    \/\/ x%Âê∏Êî∂ÁîüÂëΩÂÄºy$/;"	m	struct:SoulStoneBase
strField3	base/include/srvEngine.h	/^	char  strField3[16];    \/\/ Â¢ûÂä†‰º§ÂÆ≥ÂÄºx%$/;"	m	struct:FiveSetBase
strField3	base/include/srvEngine.h	/^	char  strField3[16];    \/\/ Â¢ûÂä†‰º§ÂÆ≥ÂÄºxÔºÖ$/;"	m	struct:HolyObjectBase
strField3	base/include/srvEngine.h	/^	char  strField3[32];    \/\/ Â•óË£Ö4$/;"	m	struct:SetObjectBase
strField30	base/include/srvEngine.h	/^	char  strField30[1024];    \/\/ ‰ΩøÁî®ÊäÄËÉΩ$/;"	m	struct:NpcBase
strField30	base/include/srvEngine.h	/^	char  strField30[16];    \/\/ ÂÆöË∫´Â¢ûÂä†$/;"	m	struct:SoulStoneBase
strField30	base/include/srvEngine.h	/^	char  strField30[32];    \/\/ ÊäóÊØíÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField31	base/include/srvEngine.h	/^	char  strField31[1024];    \/\/ Áä∂ÊÄÅ$/;"	m	struct:NpcBase
strField31	base/include/srvEngine.h	/^	char  strField31[16];    \/\/ ÂáèÈÄüÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField31	base/include/srvEngine.h	/^	char  strField31[32];    \/\/ ÊäóÈ∫ªÁóπÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField32	base/include/srvEngine.h	/^	char  strField32[16];    \/\/ ËØ±ÊÉëÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField32	base/include/srvEngine.h	/^	char  strField32[32];    \/\/ ÊäóÁú©ÊôïÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField33	base/include/srvEngine.h	/^	char  strField33[32];    \/\/ ÊäóÂô¨È≠îÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField34	base/include/srvEngine.h	/^	char  strField34[16];    \/\/ ÂäõÈáè$/;"	m	struct:SoulStoneBase
strField34	base/include/srvEngine.h	/^	char  strField34[32];    \/\/ ÊäóÂô¨ÂäõÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField35	base/include/srvEngine.h	/^	char  strField35[16];    \/\/ Êô∫Âäõ$/;"	m	struct:SoulStoneBase
strField35	base/include/srvEngine.h	/^	char  strField35[32];    \/\/ ÊäóÊ∑∑‰π±Â¢ûÂä†$/;"	m	struct:ColorObjectBase
strField36	base/include/srvEngine.h	/^	char  strField36[16];    \/\/ ÊïèÊç∑$/;"	m	struct:SoulStoneBase
strField36	base/include/srvEngine.h	/^	char  strField36[32];    \/\/ ÊäóÂÜ∞ÂÜªÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField37	base/include/srvEngine.h	/^	char  strField37[16];    \/\/ Á≤æÁ•û$/;"	m	struct:SoulStoneBase
strField37	base/include/srvEngine.h	/^	char  strField37[32];    \/\/ ÊäóÁü≥ÂåñÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField38	base/include/srvEngine.h	/^	char  strField38[16];    \/\/ ‰ΩìË¥®   $/;"	m	struct:SoulStoneBase
strField38	base/include/srvEngine.h	/^	char  strField38[32];    \/\/ ÊäóÂ§±ÊòéÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField38	base/include/srvEngine.h	/^	char  strField38[64];    \/\/ ÂõûË°Ä$/;"	m	struct:NpcBase
strField39	base/include/srvEngine.h	/^	char  strField39[256];    \/\/ Á•ûÂú£Ê†áËØÜ $/;"	m	struct:ObjectBase
strField39	base/include/srvEngine.h	/^	char  strField39[32];    \/\/ ÊäóÂÆöË∫´Â¢ûÂä†$/;"	m	struct:ColorObjectBase
strField4	base/include/srvEngine.h	/^	char  strField4[16];    \/\/ x%Âê∏Êî∂Ê≥ïÊúØÂÄºy$/;"	m	struct:SoulStoneBase
strField4	base/include/srvEngine.h	/^	char  strField4[16];    \/\/ ‰∫îË°åÂ±ûÊÄßÂ¢ûÂä†$/;"	m	struct:HolyObjectBase
strField4	base/include/srvEngine.h	/^	char  strField4[16];    \/\/ ‰º§ÂÆ≥ÂèçÂ∞Ñx%$/;"	m	struct:FiveSetBase
strField4	base/include/srvEngine.h	/^	char  strField4[32];    \/\/ ÂäõÈáè$/;"	m	struct:ColorObjectBase
strField4	base/include/srvEngine.h	/^	char  strField4[32];    \/\/ Â•óË£Ö3$/;"	m	struct:SetObjectBase
strField40	base/include/srvEngine.h	/^	char  strField40[32];    \/\/ ÊäóÂáèÈÄüÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField41	base/include/srvEngine.h	/^	char  strField41[32];    \/\/ ÊäóËØ±ÊÉëÂ¢ûÂä†$/;"	m	struct:ColorObjectBase
strField42	base/include/srvEngine.h	/^	char  strField42[32];    \/\/ ÊÅ¢Â§çËÄê‰πÖÂ∫¶$/;"	m	struct:ColorObjectBase
strField43	base/include/srvEngine.h	/^	char  strField43[32];    \/\/ ÈáçÂáª$/;"	m	struct:ColorObjectBase
strField45	base/include/srvEngine.h	/^	char  strField45[1024];    \/\/ ÊäÄËÉΩÂä†Êàê$/;"	m	struct:ColorObjectBase
strField46	base/include/srvEngine.h	/^	char  strField46[32];    \/\/ ÂÖ®Á≥ªÊäÄËÉΩÂä†Êàê$/;"	m	struct:ColorObjectBase
strField5	base/include/srvEngine.h	/^	char  strField5[16];    \/\/ x%ÂøΩËßÜÁõÆÊ†áÈò≤Âæ°$/;"	m	struct:FiveSetBase
strField5	base/include/srvEngine.h	/^	char  strField5[16];    \/\/ ÁîüÂëΩÂÄºÊÅ¢Â§ç$/;"	m	struct:HolyObjectBase
strField5	base/include/srvEngine.h	/^	char  strField5[16];    \/\/ ËΩ¨Êç¢x%ÁîüÂëΩÂÄº‰∏∫Ê≥ïÊúØÂÄºÂáèÂ∞ë$/;"	m	struct:SoulStoneBase
strField5	base/include/srvEngine.h	/^	char  strField5[32];    \/\/ Â•óË£Ö2$/;"	m	struct:SetObjectBase
strField5	base/include/srvEngine.h	/^	char  strField5[32];    \/\/ Êô∫Âäõ$/;"	m	struct:ColorObjectBase
strField6	base/include/srvEngine.h	/^	char  strField6[16];    \/\/ Â¢ûÂä†Èì∂Â≠êÊéâËêΩx%$/;"	m	struct:SoulStoneBase
strField6	base/include/srvEngine.h	/^	char  strField6[16];    \/\/ Ê≥ïÊúØÂÄºÊÅ¢Â§ç$/;"	m	struct:HolyObjectBase
strField6	base/include/srvEngine.h	/^	char  strField6[32];    \/\/ Â•óË£Ö1$/;"	m	struct:SetObjectBase
strField6	base/include/srvEngine.h	/^	char  strField6[32];    \/\/ ÊïèÊç∑$/;"	m	struct:ColorObjectBase
strField7	base/include/srvEngine.h	/^	char  strField7[16];    \/\/ x%ÂèåÂÄçÁªèÈ™å$/;"	m	struct:SoulStoneBase
strField7	base/include/srvEngine.h	/^	char  strField7[16];    \/\/ ‰ΩìÂäõÂÄºÊÅ¢Â§ç$/;"	m	struct:HolyObjectBase
strField7	base/include/srvEngine.h	/^	char  strField7[256];    \/\/ Â≠î$/;"	m	struct:ObjectBase
strField7	base/include/srvEngine.h	/^	char  strField7[32];    \/\/ Á≤æÁ•û$/;"	m	struct:ColorObjectBase
strField8	base/include/srvEngine.h	/^	char  strField8[16];    \/\/ Â¢ûÂä†ÊéâÂÆùÁéáx%$/;"	m	struct:SoulStoneBase
strField8	base/include/srvEngine.h	/^	char  strField8[16];    \/\/ ÊîªÂáªÈÄüÂ∫¶$/;"	m	struct:HolyObjectBase
strField8	base/include/srvEngine.h	/^	char  strField8[32];    \/\/ ‰ΩìË¥®$/;"	m	struct:ColorObjectBase
strField9	base/include/srvEngine.h	/^	char  strField9[16];    \/\/ ÊäóÊØíÂ¢ûÂä†$/;"	m	struct:SoulStoneBase
strField9	base/include/srvEngine.h	/^	char  strField9[16];    \/\/ ÁßªÂä®ÈÄüÂ∫¶$/;"	m	struct:HolyObjectBase
strField9	base/include/srvEngine.h	/^	char  strField9[256];    \/\/ ËçØÂìÅ‰ΩúÁî®$/;"	m	struct:ObjectBase
strField9	base/include/srvEngine.h	/^	char  strField9[32];    \/\/ ‰∫îË°åÂ±ûÊÄß$/;"	m	struct:ColorObjectBase
strLength	deps/tinyxml/tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:TiXmlBase::Entity
strMapName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::stMapName
strName	base/include/csCommon.h	/^/;"	m	struct:Cmd::stAccountLogonUserCmd
strName	base/include/csCommon.h	/^/;"	m	struct:Cmd::stPasswordLogonUserCmd
strName	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
strName	base/include/csCommon.h	/^/;"	m	struct:_Object
strNewPassword	base/include/csCommon.h	/^/;"	m	struct:Cmd::stPasswordLogonUserCmd
strPassword	base/include/csCommon.h	/^/;"	m	struct:Cmd::stAccountLogonUserCmd
strPassword	base/include/csCommon.h	/^/;"	m	struct:Cmd::stPasswordLogonUserCmd
str_Attribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::Equips::Freedom_Attribute
str_Attribute	base/include/csCommon.h	/^/;"	m	struct:_Object::Freedom_Attribute
str_gem_state	SessionServer/libsessionserver/Gem.cpp	/^char str_gem_state[][20]={"GEM_READY","GEM_ACTIVE","GEM_READY_OVER","GEM_OVER"};$/;"	v
str_state	base/src/zMisc.cpp	/^  char str_state[9][20]={"DARE_READY","DARE_READY_QUESTION","DARE_READY_ACTIVE","DARE_RETURN_GOLD",$/;"	m	namespace:DareDef	file:
str_state	base/src/zMisc.cpp	/^  char str_state[9][30]={"QUIZ_READY","QUIZ_READY_QUESTION","QUIZ_SEND_QUESTION","QUIZ_ACTIVE_QUESTION",$/;"	m	namespace:QuizDef	file:
str_type	base/src/zMisc.cpp	/^  char str_type[2][20] = {"WORLD_QUIZ","PERSONAL_QUIZ"};$/;"	m	namespace:QuizDef	file:
str_type	base/src/zMisc.cpp	/^  char str_type[7][30] = {"UNION_DARE","SCHOOL_DARE","SEPT_DARE","SEPT_NPC_DARE","UNION_CITY_DARE","COUNTRY_FORMAL_DARE","COUNTRY_FORMAL_ANTI_DARE"};$/;"	m	namespace:DareDef	file:
stream	base/src/getopt.c	/^  FILE *stream;			\/* The stream we're outputting to.  *\/$/;"	m	struct:argp_fmtstream	file:
stream	base/src/getopt.c	/^  argp_fmtstream_t stream;$/;"	m	struct:pentry_state	file:
stringtok	base/include/srvEngine.h	/^stringtok(Container &container,std::string const &in,$/;"	f
stuff	base/include/srvEngine.h	/^			stuff(const std::string& id_,const std::string& level_,const std::string& number_) : id(atoi(id_.c_str())),number(atoi(number_.c_str())),level(atoi(level_.c_str()))$/;"	f	struct:zObjectB::material::stuff
stuff	base/include/srvEngine.h	/^		struct  stuff$/;"	s	struct:zObjectB::material
stuff	base/include/srvEngine.h	/^	uint16_t stuff;    \/\/ ÂçáÁ∫ßÂéüÊñô$/;"	m	struct:zUpgradeObjectB
stuffs	base/include/srvEngine.h	/^		std::vector<stuff> stuffs;$/;"	m	struct:zObjectB::material
stuffs_iterator	base/include/srvEngine.h	/^		typedef std::vector<stuff>::iterator stuffs_iterator;$/;"	t	struct:zObjectB::material
stxml_SuitAttribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:stxml_SuitAttribute
stxml_SuitAttribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s
subParam	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stMiniGameUserCmd
subUserCount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
subat	BillServer/old_back/BillServer.h	/^  int            subat;                                      \/\/◊”¿‡–Õ$/;"	m	struct:BillData
subject_type	SessionServer/libsessionserver/SessionServer.h	/^    BYTE subject_type;$/;"	m	class:CQuiz
subject_type	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createQuiz_SceneSession
subjects	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CSubject>   subjects;$/;"	m	class:CQuiz
subkind	base/include/srvEngine.h	/^	uint32_t  subkind;            \/\/ÊäÄËÉΩÊ†ëÂà´$/;"	m	struct:zSkillB
subs	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<RecommendSub*> subs; \/\/ ±ªÕ∆ºˆ»À¡–±Ì$/;"	m	class:Recommend
success_recv	base/include/x_socket.cpp	250;"	d	file:
success_unpack	base/include/x_socket.cpp	61;"	d	file:
suit	base/include/csCommon.h	/^/;"	f	class:Cmd::Cmd::Card
sum	SceneServer/libscenesserver/SceneServer1.h	/^    static SceneUserManager *sum;$/;"	m	class:SceneUserManager
sum	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::SceneUserManager
summon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
summonBoss	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::summonBoss()$/;"	f	class:Rush
summonList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
summonNpc	SceneServer/libscenesserver/Scene.cpp	/^int Scene::summonNpc(const t_NpcDefine &define,const zPos &pos,zNpcB *base,unsigned short dupIndex)$/;"	f	class:Scene
summonOneNpc	SceneServer/libscenesserver/SceneServer1.h	/^Npc* Scene::summonOneNpc(const t_NpcDefine &define,const zPos &pos,zNpcB *base,DWORD standTime,zNpcB* abase,BYTE vdir, SceneEntryPk * m)$/;"	f	class:Scene
summonPet	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::summonPet()$/;"	f	class:Rush
summonServant	SceneServer/libscenesserver/Rush.cpp	/^bool Rush::summonServant()$/;"	f	class:Rush
summonSoldiers	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::ScenePet
summonSoldiers	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
summonSoldiers	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^int SceneArchitecture::summonSoldiers(DWORD id, Cmd::petType type, WORD num, DWORD sid, const char * name, DWORD anpcid,zPos pos,BYTE dir)$/;"	f	class:SceneArchitecture
summonTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Horse
summonTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
summon_servant_region	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
summoned	SceneServer/libscenesserver/SceneServer1.h	/^  bool summoned;$/;"	m	class:SceneNpc
summonrelive	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
summonsplit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
supdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
superClient	base/x_subnetservice.h	/^	shared_ptr<super_client> superClient;    \/**< ÁÆ°ÁêÜÊúçÂä°Âô®ÁöÑÂÆ¢Êà∑Á´ØÂÆû‰æã *\/$/;"	m	class:x_subnetservice
super_client	base/super_client.h	/^	super_client(boost::asio::io_service &ios):tcp_client(ios){$/;"	f	class:super_client
super_client	base/super_client.h	/^class super_client : public tcp_client$/;"	c
super_mode	SceneServer/libscenesserver/SceneServer1.h	/^      super_mode =   0x08,$/;"	e	enum:Gm::__anon100
super_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	e	enum:O::Gm::__anon90
supportTransactions	base/include/srvEngine.h	/^	const bool supportTransactions;$/;"	m	struct:UrlInfo
suppressed_dup_arg	base/src/getopt.c	/^  int suppressed_dup_arg;$/;"	m	struct:hol_help_state	file:
swapMaterialByPer	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::swapMaterialByPer(CCountry* pToCountry,float per)$/;"	f	class:CCountry
swapdamcharid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
swapdamcharid2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
swdValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	union:O::SkillState::__anon59
switchAI	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::switchAI(const bool setTime)$/;"	f	class:NpcAIController
switchPKMode	SceneServer/libscenesserver/ScenePk.cpp	/^bool SceneUser::switchPKMode(const Cmd::stPKModeUserCmd *rev)$/;"	f	class:SceneUser
switchdie	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
sword_udam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
sync	base/include/srvEngine.h	/^		sync    =  1,            \/**< Á≠âÂæÖÂêåÊ≠•Áä∂ÊÄÅ *\/$/;"	e	enum:x_tcp_clientTask::ConnState
sync	base/include/x_socket.cpp	/^bool x_socket::sync()$/;"	f	class:x_socket
sync	base/src/x_tcp_client.cpp	/^void x_tcp_buffer_client::sync()$/;"	f	class:x_tcp_buffer_client
sync	base/src/x_tcptask.h	/^		sync    =  2,            \/**< Á≠âÂæÖÊù•Ëá™ÂÖ∂ÂÆÉÊúçÂä°Âô®ÁöÑÈ™åËØÅ‰ø°ÊÅØÂêåÊ≠• *\/$/;"	e	enum:x_tcptask::zTCPTask_State
syncThread	base/src/x_tcptaskpool.h	/^	boost::scoped_ptr<boost::thread> syncThread;$/;"	m	class:x_tcptaskpool
syncThreadFunctor	base/src/x_tcptaskpool.h	/^	boost::shared_ptr<x_sync_thread_functor> syncThreadFunctor;$/;"	m	class:x_tcptaskpool
sys	SceneServer/libscenesserver/script_func.cpp	/^bool sys(SceneUser* target,int type,const char* msg)$/;"	f
sysSetting	GatewayServer/old_back/GatewayServer.h	/^	BYTE sysSetting[20];$/;"	m	class:GateUser
sysSetting	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	union:O::LiveSkills::SceneUser::__anon84
sysSetting	SessionServer/libsessionserver/SessionServer.h	/^    BYTE sysSetting[20];\/\/œµÕ≥…Ë÷√$/;"	m	class:UserSession
sysSetting	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sysSetting_SceneSession
systemstate	GatewayServer/old_back/GatewayServer.h	/^	volatile Systemstate systemstate;$/;"	m	class:GateUser
szCapName	SessionServer/libsessionserver/SessionServer.h	/^    char  szCapName[MAX_NAMESIZE]; \/\/ ∂”≥§–’√˚$/;"	m	class:CCaptain
szName	SessionServer/libsessionserver/SessionManager.cpp	/^    char  szName[MAX_NAMESIZE];$/;"	m	class:CGraceUser	file:
szName	SessionServer/libsessionserver/SessionServer.h	/^    char  szName[MAX_NAMESIZE];$/;"	m	class:CTech
szOptionDesc	SessionServer/libsessionserver/SessionServer.h	/^    char szOptionDesc[MAX_NAMESIZE];$/;"	m	class:CVoteItem
szResearchName	SessionServer/libsessionserver/SessionServer.h	/^    char  szResearchName[MAX_NAMESIZE];$/;"	m	class:CTech
tGood	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
tGoodNormal	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
tItemThisID	base/include/csCommon.h	/^/;"	t
tProtect	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState
t_Bill_Cmd	base/billcmd.h	/^			t_Bill_Cmd()$/;"	f	struct:Cmd::Bill::t_Bill_Cmd
t_Bill_Cmd	base/billcmd.h	/^		struct t_Bill_Cmd : t_NullCmd$/;"	s	namespace:Cmd::Bill
t_Bill_Cmd	base/supercmd.h	/^			t_Bill_Cmd() {$/;"	f	struct:Cmd::Super::t_Bill_Cmd
t_Bill_Cmd	base/supercmd.h	/^		struct t_Bill_Cmd : t_NullCmd {$/;"	s	namespace:Cmd::Super
t_Bill_Forward	base/billcmd.h	/^			t_Bill_Forward(){$/;"	f	struct:Cmd::Bill::t_Bill_Forward
t_Bill_Forward	base/billcmd.h	/^		struct t_Bill_Forward : t_NullCmd {$/;"	s	namespace:Cmd::Bill
t_Bill_ForwardBillToScene	base/billcmd.h	/^			t_Bill_ForwardBillToScene(){$/;"	f	struct:Cmd::Bill::t_Bill_ForwardBillToScene
t_Bill_ForwardBillToScene	base/billcmd.h	/^		struct t_Bill_ForwardBillToScene : t_Bill_Forward{$/;"	s	namespace:Cmd::Bill
t_Bill_ForwardUser	base/billcmd.h	/^			t_Bill_ForwardUser(){$/;"	f	struct:Cmd::Bill::t_Bill_ForwardUser
t_Bill_ForwardUser	base/billcmd.h	/^		struct t_Bill_ForwardUser : t_Bill_Forward {$/;"	s	namespace:Cmd::Bill
t_Bill_Gate	base/billcmd.h	/^			t_Bill_Gate() {$/;"	f	struct:Cmd::Bill::t_Bill_Gate
t_Bill_Gate	base/billcmd.h	/^		struct t_Bill_Gate : t_NullCmd {$/;"	s	namespace:Cmd::Bill
t_BufferCmdQueue	base/src/x_buffer.h	/^typedef ByteBuffer<std::vector<BYTE> > t_BufferCmdQueue;$/;"	t
t_CheckRelationEmpty	base/include/csTurn.h	/^		t_CheckRelationEmpty()$/;"	f	struct:Cmd::t_CheckRelationEmpty
t_CheckRelationEmpty	base/include/csTurn.h	/^	struct t_CheckRelationEmpty : public stTurnUserCmd$/;"	s	namespace:Cmd
t_CheckRelationEmptyResult	base/include/csTurn.h	/^		t_CheckRelationEmptyResult()$/;"	f	struct:Cmd::t_CheckRelationEmptyResult
t_CheckRelationEmptyResult	base/include/csTurn.h	/^	struct t_CheckRelationEmptyResult : public t_NullCmd$/;"	s	namespace:Cmd
t_FL_GY	base/flcmd.h	/^			t_FL_GY()$/;"	f	struct:Cmd::FL::t_FL_GY
t_FL_GY	base/flcmd.h	/^		struct t_FL_GY : t_NullCmd$/;"	s	namespace:Cmd::FL
t_FL_Login	base/flcmd.h	/^			t_FL_Login() {$/;"	f	struct:Cmd::FL::t_FL_Login
t_FL_Login	base/flcmd.h	/^		struct t_FL_Login : t_NullCmd {$/;"	s	namespace:Cmd::FL
t_FL_Session	base/flcmd.h	/^			t_FL_Session()$/;"	f	struct:Cmd::FL::t_FL_Session
t_FL_Session	base/flcmd.h	/^		struct t_FL_Session : t_NullCmd$/;"	s	namespace:Cmd::FL
t_GYList_FL	base/flcmd.h	/^			t_GYList_FL()$/;"	f	struct:Cmd::FL::t_GYList_FL
t_GYList_FL	base/flcmd.h	/^		struct t_GYList_FL : t_FL_GY$/;"	s	namespace:Cmd::FL
t_GYList_Gateway	base/supercmd.h	/^			t_GYList_Gateway() {$/;"	f	struct:Cmd::Super::t_GYList_Gateway
t_GYList_Gateway	base/supercmd.h	/^		struct t_GYList_Gateway : t_Super_Gate {$/;"	s	namespace:Cmd::Super
t_GameTime	base/supercmd.h	/^			t_GameTime()$/;"	f	struct:Cmd::Super::t_GameTime
t_GameTime	base/supercmd.h	/^		struct t_GameTime : t_Startup_Cmd$/;"	s	namespace:Cmd::Super
t_GatewayRecord	base/recordcmd.h	/^			t_GatewayRecord(){$/;"	f	struct:Cmd::Record::t_GatewayRecord
t_GatewayRecord	base/recordcmd.h	/^		struct t_GatewayRecord : t_NullCmd{$/;"	s	namespace:Cmd::Record
t_GatewaySession	base/sessioncmd.h	/^			t_GatewaySession(){$/;"	f	struct:Cmd::Session::t_GatewaySession
t_GatewaySession	base/sessioncmd.h	/^		struct t_GatewaySession : t_NullCmd{$/;"	s	namespace:Cmd::Session
t_GatewaySession_Test	base/sessioncmd.h	/^			t_GatewaySession_Test(){$/;"	f	struct:Cmd::Session::t_GatewaySession_Test
t_GatewaySession_Test	base/sessioncmd.h	/^		struct t_GatewaySession_Test: t_GatewaySession{$/;"	s	namespace:Cmd::Session
t_HorsePkData	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
t_LoginBill	base/billcmd.h	/^			t_LoginBill()$/;"	f	struct:Cmd::Bill::t_LoginBill
t_LoginBill	base/billcmd.h	/^		struct t_LoginBill : t_Bill_Cmd$/;"	s	namespace:Cmd::Bill
t_LoginFL	base/flcmd.h	/^			t_LoginFL(){$/;"	f	struct:Cmd::FL::t_LoginFL
t_LoginFL	base/flcmd.h	/^		struct t_LoginFL : t_FL_Login$/;"	s	namespace:Cmd::FL
t_LoginFL_OK	base/flcmd.h	/^			t_LoginFL_OK() {$/;"	f	struct:Cmd::FL::t_LoginFL_OK
t_LoginFL_OK	base/flcmd.h	/^		struct t_LoginFL_OK : t_NullCmd {$/;"	s	namespace:Cmd::FL
t_LoginMini	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_LoginMini
t_LoginMini	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_LoginRecord	base/recordcmd.h	/^			t_LoginRecord()$/;"	f	struct:Cmd::Record::t_LoginRecord
t_LoginRecord	base/recordcmd.h	/^		struct t_LoginRecord : t_Record_Cmd$/;"	s	namespace:Cmd::Record
t_LoginScene	base/scenecmd.h	/^			t_LoginScene()$/;"	f	struct:Cmd::Scene::t_LoginScene
t_LoginScene	base/scenecmd.h	/^		struct t_LoginScene : t_Scene_Cmd$/;"	s	namespace:Cmd::Scene
t_LoginSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_LoginSession
t_LoginSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_LoginSession	base/sessioncmd.h	/^			t_LoginSession()$/;"	f	struct:Cmd::Session::t_LoginSession
t_LoginSession	base/sessioncmd.h	/^		struct t_LoginSession : t_Session_Cmd$/;"	s	namespace:Cmd::Session
t_MainUserData	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_MapBuildingData	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_MapNpcData	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_MapNpcDataState	base/include/csCommon.h	/^/;"	f	struct:Cmd::t_MapNpcDataState
t_MapNpcDataState	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_MapObjectData	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_MapPetData	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_MapUserData	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_MapUserDataState	base/include/csCommon.h	/^/;"	f	struct:Cmd::t_MapUserDataState
t_MapUserDataState	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_MapUserSculpt	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_Message	SceneServer/libscenesserver/SceneServer1.h	/^    struct t_Message$/;"	s	class:MessageSystem
t_Mini_ForwardMiniToScene	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Mini_ForwardMiniToScene
t_Mini_ForwardMiniToScene	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_Mini_ForwardUser	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Mini_ForwardUser
t_Mini_ForwardUser	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_Mini_UserForwardMini	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Mini_UserForwardMini
t_Mini_UserForwardMini	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_NewLoginSession	base/flcmd.h	/^		t_NewLoginSession() {$/;"	f	struct:Cmd::t_NewLoginSession
t_NewLoginSession	base/flcmd.h	/^	struct t_NewLoginSession {$/;"	s	namespace:Cmd
t_NewSession_Bill	base/supercmd.h	/^			t_NewSession_Bill() {$/;"	f	struct:Cmd::Super::t_NewSession_Bill
t_NewSession_Bill	base/supercmd.h	/^		struct t_NewSession_Bill : t_Bill_Cmd {$/;"	s	namespace:Cmd::Super
t_NewSession_Gateway	base/billcmd.h	/^			t_NewSession_Gateway() {$/;"	f	struct:Cmd::Bill::t_NewSession_Gateway
t_NewSession_Gateway	base/billcmd.h	/^		struct t_NewSession_Gateway : t_Bill_Gate {$/;"	s	namespace:Cmd::Bill
t_NewSession_Gateway	base/supercmd.h	/^			t_NewSession_Gateway() {$/;"	f	struct:Cmd::Super::t_NewSession_Gateway
t_NewSession_Gateway	base/supercmd.h	/^		struct t_NewSession_Gateway : t_Super_Gate {$/;"	s	namespace:Cmd::Super
t_NewSession_Session	base/flcmd.h	/^			t_NewSession_Session() {$/;"	f	struct:Cmd::FL::t_NewSession_Session
t_NewSession_Session	base/flcmd.h	/^		struct t_NewSession_Session : t_FL_Session {$/;"	s	namespace:Cmd::FL
t_NpcAIDefine	SceneServer/libscenesserver/SceneServer1.h	/^  t_NpcAIDefine()$/;"	f	struct:t_NpcAIDefine
t_NpcAIDefine	SceneServer/libscenesserver/SceneServer1.h	/^  t_NpcAIDefine(SceneNpcAIType type,const zPos &pos,int regionX,int regionY,int lasttime)$/;"	f	struct:t_NpcAIDefine
t_NpcAIDefine	SceneServer/libscenesserver/SceneServer1.h	/^  t_NpcAIDefine(const t_NpcAIDefine &ad)$/;"	f	struct:t_NpcAIDefine
t_NpcAIDefine	SceneServer/libscenesserver/SceneServer1.h	/^struct t_NpcAIDefine$/;"	s
t_NpcData	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_NpcDefine	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::t_NpcDefine
t_NpcDefine	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	class:O::LiveSkills
t_NullCmd	base/x_nullcmd.h	/^		t_NullCmd(const BYTE cmd = CMD_NULL,const BYTE para = PARA_NULL):cmd(cmd),para(para)$/;"	f	struct:Cmd::t_NullCmd
t_NullCmd	base/x_nullcmd.h	/^	struct t_NullCmd$/;"	s	namespace:Cmd
t_Object	base/include/csCommon.h	/^/;"	t	typeref:struct:_Object
t_RQGYList_FL	base/flcmd.h	/^			t_RQGYList_FL() {$/;"	f	struct:Cmd::FL::t_RQGYList_FL
t_RQGYList_FL	base/flcmd.h	/^		struct t_RQGYList_FL : t_NullCmd {$/;"	s	namespace:Cmd::FL
t_RQGYList_Gateway	base/supercmd.h	/^			t_RQGYList_Gateway() {$/;"	f	struct:Cmd::Super::t_RQGYList_Gateway
t_RQGYList_Gateway	base/supercmd.h	/^		struct t_RQGYList_Gateway : t_Super_Gate {$/;"	s	namespace:Cmd::Super
t_ReadUser_SceneRecord	base/recordcmd.h	/^			t_ReadUser_SceneRecord(){$/;"	f	struct:Cmd::Record::t_ReadUser_SceneRecord
t_ReadUser_SceneRecord	base/recordcmd.h	/^		struct t_ReadUser_SceneRecord : t_SceneRecord{$/;"	s	namespace:Cmd::Record
t_Record_Cmd	base/recordcmd.h	/^			t_Record_Cmd()$/;"	f	struct:Cmd::Record::t_Record_Cmd
t_Record_Cmd	base/recordcmd.h	/^		struct t_Record_Cmd : t_NullCmd$/;"	s	namespace:Cmd::Record
t_Restart_ServerEntry_NotifyOther	base/supercmd.h	/^			t_Restart_ServerEntry_NotifyOther()$/;"	f	struct:Cmd::Super::t_Restart_ServerEntry_NotifyOther
t_Restart_ServerEntry_NotifyOther	base/supercmd.h	/^		struct t_Restart_ServerEntry_NotifyOther : t_Startup_Cmd$/;"	s	namespace:Cmd::Super
t_SceneRecord	base/recordcmd.h	/^			t_SceneRecord(){$/;"	f	struct:Cmd::Record::t_SceneRecord
t_SceneRecord	base/recordcmd.h	/^		struct t_SceneRecord : t_NullCmd{$/;"	s	namespace:Cmd::Record
t_SceneSession	base/sessioncmd.h	/^			t_SceneSession(){$/;"	f	struct:Cmd::Session::t_SceneSession
t_SceneSession	base/sessioncmd.h	/^		struct t_SceneSession : t_NullCmd{$/;"	s	namespace:Cmd::Session
t_SceneSession_Test	base/sessioncmd.h	/^			t_SceneSession_Test(){$/;"	f	struct:Cmd::Session::t_SceneSession_Test
t_SceneSession_Test	base/sessioncmd.h	/^		struct t_SceneSession_Test: t_SceneSession{$/;"	s	namespace:Cmd::Session
t_Scene_Check_Draw	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Scene_Check_Draw
t_Scene_Check_Draw	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_Scene_Cmd	base/scenecmd.h	/^			t_Scene_Cmd()$/;"	f	struct:Cmd::Scene::t_Scene_Cmd
t_Scene_Cmd	base/scenecmd.h	/^		struct t_Scene_Cmd : t_NullCmd$/;"	s	namespace:Cmd::Scene
t_Scene_Deposit	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Scene_Deposit
t_Scene_Deposit	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_Scene_Deposit_Ret	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Scene_Deposit_Ret
t_Scene_Deposit_Ret	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_Scene_Draw_Ret	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Scene_Draw_Ret
t_Scene_Draw_Ret	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_Scene_ForwardMini	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Scene_ForwardMini
t_Scene_ForwardMini	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_Scene_SetScene	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_Scene_SetScene
t_Scene_SetScene	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_Session_Cmd	base/sessioncmd.h	/^			t_Session_Cmd()$/;"	f	struct:Cmd::Session::t_Session_Cmd
t_Session_Cmd	base/sessioncmd.h	/^		struct t_Session_Cmd : t_NullCmd$/;"	s	namespace:Cmd::Session
t_Session_Cmd	base/supercmd.h	/^			t_Session_Cmd()$/;"	f	struct:Cmd::Super::t_Session_Cmd
t_Session_Cmd	base/supercmd.h	/^		struct t_Session_Cmd : t_NullCmd$/;"	s	namespace:Cmd::Super
t_SetService_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_SetService_SceneSession
t_SetService_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_Skill	base/include/csCommon.h	/^/;"	t	typeref:struct:_Skill
t_SpendGold_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_SpendGold_SceneSession
t_SpendGold_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_StackCmdQueue	base/src/x_buffer.h	/^typedef ByteBuffer<BYTE [PACKET_ZIP_BUFFER]> t_StackCmdQueue;$/;"	t
t_Startup_Cmd	base/supercmd.h	/^			t_Startup_Cmd()$/;"	f	struct:Cmd::Super::t_Startup_Cmd
t_Startup_Cmd	base/supercmd.h	/^		struct t_Startup_Cmd: t_NullCmd$/;"	s	namespace:Cmd::Super
t_Startup_OK	base/supercmd.h	/^			t_Startup_OK()$/;"	f	struct:Cmd::Super::t_Startup_OK
t_Startup_OK	base/supercmd.h	/^		struct t_Startup_OK : t_Startup_Cmd$/;"	s	namespace:Cmd::Super
t_Startup_Request	base/supercmd.h	/^			t_Startup_Request()$/;"	f	struct:Cmd::Super::t_Startup_Request
t_Startup_Request	base/supercmd.h	/^		struct t_Startup_Request : t_Startup_Cmd$/;"	s	namespace:Cmd::Super
t_Startup_Response	base/supercmd.h	/^			t_Startup_Response()$/;"	f	struct:Cmd::Super::t_Startup_Response
t_Startup_Response	base/supercmd.h	/^		struct t_Startup_Response : t_Startup_Cmd$/;"	s	namespace:Cmd::Super
t_Startup_ServerEntry_NotifyMe	base/supercmd.h	/^			t_Startup_ServerEntry_NotifyMe()$/;"	f	struct:Cmd::Super::t_Startup_ServerEntry_NotifyMe
t_Startup_ServerEntry_NotifyMe	base/supercmd.h	/^		struct t_Startup_ServerEntry_NotifyMe : t_Startup_Cmd$/;"	s	namespace:Cmd::Super
t_Startup_ServerEntry_NotifyOther	base/supercmd.h	/^			t_Startup_ServerEntry_NotifyOther()$/;"	f	struct:Cmd::Super::t_Startup_ServerEntry_NotifyOther
t_Startup_ServerEntry_NotifyOther	base/supercmd.h	/^		struct t_Startup_ServerEntry_NotifyOther : t_Startup_Cmd$/;"	s	namespace:Cmd::Super
t_Startup_test	base/supercmd.h	/^			t_Startup_test(){$/;"	f	struct:Cmd::Super::t_Startup_test
t_Startup_test	base/supercmd.h	/^		struct t_Startup_test: t_Startup_Cmd {$/;"	s	namespace:Cmd::Super
t_Super_Gate	base/supercmd.h	/^			t_Super_Gate() {$/;"	f	struct:Cmd::Super::t_Super_Gate
t_Super_Gate	base/supercmd.h	/^		struct t_Super_Gate : t_NullCmd {$/;"	s	namespace:Cmd::Super
t_Test_GatewayRecord	base/recordcmd.h	/^			t_Test_GatewayRecord(){$/;"	f	struct:Cmd::Record::t_Test_GatewayRecord
t_Test_GatewayRecord	base/recordcmd.h	/^		struct t_Test_GatewayRecord:t_GatewayRecord{$/;"	s	namespace:Cmd::Record
t_Test_SceneRecord	base/recordcmd.h	/^			t_Test_SceneRecord(){$/;"	f	struct:Cmd::Record::t_Test_SceneRecord
t_Test_SceneRecord	base/recordcmd.h	/^		struct t_Test_SceneRecord:t_SceneRecord{$/;"	s	namespace:Cmd::Record
t_UserData	base/include/csCommon.h	/^/;"	s	namespace:Cmd
t_UserDelete_Gateway	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_UserDelete_Gateway
t_UserDelete_Gateway	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_UserLogin_Gateway	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_UserLogin_Gateway
t_UserLogin_Gateway	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_UserLogout_Gateway	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Mini::t_UserLogout_Gateway
t_UserLogout_Gateway	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Mini
t_WriteUser_SceneRecord	base/recordcmd.h	/^			t_WriteUser_SceneRecord(){$/;"	f	struct:Cmd::Record::t_WriteUser_SceneRecord
t_WriteUser_SceneRecord	base/recordcmd.h	/^		struct t_WriteUser_SceneRecord: t_SceneRecord{$/;"	s	namespace:Cmd::Record
t_bailCheck_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_bailCheck_SceneSession
t_bailCheck_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_broadcastScene_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_broadcastScene_SceneSession
t_broadcastScene_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_changeScene_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_changeScene_SceneSession
t_changeScene_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_cityRushCust_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_cityRushCust_SceneSession
t_cityRushCust_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_cityRush_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_cityRush_SceneSession
t_cityRush_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_createDare_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_createDare_SceneSession
t_createDare_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_createQuiz_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_createQuiz_SceneSession
t_createQuiz_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_createSchool_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_createSchool_SceneSession
t_createSchool_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_expRec	SceneServer/libscenesserver/SceneServer1.h	/^  t_expRec()$/;"	f	struct:t_expRec
t_expRec	SceneServer/libscenesserver/SceneServer1.h	/^struct t_expRec$/;"	s
t_forbidTalk_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_forbidTalk_SceneSession
t_forbidTalk_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_forwardUser_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_forwardUser_SceneSession
t_forwardUser_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_gmCommand_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
t_gmCommand_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_guardFail_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_guardFail_SceneSession
t_guardFail_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_idinuse_Bill	base/supercmd.h	/^			t_idinuse_Bill() {$/;"	f	struct:Cmd::Super::t_idinuse_Bill
t_idinuse_Bill	base/supercmd.h	/^		struct t_idinuse_Bill : t_Bill_Cmd {$/;"	s	namespace:Cmd::Super
t_idinuse_Session	base/flcmd.h	/^			t_idinuse_Session()$/;"	f	struct:Cmd::FL::t_idinuse_Session
t_idinuse_Session	base/flcmd.h	/^		struct t_idinuse_Session : t_FL_Session$/;"	s	namespace:Cmd::FL
t_levelupNotify_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_levelupNotify_SceneSession
t_levelupNotify_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_privateChat_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_privateChat_SceneSession
t_privateChat_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_regScene_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_regScene_SceneSession
t_regScene_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_regScene_ret_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_regScene_ret_SceneSession
t_regScene_ret_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_regUserSuccess_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_regUserSuccess_SceneSession
t_regUserSuccess_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_regUser_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_regUser_SceneSession
t_regUser_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_removeScene_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_removeScene_SceneSession
t_removeScene_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_reqAddScene_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_reqAddScene_SceneSession
t_reqAddScene_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_sendCmd_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_sendCmd_SceneSession
t_sendCmd_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_sendGift_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_sendGift_SceneSession
t_sendGift_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_sendUserRelationID	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_sendUserRelationID
t_sendUserRelationID	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_serverNotify_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_serverNotify_SceneSession
t_serverNotify_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_shutdown_Super	base/supercmd.h	/^			t_shutdown_Super()$/;"	f	struct:Cmd::Super::t_shutdown_Super
t_shutdown_Super	base/supercmd.h	/^		struct t_shutdown_Super : t_Session_Cmd$/;"	s	namespace:Cmd::Super
t_sysSetting_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_sysSetting_SceneSession
t_sysSetting_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_unloadScene_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_unloadScene_SceneSession
t_unloadScene_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_unregScene_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_unregScene_SceneSession
t_unregScene_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_unregUser_SceneSession	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_unregUser_SceneSession
t_unregUser_SceneSession	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
t_updateConsort	base/include/csCommon.h	/^/;"	f	struct:Cmd::Cmd::Session::t_updateConsort
t_updateConsort	base/include/csCommon.h	/^/;"	s	namespace:Cmd::Cmd::Session
tab	base/include/csCommon.h	/^/;"	f	struct:stObjectLocation
table_	base/x_simple_db_table.h	/^		std::string table_;	\/\/table name$/;"	m	class:x_simple_db_table
tabsize	deps/tinyxml/tinyxml.h	/^	int tabsize;$/;"	m	class:TiXmlDocument
tabsize	deps/tinyxml/tinyxmlparser.cpp	/^	int				tabsize;$/;"	m	class:TiXmlParsingData	file:
target	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::DamagCallback
target	SceneServer/libscenesserver/Trade.cpp	/^SceneUser* TradeOrder::target() const$/;"	f	class:TradeOrder
target	base/include/srvEngine.h	/^			uint16_t target;\/\/ÁõÆÊ†á$/;"	m	struct:SkillStatus::__anon138::__anon139
targetDistance	SceneServer/libscenesserver/SceneServer1.h	/^  int targetDistance;\/\/”Îµ±«∞ƒø±Íµƒ◊Ó∂Ãæ‡¿Î$/;"	m	class:SceneNpc
targetDupIndex	GatewayServer/old_back/ScreenIndex.cpp	/^  unsigned short targetDupIndex;$/;"	m	struct:SendNineExec	file:
targetO	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser::box_target
task	SessionServer/libsessionserver/SessionServer.h	/^    SessionTask *task;$/;"	m	class:Session
taskID	SceneServer/libscenesserver/scriptTickTask.h	/^	QWORD taskID;$/;"	m	struct:scriptTask
taskPool	BillServer/old_back/BillServer.h	/^    zTCPTaskPool *taskPool;        \/**< TCP¡¨Ω”≥ÿµƒ÷∏’Î *\/$/;"	m	class:BillService
taskPool	GatewayServer/old_back/GatewayServer.cpp	/^zTCPTaskPool * GatewayService::taskPool = NULL;$/;"	m	class:GatewayService	file:
taskPool	GatewayServer/old_back/GatewayServer.h	/^	static zTCPTaskPool *taskPool;        \/**< TCP¡¨Ω”≥ÿµƒ÷∏’Î *\/$/;"	m	class:GatewayService
taskPool	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
taskPool	SessionServer/libsessionserver/SessionServer.h	/^    zTCPTaskPool *taskPool;        \/**< TCP¡¨Ω”≥ÿµƒ÷∏’Î *\/$/;"	m	class:SessionService
taskPool	tmp/MiniServer/MiniServer.h	/^    zTCPTaskPool *taskPool;        \/**< TCP¡¨Ω”≥ÿµƒ÷∏’Î *\/$/;"	m	class:MiniService
taskThreads	base/include/srvEngine.h	/^	zThreadGroup taskThreads;$/;"	m	class:x_tcp_clientTaskPool
taskType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	class:O::LiveSkills
taskUniqueContainer	BillServer/BillTaskManager.h	/^    BillTaskHashmap taskUniqueContainer;$/;"	m	class:BillTaskManager
taskUniqueContainer	FLServer/ServerManager.h	/^	ServerTaskContainer taskUniqueContainer;$/;"	m	class:ServerManager
taskUniqueContainer	SessionServer/ServerManager.h	/^    SessionTaskHashmap taskUniqueContainer;$/;"	m	class:ServerManager
taskUniqueContainer	SuperServer/ServerManager.h	/^    ServerTaskHashmap taskUniqueContainer;$/;"	m	class:ServerManager
task_	base/include/tcp_state.h	/^	shared_ptr<tcp_task> task_;$/;"	m	class:tcp_state
task_	base/task_state.h	/^	tcp_task_ptr task_;$/;"	m	class:task_state
task_count	base/src/x_tcptaskpool.cpp	/^	x_list_tcptask::size_type task_count;      \/**< tasksº∆ ˝(±£÷§œﬂ≥Ã∞≤»´*\/$/;"	m	class:x_okay_thread_functor	file:
task_count	base/src/x_tcptaskpool.cpp	/^	x_list_tcptask::size_type task_count;      \/**< tasksº∆ ˝(±£÷§œﬂ≥Ã∞≤»´*\/$/;"	m	class:x_verify_thread_functor	file:
task_count	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskContainer::size_type task_count;          \/**< tasksº∆ ˝(±£÷§œﬂ≥Ã∞≤»´*\/$/;"	m	class:x_tcp_clientTaskThread	file:
task_count	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskContainer::size_type task_count;          \/**< tasksº∆ ˝(±£÷§œﬂ≥Ã∞≤»´*\/$/;"	m	class:zCheckwaitThread	file:
task_state	base/task_state.h	/^	task_state(tcp_task_ptr task):task_(task){}$/;"	f	class:task_state
task_state	base/task_state.h	/^class task_state : public enable_shared_from_this<task_state>$/;"	c
tasks	SceneServer/libscenesserver/scriptTickTask.h	/^	QWORD tasks[taskType::end];$/;"	m	class:userScriptTaskContainer
tasks	base/include/srvEngine.h	/^	x_tcp_clientTaskContainer tasks;  \/**< ‰ªªÂä°ÂàóË°® *\/$/;"	m	class:x_tcp_clientTaskPool
tasks	base/src/x_tcptaskpool.cpp	/^		x_list_tcptask tasks;  \/**< »ŒŒÒ¡–±Ì *\/$/;"	m	class:x_sync_thread_functor	file:
tasks	base/src/x_tcptaskpool.cpp	/^	x_list_tcptask tasks;  \/**< »ŒŒÒ¡–±Ì *\/$/;"	m	class:x_okay_thread_functor	file:
tasks	base/src/x_tcptaskpool.cpp	/^	x_list_tcptask tasks;  \/**< »ŒŒÒ¡–±Ì *\/$/;"	m	class:x_verify_thread_functor	file:
tasks	base/src/x_tcptaskpool.cpp	/^	x_list_tcptask tasks;$/;"	m	class:x_recycle_thread_functor	file:
tasks	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskContainer tasks;  \/**< »ŒŒÒ¡–±Ì *\/$/;"	m	class:x_tcp_clientTaskThread	file:
tasks	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskContainer tasks;  \/**< »ŒŒÒ¡–±Ì *\/$/;"	m	class:zCheckwaitThread	file:
tcpServer	SuperServer/SuperServer.h	/^	boost::shared_ptr<server> tcpServer;        \/**< TCPÊúçÂä°Âô®ÂÆû‰æãÊåáÈíà *\/$/;"	m	class:SuperService
tcpServer	base/include/srvEngine.h	/^	zMTCPServer *tcpServer;        \/**< TCPÊúçÂä°Âô®ÂÆû‰æãÊåáÈíà *\/$/;"	m	class:zMNetService
tcpServer	base/x_subnetservice.h	/^	boost::shared_ptr<server> tcpServer;        \/**< TCPÊúçÂä°Âô®ÂÆû‰æãÊåáÈíà *\/$/;"	m	class:x_subnetservice
tcp_client	base/tcp_client.h	/^	tcp_client(io_service& ios):ios_(ios),sock_(ios) {$/;"	f	class:tcp_client
tcp_client	base/tcp_client.h	/^class tcp_client :public enable_shared_from_this<tcp_client>, public MessageQueue {$/;"	c
tcp_socket	base/src/tcp_socket.h	/^	tcp_socket(io_service& ios, shared_ptr<processor> proc):sock_(ios),proc_(proc) {$/;"	f	class:tcp_socket
tcp_socket	base/src/tcp_socket.h	/^class tcp_socket : public enable_shared_from_this<tcp_socket>{$/;"	c
tcp_state	base/include/tcp_state.h	/^	tcp_state(shared_ptr<tcp_task> task):task_(task){$/;"	f	class:tcp_state
tcp_state	base/include/tcp_state.h	/^class tcp_state$/;"	c
tcp_task	base/include/tcp_task_new.h	/^	tcp_task(io_service& ios):ios_(ios),socket_(ios_),timer_(ios_){$/;"	f	class:tcp_task
tcp_task	base/include/tcp_task_new.h	/^class tcp_task$/;"	c
tcp_task	base/tcp_task.cpp	/^tcp_task::tcp_task(io_service& ios): ios_(ios), sock_(ios_), timer_(ios_)$/;"	f	class:tcp_task
tcp_task	base/tcp_task.h	/^class tcp_task : public enable_shared_from_this<tcp_task> {$/;"	c
tcp_task_ptr	base/task_state.h	/^typedef boost::shared_ptr<tcp_task> tcp_task_ptr;$/;"	t
tcp_task_ptr	base/tcp_task.h	/^typedef boost::shared_ptr<tcp_task> tcp_task_ptr;$/;"	t
teacherList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
team	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::TeamManager
team	SessionServer/libsessionserver/SessionServer.h	/^	TeamMap team;$/;"	m	class:GlobalTeamIndex
team	base/include/csBox.h	/^	struct team$/;"	s	struct:Cmd::stNpcDirItemDataUserCmd
team_mode	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
teamid	SessionServer/libsessionserver/SessionServer.h	/^    DWORD teamid;$/;"	m	class:UserSession
techIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::CountryTech
techIndex	SessionServer/libsessionserver/SessionServer.h	/^    CTechMap techIndex;$/;"	m	class:CCountry
tempArchive	SessionServer/libsessionserver/SessionServer.h	/^    TempArchive_map tempArchive;$/;"	m	class:GlobalTempArchiveIndex
tempDups	SceneServer/libscenesserver/duplicateManager.h	/^	  std::map<DWORD,unsigned short> tempDups;\/\/¡Ÿ ±–‘∏±±æ$/;"	m	struct:userDupMap
tempID	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapPetData
temp__	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	v
temp_id	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_changeScene_SceneSession
temp_unsafety_state	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
tempid	FLServer/LoginTask.h	/^		DWORD tempid;$/;"	m	class:LoginTask
tempid	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::TeamMember
tempid	SuperServer/FLClient.h	/^    const WORD tempid;$/;"	m	class:FLClient
tempid	SuperServer/InfoClient.h	/^    const DWORD tempid;$/;"	m	class:InfoClient
tempid	base/include/csBox.h	/^		uint32_t tempid;$/;"	m	struct:Cmd::stNpcDirItemDataUserCmd::team
tempid	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_forwardUser_SceneSession
tempid	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stDiceNumMiniGame
tempid	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stInviteMiniGame
tempid	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stInviteRetMiniGame
tempid	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stStartMiniGame
tempid	base/include/srvEngine.h	/^	uint32_t tempid;$/;"	m	struct:zEntryC
tempid1	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD tempid1,tempid2;$/;"	m	class:Dice
tempid1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
tempid2	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD tempid1,tempid2;$/;"	m	class:Dice
tempid2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
tempidAllocator	SuperServer/FLClient.cpp	/^WORD FLClient::tempidAllocator = 0;$/;"	m	class:FLClient	file:
tempidAllocator	SuperServer/FLClient.h	/^    static WORD tempidAllocator;$/;"	m	class:FLClient
tempidAllocator	SuperServer/InfoClient.cpp	/^DWORD InfoClient::tempidAllocator = 0;$/;"	m	class:InfoClient	file:
tempidAllocator	SuperServer/InfoClient.h	/^    static DWORD tempidAllocator;$/;"	m	class:InfoClient
terminate	SceneServer/libscenesserver/Rush.cpp	/^void Rush::terminate()$/;"	f	class:Rush
terminate	base/include/srvEngine.h	/^	TerminateMethod terminate;            \/**< ÊòØÂê¶ÁªìÊùü‰ªªÂä° *\/$/;"	m	class:x_tcp_clientTask
terminate	base/src/x_tcptask.h	/^	TerminateMethod terminate;            \/**< ÊòØÂê¶ÁªìÊùü‰ªªÂä° *\/$/;"	m	class:x_tcptask
terminate	base/x_service.h	/^	bool terminate;            \/**< ÊúçÂä°ÁªìÊùüÊ†áËÆ∞ *\/$/;"	m	class:x_service
terminate_active	base/src/x_tcptask.h	/^		terminate_active,            \/**< ÂÆ¢Êà∑Á´Ø‰∏ªÂä®Êñ≠ÂºÄËøûÊé•Ôºå‰∏ªË¶ÅÊòØÁî±‰∫éÊúçÂä°Âô®Á´ØÊ£ÄÊµãÂà∞Â•óÊé•Âè£ÂÖ≥Èó≠ÊàñËÄÖÂ•óÊé•Âè£ÂºÇÂ∏∏ *\/$/;"	e	enum:x_tcptask::TerminateMethod
terminate_no	base/src/x_tcptask.h	/^		terminate_no,              \/**< Ê≤°ÊúâÁªìÊùü‰ªªÂä° *\/$/;"	e	enum:x_tcptask::TerminateMethod
terminate_passive	base/src/x_tcptask.h	/^		terminate_passive,            \/**< ÊúçÂä°Âô®Á´Ø‰∏ªÂä®Êñ≠ÂºÄËøûÊé• *\/$/;"	e	enum:x_tcptask::TerminateMethod
terminate_wait	base/src/x_tcptask.h	/^	bool terminate_wait;              \/**< ÂÖ∂ÂÆÉÁ∫øÁ®ãËÆæÁΩÆÁ≠âÂæÖÊñ≠ÂºÄËøûÊé•Áä∂ÊÄÅ,Áî±poolÁ∫øÁ®ãËÆæÁΩÆÊñ≠ÂºÄËøûÊé•Áä∂ÊÄÅ *\/$/;"	m	class:x_tcptask
text	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Rush
text	SessionServer/libsessionserver/SessionServer.h	/^  char text[256];$/;"	m	struct:mailContentInfo
text	SessionServer/libsessionserver/SessionServer.h	/^  char text[256];$/;"	m	struct:mailForwardInfo
text	SessionServer/libsessionserver/SessionServer.h	/^  char text[256];$/;"	m	struct:mailTurnBackInfo
text	SessionServer/libsessionserver/SessionServer.h	/^  char text[MAX_CHATINFO];$/;"	m	struct:actInfo
text	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_cityRushCust_SceneSession
tgyt_updefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
tgzh_updef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
the_script	SceneServer/libscenesserver/script.cpp	/^ScriptQuest& the_script()$/;"	f
theurgy_dmdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_dmdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_dpdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_dpdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_umdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_umdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_umdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_umdefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_updam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_updamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_updef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
theurgy_updefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
threads	base/io_service_pool.h	/^		std::vector<boost::shared_ptr<boost::thread> > threads;$/;"	m	class:io_service_pool
tianbing	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
tick	base/src/x_tcptask.h	/^	bool tick;$/;"	m	class:x_tcptask
tickFlag	SuperServer/ServerTask.h	/^		volatile bool tickFlag;$/;"	m	class:ServerTask
ticket	base/include/csCommon.h	/^/;"	m	struct:CharBase
ticket	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
tid	BillServer/BillUser.h	/^    char   tid[Cmd::UserServer::SEQ_MAX_LENGTH+1];                     \/\/\/ Ωª“◊¡˜ÀÆ∫≈$/;"	m	class:BillUser
tid	BillServer/old_back/BillServer.h	/^    char   tid[Cmd::UserServer::SEQ_MAX_LENGTH+1];                     \/\/\/ Ωª“◊¡˜ÀÆ∫≈$/;"	m	class:BillUser
tid	BillServer/old_back/BillServer.h	/^  char          tid[Cmd::UserServer::SEQ_MAX_LENGTH +1];    \/\/Ωª“◊–Ú¡–∫≈ $/;"	m	struct:BillData
tid	BillServer/old_back/BillServer.h	/^  char   tid[Cmd::UserServer::SEQ_MAX_LENGTH+1];                     \/\/\/ Ωª“◊¡˜ÀÆ∫≈$/;"	m	struct:BillSession
tiger	SessionServer/libsessionserver/SessionServer.h	/^    CArhat tiger;   \/\/ ª¢∆«$/;"	m	class:CGem
time	BillServer/old_back/BillServer.h	/^  DWORD time;$/;"	m	struct:ConsignTrait
time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::ScenePkState::attProtect
time	SessionServer/libsessionserver/SessionServer.h	/^  DWORD time;$/;"	m	struct:worldMsg
time	base/include/srvEngine.h	/^			uint32_t time;$/;"	m	struct:SkillElement::__anon136::__anon137
time	base/include/srvEngine.h	/^		uint16_t time; \/\/Êó∂Èó¥$/;"	m	struct:zObjectB::leechdom_t
timeAction	BillServer/old_back/BillClientManager.cpp	/^void BillClientManager::timeAction(const zTime &ct)$/;"	f	class:BillClientManager
timeAction	GatewayServer/old_back/SceneClientManager.cpp	/^void SceneClientManager::timeAction(const zTime &ct)$/;"	f	class:SceneClientManager
timeAction	SuperServer/FLClientManager.cpp	/^void FLClientManager::timeAction(const zTime &ct)$/;"	f	class:FLClientManager
timeAction	SuperServer/InfoClientManager.cpp	/^void InfoClientManager::timeAction(const zTime &ct)$/;"	f	class:InfoClientManager
timeAction	SuperServer/RoleregCache.cpp	/^void RoleregCache::timeAction(const zTime &ct)$/;"	f	class:RoleregCache
timeAction	base/src/zTCPClientTaskPool.cpp	/^void x_tcp_clientTaskPool::timeAction(const zTime &ct)$/;"	f	class:x_tcp_clientTaskPool
timeStamp	SceneServer/libscenesserver/duplicateManager.h	/^	DWORD timeStamp;$/;"	m	struct:clearDupStruct
timeout	BillServer/old_back/BillServer.h	/^  time_t        timeout;                                    \/\/≥¨ ± ±º‰¥¡$/;"	m	struct:BillData
timeout	base/include/tcp_state.h	/^	virtual void timeout(const boost::system::error_code& error){$/;"	f	class:state_verify
timeout	base/include/tcp_state.h	/^	virtual void timeout(const boost::system::error_code& error){$/;"	f	class:state_wait_sync
timeout	base/include/tcp_state.h	/^	virtual void timeout(const boost::system::error_code& error){}$/;"	f	class:tcp_state
timer	SceneServer/libscenesserver/CountryDare.cpp	/^void CountryDareM::timer()$/;"	f	class:CountryDareM
timer	SceneServer/libscenesserver/Dice.cpp	/^bool Dice::timer(DWORD time,SceneUser * u)$/;"	f	class:Dice
timer	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
timer	SessionServer/libsessionserver/Ally.cpp	/^void CAllyM::timer()$/;"	f	class:CAllyM
timer	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::timer()$/;"	f	class:CArmyM
timer	SessionServer/libsessionserver/CityManager.cpp	/^void CCityM::timer()$/;"	f	class:CCityM
timer	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::timer()$/;"	f	class:CCountryM
timer	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
timer	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareCountry
timer	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
timer	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnionCity
timer	SessionServer/libsessionserver/DareEmperor.cpp	/^void CDareEmperor::timer()$/;"	f	class:CDareEmperor
timer	SessionServer/libsessionserver/DareRecordManager.cpp	/^void CDareRecordM::timer()$/;"	f	class:CDareRecordM
timer	SessionServer/libsessionserver/DareSept.cpp	/^void CDareSept::timer()$/;"	f	class:CDareSept
timer	SessionServer/libsessionserver/EmperorForbid.cpp	/^void EmperorForbid::timer()$/;"	f	class:EmperorForbid
timer	SessionServer/libsessionserver/Gem.cpp	/^void  CGemM::timer()$/;"	f	class:CGemM
timer	SessionServer/libsessionserver/Gem.cpp	/^void CGem::timer()$/;"	f	class:CGem
timer	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareM::timer()$/;"	f	class:CNpcDareM
timer	SessionServer/libsessionserver/Quiz.cpp	/^void  CQuizM::timer()$/;"	f	class:CQuizM
timer	SessionServer/libsessionserver/Quiz.cpp	/^void CQuiz::timer()$/;"	f	class:CQuiz
timer	SessionServer/libsessionserver/Vote.cpp	/^void CVoteM::timer()$/;"	f	class:CVoteM
timer	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::timer()$/;"	f	class:MiniGame
timer	tmp/MiniServer/MiniHall.cpp	/^void MiniHall::timer()$/;"	f	class:MiniHall
timer	tmp/MiniServer/MiniRoom.cpp	/^void MiniRoom::timer()$/;"	f	class:MiniRoom
timerPerHour	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::timerPerHour()$/;"	f	class:CCountryM
timer_	base/include/tcp_state.h	/^	dealline_timer timer_;$/;"	m	class:state_verify
timer_	base/include/tcp_state.h	/^	dealline_timer timer_;$/;"	m	class:state_wait_sync
timer_	base/include/tcp_task_new.h	/^	dealline_timer timer_;$/;"	m	class:tcp_task
timer_	base/tcp_task.h	/^	boost::asio::deadline_timer timer_;$/;"	m	class:tcp_task
times	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LeechdomElement
timestamp	BillServer/BillUser.h	/^    ptime timestamp;$/;"	m	class:BillUser
timestamp	BillServer/old_back/BillServer.h	/^    zTime timestamp;    \/**<  ±º‰¥¡ *\/$/;"	m	class:BillUser
timestamp	BillServer/old_back/BillServer.h	/^  zTime timestamp;    \/**<  ±º‰¥¡ *\/$/;"	m	struct:BillInfo
timestamp	GatewayServer/LoginSessionManager.h	/^		ptime timestamp;$/;"	m	struct:LoginSessionManager::LoginSession
timestamp	GatewayServer/old_back/GatewayServer.h	/^		zTime timestamp;$/;"	m	struct:LoginSessionManager::LoginSession
timetickThread	BillServer/BillServer.h	/^		boost::scoped_ptr<boost::thread> timetickThread;$/;"	m	class:BillService
timetickThread	FLServer/FLServer.h	/^	boost::scoped_ptr<boost::thread> timetickThread;$/;"	m	class:FLService
timetickThread	GatewayServer/GatewayServer.h	/^		boost::scoped_ptr<boost::thread> timetickThread;$/;"	m	class:GatewayService
timetickThread	RecordServer/RecordServer.h	/^		boost::scoped_ptr<boost::thread> timetickThread;$/;"	m	class:RecordService
timetickThread	SceneServer/SceneServer.h	/^		boost::scoped_ptr<boost::thread> timetickThread;$/;"	m	class:SceneService
timetickThread	SessionServer/SessionServer.h	/^		boost::scoped_ptr<boost::thread> timetickThread;$/;"	m	class:SessionService
timetickThread	SuperServer/SuperServer.h	/^	boost::scoped_ptr<boost::thread> timetickThread;$/;"	m	class:SuperService
tiretime	base/include/csCommon.h	/^/;"	m	struct:CharBase
title	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Quest
title	SessionServer/libsessionserver/SessionServer.h	/^    char title[256];$/;"	m	class:CSubject
title	SessionServer/libsessionserver/SessionServer.h	/^  char title[MAX_NAMESIZE+1];$/;"	m	struct:mailContentInfo
title	SessionServer/libsessionserver/SessionServer.h	/^  char title[MAX_NAMESIZE+1];$/;"	m	struct:mailTurnBackInfo
title	base/include/srvEngine.h	/^	std::string title; \/\/Áß∞Âè∑$/;"	m	struct:zLiveSkillB
titles	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills
tlogger	BillServer/old_back/BillClientManager.cpp	/^zLogger *BillClientManager::tlogger = NULL;$/;"	m	class:BillClientManager	file:
tlogger	BillServer/old_back/BillServer.h	/^    static zLogger *tlogger;$/;"	m	class:BillClientManager
tmStart	SessionServer/libsessionserver/SessionServer.h	/^    time_t tmStart;            \/\/ ø™ º ±º‰$/;"	m	class:CGem
tmp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars::VAR
toID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD toID;$/;"	m	struct:mailCheckInfo
toID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD toID;$/;"	m	struct:mailContentInfo
toID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD toID;$/;"	m	struct:mailForwardInfo
toID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD toID;$/;"	m	struct:mailNewInfo
toID	SessionServer/libsessionserver/SessionServer.h	/^  DWORD toID;$/;"	m	struct:mailTurnBackInfo
toName	SessionServer/libsessionserver/SessionServer.h	/^  char toName[MAX_NAMESIZE+1];$/;"	m	struct:mailCheckInfo
toName	SessionServer/libsessionserver/SessionServer.h	/^  char toName[MAX_NAMESIZE+1];$/;"	m	struct:mailContentInfo
toName	SessionServer/libsessionserver/SessionServer.h	/^  char toName[MAX_NAMESIZE+1];$/;"	m	struct:mailForwardInfo
toName	SessionServer/libsessionserver/SessionServer.h	/^  char toName[MAX_NAMESIZE+1];$/;"	m	struct:mailTurnBackInfo
to_buffer	tmp/base3/reply.cpp	/^boost::asio::const_buffer to_buffer(reply::status_type status)$/;"	f	namespace:http::server2::status_strings
to_buffers	tmp/base3/reply.cpp	/^std::vector<boost::asio::const_buffer> reply::to_buffers()$/;"	f	class:http::server2::reply
to_game_zone	base/recordcmd.h	/^			DWORD to_game_zone;$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
to_lower	base/include/srvEngine.h	/^inline void to_lower(std::string &s)$/;"	f
to_string	tmp/base3/reply.cpp	/^std::string to_string(reply::status_type status)$/;"	f	namespace:http::server2::stock_replies
to_upper	base/include/srvEngine.h	/^inline void to_upper(std::string &s)$/;"	f
toggleReady	tmp/MiniServer/MiniGame.cpp	/^bool MiniGame::toggleReady(MiniUser *u)$/;"	f	class:MiniGame
toggleSeat	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::toggleSeat(MiniUser *host,Cmd::MiniSeatID seatID)$/;"	f	class:MiniGame
tong_obj_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
tong_obj_times	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::EquipPack
top100	tmp/MiniServer/MiniServer.h	/^    std::list<Cmd::MiniUserData> top100;$/;"	m	class:Top100
top_iter	tmp/MiniServer/MiniServer.h	/^    typedef std::list<Cmd::MiniUserData>::iterator top_iter;$/;"	t	class:Top100
topet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
tosh	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
total	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAddSeptNormalExp
total_subject	SessionServer/libsessionserver/SessionServer.h	/^    DWORD total_subject;$/;"	m	class:CQuiz
totems	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
trace	base/x_logger.cpp	/^void x_logger::trace(const char * pattern,...)$/;"	f	class:x_logger
trade	BillServer/old_back/StockConsign.cpp	/^bool ConsignGoldManager::trade()$/;"	f	class:ConsignGoldManager
trade	BillServer/old_back/StockConsign.cpp	/^bool ConsignGoldManager::trade(ConsignTrait &moneylist,DWORD &sysmoney)$/;"	f	class:ConsignGoldManager
trade	BillServer/old_back/StockConsign.cpp	/^bool ConsignMoneyManager::trade()$/;"	f	class:ConsignMoneyManager
trade	BillServer/old_back/StockConsign.cpp	/^bool ConsignMoneyManager::trade(ConsignTrait &goldlist,DWORD &sysmoney)$/;"	f	class:ConsignMoneyManager
trade	SceneServer/libscenesserver/Trade.cpp	/^void TradeOrder::trade() $/;"	f	class:TradeOrder
tradelog	BillServer/old_back/BillServer.cpp	/^zLogger* BillService::tradelog = NULL;$/;"	m	class:BillService	file:
tradelog	BillServer/old_back/BillServer.h	/^                static zLogger* tradelog;    $/;"	m	class:BillService
tradeorder	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
trainTime	base/include/csCommon.h	/^/;"	m	struct:CharBase
trait	base/include/srvEngine.h	/^	uint32_t  trait;        \/\/ÂìÅË¥®$/;"	m	struct:zNpcB
trapappend	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
trapflag	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
trun_point_rate	SceneServer/libscenesserver/ScenesServer.cpp	/^WORD trun_point_rate = 0;$/;"	v
trun_skill_rate	SceneServer/libscenesserver/ScenesServer.cpp	/^WORD trun_skill_rate = 0;$/;"	v
trunkCount	base/src/x_buffer.h	179;"	d
trunkSize	base/src/x_buffer.h	/^const uint32_t trunkSize = 64 * 1024;$/;"	v
try_getopt	base/src/getopt.c	/^  int try_getopt;$/;"	m	struct:parser	file:
tsfdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
tsfdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
tuling	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
turnBackMail	SessionServer/libsessionserver/MailService.cpp	/^bool MailService::turnBackMail(DWORD mailID)$/;"	f	class:MailService
turnSucceed	base/include/csTurn.h	/^		bool turnSucceed;$/;"	m	struct:Cmd::stTurnResultCmd
tv	base/include/zTime.h	/^	struct tm tv;$/;"	m	class:zTime	typeref:struct:zTime::tm
tyCamp	SessionServer/libsessionserver/SessionServer.h	/^typedef std::vector<CampData> tyCamp;$/;"	t
tyItemType_Gloves	base/include/csCommon.h	/^/;"	e	enum:enumItemType
tyItemType_Pants	base/include/csCommon.h	/^/;"	e	enum:enumItemType
tyItemType_Shoulder	base/include/csCommon.h	/^/;"	e	enum:enumItemType
type	GatewayServer/old_back/GatewayServer.h	/^		int   type;   \/\/ [ranqd Add] ∑˛ŒÒ∆˜¿‡–Õ£¨≤Œøºenum SERVER_TYPE$/;"	m	struct:CountryInfo::Info
type	GatewayServer/old_back/GatewayServer.h	/^		int  type;  \/\/[ranqd Add] π˙º“¿‡–Õ$/;"	m	struct:CountryInfo::CountryDic
type	SceneServer/libscenesserver/SceneServer1.h	/^  Cmd::petType type;$/;"	m	class:ScenePet
type	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD type;$/;"	m	struct:petBonus
type	SceneServer/libscenesserver/SceneServer1.h	/^  SceneNpcAIType type;$/;"	m	struct:t_NpcAIDefine
type	SceneServer/libscenesserver/SceneServer1.h	/^  const SceneNpcType type;$/;"	m	class:SceneNpc
type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::ScenePet
type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LeechdomElement
type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::ZoneTypeDef
type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::WarRecord
type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::petBonus
type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::stSrvMapTile
type	SceneServer/libscenesserver/zObject.cpp	/^WORD Package::type() const$/;"	f	class:Package
type	SessionServer/libsessionserver/SessionServer.h	/^    BYTE type;$/;"	m	class:CQuiz
type	SessionServer/libsessionserver/SessionServer.h	/^    DWORD type()$/;"	f	class:CTech
type	SessionServer/libsessionserver/SessionServer.h	/^    DWORD type;    \/\/ ’Ω∂∑¿‡–Õ:Cmd::UNION_DARE,Cmd::SCHOOL_DARE,Cmd::SEPT_DARE$/;"	m	class:CDare
type	SessionServer/libsessionserver/SessionServer.h	/^  BYTE  type;$/;"	m	struct:CRelation
type	SessionServer/libsessionserver/SessionServer.h	/^  BYTE type;$/;"	m	struct:cartoon_relation_struct
type	SessionServer/libsessionserver/SessionServer.h	/^  BYTE type;$/;"	m	struct:mailForwardInfo
type	SessionServer/libsessionserver/SessionServer.h	/^  BYTE type;$/;"	m	struct:mailHeadInfo
type	SessionServer/libsessionserver/SessionServer.h	/^  BYTE type;$/;"	m	struct:mailTurnBackInfo
type	base/flcmd.h	/^		DWORD type;$/;"	m	struct:Cmd::t_NewLoginSession
type	base/include/csCommon.h	/^/;"	m	struct:BinaryArchiveMember
type	base/include/csCommon.h	/^/;"	m	struct:CharBase
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniUserPosition
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createDare_SceneSession
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_createQuiz_SceneSession
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_guardFail_SceneSession
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stChatCommonMiniGameCmd
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::Country_Info
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::MapData_ItemHeader
type	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
type	base/include/csCommon.h	/^/;"	m	struct:SaveSkill
type	base/include/csCommon.h	/^/;"	m	struct:TempArchiveMember
type	base/include/srvEngine.h	/^	BYTE type;$/;"	m	struct:npcRecover
type	base/include/srvEngine.h	/^	uint16_t type;$/;"	m	struct:zColorObjectB
type	base/include/srvEngine.h	/^	uint32_t type;       \/\/ Á±ªÂûã$/;"	m	struct:zPetB
type	base/recordcmd.h	/^			DWORD type;$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
type	base/src/x_buffer.h	/^	typedef cmd_type type;$/;"	t	class:CmdBuffer_wrapper
type	deps/tinyxml/tinyxml.h	/^	NodeType		type;$/;"	m	class:TiXmlNode
uattackspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
udef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
uid	BillServer/old_back/BillServer.h	/^  DWORD  uid;                                        \/\/UID $/;"	m	struct:BillData
uint8_t	base/src/getopt.c	/^typedef unsigned char uint8_t;$/;"	t	file:
um	SessionServer/libsessionserver/SessionServer.h	/^    static CNpcDareM * um;$/;"	m	class:CNpcDareM
um	SessionServer/libsessionserver/SessionServer.h	/^    static CSeptM * um;$/;"	m	class:CSeptM
umdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
umdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
umdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
umdefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
unReging	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
unauthorized	tmp/base3/reply.cpp	/^const char unauthorized[] =$/;"	m	namespace:http::server2::stock_replies	file:
unauthorized	tmp/base3/reply.cpp	/^const std::string unauthorized =$/;"	m	namespace:http::server2::status_strings	file:
unauthorized	tmp/base3/reply.hpp	/^    unauthorized = 401,$/;"	e	enum:http::server2::reply::status_type
uncheckCountryProcess	SessionServer/libsessionserver/SessionServer.h	/^    bool uncheckCountryProcess;$/;"	m	class:SessionService
uncompressSaveData	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f
unionMaster	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
unionName	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
unionName	SessionServer/libsessionserver/Union.cpp	/^/;"	m	class:CUnionSort	file:
unionid	SessionServer/libsessionserver/SessionServer.h	/^    DWORD unionid;$/;"	m	class:UserSession
unionid	base/include/csCommon.h	/^/;"	m	struct:CharBase
unionmaster	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_sendUserRelationID
uniqueAdd	BillServer/BillTask.cpp	/^bool BillTask::uniqueAdd(){$/;"	f	class:BillTask
uniqueAdd	BillServer/BillTaskManager.cpp	/^bool BillTaskManager::uniqueAdd(shared_ptr<BillTask> task) {$/;"	f	class:BillTaskManager
uniqueAdd	BillServer/old_back/BillTask.cpp	/^bool BillTask::uniqueAdd()$/;"	f	class:BillTask
uniqueAdd	BillServer/old_back/BillTaskManager.cpp	/^bool BillTaskManager::uniqueAdd(BillTask *task)$/;"	f	class:BillTaskManager
uniqueAdd	FLServer/LoginTask.cpp	/^bool LoginTask::uniqueAdd() {$/;"	f	class:LoginTask
uniqueAdd	FLServer/ServerManager.cpp	/^bool ServerManager::uniqueAdd(shared_ptr<ServerTask> task)$/;"	f	class:ServerManager
uniqueAdd	FLServer/ServerTask.cpp	/^bool ServerTask::uniqueAdd() {$/;"	f	class:ServerTask
uniqueAdd	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::uniqueAdd()$/;"	f	class:GatewayTask
uniqueAdd	GatewayServer/old_back/GatewayTaskManager.cpp	/^bool GatewayTaskManager::uniqueAdd(GatewayTask *task)$/;"	f	class:GatewayTaskManager
uniqueAdd	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::uniqueAdd()$/;"	f	class:SceneTask
uniqueAdd	SceneServer/libscenesserver/SceneTaskManager.cpp	/^bool SceneTaskManager::uniqueAdd(SceneTask *task)$/;"	f	class:SceneTaskManager
uniqueAdd	SessionServer/ServerManager.cpp	/^bool ServerManager::uniqueAdd(shared_ptr<SessionTask> task) {$/;"	f	class:ServerManager
uniqueAdd	SessionServer/SessionTask.cpp	/^bool SessionTask::uniqueAdd()$/;"	f	class:SessionTask
uniqueAdd	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::uniqueAdd()$/;"	f	class:SessionTask
uniqueAdd	SessionServer/libsessionserver/SessionTaskManager.cpp	/^bool SessionTaskManager::uniqueAdd(SessionTask *task)$/;"	f	class:SessionTaskManager
uniqueAdd	SuperServer/ServerManager.cpp	/^bool ServerManager::uniqueAdd(shared_ptr<ServerTask> task) {$/;"	f	class:ServerManager
uniqueAdd	SuperServer/ServerTask.cpp	/^bool ServerTask::uniqueAdd()$/;"	f	class:ServerTask
uniqueAdd	base/src/x_tcptask.h	/^	virtual bool uniqueAdd()$/;"	f	class:x_tcptask
uniqueAdd	base/tcp_task.h	/^	virtual bool uniqueAdd(){return true;}$/;"	f	class:tcp_task
uniqueAdd	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::uniqueAdd()$/;"	f	class:MiniTask
uniqueAdd	tmp/MiniServer/MiniTaskManager.cpp	/^bool MiniTaskManager::uniqueAdd(MiniTask *task)$/;"	f	class:MiniTaskManager
uniqueGet	SceneServer/libscenesserver/SceneTaskManager.cpp	/^SceneTask *SceneTaskManager::uniqueGet(WORD wdServerID)$/;"	f	class:SceneTaskManager
uniqueID	FLServer/LoginTask.cpp	/^DWORD LoginTask::uniqueID = 0;$/;"	m	class:LoginTask	file:
uniqueID	FLServer/LoginTask.h	/^		static DWORD uniqueID;$/;"	m	class:LoginTask
uniqueID	SceneServer/libscenesserver/SceneServer1.h	/^  static zUniqueDWORDID uniqueID;$/;"	m	class:SceneNpc
uniqueRemove	BillServer/BillTask.cpp	/^bool BillTask::uniqueRemove(){$/;"	f	class:BillTask
uniqueRemove	BillServer/BillTaskManager.cpp	/^bool BillTaskManager::uniqueRemove(shared_ptr<BillTask> task) {$/;"	f	class:BillTaskManager
uniqueRemove	BillServer/old_back/BillTask.cpp	/^bool BillTask::uniqueRemove()$/;"	f	class:BillTask
uniqueRemove	BillServer/old_back/BillTaskManager.cpp	/^bool BillTaskManager::uniqueRemove(BillTask *task)$/;"	f	class:BillTaskManager
uniqueRemove	FLServer/LoginTask.cpp	/^bool LoginTask::uniqueRemove() {$/;"	f	class:LoginTask
uniqueRemove	FLServer/ServerManager.cpp	/^bool ServerManager::uniqueRemove(shared_ptr<ServerTask> task) {$/;"	f	class:ServerManager
uniqueRemove	FLServer/ServerTask.cpp	/^bool ServerTask::uniqueRemove() {$/;"	f	class:ServerTask
uniqueRemove	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::uniqueRemove()$/;"	f	class:GatewayTask
uniqueRemove	GatewayServer/old_back/GatewayTaskManager.cpp	/^bool GatewayTaskManager::uniqueRemove(GatewayTask *task)$/;"	f	class:GatewayTaskManager
uniqueRemove	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::uniqueRemove()$/;"	f	class:SceneTask
uniqueRemove	SceneServer/libscenesserver/SceneTaskManager.cpp	/^bool SceneTaskManager::uniqueRemove(SceneTask *task)$/;"	f	class:SceneTaskManager
uniqueRemove	SessionServer/ServerManager.cpp	/^bool ServerManager::uniqueRemove(shared_ptr<SessionTask> task) {$/;"	f	class:ServerManager
uniqueRemove	SessionServer/SessionTask.cpp	/^bool SessionTask::uniqueRemove()$/;"	f	class:SessionTask
uniqueRemove	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::uniqueRemove()$/;"	f	class:SessionTask
uniqueRemove	SessionServer/libsessionserver/SessionTaskManager.cpp	/^bool SessionTaskManager::uniqueRemove(SessionTask *task)$/;"	f	class:SessionTaskManager
uniqueRemove	SuperServer/ServerManager.cpp	/^bool ServerManager::uniqueRemove(shared_ptr<ServerTask> task)$/;"	f	class:ServerManager
uniqueRemove	SuperServer/ServerTask.cpp	/^bool ServerTask::uniqueRemove()$/;"	f	class:ServerTask
uniqueRemove	base/src/x_tcptask.h	/^	virtual bool uniqueRemove()$/;"	f	class:x_tcptask
uniqueRemove	base/tcp_task.h	/^	virtual bool uniqueRemove(){return true;}$/;"	f	class:tcp_task
uniqueRemove	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::uniqueRemove()$/;"	f	class:MiniTask
uniqueRemove	tmp/MiniServer/MiniTaskManager.cpp	/^bool MiniTaskManager::uniqueRemove(MiniTask *task)$/;"	f	class:MiniTaskManager
uniqueVerified	base/src/x_tcptask.h	/^	bool uniqueVerified;              \/**< ÊòØÂê¶ÈÄöËøá‰∫ÜÂîØ‰∏ÄÊÄßÈ™åËØÅ *\/$/;"	m	class:x_tcptask
uniqueVerify	SessionServer/ServerManager.cpp	/^bool ServerManager::uniqueVerify(const WORD wdServerID) {$/;"	f	class:ServerManager
uniqueVerify	SuperServer/ServerManager.cpp	/^bool ServerManager::uniqueVerify(const WORD wdServerID)$/;"	f	class:ServerManager
unitNum	tmp/MiniServer/MiniServer.h	/^    DWORD unitNum;\/\/“ª◊Èº∏∏ˆ$/;"	m	class:CardPattern
unitaryBattleKeepTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
unitarybattle	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
unloadAllBM	base/src/zDatabaseManager.cpp	/^void unloadAllBM()$/;"	f
unloadAllScene	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::unloadAllScene()$/;"	f	class:SceneManager
unloadScene	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::unloadScene(Scene * &scene)$/;"	f	class:SceneManager
unloadScene	SceneServer/libscenesserver/SceneManager.cpp	/^void SceneManager::unloadScene(std::string &name)$/;"	f	class:SceneManager
unloadScript	SceneServer/libscenesserver/SceneNpcAI.cpp	/^void NpcAIController::unloadScript()$/;"	f	class:NpcAIController
unlock	base/include/srvEngine.h	/^	void unlock()$/;"	f	struct:zUser
unreg	GatewayServer/old_back/GateUser.cpp	/^void GateUser::unreg(bool out)$/;"	f	class:GateUser
unreg	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
until_short	base/src/getopt.c	/^until_short (const struct argp_option *opt, const struct argp_option *real,$/;"	f	file:
unzip_size	base/src/x_buffer.h	5;"	d
uom	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Packages
upLevel	SessionServer/libsessionserver/CountryManager.cpp	/^void CTech::upLevel(UserSession* pUser)$/;"	f	class:CTech
upLevel	SessionServer/libsessionserver/Sort.cpp	/^void CSortM::upLevel(UserSession *pUser)$/;"	f	class:CSortM
upNum	base/include/zTime.h	/^	uint32_t upNum;$/;"	m	struct:odds_t
up_skill_id	base/include/srvEngine.h	/^	uint32_t up_skill_id; \/\/ËøõÈò∂ÊäÄËÉΩid$/;"	m	struct:zLiveSkillB
upallattrib	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
uparam_name	base/src/getopt.c	/^struct uparam_name$/;"	s	file:
uparam_names	base/src/getopt.c	/^static const struct uparam_name uparam_names[] =$/;"	v	typeref:struct:uparam_name	file:
uparams	base/src/getopt.c	/^static struct uparams uparams = {$/;"	v	typeref:struct:uparams	file:
uparams	base/src/getopt.c	/^struct uparams$/;"	s	file:
uparams_offs	base/src/getopt.c	/^  uint8_t uparams_offs;		\/* Location of the (int) field in UPARAMS.  *\/$/;"	m	struct:uparam_name	file:
upattribcon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
upattribdex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
upattribint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
upattribmen	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
upattribstr	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
upattribute	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
upcon	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
updam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
updamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
update	BillServer/BillUserManager.cpp	/^void BillUserManager::update()$/;"	f	class:BillUserManager
update	BillServer/old_back/BillCache.cpp	/^void BillCache::update(const zTime &ct)$/;"	f	class:BillCache
update	BillServer/old_back/BillManager.cpp	/^void BillManager::update()$/;"	f	class:BillManager
update	BillServer/old_back/StockConsign.cpp	/^bool ConsignHistoryManager::update()$/;"	f	class:ConsignHistoryManager
update	GatewayServer/LoginSessionManager.cpp	/^void LoginSessionManager::update(const ptime &ct)$/;"	f	class:LoginSessionManager
update	SceneServer/libscenesserver/Quest.cpp	/^int QuestList::update(SceneUser& user,bool refresh)$/;"	f	class:QuestList
update	SceneServer/libscenesserver/Quest.cpp	/^int Vars::update() const$/;"	f	class:Vars
update	SceneServer/libscenesserver/Quest.cpp	/^void Vars::update(int value)$/;"	f	class:Vars
update	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
update	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::UserVar
update	tmp/MiniServer/MiniUserManager.cpp	/^void MiniUserManager::update()$/;"	f	class:MiniUserManager
updateAttGenAttackTime	SceneServer/libscenesserver/CountryDare.cpp	/^void CountryDareM::updateAttGenAttackTime(DWORD countryid,time_t uptime)$/;"	f	class:CountryDareM
updateAttackTime	SceneServer/libscenesserver/CountryDare.cpp	/^void CountryDareM::updateAttackTime(DWORD countryid,time_t uptime)$/;"	f	class:CountryDareM
updateByGatewayID	BillServer/old_back/BillManager.cpp	/^void BillManager::updateByGatewayID(const WORD wdGatewayID)$/;"	f	class:BillManager
updateConsort	SessionServer/libsessionserver/Session.cpp	/^void UserSession::updateConsort()$/;"	f	class:UserSession
updateCount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
updateCountryStar	SessionServer/libsessionserver/Session.cpp	/^void UserSession::updateCountryStar()$/;"	f	class:UserSession
updateDBRecord	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::updateDBRecord(const CRelation *relation)$/;"	f	class:CRelationManager
updateDurability	SceneServer/libscenesserver/zObject.cpp	/^void EquipPack::updateDurability(SceneUser *pThis,DWORD value)$/;"	f	class:EquipPack
updateGenAttackTime	SceneServer/libscenesserver/CountryDare.cpp	/^void CountryDareM::updateGenAttackTime(DWORD countryid,time_t uptime)$/;"	f	class:CountryDareM
updateGold	BillServer/old_back/BillManager.cpp	/^bool BillManager::updateGold(DWORD acc,double gold)$/;"	f	class:BillManager
updateHistory	BillServer/old_back/StockConsign.cpp	/^bool Consign::updateHistory(DWORD id,DWORD acc,DWORD num,DWORD commitprice,DWORD price,DWORD comtime,bool type,DWORD sysmoney)$/;"	f	class:Consign
updateKing	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::updateKing(UserSession* pUser)$/;"	f	class:CCountry
updateKingAttackTime	SceneServer/libscenesserver/CountryDare.cpp	/^void CountryDareM::updateKingAttackTime(DWORD countryid,time_t uptime)$/;"	f	class:CountryDareM
updateNotify	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
updateOtherOfflineUserDBRecord	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::updateOtherOfflineUserDBRecord(const CRelation *relation)$/;"	f	class:CRelationManager
updateRecord	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchoolMember::updateRecord(bool locked)$/;"	f	class:CSchoolMember
updateRoomUserNum	tmp/MiniServer/MiniHall.cpp	/^void MiniHall::updateRoomUserNum(Cmd::MiniRoomID roomID,DWORD num)$/;"	f	class:MiniHall
updateSceneObject	SceneServer/libscenesserver/Scene.cpp	/^void Scene::updateSceneObject()$/;"	f	class:Scene
updateSchoolInDB	SessionServer/libsessionserver/SchoolManager.cpp	/^bool CSchool::updateSchoolInDB()$/;"	f	class:CSchool
updateStampData	SceneServer/libscenesserver/ScenesServer.cpp	/^DWORD ScenesService::updateStampData()$/;"	f	class:ScenesService
updateTime	SessionServer/libsessionserver/SessionServer.h	/^    virtual void updateTime()$/;"	f	class:CDare
updateTime	SessionServer/libsessionserver/SessionServer.h	/^    virtual void updateTime()$/;"	f	class:CQuiz
updateVipTime	BillServer/old_back/BillManager.cpp	/^bool BillManager::updateVipTime(DWORD acc,DWORD vip)$/;"	f	class:BillManager
update_all_captain	SessionServer/libsessionserver/Army.cpp	/^void CArmy::update_all_captain()$/;"	f	class:CArmy
update_all_data	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
update_data	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::update_data()$/;"	f	class:CSeptMember
update_data	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
update_normal_data	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::update_normal_data()$/;"	f	class:CSeptMember
update_scene	SessionServer/libsessionserver/Army.cpp	/^void CCaptain::update_scene()$/;"	f	class:CCaptain
updef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
updefp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
updex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
upgrade	SceneServer/libscenesserver/RebuildObject.cpp	/^bool RebuildObject::upgrade(SceneUser& user,const Cmd::stPropertyUserCmd* cmd)$/;"	f	class:RebuildObject
upgrade	SceneServer/libscenesserver/RebuildObject.cpp	/^bool Upgrade::upgrade(SceneUser& user,zObject* ob,int extra_odds)$/;"	f	class:Upgrade
upgrade	SceneServer/libscenesserver/ScenePk.cpp	/^bool SceneUser::upgrade(DWORD num)$/;"	f	class:SceneUser
upgrade	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
upgrade	base/include/csCommon.h	/^/;"	m	struct:_Object
upgrade	base/include/srvEngine.h	/^	bool upgrade; \/\/ËÉΩÂê¶ÂçáÁ∫ß$/;"	m	struct:zLiveSkillB
upgradeSkill	SceneServer/libscenesserver/SceneSkill.cpp	/^bool SceneUser::upgradeSkill(DWORD dwSkillID,bool needSkillPoint)$/;"	f	class:SceneUser
upgrade_time	base/include/csCommon.h	/^/;"	m	struct:CharTest
upgrade_usetime	base/include/csCommon.h	/^/;"	m	struct:CharTest
upgradeobjectbm	base/src/zDatabaseManager.cpp	/^zDataBM<zUpgradeObjectB,UpgradeObjectBase> &upgradeobjectbm=zDataBM<zUpgradeObjectB,UpgradeObjectBase>::getMe();$/;"	v
upint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
uppetdamage	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
uppetdefence	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
upstr	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
uri	tmp/base3/request.hpp	/^  std::string uri;$/;"	m	struct:http::server2::request
uri	tmp/base3/request_parser.hpp	/^    uri,$/;"	e	enum:http::server2::request_parser::state
url	base/include/srvEngine.h	/^	const std::string url;$/;"	m	struct:UrlInfo
url_decode	tmp/base3/request_handler.cpp	/^bool request_handler::url_decode(const std::string& in, std::string& out)$/;"	f	class:http::server2::request_handler
usage_argful_short_opt	base/src/getopt.c	/^static int usage_argful_short_opt (const struct argp_option *opt,$/;"	f	file:
usage_indent	base/src/getopt.c	/^  int usage_indent;$/;"	m	struct:uparams	file:
usage_long_opt	base/src/getopt.c	/^static int usage_long_opt (const struct argp_option *opt,$/;"	f	file:
useAmulet	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
useBook	base/include/srvEngine.h	/^	uint32_t  useBook;            \/\/ÈúÄË¶ÅÁâ©ÂìÅ$/;"	m	struct:zSkillB
useCallObj	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
useFightState	SceneServer/libscenesserver/ScenesServer.h	/^/;"	g	namespace:O
useJob	base/include/csCommon.h	/^/;"	m	struct:CharBase
useJob	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_UserData
useLeechdom	SceneServer/libscenesserver/Leechdom.cpp	/^bool SceneUser::useLeechdom(zObject *obj)$/;"	f	class:SceneUser
useMicrosoftBOM	deps/tinyxml/tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument
useObject	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
useRes	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
useScroll	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
useSkill	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
user	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetAllRemovePosNpc	file:
user	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	m	struct:GetAllRemovePosUser	file:
user	SceneServer/libscenesserver/scriptTickTask.h	/^	SceneUser *user;$/;"	m	struct:scriptTask
user	SessionServer/libsessionserver/SessionServer.h	/^    UserSession    *user;$/;"	m	class:CSchoolMember
user	SessionServer/libsessionserver/SessionServer.h	/^    UserSession* user;$/;"	m	class:CQuizPersonal
user	SessionServer/libsessionserver/SessionServer.h	/^  UserSession *user;$/;"	m	class:CRelationManager
user	base/include/srvEngine.h	/^	char user[MAX_USERSIZE];$/;"	m	struct:UrlInfo
user	tmp/MiniServer/MiniServer.h	/^  MiniUser *user;$/;"	m	struct:Seat
userAboutVote	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::userAboutVote(const UserSession *pUser,const char *pName)$/;"	f	class:CSeptM
userCardList	tmp/MiniServer/MiniServer.h	/^    std::vector<CardList> userCardList;$/;"	m	class:DDZCardGame
userCount	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
userCount	tmp/MiniServer/MiniRoom.cpp	/^DWORD MiniRoom::userCount()$/;"	f	class:MiniRoom
userData	deps/tinyxml/tinyxml.h	/^	void*			userData;$/;"	m	class:TiXmlBase
userDupMap	SceneServer/libscenesserver/duplicateManager.h	/^struct userDupMap$/;"	s
userDupMaps	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<DWORD,userDupMap*> userDupMaps;$/;"	t	class:duplicateManager
userDupMaps_it	SceneServer/libscenesserver/duplicateManager.h	/^	typedef hash_map<DWORD,userDupMap*>::iterator userDupMaps_it;$/;"	t	class:duplicateManager
userEnter	tmp/MiniServer/MiniGame.cpp	/^bool MiniGame::userEnter(MiniUser *u,Cmd::MiniUserPosition seatID)$/;"	f	class:MiniGame
userEnter	tmp/MiniServer/MiniHall.cpp	/^void MiniHall::userEnter(MiniUser *u)$/;"	f	class:MiniHall
userEnter	tmp/MiniServer/MiniRoom.cpp	/^bool MiniRoom::userEnter(MiniUser *u)$/;"	f	class:MiniRoom
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Check_Draw
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Deposit
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Deposit_Ret
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_Draw_Ret
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_Scene_SetScene
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_UserDelete_Gateway
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_UserLogin_Gateway
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_UserLogout_Gateway
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_SpendGold_SceneSession
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_guardFail_SceneSession
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stChatCommonMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stGameResultCommonMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stKickUserCommonMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stNotifyPointDDZMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stNotifyPutCardMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stPointDDZMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stPutCardMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stReserveCardsDDZMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stShowHandDDZMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stUpdateUserStateCommonMiniGameCmd
userID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::stUserScoreCommonMiniGameCmd
userLeave	tmp/MiniServer/MiniGame.cpp	/^void MiniGame::userLeave(MiniUser *u)$/;"	f	class:MiniGame
userLeave	tmp/MiniServer/MiniHall.cpp	/^void MiniHall::userLeave(MiniUser *u)$/;"	f	class:MiniHall
userLeave	tmp/MiniServer/MiniRoom.cpp	/^void MiniRoom::userLeave(MiniUser *u)$/;"	f	class:MiniRoom
userLevelUp	SessionServer/libsessionserver/CartoonPetService.cpp	/^void CartoonPetService::userLevelUp(DWORD userID,DWORD level)$/;"	f	class:CartoonPetService
userList	SessionServer/libsessionserver/SessionServer.h	/^    std::list<DWORD> userList;$/;"	m	class:SessionChannel
userList	tmp/MiniServer/MiniServer.h	/^    std::set<MiniUser *> userList;\/\/ ÕÊº“-◊¥Ã¨$/;"	m	class:MiniRoom
userMap	RecordServer/RecordUserManager.h	/^	RecordUserHashmap userMap;$/;"	m	class:RecordUserM
userMap	SessionServer/libsessionserver/SessionServer.cpp	/^std::map<DWORD,BYTE> SessionService::userMap;$/;"	m	class:SessionService	file:
userMap	SessionServer/libsessionserver/SessionServer.h	/^    static std::map<DWORD,BYTE> userMap;$/;"	m	class:SessionService
userNum	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniRoomData
userOffline	SessionServer/libsessionserver/Gem.cpp	/^void CGemM::userOffline(UserSession* pUser)$/;"	f	class:CGemM
userOffline	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizM::userOffline(UserSession* pUser)$/;"	f	class:CQuizM
userOffline	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizPersonal::userOffline(UserSession* pUser)$/;"	f	class:CQuizPersonal
userOffline	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizWorld::userOffline(UserSession* pUser)$/;"	f	class:CQuizWorld
userOffline	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::userOffline(UserSession *pUser)$/;"	f	class:CSchoolM
userOffline	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::userOffline(const UserSession * pUser)$/;"	f	class:CSeptM
userOnline	SessionServer/libsessionserver/Ally.cpp	/^void CAllyM::userOnline(UserSession* pUser)$/;"	f	class:CAllyM
userOnline	SessionServer/libsessionserver/Army.cpp	/^void CArmyM::userOnline(UserSession* pUser)$/;"	f	class:CArmyM
userOnline	SessionServer/libsessionserver/CartoonPetService.cpp	/^void CartoonPetService::userOnline(UserSession * pUser)$/;"	f	class:CartoonPetService
userOnline	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountryM::userOnline(UserSession *pUser)$/;"	f	class:CCountryM
userOnline	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
userOnline	SessionServer/libsessionserver/Gem.cpp	/^void CGemM::userOnline(UserSession* pUser)$/;"	f	class:CGemM
userOnline	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizM::userOnline(UserSession* pUser)$/;"	f	class:CQuizM
userOnline	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizPersonal::userOnline(UserSession* pUser)$/;"	f	class:CQuizPersonal
userOnline	SessionServer/libsessionserver/Quiz.cpp	/^void CQuizWorld::userOnline(UserSession* pUser)$/;"	f	class:CQuizWorld
userOnline	SessionServer/libsessionserver/SchoolManager.cpp	/^void CSchoolM::userOnline(UserSession *pUser)$/;"	f	class:CSchoolM
userOnline	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::userOnline(UserSession * pUser)$/;"	f	class:CSeptM
userOnlineCountry	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
userQuestEnterDup	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
userQuestEnterDup	SceneServer/libscenesserver/duplicateManager.cpp	/^bool duplicateManager::userQuestEnterDup(SceneUser *user,DWORD mapId)$/;"	f	class:duplicateManager
userScriptTaskContainer	SceneServer/libscenesserver/scriptTickTask.h	/^	userScriptTaskContainer()$/;"	f	class:userScriptTaskContainer
userScriptTaskContainer	SceneServer/libscenesserver/scriptTickTask.h	/^class userScriptTaskContainer$/;"	c
userTempid	SceneServer/libscenesserver/TeamManager.cpp	/^	DWORD userTempid;$/;"	m	struct:SetMemberRollExec	file:
userType	base/flcmd.h	/^		WORD userType;	\/\/user belong type :the first bit :gaint user;the second bit : 51 net user$/;"	m	struct:Cmd::t_NewLoginSession
userUniqeID	GatewayServer/old_back/GatewayServer.h	/^	zUniqueDWORDID *userUniqeID;$/;"	m	class:GateUserManager
userVote	SessionServer/libsessionserver/Sept.cpp	/^void CSeptM::userVote(const UserSession *pUser,const char *pName)$/;"	f	class:CSeptM
user_canSend	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
user_count	SessionServer/libsessionserver/SessionManager.cpp	/^DWORD UserSession::user_count=0;$/;"	m	class:UserSession	file:
user_count	SessionServer/libsessionserver/SessionServer.h	/^    static DWORD user_count;$/;"	m	class:UserSession
user_getSendBuffer	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
user_getSize	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
user_iter	tmp/MiniServer/MiniServer.h	/^    typedef std::set<MiniUser *,Cmd::MiniUserState>::iterator user_iter;$/;"	t	class:MiniRoom
user_outofbound	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	struct:GetEnvryOneAndSend
userid	SceneServer/libscenesserver/SceneBattlefiel.h	/^	DWORD userid;		\/\/sky ≥…‘±Œ®“ªID$/;"	m	struct:stCampMember
userid1	SessionServer/libsessionserver/SessionServer.h	/^    DWORD userid1;       \/\/ ÃÙ’Ω’ﬂID$/;"	m	class:CDare
userid2	SessionServer/libsessionserver/SessionServer.h	/^    DWORD userid2;       \/\/ ”¶’Ω’ﬂID$/;"	m	class:CDare
userinfo	GatewayServer/old_back/GatewayServer.h	/^	Cmd::SelectUserInfo userinfo[Cmd::MAX_CHARINFO];$/;"	m	class:GateSelectUserSession
userlist	SceneServer/libscenesserver/SceneServer1.h	/^                std::vector<zEntryC> userlist;$/;"	m	class:Channel
userlist	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Channel
usermsgParse	BillServer/BillUser.cpp	/^bool BillUser::usermsgParse(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:BillUser
usermsgParse	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::usermsgParse(SceneUser *pUser,const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:SceneTask
usermsgParseBill	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::usermsgParseBill(SceneUser *pUser,const Cmd::t_NullCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:SceneTask
usermsgParseScene	BillServer/BillUser.cpp	/^bool BillUser::usermsgParseScene(const Cmd::t_NullCmd *pNullCmd,const DWORD nCmdLen)$/;"	f	class:BillUser
userupgrade	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::TeamManager
userupgrade	SceneServer/libscenesserver/Team.cpp	/^void Team::userupgrade(SceneUser *pUser)$/;"	f	class:Team
usetype	base/include/srvEngine.h	/^	uint32_t  usetype;            \/\/ÊîªÂáªÊñπÂºè$/;"	m	struct:zSkillB
usleep_time	base/include/srvEngine.h	/^	int usleep_time;                                        \/**< Âæ™ÁéØÁ≠âÂæÖÊó∂Èó¥ *\/$/;"	m	class:x_tcp_clientTaskPool
usleep_time	base/src/x_tcp_client.h	/^	int usleep_time;$/;"	m	class:x_tcp_buffer_client
usleep_time	base/src/x_tcptaskpool.cpp	/^int x_tcptaskpool::usleep_time=50000;                    \/\/loop wait time$/;"	m	class:x_tcptaskpool	file:
usleep_time	base/src/x_tcptaskpool.h	/^	static int usleep_time;                    \/**< Âæ™ÁéØÁ≠âÂæÖÊó∂Èó¥ *\/$/;"	m	class:x_tcptaskpool
usm	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
utf8ByteTable	deps/tinyxml/tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase
utf8ByteTable	deps/tinyxml/tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	file:
uuid	base/command.h	/^		char uuid[25];$/;"	m	struct:Cmd::stUserRequestLoginCmd
vCoolTimeType	SceneServer/libscenesserver/ItemCoolTime.h	/^	std::vector<stCoolTimeType> vCoolTimeType;$/;"	m	class:CItmeCoolTime
vDareList	SessionServer/libsessionserver/SessionServer.h	/^    DareSet vDareList;$/;"	m	class:CCity
vDareRecord	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CDareRecord*> vDareRecord;$/;"	m	class:CDareRecordM
vWars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
vXmlItemCoolTime	SceneServer/libscenesserver/ScenesServer.cpp	/^std::vector<stXmlItemCoolTime> vXmlItemCoolTime;$/;"	v
vXmlSuitAttribute	SceneServer/libscenesserver/ScenesServer.cpp	/^std::vector<stxml_SuitAttribute> vXmlSuitAttribute;$/;"	v
v_end	tmp/MiniServer/MiniServer.h	/^    virtual bool v_end(){return true;}$/;"	f	class:MiniGame
v_lastSampleTime	GatewayServer/old_back/GatewayServer.h	/^	DWORD v_lastSampleTime;$/;"	m	class:GatewayTask
v_parseGameCmd	tmp/MiniServer/DDZCardGame.cpp	/^bool DDZCardGame::v_parseGameCmd(MiniUser *u,Cmd::stMiniGameUserCmd *c,DWORD len)$/;"	f	class:DDZCardGame
v_parseGameCmd	tmp/MiniServer/MiniServer.h	/^    virtual bool v_parseGameCmd(MiniUser *u,Cmd::stMiniGameUserCmd *cmd,DWORD len){return false;}$/;"	f	class:MiniGame
v_samplePackets	GatewayServer/old_back/GatewayServer.h	/^	DWORD v_samplePackets;$/;"	m	class:GatewayTask
v_start	tmp/MiniServer/DDZCardGame.cpp	/^bool DDZCardGame::v_start()$/;"	f	class:DDZCardGame
v_start	tmp/MiniServer/MiniServer.h	/^    virtual bool v_start(){return true;}$/;"	f	class:MiniGame
v_timer	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::v_timer()$/;"	f	class:DDZCardGame
v_timer	tmp/MiniServer/MiniServer.h	/^    virtual void v_timer(){}$/;"	f	class:MiniGame
v_userEnter	tmp/MiniServer/MiniServer.h	/^    virtual void v_userEnter(MiniUser *u,Cmd::MiniUserPosition seatID){}$/;"	f	class:MiniGame
v_userLeave	tmp/MiniServer/DDZCardGame.cpp	/^void DDZCardGame::v_userLeave(MiniUser *u)$/;"	f	class:DDZCardGame
v_userLeave	tmp/MiniServer/MiniServer.h	/^    virtual void v_userLeave(MiniUser *u){}$/;"	f	class:MiniGame
val	tmp/MiniServer/Top100.cpp	/^  Cmd::MiniGameScore val;$/;"	m	struct:findScore	file:
val	tmp/MiniServer/Top100.cpp	/^  DWORD val;$/;"	m	struct:findID	file:
valid	base/include/csCommon.h	/^/;"	f	class:Cmd::Cmd::Card
valid	tmp/MiniServer/MiniServer.h	/^    bool valid()const{return _valid;}$/;"	f	class:CardPattern
validate	GatewayServer/old_back/GatewayServer.h	/^	virtual bool validate()$/;"	f	class:GatewayService
validate	base/x_service.h	/^	virtual bool validate() { return true; }$/;"	f	class:x_service
validate	base/x_subnetservice.cpp	/^bool x_subnetservice::validate() {$/;"	f	class:x_subnetservice
value	SceneServer/libscenesserver/SceneServer1.h	/^  void value(const std::string& key,T& value)$/;"	f	class:ScenesParser
value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars::VAR
value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ScenesParser
value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LeechdomElement
value	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillStatusElement
value	base/include/csCommon.h	/^/;"	m	class:Cmd::Cmd::Card
value	base/include/srvEngine.h	/^			uint32_t value;$/;"	m	struct:SkillElement::__anon136::__anon137
value	base/include/srvEngine.h	/^	Quint16_t  value;      \/\/ÈúÄË¶ÅÁªèÈ™å$/;"	m	struct:zHonorB
value	deps/tinyxml/tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:TiXmlNode
value	deps/tinyxml/tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:TiXmlAttribute
value	tmp/MiniServer/MiniServer.h	/^    Cmd::Card value;\/\/÷µ,∞¥–Ú¡–◊Ó¥ÛµƒÀ„$/;"	m	class:CardPattern
value	tmp/base3/header.hpp	/^  std::string value;$/;"	m	struct:http::server2::header
value1	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD value1,value2;$/;"	m	class:Dice
value1	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
value2	SceneServer/libscenesserver/SceneServer1.h	/^    DWORD value1,value2;$/;"	m	class:Dice
value2	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::Dice
value_type	BillServer/old_back/BillServer.h	/^    typedef CacheContainer::value_type value_type;$/;"	t	class:BillCache
value_type	GatewayServer/old_back/GatewayServer.h	/^	typedef SceneClient_map::value_type value_type;$/;"	t	class:SceneClientManager
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Add
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Differ
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Div
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Equal
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::GetP
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Great
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Less
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Mul
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Pow
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Set
value_type	SceneServer/libscenesserver/SceneServer1.h	/^    typedef T value_type;$/;"	t	class:Op::Sub
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:AddBindItemAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:AddGreenBindItemAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:AddItemAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:CaptionCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:ConfraternityCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:CountryPowerCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:DisableAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:DropItemAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:FiveTypeCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:GotoAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:GradeCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:HonorCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:HorseCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:InNationCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:IsGuardCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:ItemCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:MapCountryCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:MaxHonorCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:NationCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:ProfessionCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:RemoveItemAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:RideDownAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:SelfCountryCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:SkillAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:SpaceCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:TeamedCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:TimeoutsCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:TimerCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef int value_type;$/;"	t	class:WeekCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:ActionPointAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:ActionPointCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:CheckSexCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:FamilyLevelAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:FamilyLevelCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:FamilyVarAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:FiveLevelAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:FiveLevelCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:GlobalAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:GlobalCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:GoldAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:HaveSkillCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:HonorAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:LevelCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:MaxHonorAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:ReputeCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:ScoreAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:SeptIDCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:TongVarAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:UnionIDCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:UserVarAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:UserVarCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:UsersVarAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:VarAction
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:VarCondition
value_type	SceneServer/libscenesserver/SceneServer1.h	/^  typedef typename Operation::value_type value_type;$/;"	t	class:VarsAction
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:ActionPointCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:CaptionCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:CheckSexCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:ConfraternityCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:CountryPowerCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:FamilyLevelCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:FiveLevelCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:FiveTypeCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:GlobalCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:GoldAction
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:GradeCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:HaveSkillCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:HonorCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:HorseCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:InNationCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:IsGuardCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:ItemCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:LevelCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:MapCountryCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:MaxHonorCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:NationCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Add
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Differ
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Div
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Equal
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::GetP
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Great
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Less
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Mul
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Pow
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Set
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:Op::Sub
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:ProfessionCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:ReputeCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:SelfCountryCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:SeptIDCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:SpaceCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:TeamedCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:TimeoutsCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:TimerCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:UnionIDCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:UserVarAction
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:UserVarCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:VarAction
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:VarCondition
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:VarsAction
value_type	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:WeekCondition
value_type	SuperServer/FLClientManager.h	/^    typedef FLClientContainer::value_type value_type;$/;"	t	class:FLClientManager
value_type	SuperServer/InfoClientManager.h	/^    typedef InfoClient_map::value_type value_type;$/;"	t	class:InfoClientManager
var_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::Vars
vars	SceneServer/libscenesserver/Quest.cpp	/^Vars* QuestList::vars(DWORD id) const$/;"	f	class:QuestList
vars	SceneServer/libscenesserver/Quest.cpp	/^Vars* UserVar::vars(DWORD id,QWORD key) const$/;"	f	class:UserVar
vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::UserVar::VAR
vars_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::GlobalVarImpl
vars_iterator	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	class:O::LiveSkills::UserVar
venterSeptGuard	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
ver	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::stMapFileHeader
verified	base/super_client.h	/^	bool verified;$/;"	m	class:super_client
verify	BillServer/old_back/BillManager.cpp	/^bool BillManager::verify(const t_NewLoginSession &session)$/;"	f	class:BillManager
verify	GatewayServer/LoginSessionManager.cpp	/^bool LoginSessionManager::verify(const DWORD loginTempID,const DWORD accid,char *numPassword\/*,ZES_cblock *key*\/) {$/;"	f	class:LoginSessionManager
verify	RecordServer/RecordUserManager.cpp	/^bool RecordUserM::verify(const uint32_t accid, const uint32_t id, const uint32_t dwServerID){$/;"	f	class:RecordUserM
verify	SuperServer/ServerTask.cpp	/^bool ServerTask::verify(WORD wdType,const char *_pstrIP) {$/;"	f	class:ServerTask
verify	base/include/tcp_task_new.h	/^	virtual void verify(){$/;"	f	class:tcp_task
verify	base/src/x_tcptask.h	/^		verify    =  1,            \/**< ËøûÊé•È™åËØÅÁä∂ÊÄÅ *\/$/;"	e	enum:x_tcptask::zTCPTask_State
verifyACCID	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::verifyACCID(const Cmd::stNullUserCmd *pNullCmd)$/;"	f	class:GatewayTask
verifyConn	BillServer/old_back/BillTask.cpp	/^int BillTask::verifyConn()$/;"	f	class:BillTask
verifyConn	GatewayServer/old_back/GatewayTask.cpp	/^int GatewayTask::verifyConn()$/;"	f	class:GatewayTask
verifyConn	SceneServer/libscenesserver/SceneTask.cpp	/^int SceneTask::verifyConn()$/;"	f	class:SceneTask
verifyConn	SessionServer/libsessionserver/SessionTask.cpp	/^int SessionTask::verifyConn()$/;"	f	class:SessionTask
verifyConn	base/src/x_tcptask.h	/^	virtual int verifyConn()$/;"	f	class:x_tcptask
verifyConn	tmp/MiniServer/MiniTask.cpp	/^int MiniTask::verifyConn()$/;"	f	class:MiniTask
verifyLogin	BillServer/BillTask.cpp	/^bool BillTask::verifyLogin(const Cmd::Bill::t_LoginBill *ptCmd)$/;"	f	class:BillTask
verifyLogin	BillServer/old_back/BillTask.cpp	/^bool BillTask::verifyLogin(const Cmd::Bill::t_LoginBill *ptCmd)$/;"	f	class:BillTask
verifyLogin	GatewayServer/GatewayTask.cpp	/^bool GatewayTask::verifyLogin(const Cmd::stNullUserCmd *ptCmd)$/;"	f	class:GatewayTask
verifyLogin	RecordServer/RecordTask.cpp	/^bool RecordTask::verifyLogin(const Cmd::Record::t_LoginRecord *ptCmd)$/;"	f	class:RecordTask
verifyLogin	SceneServer/SceneTask.cpp	/^bool SceneTask::verifyLogin(const Cmd::Scene::t_LoginScene *ptCmd)$/;"	f	class:SceneTask
verifyLogin	SceneServer/libscenesserver/SceneTask.cpp	/^bool SceneTask::verifyLogin(const Cmd::Scene::t_LoginScene *ptCmd)$/;"	f	class:SceneTask
verifyLogin	SessionServer/SessionTask.cpp	/^bool SessionTask::verifyLogin(const Cmd::Session::t_LoginSession *ptCmd)$/;"	f	class:SessionTask
verifyLogin	SessionServer/libsessionserver/SessionTask.cpp	/^bool SessionTask::verifyLogin(const Cmd::Session::t_LoginSession *ptCmd)$/;"	f	class:SessionTask
verifyLogin	tmp/MiniServer/MiniTask.cpp	/^bool MiniTask::verifyLogin(const Cmd::Mini::t_LoginMini *ptCmd)$/;"	f	class:MiniTask
verifyNpcAction	SceneServer/libscenesserver/NpcTrade.cpp	/^bool NpcTrade::verifyNpcAction(const DWORD npcid,const NpcItem &item)$/;"	f	class:NpcTrade
verifyReturn	FLServer/LoginManager.cpp	/^void LoginManager::verifyReturn(const Cmd::t_NewLoginSession &session)$/;"	f	class:LoginManager
verifyThreadFunctors	base/src/x_tcptaskpool.h	/^	std::vector<boost::shared_ptr<x_verify_thread_functor> > verifyThreadFunctors;$/;"	m	class:x_tcptaskpool
verifyThreads	base/src/x_tcptaskpool.h	/^	boost::thread_group verifyThreads; $/;"	m	class:x_tcptaskpool
verifyTypeOK	SuperServer/ServerTask.cpp	/^bool ServerTask::verifyTypeOK(const WORD wdType,std::vector<shared_ptr<ServerTask> > &sv) {$/;"	f	class:ServerTask
verifyVer	FLServer/GYListManager.cpp	/^bool GYListManager::verifyVer(const GameZone_t &gameZone,DWORD verify_client_version,BYTE &retcode) {$/;"	f	class:GYListManager
verifyVersion	GatewayServer/old_back/GatewayTask.cpp	/^bool GatewayTask::verifyVersion(const Cmd::stNullUserCmd *pNullCmd)$/;"	f	class:GatewayTask
verify_client_version	GatewayServer/old_back/GatewayServer.h	/^	DWORD verify_client_version;$/;"	m	class:GatewayService
verify_msg	FLServer/PingTask.cpp	/^bool PingTask::verify_msg(const Cmd::t_NullCmd* cmd, const uint32_t len) {$/;"	f	class:PingTask
veriry_ok	BillServer/old_back/BillServer.h	/^    bool veriry_ok;$/;"	m	class:BillTask
veriry_ok	SceneServer/libscenesserver/SceneServer1.h	/^    bool veriry_ok;$/;"	m	class:SceneTask
veriry_ok	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneTask
veriry_ok	tmp/MiniServer/MiniServer.h	/^    bool veriry_ok;$/;"	m	class:MiniTask
version	base/command.h	/^		DWORD version;$/;"	m	struct:Cmd::stUserVerifyVerCmd
version	base/include/csCommon.h	/^/;"	m	struct:Cmd::stUserVerifyVerCmd
version	base/include/csCommon.h	/^/;"	m	struct:ZlibObject
version	deps/tinyxml/tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:TiXmlDeclaration
versionVerified	GatewayServer/old_back/GatewayServer.h	/^	bool versionVerified;$/;"	m	class:GatewayTask
vip_time	BillServer/BillUser.h	/^    DWORD vip_time;    \/**< vipµΩ∆⁄ ±º‰ *\/$/;"	m	class:BillUser
vip_time	BillServer/old_back/BillServer.h	/^    DWORD vip_time;    \/**< vipµΩ∆⁄ ±º‰ *\/$/;"	m	class:BillUser
vip_time	BillServer/old_back/BillServer.h	/^  DWORD vip_time;    \/**< vipµΩ∆⁄ ±º‰ *\/$/;"	m	struct:BillInfo
vip_user	GatewayServer/old_back/GatewayServer.h	/^	bool vip_user;$/;"	m	class:GatewayTask
visitNpc	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
vit	base/include/srvEngine.h	/^	uint32_t vit;    \/\/ ‰ΩìË¥®    $/;"	m	struct:zPetB
vote	SessionServer/libsessionserver/Vote.cpp	/^void CVote::vote(UserSession* pUser,DWORD dwOption)$/;"	f	class:CVote
votes	SessionServer/libsessionserver/SessionServer.h	/^    std::vector<CVote*> votes;$/;"	m	class:CVoteM
w	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::RelativePos
wMsg	SessionServer/libsessionserver/SessionServer.cpp	/^std::map<BYTE,worldMsg> SessionService::wMsg;$/;"	m	class:SessionService	file:
wMsg	SessionServer/libsessionserver/SessionServer.h	/^    static std::map<BYTE,worldMsg> wMsg;$/;"	m	class:SessionService
waitForRead	base/include/x_socket.cpp	/^int x_socket::waitForRead()$/;"	f	class:x_socket
waitForWrite	base/include/x_socket.cpp	/^int x_socket::waitForWrite()$/;"	f	class:x_socket
waitPlayState	GatewayServer/old_back/GatewayServer.h	/^	void waitPlayState()$/;"	f	class:GateUser
waitSync	GatewayServer/old_back/GatewayTask.cpp	/^int GatewayTask::waitSync()$/;"	f	class:GatewayTask
waitSync	SceneServer/libscenesserver/SceneTask.cpp	/^int SceneTask::waitSync()$/;"	f	class:SceneTask
waitSync	base/src/x_tcptask.h	/^	virtual int waitSync()$/;"	f	class:x_tcptask
waitUnregState	GatewayServer/old_back/GatewayServer.h	/^	void waitUnregState()$/;"	f	class:GateUser
wait_gomap_name	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
wait_point	SessionServer/libsessionserver/SessionServer.h	/^  ArhatMapPoint wait_point[mappoint_num];$/;"	m	class:CGemM
wait_sync	base/include/tcp_task_new.h	/^	virtual void wait_sync(){$/;"	f	class:tcp_task
waiting	base/task_state.h	/^	bool waiting;$/;"	m	class:state_verify
waiting	base/task_state.h	/^	bool waiting;$/;"	m	class:state_wait_sync
waitingList	SessionServer/libsessionserver/SessionServer.h	/^    hash_set<DWORD> waitingList;$/;"	m	class:CartoonPetService
warSize	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneUser
warn	base/x_logger.cpp	/^void x_logger::warn(const char * pattern,...)$/;"	f	class:x_logger
watchTrap	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SceneEntryPk
wcsicmp	base/src/codeLib.c	/^int wcsicmp(PWSTR sz0,PWSTR sz1)$/;"	f
wdCon	base/include/csCommon.h	/^/;"	m	struct:CharBase::__anon189::__anon190
wdCon	base/include/csCommon.h	/^/;"	m	struct:CharState::__anon191::__anon192
wdCon	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon202::__anon203
wdDegree	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stDegreeMember
wdDegree	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stTempDegreeMember
wdDegree	SessionServer/libsessionserver/SessionServer.h	/^    WORD  wdDegree;$/;"	m	class:CSchoolMember
wdDegree	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
wdDex	base/include/csCommon.h	/^/;"	m	struct:CharBase::__anon189::__anon190
wdDex	base/include/csCommon.h	/^/;"	m	struct:CharState::__anon191::__anon192
wdDex	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon202::__anon203
wdExtPort	SuperServer/ServerTask.h	/^		WORD wdExtPort;$/;"	m	class:ServerTask
wdExtPort	base/supercmd.h	/^			WORD wdExtPort;$/;"	m	struct:Cmd::Super::ServerEntry
wdExtPort	base/supercmd.h	/^			WORD wdExtPort;$/;"	m	struct:Cmd::Super::t_Startup_Response
wdGatewayID	BillServer/old_back/BillServer.h	/^  WORD wdGatewayID;    \/**< µ«¬ΩµƒÕ¯πÿ±‡∫≈ *\/$/;"	m	struct:BillInfo
wdGatewayID	base/flcmd.h	/^		WORD wdGatewayID;$/;"	m	struct:Cmd::t_NewLoginSession
wdHP	SceneServer/libscenesserver/SceneServer1.h	/^  DWORD wdHP;$/;"	m	struct:t_expRec
wdInt	base/include/csCommon.h	/^/;"	m	struct:CharBase::__anon189::__anon190
wdInt	base/include/csCommon.h	/^/;"	m	struct:CharState::__anon191::__anon192
wdInt	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon202::__anon203
wdLevel	SessionServer/libsessionserver/SessionServer.h	/^    DWORD wdLevel;$/;"	m	class:CSchoolMember
wdLevel	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
wdLevel	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
wdLevel	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionInfo
wdLoginID	base/flcmd.h	/^			WORD wdLoginID;$/;"	m	struct:Cmd::FL::t_idinuse_Session
wdLoginID	base/flcmd.h	/^		WORD wdLoginID;$/;"	m	struct:Cmd::t_NewLoginSession
wdLoginID	base/supercmd.h	/^			WORD wdLoginID;$/;"	m	struct:Cmd::Super::t_idinuse_Bill
wdMen	base/include/csCommon.h	/^/;"	m	struct:CharBase::__anon189::__anon190
wdMen	base/include/csCommon.h	/^/;"	m	struct:CharState::__anon191::__anon192
wdMen	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon202::__anon203
wdNetType	SuperServer/ServerTask.h	/^		WORD wdNetType;$/;"	m	class:ServerTask
wdNetType	base/command.h	/^		WORD wdNetType;$/;"	m	struct:Cmd::stUserRequestLoginCmd
wdNetType	base/flcmd.h	/^			WORD wdNetType;$/;"	m	struct:Cmd::FL::t_GYList_FL
wdNetType	base/flcmd.h	/^		WORD wdNetType;	\/\/gate net type : 0 dianxing, 1 wangtong$/;"	m	struct:Cmd::t_NewLoginSession
wdNetType	base/supercmd.h	/^			WORD wdNetType;$/;"	m	struct:Cmd::Super::ServerEntry
wdNetType	base/supercmd.h	/^			WORD wdNetType;$/;"	m	struct:Cmd::Super::t_GYList_Gateway
wdNetType	base/supercmd.h	/^			WORD wdNetType;$/;"	m	struct:Cmd::Super::t_Startup_Response
wdNumOnline	FLServer/GYListManager.h	/^	WORD wdNumOnline;      \/**< Õ¯πÿ‘⁄œﬂ»À ˝ *\/$/;"	m	struct:GYList
wdNumOnline	base/flcmd.h	/^			WORD wdNumOnline;$/;"	m	struct:Cmd::FL::t_GYList_FL
wdNumOnline	base/supercmd.h	/^			WORD wdNumOnline;$/;"	m	struct:Cmd::Super::t_GYList_Gateway
wdNumber	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
wdOccupation	SessionServer/libsessionserver/SessionServer.h	/^    DWORD wdOccupation;$/;"	m	class:CSchoolMember
wdOccupation	SessionServer/libsessionserver/SessionServer.h	/^    WORD  wdOccupation;$/;"	m	struct:CSeptMember
wdOccupation	SessionServer/libsessionserver/SessionServer.h	/^    WORD  wdOccupation;$/;"	m	struct:CUnionMember
wdOccupation	base/include/csCommon.h	/^/;"	m	struct:School::stSchoolMemberInfo
wdOccupation	base/include/csCommon.h	/^/;"	m	struct:SeptDef::stSeptMemberInfo
wdOccupation	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionMemberInfo
wdPort	FLServer/GYListManager.h	/^	WORD wdPort;        \/**< ∑˛ŒÒ∆˜∂Àø⁄ *\/$/;"	m	struct:GYList
wdPort	SuperServer/ServerTask.h	/^		WORD wdPort;            \/**< ∑˛ŒÒ∆˜ƒ⁄Õ¯∂Àø⁄ *\/$/;"	m	class:ServerTask
wdPort	base/command.h	/^		WORD wdPort;$/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd
wdPort	base/flcmd.h	/^			WORD wdPort;$/;"	m	struct:Cmd::FL::t_GYList_FL
wdPort	base/flcmd.h	/^		WORD wdPort;$/;"	m	struct:Cmd::t_NewLoginSession
wdPort	base/include/csCommon.h	/^/;"	m	struct:Cmd::stServerReturnLoginSuccessCmd
wdPort	base/supercmd.h	/^			WORD wdPort;$/;"	m	struct:Cmd::Super::ServerEntry
wdPort	base/supercmd.h	/^			WORD wdPort;$/;"	m	struct:Cmd::Super::t_Startup_Response
wdPort	base/x_subnetservice.h	/^	uint16_t wdPort;            \/**< ÊúçÂä°Âô®ÂÜÖÁΩëÁ´ØÂè£ *\/$/;"	m	class:x_subnetservice
wdPower	base/include/csCommon.h	/^/;"	m	struct:UnionDef::stUnionMemberInfo
wdProperty	base/include/csCommon.h	/^/;"	m	union:CharBase::__anon189
wdProperty	base/include/csCommon.h	/^/;"	m	union:CharState::__anon191
wdProperty	base/include/csCommon.h	/^/;"	m	union:Cmd::t_MainUserData::__anon202
wdServerID	BillServer/BillTask.h	/^    WORD wdServerID;          \/**< ∑˛ŒÒ∆˜±‡∫≈,“ª∏ˆ«¯Œ®“ªµƒ *\/$/;"	m	class:BillTask
wdServerID	BillServer/old_back/BillServer.h	/^    WORD wdServerID;          \/**< ∑˛ŒÒ∆˜±‡∫≈,“ª∏ˆ«¯Œ®“ªµƒ *\/$/;"	m	class:BillTask
wdServerID	FLServer/GYListManager.h	/^	WORD wdServerID;      \/**< ∑˛ŒÒ∆˜±‡∫≈ *\/$/;"	m	struct:GYList
wdServerID	GatewayServer/old_back/GatewayServer.h	/^	WORD wdServerID;$/;"	m	class:BillClient
wdServerID	GatewayServer/old_back/GatewayServer.h	/^	WORD wdServerID;$/;"	m	class:MiniClient
wdServerID	GatewayServer/old_back/GatewayServer.h	/^	WORD wdServerID;$/;"	m	class:SceneClient
wdServerID	RecordServer/RecordTask.h	/^    WORD wdServerID;          \/**< ∑˛ŒÒ∆˜±‡∫≈,“ª∏ˆ«¯Œ®“ªµƒ *\/$/;"	m	class:RecordTask
wdServerID	SceneServer/SceneTask.h	/^    WORD wdServerID;          \/**< ∑˛ŒÒ∆˜±‡∫≈,“ª∏ˆ«¯Œ®“ªµƒ *\/$/;"	m	class:SceneTask
wdServerID	SceneServer/libscenesserver/SceneServer1.h	/^    WORD wdServerID;$/;"	m	class:SceneTask
wdServerID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::MiniClient
wdServerID	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneTask
wdServerID	SessionServer/SessionTask.h	/^    WORD wdServerID;          \/**< ∑˛ŒÒ∆˜±‡∫≈,“ª∏ˆ«¯Œ®“ªµƒ *\/$/;"	m	class:SessionTask
wdServerID	SessionServer/libsessionserver/SessionServer.h	/^    WORD wdServerID;$/;"	m	class:SessionTask
wdServerID	SuperServer/RoleregCache.h	/^      WORD wdServerID;      \/**< ∑˛ŒÒ∆˜±‡∫≈ *\/$/;"	m	struct:RoleregCache::Data
wdServerID	base/billcmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::Bill::t_LoginBill
wdServerID	base/flcmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::FL::t_GYList_FL
wdServerID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_LoginMini
wdServerID	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_LoginSession
wdServerID	base/recordcmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::Record::t_LoginRecord
wdServerID	base/scenecmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::Scene::t_LoginScene
wdServerID	base/sessioncmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::Session::t_LoginSession
wdServerID	base/supercmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::Super::ServerEntry
wdServerID	base/supercmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::Super::t_GYList_Gateway
wdServerID	base/supercmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::Super::t_Startup_OK
wdServerID	base/supercmd.h	/^			WORD wdServerID;$/;"	m	struct:Cmd::Super::t_Startup_Response
wdServerID	base/x_subnetservice.h	/^	uint16_t wdServerID;          \/**< ÊúçÂä°Âô®ÁºñÂè∑Ôºå‰∏Ä‰∏™Âå∫ÂîØ‰∏ÄÁöÑ *\/$/;"	m	class:x_subnetservice
wdServerID	tmp/MiniServer/MiniServer.h	/^    WORD wdServerID;          \/**< ∑˛ŒÒ∆˜±‡∫≈,“ª∏ˆ«¯Œ®“ªµƒ *\/$/;"	m	class:MiniTask
wdServerType	BillServer/BillTask.h	/^    WORD wdServerType;          \/**< ∑˛ŒÒ∆˜¿‡–Õ *\/$/;"	m	class:BillTask
wdServerType	BillServer/old_back/BillServer.h	/^    WORD wdServerType;          \/**< ∑˛ŒÒ∆˜¿‡–Õ *\/$/;"	m	class:BillTask
wdServerType	FLServer/FLServer.h	/^	WORD wdServerType;$/;"	m	class:FLService
wdServerType	RecordServer/RecordTask.h	/^    WORD wdServerType;          \/**< ∑˛ŒÒ∆˜¿‡–Õ *\/$/;"	m	class:RecordTask
wdServerType	SceneServer/SceneTask.h	/^    WORD wdServerType;          \/**< ∑˛ŒÒ∆˜¿‡–Õ *\/$/;"	m	class:SceneTask
wdServerType	SceneServer/libscenesserver/SceneServer1.h	/^    WORD wdServerType;$/;"	m	class:SceneTask
wdServerType	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::SceneTask
wdServerType	SessionServer/SessionTask.h	/^    WORD wdServerType;          \/**< ∑˛ŒÒ∆˜¿‡–Õ *\/$/;"	m	class:SessionTask
wdServerType	SessionServer/libsessionserver/SessionServer.h	/^    WORD wdServerType;$/;"	m	class:SessionTask
wdServerType	base/billcmd.h	/^			WORD wdServerType;$/;"	m	struct:Cmd::Bill::t_LoginBill
wdServerType	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Mini::t_LoginMini
wdServerType	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_LoginSession
wdServerType	base/recordcmd.h	/^			WORD wdServerType;$/;"	m	struct:Cmd::Record::t_LoginRecord
wdServerType	base/scenecmd.h	/^			WORD wdServerType;$/;"	m	struct:Cmd::Scene::t_LoginScene
wdServerType	base/sessioncmd.h	/^			WORD wdServerType;$/;"	m	struct:Cmd::Session::t_LoginSession
wdServerType	base/supercmd.h	/^			WORD wdServerType;$/;"	m	struct:Cmd::Super::ServerEntry
wdServerType	base/supercmd.h	/^			WORD wdServerType;$/;"	m	struct:Cmd::Super::t_Startup_Request
wdServerType	base/x_subnetservice.h	/^	uint16_t wdServerType;          \/**< ÊúçÂä°Âô®Á±ªÂûãÔºåÂàõÂª∫Á±ªÂÆû‰æãÁöÑÊó∂ÂÄôÂ∑≤ÁªèÁ°ÆÂÆö *\/$/;"	m	class:x_subnetservice
wdServerType	tmp/MiniServer/MiniServer.h	/^    WORD wdServerType;          \/**< ∑˛ŒÒ∆˜¿‡–Õ *\/$/;"	m	class:MiniTask
wdSize	base/supercmd.h	/^			WORD wdSize;$/;"	m	struct:Cmd::Super::t_Startup_Response
wdStdCon	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon204::__anon205
wdStdDex	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon204::__anon205
wdStdInt	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon204::__anon205
wdStdMen	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon204::__anon205
wdStdProperty	base/include/csCommon.h	/^/;"	m	union:Cmd::t_MainUserData::__anon204
wdStdStr	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon204::__anon205
wdStr	base/include/csCommon.h	/^/;"	m	struct:CharBase::__anon189::__anon190
wdStr	base/include/csCommon.h	/^/;"	m	struct:CharState::__anon191::__anon192
wdStr	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData::__anon202::__anon203
wdTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stDegreeMember
wdTime	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stTempDegreeMember
wdTire	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
wdTire	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
wdTirePer	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
wdValue	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	union:O::PkPreValue::__anon61
weapon_kind	base/include/srvEngine.h	/^	uint32_t weapon_kind; \/\/Ê≠¶Âô®ÁßçÁ±ª$/;"	m	struct:zLiveSkillB
weaponlist	base/include/srvEngine.h	/^	std::vector<uint16_t> weaponlist;      \/\/Ê≠¶Âô®ÂàóË°®$/;"	m	struct:zSkillB
weaponumdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
weaponupdamp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::SkillState::__anon59::__anon60
weekDay	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Scene::FixedRush
wglog	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
wglog_len	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::SceneUser
wglogger	SceneServer/libscenesserver/ScenesServer.cpp	/^zLogger * ScenesService::wglogger = NULL;$/;"	m	class:ScenesService	file:
wglogger	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
width	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
width	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::MultiPack
width	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::ZoneTypeDef
width	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::t_NpcDefine
width	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::stMapFileHeader
width	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::zZone
width	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd
width	base/include/csCommon.h	/^/;"	m	struct:_Object
width	base/include/srvEngine.h	/^	BYTE width;          \/\/ Ê†ºÂ≠êÂÆΩ$/;"	m	struct:zObjectB
win	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::MiniGameScore
winnerExp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Scene
winnerList	SessionServer/libsessionserver/Gift.cpp	/^std::multimap<DWORD,std::string> Gift::winnerList;$/;"	m	class:Gift	file:
winnerList	SessionServer/libsessionserver/SessionServer.h	/^    static std::multimap<DWORD,std::string> winnerList;$/;"	m	class:Gift
winner_exp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
winner_exp	SessionServer/libsessionserver/SessionServer.h	/^    bool winner_exp;$/;"	m	class:CCountry
winner_time	SessionServer/libsessionserver/SessionServer.h	/^    DWORD winner_time;$/;"	m	class:CCountry
wmargin	base/src/getopt.c	/^  ssize_t wmargin;		\/* Margin to wrap to, or -1 to truncate.  *\/$/;"	m	struct:argp_fmtstream	file:
work	base/include/tcp_task_new.h	/^	virtual void work(){$/;"	f	class:tcp_task
work_	base/io_service_pool.h	/^		std::vector<work_ptr> work_;$/;"	m	class:io_service_pool
work_	tmp/base3/io_service_pool.hpp	/^  std::vector<work_ptr> work_;$/;"	m	class:io_service_pool
work_ptr	base/io_service_pool.h	/^		typedef boost::shared_ptr<boost::asio::io_service::work> work_ptr;$/;"	t	class:io_service_pool
work_ptr	tmp/base3/io_service_pool.hpp	/^  typedef boost::shared_ptr<boost::asio::io_service::work> work_ptr;$/;"	t	class:io_service_pool
working_time	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills
worldMsg	SessionServer/libsessionserver/SessionServer.h	/^  worldMsg()$/;"	f	struct:worldMsg
worldMsg	SessionServer/libsessionserver/SessionServer.h	/^struct worldMsg$/;"	s
wpm	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
wps	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::WayPointM
wr_buf	base/src/x_buffer.h	/^	inline BYTE *wr_buf()$/;"	f	class:ByteBuffer
wr_flip	base/src/x_buffer.h	/^	inline void wr_flip(const uint32_t size)$/;"	f	class:ByteBuffer
wr_msec	base/include/x_socket.h	/^	int wr_msec;                \/**< ÂÜôÂÖ•Ë∂ÖÊó∂ÔºåÊØ´Áßí *\/$/;"	m	class:x_socket
wr_reserve	base/src/x_buffer.h	/^inline void t_BufferCmdQueue::wr_reserve(const uint32_t size)$/;"	f	class:t_BufferCmdQueue
wr_reserve	base/src/x_buffer.h	/^inline void t_StackCmdQueue::wr_reserve(const uint32_t size)$/;"	f	class:t_StackCmdQueue
wr_size	base/src/x_buffer.h	/^	inline uint32_t wr_size()$/;"	f	class:ByteBuffer
writeAllToDB	SessionServer/libsessionserver/CartoonPetService.cpp	/^DWORD CartoonPetService::writeAllToDB(bool groupflag)$/;"	f	class:CartoonPetService
writeBackTimer	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::ScenesService
writeDB	SessionServer/libsessionserver/CartoonPetService.cpp	/^bool CartoonPetService::writeDB(DWORD cartoonID,Cmd::t_CartoonData& data)$/;"	f	class:CartoonPetService
writeDB	SessionServer/libsessionserver/EmperorForbid.cpp	/^void EmperorForbid::writeDB()$/;"	f	class:EmperorForbid
writeDatabase	SessionServer/libsessionserver/Ally.cpp	/^void CAlly::writeDatabase()$/;"	f	class:CAlly
writeDatabase	SessionServer/libsessionserver/Army.cpp	/^void CArmy::writeDatabase()$/;"	f	class:CArmy
writeDatabase	SessionServer/libsessionserver/Army.cpp	/^void CCaptain::writeDatabase()$/;"	f	class:CCaptain
writeDatabase	SessionServer/libsessionserver/CityManager.cpp	/^void CCity::writeDatabase()$/;"	f	class:CCity
writeDatabase	SessionServer/libsessionserver/CountryManager.cpp	/^void CCountry::writeDatabase()$/;"	f	class:CCountry
writeDatabase	SessionServer/libsessionserver/CountryManager.cpp	/^void CTech::writeDatabase()$/;"	f	class:CTech
writeDatabase	SessionServer/libsessionserver/NpcDare.cpp	/^void CNpcDareObj::writeDatabase()$/;"	f	class:CNpcDareObj
writeDatabase	SessionServer/libsessionserver/RecommendManager.cpp	/^void Recommend::writeDatabase()$/;"	f	class:Recommend
writeDatabase	SessionServer/libsessionserver/RecommendManager.cpp	/^void RecommendSub::writeDatabase()$/;"	f	class:RecommendSub
writeDatabase	SessionServer/libsessionserver/Sept.cpp	/^void CSept::writeDatabase()$/;"	f	class:CSept
writeDatabase	SessionServer/libsessionserver/Sept.cpp	/^void CSeptMember::writeDatabase()$/;"	f	class:CSeptMember
writeDatabase	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
writeDatabase	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
writeDatabase	SessionServer/libsessionserver/Vote.cpp	/^void CVote::writeDatabase()$/;"	f	class:CVote
writeDatabase	SessionServer/libsessionserver/Vote.cpp	/^void CVoteItem::writeDatabase()$/;"	f	class:CVoteItem
writeOfflineMessage	SessionServer/libsessionserver/OfflineMessage.cpp	/^void COfflineMessage::writeOfflineMessage(const BYTE &type,const DWORD &id,const Cmd::stNullUserCmd *pNullCmd,const DWORD cmdLen)$/;"	f	class:COfflineMessage
writeOfflineNotify	SessionServer/libsessionserver/RelationManager.cpp	/^void CRelationManager::writeOfflineNotify(const CRelation *relation)$/;"	f	class:CRelationManager
writeTempArchive	SessionServer/libsessionserver/TempArchive.cpp	/^bool GlobalTempArchiveIndex::writeTempArchive(DWORD id,char *data,DWORD  dwSize)$/;"	f	class:GlobalTempArchiveIndex
write_error	base/include/tcp_state.h	/^	virtual void write_error(){ timer_.cancel(); }$/;"	f	class:state_verify
write_error	base/include/tcp_state.h	/^	virtual void write_error(){ timer_.cancel(); }$/;"	f	class:state_wait_sync
write_error	base/include/tcp_state.h	/^	virtual void write_error(){}$/;"	f	class:tcp_state
writeback_type	base/recordcmd.h	/^			DWORD writeback_type;$/;"	m	struct:Cmd::Record::t_WriteUser_SceneRecord
wrlock	GatewayServer/old_back/GatewayServer.h	/^	zRWLock wrlock;$/;"	m	class:ScreenIndex
x	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::PrivateStore::SellInfo
x	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::phaseDefine
x	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stUserBattfieldData
x	SessionServer/libsessionserver/SessionServer.h	/^  DWORD x;$/;"	m	class:CArhat
x	SessionServer/libsessionserver/SessionServer.h	/^  DWORD x;$/;"	m	struct:ArhatMapPoint
x	base/include/csCommon.h	/^/;"	m	struct:CharBase
x	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_changeScene_SceneSession
x	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
x	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd::__anon207
x	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapBuildingData
x	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
x	base/include/csCommon.h	/^/;"	m	struct:stObjectLocation
x	base/include/srvEngine.h	/^	int x;    \/**< Ê®™ÂùêÊ†á*\/$/;"	m	struct:zAdjust
x	base/include/srvEngine.h	/^	uint32_t x;    \/**< Ê®™ÂùêÊ†á*\/$/;"	m	struct:zPos
x_akdodge	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_akspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_atrating	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_bang	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_banish	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_banish_def	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_cmd_parser	tmp/x_cmd_parser.h	/^		x_cmd_parser(shared_ptr<tcp_client> host)$/;"	f	class:x_cmd_parser
x_cmd_parser	tmp/x_cmd_parser.h	/^class x_cmd_parser$/;"	c
x_coma	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_coma_def	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_con	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_config	base/x_config.cpp	/^x_config::x_config(const std::string& file, const std::string& node)$/;"	f	class:x_config
x_config	base/x_config.h	/^class x_config$/;"	c
x_dex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_doublexp	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_dread	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_dread_def	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_giddy	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_giddy_def	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_halt	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_halt_def	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_hpleech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_hpr	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_incgold	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_inte	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_list_tcptask	base/src/x_tcptaskpool.cpp	/^typedef std::list<shared_ptr<x_tcptask> > x_list_tcptask;$/;"	t	file:
x_list_tcptask_it	base/src/x_tcptaskpool.cpp	/^typedef x_list_tcptask::iterator x_list_tcptask_it;$/;"	t	file:
x_logger	base/x_logger.cpp	/^x_logger::x_logger(log4cxx::LoggerPtr log):logger(log)$/;"	f	class:x_logger
x_logger	base/x_logger.h	/^class x_logger: boost::noncopyable$/;"	c
x_mdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_mdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_mpleech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_mpr	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_mvspeed	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_okay_thread_functor	base/src/x_tcptaskpool.cpp	/^	x_okay_thread_functor( boost::shared_ptr<x_tcptaskpool> _pool):pool(_pool)$/;"	f	class:x_okay_thread_functor
x_okay_thread_functor	base/src/x_tcptaskpool.cpp	/^class x_okay_thread_functor : public x_thread_functor,public zTCPTaskQueue$/;"	c	file:
x_p_mdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_p_mdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_p_pdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_p_pdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_pdam	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_pdef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_processor	base/include/x_socket.h	/^struct x_processor$/;"	s
x_properties	base/x_properties.h	/^class x_properties$/;"	c
x_recycle_thread_functor	base/src/x_tcptaskpool.cpp	/^	x_recycle_thread_functor( shared_ptr<x_tcptaskpool> _pool) : pool(_pool) {} $/;"	f	class:x_recycle_thread_functor
x_recycle_thread_functor	base/src/x_tcptaskpool.cpp	/^class x_recycle_thread_functor : public x_thread_functor, public zTCPTaskQueue$/;"	c	file:
x_service	base/x_service.h	/^	x_service(const std::string &name):$/;"	f	class:x_service
x_service	base/x_service.h	/^class x_service : private boost::noncopyable$/;"	c
x_simple_db_table	base/x_simple_db_table.cpp	/^x_simple_db_table::x_simple_db_table(boost::shared_ptr<sql::Connection> conn, const std::string& table)$/;"	f	class:x_simple_db_table
x_simple_db_table	base/x_simple_db_table.h	/^class x_simple_db_table$/;"	c
x_slowdown	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_slowdown_def	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_socket	base/include/x_socket.cpp	/^x_socket::x_socket(const int sock, const struct sockaddr_in *addr)$/;"	f	class:x_socket
x_socket	base/include/x_socket.h	/^class x_socket : private boost::noncopyable$/;"	c
x_spi	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_str	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:stIncrementBySuit
x_subnetservice	base/x_subnetservice.cpp	/^x_subnetservice::x_subnetservice(const std::string &name,const uint16_t wdType) $/;"	f	class:x_subnetservice
x_subnetservice	base/x_subnetservice.h	/^class x_subnetservice : public x_service , public Singleton<x_subnetservice>$/;"	c
x_sync_thread_functor	base/src/x_tcptaskpool.cpp	/^		x_sync_thread_functor( boost::shared_ptr<x_tcptaskpool> _pool) :pool(_pool) {} $/;"	f	class:x_sync_thread_functor
x_sync_thread_functor	base/src/x_tcptaskpool.cpp	/^class x_sync_thread_functor : public x_thread_functor,public zTCPTaskQueue$/;"	c	file:
x_tcp_buffer_client	base/src/x_tcp_client.h	/^	x_tcp_buffer_client($/;"	f	class:x_tcp_buffer_client
x_tcp_buffer_client	base/src/x_tcp_client.h	/^class x_tcp_buffer_client : public x_tcp_client$/;"	c
x_tcp_client	base/src/x_tcp_client.h	/^	x_tcp_client( const std::string &ip = "127.0.0.1", const uint16_t port = 80)$/;"	f	class:x_tcp_client
x_tcp_client	base/src/x_tcp_client.h	/^class x_tcp_client : public x_processor , public x_thread_functor$/;"	c
x_tcp_clientTask	base/include/srvEngine.h	/^	x_tcp_clientTask($/;"	f	class:x_tcp_clientTask
x_tcp_clientTask	base/include/srvEngine.h	/^class x_tcp_clientTask : public zProcessor,private boost::noncopyable$/;"	c
x_tcp_clientTaskContainer	base/include/srvEngine.h	/^	typedef std::list<x_tcp_clientTask *> x_tcp_clientTaskContainer;$/;"	t	class:x_tcp_clientTaskPool
x_tcp_clientTaskContainer	base/src/zTCPClientTaskPool.cpp	/^typedef std::list<x_tcp_clientTask *> x_tcp_clientTaskContainer;$/;"	t	file:
x_tcp_clientTaskPool	base/include/srvEngine.h	/^	explicit x_tcp_clientTaskPool(const uint32_t connPerThread,const int us=50000) : connPerThread(connPerThread)$/;"	f	class:x_tcp_clientTaskPool
x_tcp_clientTaskPool	base/include/srvEngine.h	/^class x_tcp_clientTaskPool : private boost::noncopyable$/;"	c
x_tcp_clientTaskQueue	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskQueue() :_size(0) {}$/;"	f	class:x_tcp_clientTaskQueue
x_tcp_clientTaskQueue	base/src/zTCPClientTaskPool.cpp	/^class x_tcp_clientTaskQueue$/;"	c	file:
x_tcp_clientTaskThread	base/src/zTCPClientTaskPool.cpp	/^	x_tcp_clientTaskThread($/;"	f	class:x_tcp_clientTaskThread
x_tcp_clientTaskThread	base/src/zTCPClientTaskPool.cpp	/^class x_tcp_clientTaskThread : public zThread,public x_tcp_clientTaskQueue$/;"	c	file:
x_tcp_clientTask_IT	base/include/srvEngine.h	/^	typedef x_tcp_clientTaskContainer::iterator x_tcp_clientTask_IT;$/;"	t	class:x_tcp_clientTaskPool
x_tcp_clientTask_IT	base/src/zTCPClientTaskPool.cpp	/^typedef x_tcp_clientTaskContainer::iterator x_tcp_clientTask_IT;$/;"	t	file:
x_tcp_server	tmp/base3/x_tcp_server.h	/^		x_tcp_server(boost::asio::io_service& io_service, const tcp::endpoint& endpoint) $/;"	f	class:x_tcp_server
x_tcp_server	tmp/base3/x_tcp_server.h	/^class x_tcp_server$/;"	c
x_tcpserver	base/src/x_tcpserver.cpp	/^x_tcpserver::x_tcpserver(const std::string &name)$/;"	f	class:x_tcpserver
x_tcpserver	base/src/x_tcpserver.h	/^class x_tcpserver: private boost::noncopyable$/;"	c
x_tcptask	base/src/x_tcptask.h	/^	x_tcptask($/;"	f	class:x_tcptask
x_tcptask	base/src/x_tcptask.h	/^class x_tcptask : public x_processor, private boost::noncopyable, public boost::enable_shared_from_this<x_tcptask>$/;"	c
x_tcptaskpool	base/src/x_tcptaskpool.h	/^	explicit x_tcptaskpool(const int maxConns,const int state,const int us=50000) : maxConns(maxConns),state(state)$/;"	f	class:x_tcptaskpool
x_tcptaskpool	base/src/x_tcptaskpool.h	/^class x_tcptaskpool : private boost::noncopyable, public boost::enable_shared_from_this<x_tcptaskpool>$/;"	c
x_thread_functor	base/x_thread_functor.h	/^		x_thread_functor(){ final_ = false; }$/;"	f	class:x_thread_functor
x_thread_functor	base/x_thread_functor.h	/^class x_thread_functor: boost::noncopyable$/;"	c
x_verify_thread_functor	base/src/x_tcptaskpool.cpp	/^	x_verify_thread_functor( boost::shared_ptr<x_tcptaskpool> _pool) :pool(_pool)$/;"	f	class:x_verify_thread_functor
x_verify_thread_functor	base/src/x_tcptaskpool.cpp	/^class x_verify_thread_functor : public x_thread_functor, public zTCPTaskQueue$/;"	c	file:
xpos	base/include/csCommon.h	/^/;"	f	struct:stObjectLocation
y	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::PrivateStore::SellInfo
y	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::phaseDefine
y	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::stUserBattfieldData
y	SessionServer/libsessionserver/SessionServer.h	/^  DWORD y;$/;"	m	class:CArhat
y	SessionServer/libsessionserver/SessionServer.h	/^  DWORD y;$/;"	m	struct:ArhatMapPoint
y	base/include/csCommon.h	/^/;"	m	struct:CharBase
y	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_changeScene_SceneSession
y	base/include/csCommon.h	/^/;"	m	struct:Cmd::Cmd::Session::t_gmCommand_SceneSession
y	base/include/csCommon.h	/^/;"	m	struct:Cmd::stMapScreenSizeDataUserCmd::__anon207
y	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapBuildingData
y	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MapObjectData
y	base/include/csCommon.h	/^/;"	m	struct:stObjectLocation
y	base/include/srvEngine.h	/^	int y;    \/**< Á∫µÂùêÊ†á*\/$/;"	m	struct:zAdjust
y	base/include/srvEngine.h	/^	uint32_t y;    \/**< Á∫µÂùêÊ†á*\/$/;"	m	struct:zPos
ypos	base/include/csCommon.h	/^/;"	f	struct:stObjectLocation
z	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	struct:O::LiveSkills::Rush::phaseDefine
zAStar	base/include/srvEngine.h	/^class zAStar$/;"	c
zAcceptThread	base/include/srvEngine.h	/^	zAcceptThread( x_netservice* p, const std::string &name ): zThread(name)$/;"	f	class:zAcceptThread
zAcceptThread	base/include/srvEngine.h	/^class zAcceptThread : public zThread$/;"	c
zAdjust	base/include/srvEngine.h	/^struct zAdjust$/;"	s
zBlueObjectB	base/include/srvEngine.h	/^typedef zColorObjectB<BlueObjectBase,1> zBlueObjectB;$/;"	t
zCheckconnectThread	base/src/zTCPClientTaskPool.cpp	/^	zCheckconnectThread($/;"	f	class:zCheckconnectThread
zCheckconnectThread	base/src/zTCPClientTaskPool.cpp	/^class zCheckconnectThread : public zThread$/;"	c	file:
zCheckwaitThread	base/src/zTCPClientTaskPool.cpp	/^	zCheckwaitThread($/;"	f	class:zCheckwaitThread
zCheckwaitThread	base/src/zTCPClientTaskPool.cpp	/^class zCheckwaitThread : public zThread,public x_tcp_clientTaskQueue$/;"	c	file:
zColorObjectB	base/include/srvEngine.h	/^	zColorObjectB():zEntry()$/;"	f	struct:zColorObjectB
zColorObjectB	base/include/srvEngine.h	/^struct zColorObjectB:public zEntry$/;"	s
zConfile	base/include/srvEngine.h	/^class zConfile$/;"	c
zCountryMaterialB	base/include/srvEngine.h	/^	zCountryMaterialB() : zEntry()$/;"	f	struct:zCountryMaterialB
zCountryMaterialB	base/include/srvEngine.h	/^struct zCountryMaterialB : public zEntry$/;"	s
zDataBM	base/include/srvEngine.h	/^	zDataBM()$/;"	f	class:zDataBM
zDataBM	base/include/srvEngine.h	/^class  zDataBM:public zDataManager$/;"	c
zDataManager	base/include/srvEngine.h	/^typedef zEntryManager<zEntryID,zMultiEntryName> zDataManager;$/;"	t
zDatabaseCallBack	base/include/srvEngine.h	/^class zDatabaseCallBack$/;"	c
zDropGoldObjectB	base/include/srvEngine.h	/^typedef zColorObjectB<DropGoldObjectBase,3> zDropGoldObjectB;$/;"	t
zEntry	base/include/srvEngine.h	/^	zEntry():zEntryC()$/;"	f	struct:zEntry
zEntry	base/include/srvEngine.h	/^struct zEntry:public zEntryC,private boost::noncopyable$/;"	s
zEntryC	base/include/srvEngine.h	/^	zEntryC()$/;"	f	struct:zEntryC
zEntryC	base/include/srvEngine.h	/^struct zEntryC$/;"	s
zEntryCallback	FLServer/LoginManager.h	/^struct zEntryCallback$/;"	s
zEntryCallback	base/include/srvEngine.h	/^struct zEntryCallback$/;"	s
zEntryID	base/include/srvEngine.h	/^class zEntryID:public LimitHash<uint32_t,zEntry *>$/;"	c
zEntryManager	base/include/srvEngine.h	/^	zEntryManager() { }$/;"	f	class:zEntryManager
zEntryManager	base/include/srvEngine.h	/^class zEntryManager:protected e1,protected e2,protected e3$/;"	c
zEntryName	base/include/srvEngine.h	/^class zEntryName:public LimitHash<std::string,zEntry *>$/;"	c
zEntryNone	base/include/srvEngine.h	/^class zEntryNone$/;"	c
zEntryTempID	base/include/srvEngine.h	/^	zEntryTempID() {}$/;"	f	class:zEntryTempID
zEntryTempID	base/include/srvEngine.h	/^class zEntryTempID:public LimitHash<uint32_t,zEntry *>$/;"	c
zExperienceB	base/include/srvEngine.h	/^	zExperienceB () : zEntry()$/;"	f	struct:zExperienceB
zExperienceB	base/include/srvEngine.h	/^struct zExperienceB : public zEntry$/;"	s
zFiveSetB	base/include/srvEngine.h	/^	zFiveSetB():zEntry()$/;"	f	struct:zFiveSetB
zFiveSetB	base/include/srvEngine.h	/^struct zFiveSetB:public zEntry$/;"	s
zGoldObjectB	base/include/srvEngine.h	/^typedef zColorObjectB<GoldObjectBase,2> zGoldObjectB;$/;"	t
zHairColourB	base/include/srvEngine.h	/^	zHairColourB() : zEntry()$/;"	f	struct:zHairColourB
zHairColourB	base/include/srvEngine.h	/^struct zHairColourB : public zEntry$/;"	s
zHairStyleB	base/include/srvEngine.h	/^	zHairStyleB():zEntry()$/;"	f	struct:zHairStyleB
zHairStyleB	base/include/srvEngine.h	/^struct zHairStyleB : public zEntry$/;"	s
zHeadListB	base/include/srvEngine.h	/^	zHeadListB() : zEntry()$/;"	f	struct:zHeadListB
zHeadListB	base/include/srvEngine.h	/^struct zHeadListB : public zEntry$/;"	s
zHolyObjectB	base/include/srvEngine.h	/^	zHolyObjectB():zEntry()$/;"	f	struct:zHolyObjectB
zHolyObjectB	base/include/srvEngine.h	/^struct zHolyObjectB:public zEntry$/;"	s
zHonorB	base/include/srvEngine.h	/^	zHonorB () : zEntry()$/;"	f	struct:zHonorB
zHonorB	base/include/srvEngine.h	/^struct zHonorB : public zEntry$/;"	s
zLiveSkillB	base/include/srvEngine.h	/^	zLiveSkillB() : zEntry(),skill_id(0),level(0),point(0),weapon_kind(0),\/*name("Êú™Áü•"),*\/ title(""),orig(false),upgrade(false),$/;"	f	struct:zLiveSkillB
zLiveSkillB	base/include/srvEngine.h	/^struct zLiveSkillB : public zEntry$/;"	s
zMNetService	base/include/srvEngine.h	/^	zMNetService(const std::string &name) : x_service(name)$/;"	f	class:zMNetService
zMNetService	base/include/srvEngine.h	/^class zMNetService : public x_service$/;"	c
zMTCPServer	base/include/srvEngine.h	/^class zMTCPServer : private boost::noncopyable$/;"	c
zMTCPServer	base/src/zMTCPServer.cpp	/^zMTCPServer::zMTCPServer(const std::string &name) : name(name)$/;"	f	class:zMTCPServer
zMultiEntryName	base/include/srvEngine.h	/^class zMultiEntryName:public MultiHash<\/*const char **\/std::string,zEntry *>$/;"	c
zNoncopyable	base/include/csCommon.h	/^/;"	c
zNoncopyable	base/include/csCommon.h	/^/;"	f	class:zNoncopyable
zNpcB	base/include/srvEngine.h	/^	zNpcB() : zEntry()$/;"	f	struct:zNpcB
zNpcB	base/include/srvEngine.h	/^struct zNpcB : public zEntry$/;"	s
zObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
zObject	SceneServer/libscenesserver/zObject.cpp	/^zObject::zObject():zEntry()$/;"	f	class:zObject
zObjectB	base/include/srvEngine.h	/^	zObjectB():zEntry()\/*,hole("0","0-0")*\/$/;"	f	struct:zObjectB
zObjectB	base/include/srvEngine.h	/^struct zObjectB:public zEntry$/;"	s
zPathPoint	base/include/srvEngine.h	/^	struct zPathPoint$/;"	s	class:zAStar
zPathQueue	base/include/srvEngine.h	/^		zPathQueue(const zPathQueue &queue)$/;"	f	struct:zAStar::zPathQueue
zPathQueue	base/include/srvEngine.h	/^		zPathQueue(zPathPoint *node,int cost)$/;"	f	struct:zAStar::zPathQueue
zPathQueue	base/include/srvEngine.h	/^	struct zPathQueue$/;"	s	class:zAStar
zPathQueueHead	base/include/srvEngine.h	/^	typedef std::list<zPathQueue> zPathQueueHead;$/;"	t	class:zAStar
zPetB	base/include/srvEngine.h	/^	zPetB() : zEntry()$/;"	f	struct:zPetB
zPetB	base/include/srvEngine.h	/^struct zPetB : public zEntry$/;"	s
zPoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zPoint
zPoint	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
zPos	base/include/srvEngine.h	/^	zPos()$/;"	f	struct:zPos
zPos	base/include/srvEngine.h	/^	zPos(const uint32_t x,const uint32_t y)$/;"	f	struct:zPos
zPos	base/include/srvEngine.h	/^	zPos(const zPos &pos)$/;"	f	struct:zPos
zPos	base/include/srvEngine.h	/^struct zPos$/;"	s
zPos2zPosI	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
zPos2zPosI	base/include/srvEngine.h	/^	static void zPos2zPosI(const zPos &screenWH,const zPos &pos,zPosI &posi)$/;"	f	struct:zSceneEntry
zPosI	base/include/srvEngine.h	/^typedef uint32_t zPosI;$/;"	t
zPosIValidate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
zPosIVector	base/include/srvEngine.h	/^typedef std::vector<zPosI> zPosIVector;$/;"	t
zPosIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	namespace:O
zPosRevaluate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
zPosShortRange	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
zPosValidate	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
zPosVector	base/include/srvEngine.h	/^typedef std::vector<zPos> zPosVector;$/;"	t
zRTime	base/include/zTime.h	/^	zRTime(const int delay = 0)$/;"	f	class:zRTime
zRTime	base/include/zTime.h	/^	zRTime(const zRTime &rt)$/;"	f	class:zRTime
zRTime	base/include/zTime.h	/^class zRTime$/;"	c
zRegex	base/include/srvEngine.h	/^	zRegex(const char *exp):_exp(exp){}$/;"	f	class:zRegex
zRegex	base/include/srvEngine.h	/^class zRegex$/;"	c
zRegion	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zRegion
zRegion	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
zScene	base/include/srvEngine.h	/^	zScene():running_state(SCENE_RUNNINGSTATE_NORMAL){}$/;"	f	struct:zScene
zScene	base/include/srvEngine.h	/^struct zScene:public zEntry$/;"	s
zSceneEntry	base/include/srvEngine.h	/^	zSceneEntry(SceneEntryType type,const SceneEntryState state = SceneEntry_Normal):sceneentrytype(type),sceneentrystate(state)$/;"	f	struct:zSceneEntry
zSceneEntry	base/include/srvEngine.h	/^struct zSceneEntry:public zEntry$/;"	s
zSceneEntryCallBack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
zSceneEntryIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	c	class:O::LiveSkills
zSceneEntryIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
zSceneManager	base/include/srvEngine.h	/^	zSceneManager()$/;"	f	class:zSceneManager
zSceneManager	base/include/srvEngine.h	/^class zSceneManager:public zEntryManager<zEntryID,zEntryTempID,zEntryName>$/;"	c
zSceneObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
zSceneObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
zSetObjectB	base/include/srvEngine.h	/^	zSetObjectB():zEntry()$/;"	f	struct:zSetObjectB
zSetObjectB	base/include/srvEngine.h	/^struct zSetObjectB:public zEntry$/;"	s
zSkill	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
zSkill	SceneServer/libscenesserver/Skill.cpp	/^zSkill::zSkill() : zEntry()$/;"	f	class:zSkill
zSkillB	base/include/srvEngine.h	/^	zSkillB() : zEntry()$/;"	f	struct:zSkillB
zSkillB	base/include/srvEngine.h	/^struct zSkillB : public zEntry$/;"	s
zSoulStoneB	base/include/srvEngine.h	/^	zSoulStoneB() : zEntry()$/;"	f	struct:zSoulStoneB
zSoulStoneB	base/include/srvEngine.h	/^struct zSoulStoneB : public zEntry$/;"	s
zTCPTaskQueue	base/src/x_tcptaskpool.cpp	/^	zTCPTaskQueue() :_size(0) {}$/;"	f	class:zTCPTaskQueue
zTCPTaskQueue	base/src/x_tcptaskpool.cpp	/^class zTCPTaskQueue$/;"	c	file:
zTCPTask_State	base/src/x_tcptask.h	/^	enum zTCPTask_State$/;"	g	class:x_tcptask
zTiles	SceneServer/libscenesserver/ScenesServer.h	/^/;"	t	namespace:O
zTime	base/include/zTime.h	/^	zTime()$/;"	f	class:zTime
zTime	base/include/zTime.h	/^	zTime(const zTime &ct)$/;"	f	class:zTime
zTime	base/include/zTime.h	/^class zTime$/;"	c
zUniqueDWORDID	SessionServer/libsessionserver/SessionServer.h	/^typedef zUniqueID<DWORD> zUniqueDWORDID;$/;"	t
zUniqueID	base/include/srvEngine.h	/^	zUniqueID()$/;"	f	class:zUniqueID
zUniqueID	base/include/srvEngine.h	/^	zUniqueID(T startID)$/;"	f	class:zUniqueID
zUniqueID	base/include/srvEngine.h	/^	zUniqueID(T startID,T endID)$/;"	f	class:zUniqueID
zUniqueID	base/include/srvEngine.h	/^class zUniqueID:private boost::noncopyable$/;"	c
zUniqueuint32_tID	base/include/srvEngine.h	/^typedef zUniqueID<uint32_t> zUniqueuint32_tID;$/;"	t
zUpgradeObjectB	base/include/srvEngine.h	/^	zUpgradeObjectB():zEntry()$/;"	f	struct:zUpgradeObjectB
zUpgradeObjectB	base/include/srvEngine.h	/^struct zUpgradeObjectB:public zEntry$/;"	s
zUser	base/include/srvEngine.h	/^	zUser():zSceneEntry(SceneEntry_Player)$/;"	f	struct:zUser
zUser	base/include/srvEngine.h	/^struct zUser:public zSceneEntry$/;"	s
zUserManager	base/include/srvEngine.h	/^	zUserManager()$/;"	f	class:zUserManager
zUserManager	base/include/srvEngine.h	/^class zUserManager:public zEntryManager< zEntryID,zEntryTempID,zEntryName>$/;"	c
zXMLParser	base/include/srvEngine.h	/^class zXMLParser$/;"	c
zZone	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zZone
zZone	SceneServer/libscenesserver/ScenesServer.h	/^/;"	s	namespace:O
zip	GatewayServer/old_back/ScreenIndex.cpp	/^  bool zip;$/;"	m	struct:SendNineExec	file:
zone	SuperServer/RoleregCache.cpp	/^	WORD zone; \/\/”Œœ∑«¯±‡∫≈$/;"	m	struct:RoleData	file:
zone	base/command.h	/^		WORD zone;$/;"	m	struct:Cmd::stUserRequestLoginCmd
zone	base/common.h	/^			WORD zone;$/;"	m	struct:GameZone_t::__anon117::__anon118
zone	base/include/csCommon.h	/^/;"	m	struct:Cmd::stUserRequestLoginCmd
zoneGameVersion	FLServer/GYListManager.h	/^	DWORD zoneGameVersion;$/;"	m	struct:GYList
zoneGameVersion	base/flcmd.h	/^			DWORD zoneGameVersion;$/;"	m	struct:Cmd::FL::t_GYList_FL
zoneGameVersion	base/supercmd.h	/^			DWORD zoneGameVersion;$/;"	m	struct:Cmd::Super::t_GYList_Gateway
zoneName	SuperServer/SuperServer.h	/^	std::string zoneName;$/;"	m	class:SuperService
zoneTypeDef	SceneServer/libscenesserver/ScenesServer.h	/^/;"	m	class:O::LiveSkills::Scene
zone_id	base/command.h	/^		DWORD zone_id;$/;"	m	struct:Cmd::stPingList
zs	base/include/csCommon.h	/^/;"	m	struct:CharBase
zs	base/include/csCommon.h	/^/;"	m	struct:Cmd::t_MainUserData
~Action	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~Action() { }$/;"	f	class:Action
~Action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Action
~ActionPointAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ActionPointAction()$/;"	f	class:ActionPointAction
~ActionPointCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ActionPointCondition()$/;"	f	class:ActionPointCondition
~ActionPointCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ActionPointCondition
~AddBindItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~AddBindItemAction() { }$/;"	f	class:AddBindItemAction
~AddGreenBindItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~AddGreenBindItemAction() { }$/;"	f	class:AddGreenBindItemAction
~AddGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^  ~AddGuardAction()$/;"	f	class:AddGuardAction
~AddItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~AddItemAction() { }$/;"	f	class:AddItemAction
~AddNpcAction	SceneServer/libscenesserver/SceneServer1.h	/^  ~AddNpcAction()$/;"	f	class:AddNpcAction
~AuctionService	SessionServer/libsessionserver/AuctionService.cpp	/^AuctionService::~AuctionService(){}$/;"	f	class:AuctionService
~BillCache	BillServer/old_back/BillCache.cpp	/^BillCache::~BillCache()$/;"	f	class:BillCache
~BillClient	BillServer/old_back/BillClient.cpp	/^BillClient::~BillClient() {}$/;"	f	class:BillClient
~BillClient	GatewayServer/BillClient.h	/^	~BillClient(){$/;"	f	class:BillClient
~BillClientManager	BillServer/old_back/BillClientManager.cpp	/^BillClientManager::~BillClientManager()$/;"	f	class:BillClientManager
~BillManager	BillServer/old_back/BillServer.h	/^    ~BillManager() {};$/;"	f	class:BillManager
~BillService	BillServer/BillServer.h	/^		virtual ~BillService() { instance = NULL; }$/;"	f	class:BillService
~BillService	BillServer/old_back/BillServer.h	/^    ~BillService()$/;"	f	class:BillService
~BillSessionManager	BillServer/old_back/BillServer.h	/^    ~BillSessionManager()$/;"	f	class:BillSessionManager
~BillTask	BillServer/BillTask.h	/^    virtual ~BillTask() {}$/;"	f	class:BillTask
~BillTask	BillServer/old_back/BillServer.h	/^    ~BillTask() {};$/;"	f	class:BillTask
~BillTaskManager	BillServer/BillTaskManager.h	/^    ~BillTaskManager() {};$/;"	f	class:BillTaskManager
~BillTaskManager	BillServer/old_back/BillServer.h	/^    ~BillTaskManager() {};$/;"	f	class:BillTaskManager
~BillTimeTick	BillServer/old_back/BillServer.h	/^    ~BillTimeTick() {};$/;"	f	class:BillTimeTick
~BillUserManager	BillServer/BillUserManager.cpp	/^BillUserManager::~BillUserManager()$/;"	f	class:BillUserManager
~BulletinAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~BulletinAction() { }  $/;"	f	class:BulletinAction
~BulletinAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:BulletinAction
~CAlly	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CAlly
~CAlly	SessionServer/libsessionserver/Ally.cpp	/^CAlly::~CAlly()$/;"	f	class:CAlly
~CArenaManager	SessionServer/libsessionserver/Queuing.cpp	/^CArenaManager::~CArenaManager()$/;"	f	class:CArenaManager
~CArmy	SessionServer/libsessionserver/Army.cpp	/^CArmy::~CArmy()$/;"	f	class:CArmy
~CArmyM	SessionServer/libsessionserver/Army.cpp	/^CArmyM::~CArmyM()$/;"	f	class:CArmyM
~CCaptain	SessionServer/libsessionserver/Army.cpp	/^CCaptain::~CCaptain()$/;"	f	class:CCaptain
~CCity	SessionServer/libsessionserver/SessionServer.h	/^    ~CCity()$/;"	f	class:CCity
~CCountry	SessionServer/libsessionserver/SessionServer.h	/^    ~CCountry()$/;"	f	class:CCountry
~CDare	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDare
~CDareAntiCountry	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareAntiCountry
~CDareEmperor	SessionServer/libsessionserver/DareEmperor.cpp	/^CDareEmperor::~CDareEmperor()$/;"	f	class:CDareEmperor
~CDareM	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareM
~CDareRecord	SessionServer/libsessionserver/SessionServer.h	/^    ~CDareRecord()$/;"	f	class:CDareRecord
~CDareSchool	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareSchool
~CDareSept	SessionServer/libsessionserver/DareSept.cpp	/^CDareSept::~CDareSept()$/;"	f	class:CDareSept
~CDareSeptNpc	SessionServer/libsessionserver/DareSeptNpc.cpp	/^CDareSeptNpc::~CDareSeptNpc()$/;"	f	class:CDareSeptNpc
~CDareUnion	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnion
~CDareUnionCity	SessionServer/libsessionserver/Dare.cpp	/^/;"	f	class:CDareUnionCity
~CGem	SessionServer/libsessionserver/Gem.cpp	/^CGem::~CGem()$/;"	f	class:CGem
~CGemM	SessionServer/libsessionserver/Gem.cpp	/^CGemM::~CGemM()$/;"	f	class:CGemM
~CGraceUser	SessionServer/libsessionserver/SessionManager.cpp	/^    ~CGraceUser()$/;"	f	class:CGraceUser
~CItmeCoolTime	SceneServer/libscenesserver/ItemCoolTime.cpp	/^CItmeCoolTime::~CItmeCoolTime()$/;"	f	class:CItmeCoolTime
~CPothunter	SessionServer/libsessionserver/SessionServer.h	/^    ~CPothunter(){}$/;"	f	class:CPothunter
~CQueueManager	SessionServer/libsessionserver/Queuing.cpp	/^CQueueManager::~CQueueManager()$/;"	f	class:CQueueManager
~CQueuingManager	SessionServer/libsessionserver/Queuing.cpp	/^CQueuingManager::~CQueuingManager()$/;"	f	class:CQueuingManager
~CQuiz	SessionServer/libsessionserver/Quiz.cpp	/^CQuiz::~CQuiz()$/;"	f	class:CQuiz
~CQuizM	SessionServer/libsessionserver/Quiz.cpp	/^CQuizM::~CQuizM()$/;"	f	class:CQuizM
~CQuizPersonal	SessionServer/libsessionserver/Quiz.cpp	/^CQuizPersonal::~CQuizPersonal()$/;"	f	class:CQuizPersonal
~CQuizWorld	SessionServer/libsessionserver/Quiz.cpp	/^CQuizWorld::~CQuizWorld()$/;"	f	class:CQuizWorld
~CRelationManager	SessionServer/libsessionserver/RelationManager.cpp	/^CRelationManager::~CRelationManager()$/;"	f	class:CRelationManager
~CSchool	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchool::~CSchool()$/;"	f	class:CSchool
~CSchoolM	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolM::~CSchoolM()$/;"	f	class:CSchoolM
~CSchoolMember	SessionServer/libsessionserver/SchoolManager.cpp	/^CSchoolMember::~CSchoolMember()$/;"	f	class:CSchoolMember
~CSept	SessionServer/libsessionserver/Sept.cpp	/^CSept::~CSept()$/;"	f	class:CSept
~CSeptM	SessionServer/libsessionserver/Sept.cpp	/^CSeptM::~CSeptM()$/;"	f	class:CSeptM
~CSeptMember	SessionServer/libsessionserver/Sept.cpp	/^CSeptMember::~CSeptMember()$/;"	f	class:CSeptMember
~CSeptSort	SessionServer/libsessionserver/Sept.cpp	/^    ~CSeptSort()$/;"	f	class:CSeptSort
~CSortM	SessionServer/libsessionserver/Sort.cpp	/^CSortM::~CSortM()$/;"	f	class:CSortM
~CSubject	SessionServer/libsessionserver/SessionServer.h	/^    ~CSubject()$/;"	f	class:CSubject
~CSubjectM	SessionServer/libsessionserver/Quiz.cpp	/^CSubjectM::~CSubjectM()$/;"	f	class:CSubjectM
~CTech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CTech
~CTech	SessionServer/libsessionserver/CountryManager.cpp	/^CTech::~CTech()$/;"	f	class:CTech
~CUnion	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnion
~CUnionM	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionM
~CUnionMember	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionMember
~CUnionSort	SessionServer/libsessionserver/Union.cpp	/^/;"	f	class:CUnionSort
~CVote	SessionServer/libsessionserver/Vote.cpp	/^CVote::~CVote()$/;"	f	class:CVote
~CVoteItem	SessionServer/libsessionserver/Vote.cpp	/^CVoteItem::~CVoteItem()$/;"	f	class:CVoteItem
~CVoteM	SessionServer/libsessionserver/Vote.cpp	/^CVoteM::~CVoteM()$/;"	f	class:CVoteM
~CaptionCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~CaptionCondition()$/;"	f	class:CaptionCondition
~CaptionCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:CaptionCondition
~CartoonPet	SceneServer/libscenesserver/SceneServer1.h	/^    ~CartoonPet(){};$/;"	f	class:CartoonPet
~CartoonPet	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::CartoonPet
~CartoonPetService	SessionServer/libsessionserver/CartoonPetService.cpp	/^CartoonPetService::~CartoonPetService()$/;"	f	class:CartoonPetService
~CharInitInfo	SceneServer/libscenesserver/SceneServer1.h	/^    ~CharInitInfo()$/;"	f	class:CharInitInfo
~CharInitInfo	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::CharInitInfo
~CheckSexCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~CheckSexCondition()$/;"	f	class:CheckSexCondition
~CheckSexCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:CheckSexCondition
~CheckerTable	GatewayServer/old_back/CmdChecker.cpp	/^CheckerTable::~CheckerTable()$/;"	f	class:CheckerTable
~ClearStateAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ClearStateAction() { }  $/;"	f	class:ClearStateAction
~ClientConn	client/ClientConn.h	/^	~ClientConn(){$/;"	f	class:ClientConn
~CmdChecker	GatewayServer/old_back/GatewayServer.h	/^	~CmdChecker()$/;"	f	class:CmdChecker
~Compare	SceneServer/libscenesserver/SceneServer1.h	/^    virtual ~Compare() { }$/;"	f	class:MakeFunction::Compare
~Compare	SessionServer/libsessionserver/SessionServer.h	/^      virtual ~Compare(){}$/;"	f	struct:UserSessionManager::Compare
~Condition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~Condition() { }$/;"	f	class:Condition
~Condition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Condition
~ConfraternityCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ConfraternityCondition()$/;"	f	class:ConfraternityCondition
~ConfraternityCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ConfraternityCondition
~Consign	BillServer/old_back/BillServer.h	/^    virtual ~Consign()$/;"	f	class:Consign
~ConsignGoldManager	BillServer/old_back/StockConsign.cpp	/^ConsignGoldManager::~ConsignGoldManager()$/;"	f	class:ConsignGoldManager
~ConsignHistoryManager	BillServer/old_back/StockConsign.cpp	/^ConsignHistoryManager::~ConsignHistoryManager()$/;"	f	class:ConsignHistoryManager
~ConsignMoneyManager	BillServer/old_back/StockConsign.cpp	/^ConsignMoneyManager::~ConsignMoneyManager()$/;"	f	class:ConsignMoneyManager
~Content	SceneServer/libscenesserver/SceneServer1.h	/^    virtual ~Content() { }$/;"	f	class:MakeFunction::Content
~CountryAllyM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryAllyM
~CountryDare	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryDare
~CountryDareM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryDareM
~CountryInfo	GatewayServer/old_back/GatewayServer.h	/^	~CountryInfo(){}$/;"	f	class:CountryInfo
~CountryPowerCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~CountryPowerCondition()$/;"	f	class:CountryPowerCondition
~CountryPowerCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:CountryPowerCondition
~CountryTech	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryTech
~CountryTechM	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::CountryTechM
~Dice	SceneServer/libscenesserver/SceneServer1.h	/^    ~Dice(){};$/;"	f	class:Dice
~Dice	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::Dice
~DisableAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~DisableAction() { }$/;"	f	class:DisableAction
~DropAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~DropAction() { }  $/;"	f	class:DropAction
~DropItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~DropItemAction() { }$/;"	f	class:DropItemAction
~Embranchment	SceneServer/libscenesserver/QuestEvent.cpp	/^Event::Embranchment::~Embranchment()$/;"	f	class:Event::Embranchment
~EmperorForbid	SessionServer/libsessionserver/EmperorForbid.cpp	/^EmperorForbid::~EmperorForbid()$/;"	f	class:EmperorForbid
~EnterSeptGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~EnterSeptGuardAction() { }  $/;"	f	class:EnterSeptGuardAction
~EquipMaker	SceneServer/libscenesserver/SceneServer1.h	/^    ~EquipMaker() { }$/;"	f	class:EquipMaker
~EquipMaker	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:EquipMaker
~EquipPack	SceneServer/libscenesserver/zObject.cpp	/^EquipPack::~EquipPack()$/;"	f	class:EquipPack
~Event	SceneServer/libscenesserver/QuestEvent.cpp	/^Event::~Event()$/;"	f	class:Event
~EventManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::EventManager
~EventTable	SceneServer/libscenesserver/QuestTable.cpp	/^EventTable::~EventTable()$/;"	f	class:EventTable
~Exp1Action	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~Exp1Action() { }  $/;"	f	class:Exp1Action
~Exp1Action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Exp1Action
~ExpAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ExpAction() { }  $/;"	f	class:ExpAction
~ExpAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ExpAction
~FLClient	SuperServer/FLClient.cpp	/^FLClient::~FLClient() {$/;"	f	class:FLClient
~FLClientManager	SuperServer/FLClientManager.cpp	/^FLClientManager::~FLClientManager()$/;"	f	class:FLClientManager
~FLService	FLServer/FLServer.h	/^	~FLService() { instance = NULL; }$/;"	f	class:FLService
~FamilyLevelAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FamilyLevelAction()$/;"	f	class:FamilyLevelAction
~FamilyLevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FamilyLevelCondition() { }$/;"	f	class:FamilyLevelCondition
~FamilyLevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FamilyLevelCondition
~FamilyVarAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FamilyVarAction()$/;"	f	class:FamilyVarAction
~FamilyVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FamilyVarCondition()$/;"	f	class:FamilyVarCondition
~FamilyVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FamilyVarCondition
~FinishSeptGuardAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FinishSeptGuardAction() { }  $/;"	f	class:FinishSeptGuardAction
~FiveLevelAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FiveLevelAction()$/;"	f	class:FiveLevelAction
~FiveLevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FiveLevelCondition()$/;"	f	class:FiveLevelCondition
~FiveLevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FiveLevelCondition
~FiveTypeAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FiveTypeAction() { }  $/;"	f	class:FiveTypeAction
~FiveTypeCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~FiveTypeCondition()$/;"	f	class:FiveTypeCondition
~FiveTypeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:FiveTypeCondition
~ForbidTalkManager	SessionServer/libsessionserver/ForbidTalkManager.cpp	/^ForbidTalkManager::~ForbidTalkManager(){}$/;"	f	class:ForbidTalkManager
~GYListManager	FLServer/GYListManager.h	/^	~GYListManager() {$/;"	f	class:GYListManager
~Game	client/Game.cpp	/^Game::~Game()$/;"	f	class:Game
~GangScene	SceneServer/libscenesserver/sceneBattlefiel.cpp	/^GangScene::~GangScene()$/;"	f	class:GangScene
~GateUser	GatewayServer/old_back/GateUser.cpp	/^GateUser::~GateUser()$/;"	f	class:GateUser
~GateUserAccountID	GatewayServer/old_back/GatewayServer.h	/^	virtual ~GateUserAccountID() {}$/;"	f	class:GateUserAccountID
~GateUserManager	GatewayServer/old_back/GateUserManager.cpp	/^GateUserManager::~GateUserManager()$/;"	f	class:GateUserManager
~GatewayService	GatewayServer/GatewayServer.h	/^		virtual ~GatewayService() { }$/;"	f	class:GatewayService
~GatewayService	GatewayServer/old_back/GatewayServer.h	/^	~GatewayService()$/;"	f	class:GatewayService
~GatewayTask	GatewayServer/GatewayTask.h	/^    virtual ~GatewayTask() {}$/;"	f	class:GatewayTask
~GatewayTask	GatewayServer/old_back/GatewayTask.cpp	/^GatewayTask::~GatewayTask()$/;"	f	class:GatewayTask
~GatewayTaskManager	GatewayServer/old_back/GatewayTaskManager.cpp	/^GatewayTaskManager::~GatewayTaskManager()$/;"	f	class:GatewayTaskManager
~GatewayTimeTick	GatewayServer/old_back/GatewayServer.h	/^	~GatewayTimeTick() {};$/;"	f	class:GatewayTimeTick
~GlobalAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~GlobalAction()$/;"	f	class:GlobalAction
~GlobalCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~GlobalCondition()$/;"	f	class:GlobalCondition
~GlobalCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GlobalCondition
~GlobalObjectIndex	SceneServer/libscenesserver/ObjectManager.cpp	/^GlobalObjectIndex::~GlobalObjectIndex()$/;"	f	class:GlobalObjectIndex
~GlobalTeamIndex	SessionServer/libsessionserver/SessionServer.h	/^	~GlobalTeamIndex(){};$/;"	f	class:GlobalTeamIndex
~GlobalTempArchiveIndex	SessionServer/libsessionserver/TempArchive.cpp	/^GlobalTempArchiveIndex::~GlobalTempArchiveIndex()$/;"	f	class:GlobalTempArchiveIndex
~GlobalVarImpl	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::GlobalVarImpl
~GoldAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~GoldAction() { }  $/;"	f	class:GoldAction
~GoldAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GoldAction
~GoldCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~GoldCondition()$/;"	f	class:GoldCondition
~GoldCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GoldCondition
~GotoAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~GotoAction() { }$/;"	f	class:GotoAction
~GradeCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~GradeCondition()$/;"	f	class:GradeCondition
~GradeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:GradeCondition
~GuardNpc	SceneServer/libscenesserver/GuardNpc.cpp	/^GuardNpc::~GuardNpc()$/;"	f	class:GuardNpc
~HaveSkillCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~HaveSkillCondition()$/;"	f	class:HaveSkillCondition
~HaveSkillCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:HaveSkillCondition
~HonorAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~HonorAction()$/;"	f	class:HonorAction
~HonorCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~HonorCondition()$/;"	f	class:HonorCondition
~HonorCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:HonorCondition
~Horse	SceneServer/libscenesserver/Horse.cpp	/^Horse::~Horse()$/;"	f	class:Horse
~HorseAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~HorseAction() { }  $/;"	f	class:HorseAction
~HorseCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~HorseCondition()$/;"	f	class:HorseCondition
~HorseCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:HorseCondition
~ICmdChecker	GatewayServer/old_back/GatewayServer.h	/^	virtual ~ICmdChecker() { }$/;"	f	class:ICmdChecker
~InNationCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~InNationCondition()$/;"	f	class:InNationCondition
~InNationCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:InNationCondition
~InfoClient	SuperServer/InfoClient.cpp	/^InfoClient::~InfoClient()$/;"	f	class:InfoClient
~InfoClientManager	SuperServer/InfoClientManager.cpp	/^InfoClientManager::~InfoClientManager()$/;"	f	class:InfoClientManager
~IsGuardCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~IsGuardCondition()$/;"	f	class:IsGuardCondition
~IsGuardCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:IsGuardCondition
~ItemCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ItemCondition()$/;"	f	class:ItemCondition
~ItemCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ItemCondition
~LevelCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~LevelCondition()$/;"	f	class:LevelCondition
~LevelCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:LevelCondition
~LimitHash	base/include/srvEngine.h	/^	~LimitHash()$/;"	f	class:LimitHash
~LogAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~LogAction() { }  $/;"	f	class:LogAction
~LogAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:LogAction
~LoginManager	FLServer/LoginManager.h	/^	~LoginManager() {}$/;"	f	class:LoginManager
~LoginSessionManager	GatewayServer/LoginSessionManager.h	/^	~LoginSessionManager() {}$/;"	f	class:LoginSessionManager
~LoginSessionManager	GatewayServer/old_back/GatewayServer.h	/^	~LoginSessionManager() {};$/;"	f	class:LoginSessionManager
~LoginTask	FLServer/LoginTask.cpp	/^LoginTask::~LoginTask() { }$/;"	f	class:LoginTask
~LuaScript	SceneServer/libscenesserver/script.cpp	/^LuaScript::~LuaScript()$/;"	f	class:LuaScript
~LuaVM	SceneServer/libscenesserver/script.cpp	/^LuaVM::~LuaVM()$/;"	f	class:LuaVM
~MagicPosExec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::MagicPosExec
~MagicRangeInit	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::MagicRangeInit
~MailService	SessionServer/libsessionserver/MailService.cpp	/^MailService::~MailService(){}$/;"	f	class:MailService
~MainMenuAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~MainMenuAction() { }  $/;"	f	class:MainMenuAction
~MainMenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:MainMenuAction
~MainPack	SceneServer/libscenesserver/zObject.cpp	/^MainPack::~MainPack()$/;"	f	class:MainPack
~Maker	SceneServer/libscenesserver/SceneServer1.h	/^    virtual ~Maker() { }$/;"	f	class:MakeFunction::Maker
~MapCountryCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~MapCountryCondition()$/;"	f	class:MapCountryCondition
~MapCountryCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:MapCountryCondition
~Mask	SceneServer/libscenesserver/Mask.cpp	/^Mask::~Mask()$/;"	f	class:Mask
~MaxHonorAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~MaxHonorAction()$/;"	f	class:MaxHonorAction
~MaxHonorCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~MaxHonorCondition()$/;"	f	class:MaxHonorCondition
~MaxHonorCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:MaxHonorCondition
~MenuAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~MenuAction() { }  $/;"	f	class:MenuAction
~MenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:MenuAction
~MessageQueue	base/include/srvEngine.h	/^	virtual ~MessageQueue(){};$/;"	f	class:MessageQueue
~MessageQueue	base/x_msgqueue.h	/^	virtual ~MessageQueue(){};$/;"	f	class:MessageQueue
~MessageSystem	SceneServer/libscenesserver/SceneServer1.h	/^    ~MessageSystem()$/;"	f	class:MessageSystem
~MiniGame	tmp/MiniServer/MiniServer.h	/^    virtual ~MiniGame(){};$/;"	f	class:MiniGame
~MiniHall	tmp/MiniServer/MiniHall.cpp	/^MiniHall::~MiniHall()$/;"	f	class:MiniHall
~MiniService	tmp/MiniServer/MiniServer.h	/^    ~MiniService()$/;"	f	class:MiniService
~MiniTask	tmp/MiniServer/MiniServer.h	/^    ~MiniTask() {};$/;"	f	class:MiniTask
~MiniTaskManager	tmp/MiniServer/MiniServer.h	/^    ~MiniTaskManager() {};$/;"	f	class:MiniTaskManager
~MiniTimeTick	tmp/MiniServer/MiniServer.h	/^    ~MiniTimeTick() {};$/;"	f	class:MiniTimeTick
~MiniUserManager	tmp/MiniServer/MiniUserManager.cpp	/^MiniUserManager::~MiniUserManager()$/;"	f	class:MiniUserManager
~MsgQueue	base/include/srvEngine.h	/^	~MsgQueue()$/;"	f	class:MsgQueue
~MsgQueue	base/x_msgqueue.h	/^	~MsgQueue() {$/;"	f	class:MsgQueue
~MultiHash	base/include/srvEngine.h	/^	~MultiHash()$/;"	f	class:MultiHash
~NationCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~NationCondition()$/;"	f	class:NationCondition
~NationCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:NationCondition
~NetworkManager	client/NetworkManager.cpp	/^NetworkManager::~NetworkManager()$/;"	f	class:NetworkManager
~Notify1Action	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~Notify1Action() { }  $/;"	f	class:Notify1Action
~Notify1Action	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:Notify1Action
~NotifyAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~NotifyAction() { }  $/;"	f	class:NotifyAction
~NotifyAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:NotifyAction
~NpcAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~NpcAction()$/;"	f	class:NpcAction
~NpcTrade	SceneServer/libscenesserver/SceneServer1.h	/^    ~NpcTrade()$/;"	f	class:NpcTrade
~NpcTrade	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::NpcTrade
~ObjectPack	SceneServer/libscenesserver/zObject.cpp	/^ObjectPack::~ObjectPack()$/;"	f	class:ObjectPack
~Package	SceneServer/libscenesserver/zObject.cpp	/^Package::~Package()$/;"	f	class:Package
~PackageCallback	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::PackageCallback
~Packages	SceneServer/libscenesserver/zObject.cpp	/^Packages::~Packages()$/;"	f	class:Packages
~PetPack	SceneServer/libscenesserver/zObject.cpp	/^PetPack::~PetPack() {}$/;"	f	class:PetPack
~PingTask	FLServer/PingTask.h	/^	~PingTask() {};$/;"	f	class:PingTask
~PrivateStore	SceneServer/libscenesserver/Trade.cpp	/^PrivateStore::~PrivateStore() $/;"	f	class:PrivateStore
~ProductFactory	SceneServer/libscenesserver/SceneServer1.h	/^  ~ProductFactory()$/;"	f	class:ProductFactory
~ProfessionCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ProfessionCondition()$/;"	f	class:ProfessionCondition
~ProfessionCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ProfessionCondition
~Prop	SceneServer/libscenesserver/SceneServer1.h	/^    virtual ~Prop() { }$/;"	f	class:MakeFunction::Prop
~QuestList	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::QuestList
~QuestTable	SceneServer/libscenesserver/QuestTable.cpp	/^QuestTable::~QuestTable()$/;"	f	class:QuestTable
~RebuildObject	SceneServer/libscenesserver/SceneServer1.h	/^  ~RebuildObject() { }$/;"	f	class:RebuildObject
~RebuildObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:RebuildObject
~Recommend	SessionServer/libsessionserver/RecommendManager.cpp	/^Recommend::~Recommend()$/;"	f	class:Recommend
~RecommendM	SessionServer/libsessionserver/RecommendManager.cpp	/^RecommendM::~RecommendM()$/;"	f	class:RecommendM
~RecommendSub	SessionServer/libsessionserver/RecommendManager.cpp	/^RecommendSub::~RecommendSub()$/;"	f	class:RecommendSub
~RecordClient	GatewayServer/RecordClient.h	/^	~RecordClient(){$/;"	f	class:RecordClient
~RecordClient	SceneServer/RecordClient.h	/^	~RecordClient(){$/;"	f	class:RecordClient
~RecordClient	SessionServer/RecordClient.h	/^	~RecordClient(){$/;"	f	class:RecordClient
~RecordService	RecordServer/RecordServer.h	/^		virtual ~RecordService() { }$/;"	f	class:RecordService
~RecordTask	RecordServer/RecordTask.h	/^    virtual ~RecordTask() {}$/;"	f	class:RecordTask
~RecordUser	RecordServer/RecordUser.cpp	/^RecordUser::~RecordUser(){$/;"	f	class:RecordUser
~RecordUserM	RecordServer/RecordUserManager.h	/^	~RecordUserM(){ userMap.clear(); }$/;"	f	class:RecordUserM
~RefreshAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~RefreshAction() { }  $/;"	f	class:RefreshAction
~RefreshAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:RefreshAction
~RemoveItemAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~RemoveItemAction() { }$/;"	f	class:RemoveItemAction
~RemoveNpcAction	SceneServer/libscenesserver/SceneServer1.h	/^  ~RemoveNpcAction()$/;"	f	class:RemoveNpcAction
~ReputeCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ReputeCondition()$/;"	f	class:ReputeCondition
~ReputeCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:ReputeCondition
~RideDownAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~RideDownAction() { }$/;"	f	class:RideDownAction
~RoleDataContainer	SuperServer/RoleregCache.cpp	/^	~RoleDataContainer()$/;"	f	class:RoleDataContainer
~RoleregCache	SuperServer/RoleregCache.h	/^    ~RoleregCache() {};$/;"	f	class:RoleregCache
~Rush	SceneServer/libscenesserver/Rush.cpp	/^Rush::~Rush()$/;"	f	class:Rush
~Scene	SceneServer/libscenesserver/Scene.cpp	/^Scene::~Scene()$/;"	f	class:Scene
~SceneArchitecture	SceneServer/libscenesserver/SceneBattlefiel.h	/^	~SceneArchitecture() {}$/;"	f	class:SceneArchitecture
~SceneCallBack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::SceneCallBack
~SceneClient	GatewayServer/old_back/GatewayServer.h	/^	~SceneClient()$/;"	f	class:SceneClient
~SceneClientManager	GatewayServer/old_back/SceneClientManager.cpp	/^SceneClientManager::~SceneClientManager()$/;"	f	class:SceneClientManager
~SceneEntryPk	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::SceneEntryPk
~SceneGhost	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneGhost
~SceneManager	SceneServer/libscenesserver/SceneManager.cpp	/^SceneManager::~SceneManager()$/;"	f	class:SceneManager
~SceneNpcManager	SceneServer/libscenesserver/SceneNpcManager.cpp	/^SceneNpcManager::~SceneNpcManager()$/;"	f	class:SceneNpcManager
~SceneRecycleUserManager	SceneServer/libscenesserver/SceneServer1.h	/^    ~SceneRecycleUserManager(){}$/;"	f	class:SceneRecycleUserManager
~SceneRecycleUserManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneRecycleUserManager
~SceneService	SceneServer/SceneServer.h	/^		virtual ~SceneService() { }$/;"	f	class:SceneService
~SceneSessionManager	SessionServer/libsessionserver/SessionManager.cpp	/^SceneSessionManager::~SceneSessionManager()$/;"	f	class:SceneSessionManager
~SceneTask	SceneServer/SceneTask.h	/^    virtual ~SceneTask() {}$/;"	f	class:SceneTask
~SceneTask	SceneServer/libscenesserver/SceneTask.cpp	/^SceneTask::~SceneTask()$/;"	f	class:SceneTask
~SceneTaskManager	SceneServer/libscenesserver/SceneServer1.h	/^    ~SceneTaskManager() {};$/;"	f	class:SceneTaskManager
~SceneTaskManager	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::SceneTaskManager
~SceneTimeTick	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::SceneTimeTick
~SceneUser	SceneServer/libscenesserver/SceneUser.cpp	/^/;"	f	class:SceneUser
~SceneUserManager	SceneServer/libscenesserver/SceneUserManager.cpp	/^SceneUserManager::~SceneUserManager()$/;"	f	class:SceneUserManager
~ScenesService	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::ScenesService
~ScoreAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~ScoreAction() { }  $/;"	f	class:ScoreAction
~ScriptQuest	SceneServer/libscenesserver/SceneServer1.h	/^  ~ScriptQuest() { }$/;"	f	class:ScriptQuest
~ScriptingSystemLua	SceneServer/libscenesserver/script.cpp	/^ScriptingSystemLua::~ScriptingSystemLua()$/;"	f	class:ScriptingSystemLua
~SelfCountryCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~SelfCountryCondition()$/;"	f	class:SelfCountryCondition
~SelfCountryCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SelfCountryCondition
~SeptIDCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~SeptIDCondition()$/;"	f	class:SeptIDCondition
~SeptIDCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SeptIDCondition
~ServerACL	FLServer/ServerACL.h	/^	~ServerACL() {}$/;"	f	class:ServerACL
~ServerManager	FLServer/ServerManager.h	/^	~ServerManager() {}$/;"	f	class:ServerManager
~ServerManager	SessionServer/ServerManager.h	/^    ~ServerManager() {};$/;"	f	class:ServerManager
~ServerManager	SuperServer/ServerManager.h	/^    ~ServerManager() {};$/;"	f	class:ServerManager
~ServerTask	FLServer/ServerTask.h	/^	~ServerTask() { }$/;"	f	class:ServerTask
~ServerTask	SuperServer/ServerTask.cpp	/^ServerTask::~ServerTask() {$/;"	f	class:ServerTask
~SessionChannelManager	SessionServer/libsessionserver/SessionChat.cpp	/^SessionChannelManager::~SessionChannelManager()$/;"	f	class:SessionChannelManager
~SessionClient	GatewayServer/SessionClient.h	/^	~SessionClient(){$/;"	f	class:SessionClient
~SessionClient	SceneServer/SessionClient.h	/^	~SessionClient(){$/;"	f	class:SessionClient
~SessionService	SessionServer/SessionServer.h	/^		virtual ~SessionService() { }$/;"	f	class:SessionService
~SessionService	SessionServer/libsessionserver/SessionServer.h	/^    ~SessionService()$/;"	f	class:SessionService
~SessionTask	SessionServer/SessionTask.h	/^    virtual ~SessionTask() {}$/;"	f	class:SessionTask
~SessionTask	SessionServer/libsessionserver/SessionTask.cpp	/^SessionTask::~SessionTask()$/;"	f	class:SessionTask
~SessionTaskManager	SessionServer/libsessionserver/SessionServer.h	/^    ~SessionTaskManager() {};$/;"	f	class:SessionTaskManager
~SetStateAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~SetStateAction() { }  $/;"	f	class:SetStateAction
~Singleton	base/include/csCommon.h	/^/;"	f	class:Singleton
~Singleton	base/singleton.h	/^	~Singleton(){$/;"	f	class:Singleton
~SingletonBase	base/include/srvEngine.h	/^	virtual ~SingletonBase() {}$/;"	f	class:SingletonBase
~SkillAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~SkillAction() { }  $/;"	f	class:SkillAction
~SkillStatusManager	SceneServer/libscenesserver/SkillStatusManager.cpp	/^/;"	f	class:SkillStatusManager
~SpaceCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~SpaceCondition()$/;"	f	class:SpaceCondition
~SpaceCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SpaceCondition
~StaticScene	SceneServer/libscenesserver/Scene.cpp	/^StaticScene::~StaticScene()$/;"	f	class:StaticScene
~StorePack	SceneServer/libscenesserver/zObject.cpp	/^StorePack::~StorePack()$/;"	f	class:StorePack
~SubMenuAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~SubMenuAction() { }  $/;"	f	class:SubMenuAction
~SubMenuAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:SubMenuAction
~SuperService	SuperServer/SuperServer.h	/^	~SuperService() { instance = NULL; }$/;"	f	class:SuperService
~TeamCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~TeamCondition() { }$/;"	f	class:TeamCondition
~TeamCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TeamCondition
~TeamMemExec	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::LiveSkills::TeamMemExec
~TeamSceneExec	SessionServer/libsessionserver/SessionServer.h	/^	virtual ~TeamSceneExec(){};$/;"	f	struct:TeamSceneExec
~TeamedCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~TeamedCondition()$/;"	f	class:TeamedCondition
~TeamedCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TeamedCondition
~TiXmlAttributeSet	deps/tinyxml/tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet
~TiXmlBase	deps/tinyxml/tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:TiXmlBase
~TiXmlComment	deps/tinyxml/tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:TiXmlComment
~TiXmlDeclaration	deps/tinyxml/tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:TiXmlDeclaration
~TiXmlDocument	deps/tinyxml/tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument
~TiXmlElement	deps/tinyxml/tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement
~TiXmlNode	deps/tinyxml/tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode
~TiXmlText	deps/tinyxml/tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:TiXmlText
~TiXmlUnknown	deps/tinyxml/tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown
~TiXmlVisitor	deps/tinyxml/tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor
~TimeoutsAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~TimeoutsAction() { }  $/;"	f	class:TimeoutsAction
~TimeoutsCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~TimeoutsCondition()$/;"	f	class:TimeoutsCondition
~TimeoutsCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TimeoutsCondition
~TimerCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~TimerCondition()$/;"	f	class:TimerCondition
~TimerCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TimerCondition
~TongVarAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~TongVarAction()$/;"	f	class:TongVarAction
~TongVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~TongVarCondition()$/;"	f	class:TongVarCondition
~TongVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:TongVarCondition
~TradeOrder	SceneServer/libscenesserver/Trade.cpp	/^TradeOrder::~TradeOrder()$/;"	f	class:TradeOrder
~UnionIDCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~UnionIDCondition()$/;"	f	class:UnionIDCondition
~UnionIDCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UnionIDCondition
~Update	SceneServer/libscenesserver/SceneServer1.h	/^    virtual ~Update() { }$/;"	f	class:MakeFunction::Update
~UseSkillAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~UseSkillAction() { }  $/;"	f	class:UseSkillAction
~UserObjectM	SceneServer/libscenesserver/ObjectManager.cpp	/^UserObjectM::~UserObjectM()$/;"	f	class:UserObjectM
~UserSession	SessionServer/libsessionserver/Session.cpp	/^UserSession::~UserSession()$/;"	f	class:UserSession
~UserSessionManager	SessionServer/libsessionserver/SessionManager.cpp	/^UserSessionManager::~UserSessionManager()$/;"	f	class:UserSessionManager
~UserSkillM	SceneServer/libscenesserver/SkillManager.cpp	/^UserSkillM::~UserSkillM()$/;"	f	class:UserSkillM
~UserVar	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::UserVar
~UserVarAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~UserVarAction()$/;"	f	class:UserVarAction
~UserVarAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UserVarAction
~UserVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~UserVarCondition()$/;"	f	class:UserVarCondition
~UserVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UserVarCondition
~UsersVarAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~UsersVarAction()$/;"	f	class:UsersVarAction
~UsersVarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~UsersVarCondition()$/;"	f	class:UsersVarCondition
~UsersVarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:UsersVarCondition
~VAR	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars::VAR
~VarAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~VarAction()$/;"	f	class:VarAction
~VarAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarAction
~VarCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~VarCondition()$/;"	f	class:VarCondition
~VarCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarCondition
~Vars	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::Vars
~VarsAction	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~VarsAction()$/;"	f	class:VarsAction
~VarsAction	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:VarsAction
~Void	SceneServer/libscenesserver/SceneServer1.h	/^    virtual ~Void() { }$/;"	f	class:MakeFunction::Void
~WeekCondition	SceneServer/libscenesserver/SceneServer1.h	/^  virtual ~WeekCondition()$/;"	f	class:WeekCondition
~WeekCondition	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:WeekCondition
~boxCircle	SceneServer/libscenesserver/boxCircle.h	/^	~boxCircle(){}$/;"	f	class:boxCircle
~cityCallback	SessionServer/libsessionserver/SessionServer.h	/^      virtual ~cityCallback(){};$/;"	f	struct:CCityM::cityCallback
~countryCallback	SessionServer/libsessionserver/SessionServer.h	/^      virtual ~countryCallback(){};$/;"	f	struct:CCountryM::countryCallback
~execEntry	base/include/srvEngine.h	/^	virtual ~execEntry(){}$/;"	f	struct:execEntry
~globalBox	SceneServer/libscenesserver/giftBox.h	/^	~globalBox(){};$/;"	f	class:globalBox
~meterialsManager	SceneServer/libscenesserver/meterialsManager.h	/^	~meterialsManager()$/;"	f	class:meterialsManager
~removeEntry_Pred	base/include/srvEngine.h	/^	virtual ~removeEntry_Pred(){}$/;"	f	struct:removeEntry_Pred
~scriptTaskManagement	SceneServer/libscenesserver/scriptTickTask.h	/^	~scriptTaskManagement(){}$/;"	f	class:scriptTaskManagement
~specialNpcCallBack	SceneServer/libscenesserver/SceneServer1.h	/^    virtual ~specialNpcCallBack(){};$/;"	f	struct:specialNpcCallBack
~super_client	base/super_client.h	/^	~super_client(){$/;"	f	class:super_client
~task_state	base/task_state.h	/^	virtual ~task_state() {}$/;"	f	class:task_state
~tcp_client	base/tcp_client.h	/^	virtual ~tcp_client(){  }$/;"	f	class:tcp_client
~tcp_socket	base/src/tcp_socket.h	/^	virtual ~tcp_socket(){ }$/;"	f	class:tcp_socket
~tcp_state	base/include/tcp_state.h	/^	virtual ~tcp_state(){}$/;"	f	class:tcp_state
~tcp_task	base/tcp_task.cpp	/^tcp_task::~tcp_task() {$/;"	f	class:tcp_task
~userScriptTaskContainer	SceneServer/libscenesserver/scriptTickTask.h	/^	~userScriptTaskContainer()$/;"	f	class:userScriptTaskContainer
~x_logger	base/x_logger.cpp	/^x_logger::~x_logger()$/;"	f	class:x_logger
~x_okay_thread_functor	base/src/x_tcptaskpool.cpp	/^	~x_okay_thread_functor()$/;"	f	class:x_okay_thread_functor
~x_recycle_thread_functor	base/src/x_tcptaskpool.cpp	/^	~x_recycle_thread_functor() {};$/;"	f	class:x_recycle_thread_functor
~x_service	base/x_service.h	/^	virtual ~x_service() {}$/;"	f	class:x_service
~x_simple_db_table	base/x_simple_db_table.cpp	/^x_simple_db_table::~x_simple_db_table()$/;"	f	class:x_simple_db_table
~x_socket	base/include/x_socket.cpp	/^x_socket::~x_socket()$/;"	f	class:x_socket
~x_subnetservice	base/x_subnetservice.cpp	/^x_subnetservice::~x_subnetservice()$/;"	f	class:x_subnetservice
~x_sync_thread_functor	base/src/x_tcptaskpool.cpp	/^		~x_sync_thread_functor() {};$/;"	f	class:x_sync_thread_functor
~x_tcp_client	base/src/x_tcp_client.h	/^	~x_tcp_client() $/;"	f	class:x_tcp_client
~x_tcp_clientTask	base/include/srvEngine.h	/^	virtual ~x_tcp_clientTask() $/;"	f	class:x_tcp_clientTask
~x_tcp_clientTaskPool	base/src/zTCPClientTaskPool.cpp	/^x_tcp_clientTaskPool::~x_tcp_clientTaskPool()$/;"	f	class:x_tcp_clientTaskPool
~x_tcp_clientTaskQueue	base/src/zTCPClientTaskPool.cpp	/^	virtual ~x_tcp_clientTaskQueue() {}$/;"	f	class:x_tcp_clientTaskQueue
~x_tcp_clientTaskThread	base/src/zTCPClientTaskPool.cpp	/^	~x_tcp_clientTaskThread()$/;"	f	class:x_tcp_clientTaskThread
~x_tcpserver	base/src/x_tcpserver.cpp	/^x_tcpserver::~x_tcpserver() $/;"	f	class:x_tcpserver
~x_tcptask	base/src/x_tcptask.h	/^	virtual ~x_tcptask() {}$/;"	f	class:x_tcptask
~x_tcptaskpool	base/src/x_tcptaskpool.h	/^	~x_tcptaskpool()$/;"	f	class:x_tcptaskpool
~x_thread_functor	base/x_thread_functor.h	/^		virtual ~x_thread_functor(){ final(); }$/;"	f	class:x_thread_functor
~x_verify_thread_functor	base/src/x_tcptaskpool.cpp	/^	~x_verify_thread_functor() {$/;"	f	class:x_verify_thread_functor
~zAcceptThread	base/include/srvEngine.h	/^	~zAcceptThread()$/;"	f	class:zAcceptThread
~zCheckwaitThread	base/src/zTCPClientTaskPool.cpp	/^	~zCheckwaitThread()$/;"	f	class:zCheckwaitThread
~zDataBM	base/include/srvEngine.h	/^	~zDataBM()$/;"	f	class:zDataBM
~zDatabaseCallBack	base/include/srvEngine.h	/^	virtual ~zDatabaseCallBack(){};$/;"	f	class:zDatabaseCallBack
~zEntry	base/include/srvEngine.h	/^	virtual ~zEntry(){};$/;"	f	struct:zEntry
~zEntryCallback	FLServer/LoginManager.h	/^	virtual ~zEntryCallback(){};$/;"	f	struct:zEntryCallback
~zEntryCallback	base/include/srvEngine.h	/^	virtual ~zEntryCallback(){};$/;"	f	struct:zEntryCallback
~zEntryManager	base/include/srvEngine.h	/^	~zEntryManager() { };$/;"	f	class:zEntryManager
~zEntryTempID	base/include/srvEngine.h	/^	virtual ~zEntryTempID() {}$/;"	f	class:zEntryTempID
~zMNetService	base/include/srvEngine.h	/^	virtual ~zMNetService() { instance = NULL; };$/;"	f	class:zMNetService
~zMTCPServer	base/src/zMTCPServer.cpp	/^zMTCPServer::~zMTCPServer() $/;"	f	class:zMTCPServer
~zNoncopyable	base/include/csCommon.h	/^/;"	f	class:zNoncopyable
~zObject	SceneServer/libscenesserver/zObject.cpp	/^zObject::~zObject()$/;"	f	class:zObject
~zSceneEntryCallBack	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneEntryCallBack
~zSceneEntryIndex	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	class:O::LiveSkills::zSceneEntryIndex
~zSceneManager	base/include/srvEngine.h	/^	virtual ~zSceneManager()$/;"	f	class:zSceneManager
~zSceneObject	SceneServer/libscenesserver/ScenesServer.h	/^/;"	f	struct:O::zSceneObject
~zSkill	SceneServer/libscenesserver/Skill.cpp	/^zSkill::~zSkill()$/;"	f	class:zSkill
~zTCPTaskQueue	base/src/x_tcptaskpool.cpp	/^	virtual ~zTCPTaskQueue() {}$/;"	f	class:zTCPTaskQueue
~zUniqueID	base/include/srvEngine.h	/^	~zUniqueID()$/;"	f	class:zUniqueID
~zUserManager	base/include/srvEngine.h	/^	virtual ~zUserManager()$/;"	f	class:zUserManager
